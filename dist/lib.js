import { createRequire } from 'module'; const require = createRequire(import.meta.url);
var Te=Object.defineProperty;var De=Object.getOwnPropertyDescriptor;var o=(l,e)=>Te(l,"name",{value:e,configurable:!0});var u=(l,e,t,n)=>{for(var a=n>1?void 0:n?De(e,t):e,r=l.length-1,i;r>=0;r--)(i=l[r])&&(a=(n?i(e,t,a):i(a))||a);return n&&a&&Te(e,t,a),a};import{EthChainId as Xt}from"@sentio/sdk/eth";import{addContractByABI as ct,getContractByABI as yt,addProcessor as he,getProcessor as xe,getProvider as mt,transformEtherError as f,BaseProcessor as Tt,BaseProcessorTemplate as ht,BoundContractView as xt,ContractView as Ct,DummyProvider as gt,encodeCallData as E}from"@sentio/sdk/eth";import{newContract as sn,newInterface as ln}from"@sentio/sdk/eth";import{newContract as un,newInterface as cn}from"@sentio/sdk/eth";import{newContract as hn,newInterface as xn}from"@sentio/sdk/eth";import{newContract as Pn,newInterface as vn}from"@sentio/sdk/eth";import{newContract as wn,newInterface as Sn}from"@sentio/sdk/eth";import{newContract as Mn,newInterface as Rn}from"@sentio/sdk/eth";import{newContract as Be,newInterface as _e}from"@sentio/sdk/eth";var K=[{inputs:[{components:[{internalType:"address",name:"target",type:"address"},{internalType:"bytes",name:"callData",type:"bytes"}],internalType:"struct Multicall2.Call[]",name:"calls",type:"tuple[]"}],name:"aggregate",outputs:[{internalType:"uint256",name:"blockNumber",type:"uint256"},{internalType:"bytes[]",name:"returnData",type:"bytes[]"}],stateMutability:"nonpayable",type:"function"},{inputs:[{components:[{internalType:"address",name:"target",type:"address"},{internalType:"bytes",name:"callData",type:"bytes"}],internalType:"struct Multicall2.Call[]",name:"calls",type:"tuple[]"}],name:"blockAndAggregate",outputs:[{internalType:"uint256",name:"blockNumber",type:"uint256"},{internalType:"bytes32",name:"blockHash",type:"bytes32"},{components:[{internalType:"bool",name:"success",type:"bool"},{internalType:"bytes",name:"returnData",type:"bytes"}],internalType:"struct Multicall2.Result[]",name:"returnData",type:"tuple[]"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"blockNumber",type:"uint256"}],name:"getBlockHash",outputs:[{internalType:"bytes32",name:"blockHash",type:"bytes32"}],stateMutability:"view",type:"function"},{inputs:[],name:"getBlockNumber",outputs:[{internalType:"uint256",name:"blockNumber",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"getCurrentBlockCoinbase",outputs:[{internalType:"address",name:"coinbase",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"getCurrentBlockDifficulty",outputs:[{internalType:"uint256",name:"difficulty",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"getCurrentBlockGasLimit",outputs:[{internalType:"uint256",name:"gaslimit",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"getCurrentBlockTimestamp",outputs:[{internalType:"uint256",name:"timestamp",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"addr",type:"address"}],name:"getEthBalance",outputs:[{internalType:"uint256",name:"balance",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"getL1BlockNumber",outputs:[{internalType:"uint256",name:"l1BlockNumber",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"getLastBlockHash",outputs:[{internalType:"bytes32",name:"blockHash",type:"bytes32"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"bool",name:"requireSuccess",type:"bool"},{components:[{internalType:"address",name:"target",type:"address"},{internalType:"bytes",name:"callData",type:"bytes"}],internalType:"struct Multicall2.Call[]",name:"calls",type:"tuple[]"}],name:"tryAggregate",outputs:[{components:[{internalType:"bool",name:"success",type:"bool"},{internalType:"bytes",name:"returnData",type:"bytes"}],internalType:"struct Multicall2.Result[]",name:"returnData",type:"tuple[]"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"bool",name:"requireSuccess",type:"bool"},{components:[{internalType:"address",name:"target",type:"address"},{internalType:"bytes",name:"callData",type:"bytes"}],internalType:"struct Multicall2.Call[]",name:"calls",type:"tuple[]"}],name:"tryBlockAndAggregate",outputs:[{internalType:"uint256",name:"blockNumber",type:"uint256"},{internalType:"bytes32",name:"blockHash",type:"bytes32"},{components:[{internalType:"bool",name:"success",type:"bool"},{internalType:"bytes",name:"returnData",type:"bytes"}],internalType:"struct Multicall2.Result[]",name:"returnData",type:"tuple[]"}],stateMutability:"nonpayable",type:"function"}],_=class{static{o(this,"Multicall2__factory")}static abi=K;static createInterface(){return _e(K)}static connect(e,t){return Be(e,K,t)}};import{newContract as Yn,newInterface as jn}from"@sentio/sdk/eth";import{newContract as Gn,newInterface as zn}from"@sentio/sdk/eth";import{newContract as Qn,newInterface as Kn}from"@sentio/sdk/eth";import{newContract as Ae,newInterface as Le}from"@sentio/sdk/eth";var $=[{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"owner",type:"address"},{indexed:!0,internalType:"address",name:"spender",type:"address"},{indexed:!1,internalType:"uint256",name:"value",type:"uint256"}],name:"Approval",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"receiverSy",type:"address"},{indexed:!0,internalType:"address",name:"receiverPt",type:"address"},{indexed:!1,internalType:"uint256",name:"netLpBurned",type:"uint256"},{indexed:!1,internalType:"uint256",name:"netSyOut",type:"uint256"},{indexed:!1,internalType:"uint256",name:"netPtOut",type:"uint256"}],name:"Burn",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"uint16",name:"observationCardinalityNextOld",type:"uint16"},{indexed:!1,internalType:"uint16",name:"observationCardinalityNextNew",type:"uint16"}],name:"IncreaseObservationCardinalityNext",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"receiver",type:"address"},{indexed:!1,internalType:"uint256",name:"netLpMinted",type:"uint256"},{indexed:!1,internalType:"uint256",name:"netSyUsed",type:"uint256"},{indexed:!1,internalType:"uint256",name:"netPtUsed",type:"uint256"}],name:"Mint",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"caller",type:"address"},{indexed:!0,internalType:"address",name:"receiver",type:"address"},{indexed:!1,internalType:"int256",name:"netPtOut",type:"int256"},{indexed:!1,internalType:"int256",name:"netSyOut",type:"int256"},{indexed:!1,internalType:"uint256",name:"netSyFee",type:"uint256"},{indexed:!1,internalType:"uint256",name:"netSyToReserve",type:"uint256"}],name:"Swap",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"from",type:"address"},{indexed:!0,internalType:"address",name:"to",type:"address"},{indexed:!1,internalType:"uint256",name:"value",type:"uint256"}],name:"Transfer",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"uint256",name:"timestamp",type:"uint256"},{indexed:!1,internalType:"uint256",name:"lnLastImpliedRate",type:"uint256"}],name:"UpdateImpliedRate",type:"event"},{inputs:[],name:"_storage",outputs:[{internalType:"int128",name:"totalPt",type:"int128"},{internalType:"int128",name:"totalSy",type:"int128"},{internalType:"uint96",name:"lastLnImpliedRate",type:"uint96"},{internalType:"uint16",name:"observationIndex",type:"uint16"},{internalType:"uint16",name:"observationCardinality",type:"uint16"},{internalType:"uint16",name:"observationCardinalityNext",type:"uint16"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"user",type:"address"}],name:"activeBalance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"owner",type:"address"},{internalType:"address",name:"spender",type:"address"}],name:"allowance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"spender",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"approve",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"account",type:"address"}],name:"balanceOf",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"receiverSy",type:"address"},{internalType:"address",name:"receiverPt",type:"address"},{internalType:"uint256",name:"netLpToBurn",type:"uint256"}],name:"burn",outputs:[{internalType:"uint256",name:"netSyOut",type:"uint256"},{internalType:"uint256",name:"netPtOut",type:"uint256"}],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"decimals",outputs:[{internalType:"uint8",name:"",type:"uint8"}],stateMutability:"view",type:"function"},{inputs:[],name:"expiry",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"getRewardTokens",outputs:[{internalType:"address[]",name:"",type:"address[]"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint16",name:"cardinalityNext",type:"uint16"}],name:"increaseObservationsCardinalityNext",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"isExpired",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"receiver",type:"address"},{internalType:"uint256",name:"netSyDesired",type:"uint256"},{internalType:"uint256",name:"netPtDesired",type:"uint256"}],name:"mint",outputs:[{internalType:"uint256",name:"netLpOut",type:"uint256"},{internalType:"uint256",name:"netSyUsed",type:"uint256"},{internalType:"uint256",name:"netPtUsed",type:"uint256"}],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"name",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256",name:"index",type:"uint256"}],name:"observations",outputs:[{internalType:"uint32",name:"blockTimestamp",type:"uint32"},{internalType:"uint216",name:"lnImpliedRateCumulative",type:"uint216"},{internalType:"bool",name:"initialized",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint32[]",name:"secondsAgos",type:"uint32[]"}],name:"observe",outputs:[{internalType:"uint216[]",name:"lnImpliedRateCumulative",type:"uint216[]"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"router",type:"address"}],name:"readState",outputs:[{components:[{internalType:"int256",name:"totalPt",type:"int256"},{internalType:"int256",name:"totalSy",type:"int256"},{internalType:"int256",name:"totalLp",type:"int256"},{internalType:"address",name:"treasury",type:"address"},{internalType:"int256",name:"scalarRoot",type:"int256"},{internalType:"uint256",name:"expiry",type:"uint256"},{internalType:"uint256",name:"lnFeeRateRoot",type:"uint256"},{internalType:"uint256",name:"reserveFeePercent",type:"uint256"},{internalType:"uint256",name:"lastLnImpliedRate",type:"uint256"}],internalType:"struct MarketState",name:"market",type:"tuple"}],stateMutability:"view",type:"function"},{inputs:[],name:"readTokens",outputs:[{internalType:"contract IStandardizedYield",name:"_SY",type:"address"},{internalType:"contract IPPrincipalToken",name:"_PT",type:"address"},{internalType:"contract IPYieldToken",name:"_YT",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"user",type:"address"}],name:"redeemRewards",outputs:[{internalType:"uint256[]",name:"",type:"uint256[]"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"receiver",type:"address"},{internalType:"uint256",name:"exactPtIn",type:"uint256"},{internalType:"bytes",name:"data",type:"bytes"}],name:"swapExactPtForSy",outputs:[{internalType:"uint256",name:"netSyOut",type:"uint256"},{internalType:"uint256",name:"netSyFee",type:"uint256"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"receiver",type:"address"},{internalType:"uint256",name:"exactPtOut",type:"uint256"},{internalType:"bytes",name:"data",type:"bytes"}],name:"swapSyForExactPt",outputs:[{internalType:"uint256",name:"netSyIn",type:"uint256"},{internalType:"uint256",name:"netSyFee",type:"uint256"}],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"symbol",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function"},{inputs:[],name:"totalActiveSupply",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"totalSupply",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"transfer",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"from",type:"address"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"transferFrom",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function"}],A=class{static{o(this,"PendleMarket__factory")}static abi=$;static createInterface(){return Le($)}static connect(e,t){return Ae(e,$,t)}};import{newContract as aa,newInterface as ra}from"@sentio/sdk/eth";import{newContract as oa,newInterface as pa}from"@sentio/sdk/eth";import{newContract as ya,newInterface as ma}from"@sentio/sdk/eth";import{newContract as Ca,newInterface as ga}from"@sentio/sdk/eth";import{newContract as ka,newInterface as fa}from"@sentio/sdk/eth";import{newContract as Oa,newInterface as Fa}from"@sentio/sdk/eth";import{newContract as Da,newInterface as Ba}from"@sentio/sdk/eth";import{newContract as Na,newInterface as Ya}from"@sentio/sdk/eth";import{newContract as Ua,newInterface as Ga}from"@sentio/sdk/eth";import{newContract as Za,newInterface as Qa}from"@sentio/sdk/eth";import{newContract as Ne,newInterface as Ye}from"@sentio/sdk/eth";var X=[{inputs:[{internalType:"address",name:"_SY",type:"address"},{internalType:"address",name:"_PT",type:"address"},{internalType:"string",name:"_name",type:"string"},{internalType:"string",name:"_symbol",type:"string"},{internalType:"uint8",name:"__decimals",type:"uint8"},{internalType:"uint256",name:"_expiry",type:"uint256"},{internalType:"bool",name:"_doCacheIndexSameBlock",type:"bool"}],stateMutability:"nonpayable",type:"constructor"},{inputs:[],name:"ArrayEmpty",type:"error"},{inputs:[],name:"ArrayLengthMismatch",type:"error"},{inputs:[],name:"YCExpired",type:"error"},{inputs:[],name:"YCNoFloatingSy",type:"error"},{inputs:[],name:"YCNotExpired",type:"error"},{inputs:[],name:"YCNothingToRedeem",type:"error"},{inputs:[],name:"YCPostExpiryDataNotSet",type:"error"},{inputs:[{internalType:"uint256",name:"actualSy",type:"uint256"},{internalType:"uint256",name:"requiredSy",type:"uint256"}],name:"YieldContractInsufficientSy",type:"error"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"owner",type:"address"},{indexed:!0,internalType:"address",name:"spender",type:"address"},{indexed:!1,internalType:"uint256",name:"value",type:"uint256"}],name:"Approval",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"caller",type:"address"},{indexed:!0,internalType:"address",name:"receiver",type:"address"},{indexed:!1,internalType:"uint256",name:"amountPYToRedeem",type:"uint256"},{indexed:!1,internalType:"uint256",name:"amountSyOut",type:"uint256"}],name:"Burn",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"amountInterestFee",type:"uint256"}],name:"CollectInterestFee",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"rewardToken",type:"address"},{indexed:!1,internalType:"uint256",name:"amountRewardFee",type:"uint256"}],name:"CollectRewardFee",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"caller",type:"address"},{indexed:!0,internalType:"address",name:"receiverPT",type:"address"},{indexed:!0,internalType:"address",name:"receiverYT",type:"address"},{indexed:!1,internalType:"uint256",name:"amountSyToMint",type:"uint256"},{indexed:!1,internalType:"uint256",name:"amountPYOut",type:"uint256"}],name:"Mint",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"uint256",name:"newIndex",type:"uint256"}],name:"NewInterestIndex",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"user",type:"address"},{indexed:!1,internalType:"uint256",name:"interestOut",type:"uint256"}],name:"RedeemInterest",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"user",type:"address"},{indexed:!1,internalType:"uint256[]",name:"amountRewardsOut",type:"uint256[]"}],name:"RedeemRewards",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"from",type:"address"},{indexed:!0,internalType:"address",name:"to",type:"address"},{indexed:!1,internalType:"uint256",name:"value",type:"uint256"}],name:"Transfer",type:"event"},{inputs:[],name:"PT",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"SY",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"owner",type:"address"},{internalType:"address",name:"spender",type:"address"}],name:"allowance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"spender",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"approve",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"account",type:"address"}],name:"balanceOf",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"decimals",outputs:[{internalType:"uint8",name:"",type:"uint8"}],stateMutability:"view",type:"function"},{inputs:[],name:"doCacheIndexSameBlock",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[],name:"expiry",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"factory",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"getPostExpiryData",outputs:[{internalType:"uint256",name:"firstPYIndex",type:"uint256"},{internalType:"uint256",name:"totalSyInterestForTreasury",type:"uint256"},{internalType:"uint256[]",name:"firstRewardIndexes",type:"uint256[]"},{internalType:"uint256[]",name:"userRewardOwed",type:"uint256[]"}],stateMutability:"view",type:"function"},{inputs:[],name:"getRewardTokens",outputs:[{internalType:"address[]",name:"",type:"address[]"}],stateMutability:"view",type:"function"},{inputs:[],name:"isExpired",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"receiverPT",type:"address"},{internalType:"address",name:"receiverYT",type:"address"}],name:"mintPY",outputs:[{internalType:"uint256",name:"amountPYOut",type:"uint256"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address[]",name:"receiverPTs",type:"address[]"},{internalType:"address[]",name:"receiverYTs",type:"address[]"},{internalType:"uint256[]",name:"amountSyToMints",type:"uint256[]"}],name:"mintPYMulti",outputs:[{internalType:"uint256[]",name:"amountPYOuts",type:"uint256[]"}],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"name",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function"},{inputs:[],name:"postExpiry",outputs:[{internalType:"uint128",name:"firstPYIndex",type:"uint128"},{internalType:"uint128",name:"totalSyInterestForTreasury",type:"uint128"}],stateMutability:"view",type:"function"},{inputs:[],name:"pyIndexCurrent",outputs:[{internalType:"uint256",name:"currentIndex",type:"uint256"}],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"pyIndexLastUpdatedBlock",outputs:[{internalType:"uint128",name:"",type:"uint128"}],stateMutability:"view",type:"function"},{inputs:[],name:"pyIndexStored",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"user",type:"address"},{internalType:"bool",name:"redeemInterest",type:"bool"},{internalType:"bool",name:"redeemRewards",type:"bool"}],name:"redeemDueInterestAndRewards",outputs:[{internalType:"uint256",name:"interestOut",type:"uint256"},{internalType:"uint256[]",name:"rewardsOut",type:"uint256[]"}],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"redeemInterestAndRewardsPostExpiryForTreasury",outputs:[{internalType:"uint256",name:"interestOut",type:"uint256"},{internalType:"uint256[]",name:"rewardsOut",type:"uint256[]"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"receiver",type:"address"}],name:"redeemPY",outputs:[{internalType:"uint256",name:"amountSyOut",type:"uint256"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address[]",name:"receivers",type:"address[]"},{internalType:"uint256[]",name:"amountPYToRedeems",type:"uint256[]"}],name:"redeemPYMulti",outputs:[{internalType:"uint256[]",name:"amountSyOuts",type:"uint256[]"}],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"rewardIndexesCurrent",outputs:[{internalType:"uint256[]",name:"",type:"uint256[]"}],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"setPostExpiryData",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"syReserve",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"symbol",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function"},{inputs:[],name:"totalSupply",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"transfer",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"from",type:"address"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"transferFrom",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"",type:"address"}],name:"userInterest",outputs:[{internalType:"uint128",name:"index",type:"uint128"},{internalType:"uint128",name:"accrued",type:"uint128"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"",type:"address"},{internalType:"address",name:"",type:"address"}],name:"userReward",outputs:[{internalType:"uint128",name:"index",type:"uint128"},{internalType:"uint128",name:"accrued",type:"uint128"}],stateMutability:"view",type:"function"}],j=class{static{o(this,"PendleYieldToken__factory")}static abi=X;static createInterface(){return Ye(X)}static connect(e,t){return Ne(e,X,t)}};import{newContract as je,newInterface as Ve}from"@sentio/sdk/eth";var J=[{inputs:[{internalType:"address",name:"_underlying",type:"address"},{internalType:"address",name:"_masterPenpie",type:"address"},{internalType:"string",name:"name",type:"string"},{internalType:"string",name:"symbol",type:"string"}],stateMutability:"nonpayable",type:"constructor"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"owner",type:"address"},{indexed:!0,internalType:"address",name:"spender",type:"address"},{indexed:!1,internalType:"uint256",name:"value",type:"uint256"}],name:"Approval",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"previousOwner",type:"address"},{indexed:!0,internalType:"address",name:"newOwner",type:"address"}],name:"OwnershipTransferred",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"from",type:"address"},{indexed:!0,internalType:"address",name:"to",type:"address"},{indexed:!1,internalType:"uint256",name:"value",type:"uint256"}],name:"Transfer",type:"event"},{inputs:[{internalType:"address",name:"owner",type:"address"},{internalType:"address",name:"spender",type:"address"}],name:"allowance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"spender",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"approve",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"account",type:"address"}],name:"balanceOf",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"account",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"burn",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"decimals",outputs:[{internalType:"uint8",name:"",type:"uint8"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"spender",type:"address"},{internalType:"uint256",name:"subtractedValue",type:"uint256"}],name:"decreaseAllowance",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"spender",type:"address"},{internalType:"uint256",name:"addedValue",type:"uint256"}],name:"increaseAllowance",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"masterPenpie",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"account",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"mint",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"name",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function"},{inputs:[],name:"owner",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"renounceOwnership",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"symbol",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function"},{inputs:[],name:"totalSupply",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"transfer",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"from",type:"address"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"transferFrom",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"newOwner",type:"address"}],name:"transferOwnership",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"underlying",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"}],L=class{static{o(this,"PenpieReceiptToken__factory")}static abi=J;static createInterface(){return Ve(J)}static connect(e,t){return je(e,J,t)}};import{newContract as He,newInterface as Ue}from"@sentio/sdk/eth";var ee=[{inputs:[],stateMutability:"nonpayable",type:"constructor"},{inputs:[],name:"InvalidAddress",type:"error"},{inputs:[],name:"InvalidFee",type:"error"},{inputs:[],name:"InvalidFeeDestination",type:"error"},{inputs:[],name:"LengthMismatch",type:"error"},{inputs:[],name:"NoVePendleReward",type:"error"},{inputs:[],name:"OnlyActivePool",type:"error"},{inputs:[],name:"OnlyPoolHelper",type:"error"},{inputs:[],name:"OnlyVoteManager",type:"error"},{inputs:[],name:"PoolOccupied",type:"error"},{inputs:[],name:"TimeGapTooMuch",type:"error"},{inputs:[],name:"ZeroNotAllowed",type:"error"},{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"_to",type:"address"},{indexed:!1,internalType:"uint256",name:"_value",type:"uint256"},{indexed:!1,internalType:"bool",name:"_isMPENDLE",type:"bool"},{indexed:!1,internalType:"bool",name:"_isAddress",type:"bool"}],name:"AddPendleFee",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"_oldBribeManagerEOA",type:"address"},{indexed:!1,internalType:"address",name:"_bribeManagerEOA",type:"address"}],name:"BribeManagerEOAUpdated",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"_oldBribeManager",type:"address"},{indexed:!1,internalType:"address",name:"_bribeManager",type:"address"}],name:"BribeManagerUpdated",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"uint8",name:"version",type:"uint8"}],name:"Initialized",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"_user",type:"address"},{indexed:!0,internalType:"address",name:"_market",type:"address"},{indexed:!1,internalType:"uint256",name:"_lpAmount",type:"uint256"},{indexed:!0,internalType:"address",name:"_receptToken",type:"address"},{indexed:!1,internalType:"uint256",name:"_receptAmount",type:"uint256"}],name:"NewMarketDeposit",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"_user",type:"address"},{indexed:!0,internalType:"address",name:"_market",type:"address"},{indexed:!1,internalType:"uint256",name:"_lpAmount",type:"uint256"},{indexed:!0,internalType:"address",name:"_receptToken",type:"address"},{indexed:!1,internalType:"uint256",name:"_receptAmount",type:"uint256"}],name:"NewMarketWithdraw",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"previousOwner",type:"address"},{indexed:!0,internalType:"address",name:"newOwner",type:"address"}],name:"OwnershipTransferred",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"account",type:"address"}],name:"Paused",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"_amount",type:"uint256"},{indexed:!1,internalType:"uint256",name:"_lockDays",type:"uint256"},{indexed:!1,internalType:"uint256",name:"_vePendleAccumulated",type:"uint256"}],name:"PendleLocked",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"_market",type:"address"},{indexed:!1,internalType:"address",name:"_rewarder",type:"address"},{indexed:!1,internalType:"address",name:"_receiptToken",type:"address"}],name:"PoolAdded",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"_market",type:"address"}],name:"PoolHelperUpdated",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"_pid",type:"uint256"},{indexed:!1,internalType:"address",name:"_lpToken",type:"address"}],name:"PoolRemoved",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"value",type:"uint256"},{indexed:!1,internalType:"address",name:"to",type:"address"},{indexed:!1,internalType:"bool",name:"_isMPENDLE",type:"bool"},{indexed:!1,internalType:"bool",name:"_isAddress",type:"bool"}],name:"RemovePendleFee",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"_market",type:"address"},{indexed:!1,internalType:"address",name:"_to",type:"address"},{indexed:!1,internalType:"address",name:"_rewardToken",type:"address"},{indexed:!1,internalType:"uint256",name:"_feeAmount",type:"uint256"}],name:"RewardPaidTo",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"_oldLockDays",type:"uint256"},{indexed:!1,internalType:"uint256",name:"_newLockDays",type:"uint256"}],name:"SetLockDays",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"_oldmPendleConvertor",type:"address"},{indexed:!1,internalType:"address",name:"_newmPendleConvertor",type:"address"}],name:"SetMPendleConvertor",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"_to",type:"address"},{indexed:!1,internalType:"uint256",name:"_value",type:"uint256"}],name:"SetPendleFee",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"_OldSmartPendleConvert",type:"address"},{indexed:!1,internalType:"address",name:"_smartPendleConvert",type:"address"}],name:"SmartPendleConvertUpdated",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"account",type:"address"}],name:"Unpaused",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"_total",type:"uint256"},{indexed:!1,internalType:"address[]",name:"_pool",type:"address[]"},{indexed:!1,internalType:"uint256[]",name:"_totalAmounts",type:"uint256[]"},{indexed:!1,internalType:"uint256",name:"_protocolFee",type:"uint256"},{indexed:!1,internalType:"uint256",name:"_callerFee",type:"uint256"},{indexed:!1,internalType:"uint256",name:"_rest",type:"uint256"}],name:"VePendleHarvested",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"_oldVoteManager",type:"address"},{indexed:!1,internalType:"address",name:"_voteManager",type:"address"}],name:"VoteManagerUpdated",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"_voter",type:"address"},{indexed:!1,internalType:"uint256",name:"_vePendleHarvestCallerFee",type:"uint256"},{indexed:!1,internalType:"uint256",name:"_harvestCallerPendleFee",type:"uint256"},{indexed:!1,internalType:"uint256",name:"_voteProtocolFee",type:"uint256"},{indexed:!1,internalType:"address",name:"_voteFeeCollector",type:"address"}],name:"VoteSet",type:"event"},{inputs:[],name:"ETHZapper",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"PENDLE",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"WETH",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"_pendle",type:"address"},{internalType:"address",name:"_WETH",type:"address"},{internalType:"address",name:"_vePendle",type:"address"},{internalType:"address",name:"_distributorETH",type:"address"},{internalType:"address",name:"_pendleRouter",type:"address"},{internalType:"address",name:"_masterPenpie",type:"address"}],name:"__PendleStakingBaseUpg_init",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"_pendle",type:"address"},{internalType:"address",name:"_WETH",type:"address"},{internalType:"address",name:"_vePendle",type:"address"},{internalType:"address",name:"_distributorETH",type:"address"},{internalType:"address",name:"_pendleRouter",type:"address"},{internalType:"address",name:"_masterPenpie",type:"address"}],name:"__PendleStaking_init",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"accumulatedVePendle",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256",name:"_value",type:"uint256"},{internalType:"address",name:"_to",type:"address"},{internalType:"bool",name:"_isMPENDLE",type:"bool"},{internalType:"bool",name:"_isAddress",type:"bool"}],name:"addPendleFee",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"autoBribeFee",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address[]",name:"_markets",type:"address[]"},{internalType:"uint256",name:"minEthToRecieve",type:"uint256"}],name:"batchHarvestMarketRewards",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256[]",name:"chainId",type:"uint256[]"}],name:"bootstrapVePendle",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"payable",type:"function"},{inputs:[],name:"bribeManager",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"bribeManagerEOA",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256",name:"_amount",type:"uint256"},{internalType:"uint256[]",name:"chainId",type:"uint256[]"}],name:"convertPendle",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"payable",type:"function"},{inputs:[{internalType:"address",name:"_market",type:"address"},{internalType:"address",name:"_for",type:"address"},{internalType:"address",name:"_from",type:"address"},{internalType:"uint256",name:"_amount",type:"uint256"}],name:"depositMarket",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"distributorETH",outputs:[{internalType:"contract IPFeeDistributorV2",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"feeCollector",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"getPoolLength",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"harvestCallerPendleFee",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"_market",type:"address"},{internalType:"address",name:"_caller",type:"address"},{internalType:"uint256",name:"_minEthRecive",type:"uint256"}],name:"harvestMarketReward",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"harvestTimeGap",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address[]",name:"_pools",type:"address[]"}],name:"harvestVePendleReward",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"_unlockTime",type:"uint256"}],name:"increaseLockTime",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"lockPeriod",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"mPendleConvertor",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"mPendleOFT",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"marketDepositHelper",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"masterPenpie",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"owner",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"pause",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"paused",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256",name:"",type:"uint256"}],name:"pendleFeeInfos",outputs:[{internalType:"uint256",name:"value",type:"uint256"},{internalType:"address",name:"to",type:"address"},{internalType:"bool",name:"isMPENDLE",type:"bool"},{internalType:"bool",name:"isAddress",type:"bool"},{internalType:"bool",name:"isActive",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[],name:"pendleRouter",outputs:[{internalType:"contract IPendleRouter",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"pendleVote",outputs:[{internalType:"contract IPVoteController",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256",name:"",type:"uint256"}],name:"poolTokenList",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"",type:"address"}],name:"pools",outputs:[{internalType:"address",name:"market",type:"address"},{internalType:"address",name:"rewarder",type:"address"},{internalType:"address",name:"helper",type:"address"},{internalType:"address",name:"receiptToken",type:"address"},{internalType:"uint256",name:"lastHarvestTime",type:"uint256"},{internalType:"bool",name:"isActive",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[],name:"protocolFee",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"_market",type:"address"},{internalType:"uint256",name:"_allocPoints",type:"uint256"},{internalType:"string",name:"name",type:"string"},{internalType:"string",name:"symbol",type:"string"}],name:"registerPool",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"_index",type:"uint256"}],name:"removePendleFee",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"renounceOwnership",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"_autoBribeFee",type:"uint256"}],name:"setAutoBribeFee",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"_bribeManager",type:"address"},{internalType:"address",name:"_bribeManagerEOA",type:"address"}],name:"setBribeManager",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"_ETHZapper",type:"address"}],name:"setETHZapper",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"_period",type:"uint256"}],name:"setHarvestTimeGap",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"_newLockPeriod",type:"uint256"}],name:"setLockDays",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"_mPendleConvertor",type:"address"}],name:"setMPendleConvertor",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"_setMPendleOFT",type:"address"}],name:"setMPendleOFT",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"_helper",type:"address"}],name:"setMarketDepositHelper",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"_index",type:"uint256"},{internalType:"uint256",name:"_value",type:"uint256"},{internalType:"address",name:"_to",type:"address"},{internalType:"bool",name:"_isMPENDLE",type:"bool"},{internalType:"bool",name:"_isAddress",type:"bool"},{internalType:"bool",name:"_isActive",type:"bool"}],name:"setPendleFee",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"_smartPendleConvert",type:"address"}],name:"setSmartConvert",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"_pendleVote",type:"address"},{internalType:"uint256",name:"_vePendleHarvestCallerFee",type:"uint256"},{internalType:"uint256",name:"_harvestCallerPendleFee",type:"uint256"},{internalType:"uint256",name:"_protocolFee",type:"uint256"},{internalType:"address",name:"_feeCollector",type:"address"}],name:"setVote",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"_voteManager",type:"address"}],name:"setVoteManager",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"_masterPenpie",type:"address"}],name:"setmasterPenpie",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"smartPendleConvert",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"totalPendleFee",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"totalUnclaimedETH",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"newOwner",type:"address"}],name:"transferOwnership",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"unpause",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"_market",type:"address"},{internalType:"uint256[]",name:"amounts",type:"uint256[]"}],name:"updateMarketRewards",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"_market",type:"address"},{internalType:"address",name:"_helper",type:"address"}],name:"updatePoolHelper",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"vePendle",outputs:[{internalType:"contract IPVotingEscrowMainchain",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"vePendleHarvestCallerFee",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address[]",name:"_pools",type:"address[]"},{internalType:"uint64[]",name:"_weights",type:"uint64[]"}],name:"vote",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"voteManager",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"_market",type:"address"},{internalType:"address",name:"_for",type:"address"},{internalType:"uint256",name:"_amount",type:"uint256"}],name:"withdrawMarket",outputs:[],stateMutability:"nonpayable",type:"function"},{stateMutability:"payable",type:"receive"}],N=class{static{o(this,"PenpieStaking__factory")}static abi=ee;static createInterface(){return Ue(ee)}static connect(e,t){return He(e,ee,t)}};import{newContract as Ge,newInterface as ze}from"@sentio/sdk/eth";var te=[{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"owner",type:"address"},{indexed:!0,internalType:"address",name:"spender",type:"address"},{indexed:!1,internalType:"uint256",name:"value",type:"uint256"}],name:"Approval",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"user",type:"address"},{indexed:!1,internalType:"address[]",name:"rewardTokens",type:"address[]"},{indexed:!1,internalType:"uint256[]",name:"rewardAmounts",type:"uint256[]"}],name:"ClaimRewards",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"caller",type:"address"},{indexed:!0,internalType:"address",name:"receiver",type:"address"},{indexed:!0,internalType:"address",name:"tokenIn",type:"address"},{indexed:!1,internalType:"uint256",name:"amountDeposited",type:"uint256"},{indexed:!1,internalType:"uint256",name:"amountSyOut",type:"uint256"}],name:"Deposit",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"caller",type:"address"},{indexed:!0,internalType:"address",name:"receiver",type:"address"},{indexed:!0,internalType:"address",name:"tokenOut",type:"address"},{indexed:!1,internalType:"uint256",name:"amountSyToRedeem",type:"uint256"},{indexed:!1,internalType:"uint256",name:"amountTokenOut",type:"uint256"}],name:"Redeem",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"from",type:"address"},{indexed:!0,internalType:"address",name:"to",type:"address"},{indexed:!1,internalType:"uint256",name:"value",type:"uint256"}],name:"Transfer",type:"event"},{inputs:[{internalType:"address",name:"user",type:"address"}],name:"accruedRewards",outputs:[{internalType:"uint256[]",name:"rewardAmounts",type:"uint256[]"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"owner",type:"address"},{internalType:"address",name:"spender",type:"address"}],name:"allowance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"spender",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"approve",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"assetInfo",outputs:[{internalType:"enum IStandardizedYield.AssetType",name:"assetType",type:"uint8"},{internalType:"address",name:"assetAddress",type:"address"},{internalType:"uint8",name:"assetDecimals",type:"uint8"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"account",type:"address"}],name:"balanceOf",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"user",type:"address"}],name:"claimRewards",outputs:[{internalType:"uint256[]",name:"rewardAmounts",type:"uint256[]"}],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"decimals",outputs:[{internalType:"uint8",name:"",type:"uint8"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"receiver",type:"address"},{internalType:"address",name:"tokenIn",type:"address"},{internalType:"uint256",name:"amountTokenToDeposit",type:"uint256"},{internalType:"uint256",name:"minSharesOut",type:"uint256"}],name:"deposit",outputs:[{internalType:"uint256",name:"amountSharesOut",type:"uint256"}],stateMutability:"payable",type:"function"},{inputs:[],name:"exchangeRate",outputs:[{internalType:"uint256",name:"res",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"getRewardTokens",outputs:[{internalType:"address[]",name:"",type:"address[]"}],stateMutability:"view",type:"function"},{inputs:[],name:"getTokensIn",outputs:[{internalType:"address[]",name:"res",type:"address[]"}],stateMutability:"view",type:"function"},{inputs:[],name:"getTokensOut",outputs:[{internalType:"address[]",name:"res",type:"address[]"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"token",type:"address"}],name:"isValidTokenIn",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"token",type:"address"}],name:"isValidTokenOut",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[],name:"name",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"tokenIn",type:"address"},{internalType:"uint256",name:"amountTokenToDeposit",type:"uint256"}],name:"previewDeposit",outputs:[{internalType:"uint256",name:"amountSharesOut",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"tokenOut",type:"address"},{internalType:"uint256",name:"amountSharesToRedeem",type:"uint256"}],name:"previewRedeem",outputs:[{internalType:"uint256",name:"amountTokenOut",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"receiver",type:"address"},{internalType:"uint256",name:"amountSharesToRedeem",type:"uint256"},{internalType:"address",name:"tokenOut",type:"address"},{internalType:"uint256",name:"minTokenOut",type:"uint256"},{internalType:"bool",name:"burnFromInternalBalance",type:"bool"}],name:"redeem",outputs:[{internalType:"uint256",name:"amountTokenOut",type:"uint256"}],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"rewardIndexesCurrent",outputs:[{internalType:"uint256[]",name:"indexes",type:"uint256[]"}],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"rewardIndexesStored",outputs:[{internalType:"uint256[]",name:"indexes",type:"uint256[]"}],stateMutability:"view",type:"function"},{inputs:[],name:"symbol",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function"},{inputs:[],name:"totalSupply",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"transfer",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"from",type:"address"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"transferFrom",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"yieldToken",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"}],Y=class{static{o(this,"StandardizedYield__factory")}static abi=te;static createInterface(){return ze(te)}static connect(e,t){return Ge(e,te,t)}};var R=L.connect("0x0",gt),ne=class extends Ct{static{o(this,"PenpieReceiptTokenContractView")}constructor(e){super(e),this.callStatic.contract=e}async allowance(e,t,n,a,r){try{return await this.contract.getFunction("allowance(address,address)")(e,t,n||{})}catch(i){let s=new Error().stack;throw f(i,void 0,s)}}async balanceOf(e,t,n,a){try{return await this.contract.getFunction("balanceOf(address)")(e,t||{})}catch(r){let i=new Error().stack;throw f(r,void 0,i)}}async decimals(e,t,n){try{return await this.contract.getFunction("decimals()")(e||{})}catch(a){let r=new Error().stack;throw f(a,void 0,r)}}async masterPenpie(e,t,n){try{return await this.contract.getFunction("masterPenpie()")(e||{})}catch(a){let r=new Error().stack;throw f(a,void 0,r)}}async name(e,t,n){try{return await this.contract.getFunction("name()")(e||{})}catch(a){let r=new Error().stack;throw f(a,void 0,r)}}async owner(e,t,n){try{return await this.contract.getFunction("owner()")(e||{})}catch(a){let r=new Error().stack;throw f(a,void 0,r)}}async symbol(e,t,n){try{return await this.contract.getFunction("symbol()")(e||{})}catch(a){let r=new Error().stack;throw f(a,void 0,r)}}async totalSupply(e,t,n){try{return await this.contract.getFunction("totalSupply()")(e||{})}catch(a){let r=new Error().stack;throw f(a,void 0,r)}}async underlying(e,t,n){try{return await this.contract.getFunction("underlying()")(e||{})}catch(a){let r=new Error().stack;throw f(a,void 0,r)}}callStatic={contract:this.contract,async approve(e,t,n,a,r){try{return await this.contract.getFunction("approve(address,uint256)").staticCall(e,t,n||{})}catch(i){let s=new Error().stack;throw f(i,void 0,s)}},async burn(e,t,n,a,r){try{return await this.contract.getFunction("burn(address,uint256)").staticCall(e,t,n||{})}catch(i){let s=new Error().stack;throw f(i,void 0,s)}},async decreaseAllowance(e,t,n,a,r){try{return await this.contract.getFunction("decreaseAllowance(address,uint256)").staticCall(e,t,n||{})}catch(i){let s=new Error().stack;throw f(i,void 0,s)}},async increaseAllowance(e,t,n,a,r){try{return await this.contract.getFunction("increaseAllowance(address,uint256)").staticCall(e,t,n||{})}catch(i){let s=new Error().stack;throw f(i,void 0,s)}},async mint(e,t,n,a,r){try{return await this.contract.getFunction("mint(address,uint256)").staticCall(e,t,n||{})}catch(i){let s=new Error().stack;throw f(i,void 0,s)}},async renounceOwnership(e,t,n){try{return await this.contract.getFunction("renounceOwnership()").staticCall(e||{})}catch(a){let r=new Error().stack;throw f(a,void 0,r)}},async transfer(e,t,n,a,r){try{return await this.contract.getFunction("transfer(address,uint256)").staticCall(e,t,n||{})}catch(i){let s=new Error().stack;throw f(i,void 0,s)}},async transferFrom(e,t,n,a,r,i){try{return await this.contract.getFunction("transferFrom(address,address,uint256)").staticCall(e,t,n,a||{})}catch(s){let m=new Error().stack;throw f(s,void 0,m)}},async transferOwnership(e,t,n,a){try{return await this.contract.getFunction("transferOwnership(address)").staticCall(e,t||{})}catch(r){let i=new Error().stack;throw f(r,void 0,i)}}};encodeCall={allowance(e,t,n){return E(n,"allowance","function allowance(address,address)",[e,t])},approve(e,t,n){return E(n,"approve","function approve(address,uint256)",[e,t])},balanceOf(e,t){return E(t,"balanceOf","function balanceOf(address)",[e])},burn(e,t,n){return E(n,"burn","function burn(address,uint256)",[e,t])},decimals(e){return E(e,"decimals","function decimals()",[])},decreaseAllowance(e,t,n){return E(n,"decreaseAllowance","function decreaseAllowance(address,uint256)",[e,t])},increaseAllowance(e,t,n){return E(n,"increaseAllowance","function increaseAllowance(address,uint256)",[e,t])},masterPenpie(e){return E(e,"masterPenpie","function masterPenpie()",[])},mint(e,t,n){return E(n,"mint","function mint(address,uint256)",[e,t])},name(e){return E(e,"name","function name()",[])},owner(e){return E(e,"owner","function owner()",[])},renounceOwnership(e){return E(e,"renounceOwnership","function renounceOwnership()",[])},symbol(e){return E(e,"symbol","function symbol()",[])},totalSupply(e){return E(e,"totalSupply","function totalSupply()",[])},transfer(e,t,n){return E(n,"transfer","function transfer(address,uint256)",[e,t])},transferFrom(e,t,n,a){return E(a,"transferFrom","function transferFrom(address,address,uint256)",[e,t,n])},transferOwnership(e,t){return E(t,"transferOwnership","function transferOwnership(address)",[e])},underlying(e){return E(e,"underlying","function underlying()",[])}}},ae=class extends xt{static{o(this,"PenpieReceiptTokenBoundContractView")}async allowance(e,t,n){return await this.view.allowance(e,t,{blockTag:this.context.blockNumber,...n},this.context.preparedData,this.context.getEthCallContext())}async balanceOf(e,t){return await this.view.balanceOf(e,{blockTag:this.context.blockNumber,...t},this.context.preparedData,this.context.getEthCallContext())}async decimals(e){return await this.view.decimals({blockTag:this.context.blockNumber,...e},this.context.preparedData,this.context.getEthCallContext())}async masterPenpie(e){return await this.view.masterPenpie({blockTag:this.context.blockNumber,...e},this.context.preparedData,this.context.getEthCallContext())}async name(e){return await this.view.name({blockTag:this.context.blockNumber,...e},this.context.preparedData,this.context.getEthCallContext())}async owner(e){return await this.view.owner({blockTag:this.context.blockNumber,...e},this.context.preparedData,this.context.getEthCallContext())}async symbol(e){return await this.view.symbol({blockTag:this.context.blockNumber,...e},this.context.preparedData,this.context.getEthCallContext())}async totalSupply(e){return await this.view.totalSupply({blockTag:this.context.blockNumber,...e},this.context.preparedData,this.context.getEthCallContext())}async underlying(e){return await this.view.underlying({blockTag:this.context.blockNumber,...e},this.context.preparedData,this.context.getEthCallContext())}callStatic={view:this.view,context:this.context,async approve(e,t,n){return await this.view.callStatic.approve(e,t,{blockTag:this.context.blockNumber,...n},this.context.preparedData,this.context.getEthCallContext())},async burn(e,t,n){return await this.view.callStatic.burn(e,t,{blockTag:this.context.blockNumber,...n},this.context.preparedData,this.context.getEthCallContext())},async decreaseAllowance(e,t,n){return await this.view.callStatic.decreaseAllowance(e,t,{blockTag:this.context.blockNumber,...n},this.context.preparedData,this.context.getEthCallContext())},async increaseAllowance(e,t,n){return await this.view.callStatic.increaseAllowance(e,t,{blockTag:this.context.blockNumber,...n},this.context.preparedData,this.context.getEthCallContext())},async mint(e,t,n){return await this.view.callStatic.mint(e,t,{blockTag:this.context.blockNumber,...n},this.context.preparedData,this.context.getEthCallContext())},async renounceOwnership(e){return await this.view.callStatic.renounceOwnership({blockTag:this.context.blockNumber,...e},this.context.preparedData,this.context.getEthCallContext())},async transfer(e,t,n){return await this.view.callStatic.transfer(e,t,{blockTag:this.context.blockNumber,...n},this.context.preparedData,this.context.getEthCallContext())},async transferFrom(e,t,n,a){return await this.view.callStatic.transferFrom(e,t,n,{blockTag:this.context.blockNumber,...a},this.context.preparedData,this.context.getEthCallContext())},async transferOwnership(e,t){return await this.view.callStatic.transferOwnership(e,{blockTag:this.context.blockNumber,...t},this.context.preparedData,this.context.getEthCallContext())}};encodeCall={view:this.view,context:this.context,allowance(e,t,n){return this.view.encodeCall.allowance(e,t,{chainId:this.context.chainId.toString(),address:this.context.address,blockTag:this.context.getBlockTag(n)})},approve(e,t,n){return this.view.encodeCall.approve(e,t,{chainId:this.context.chainId.toString(),address:this.context.address,blockTag:this.context.getBlockTag(n)})},balanceOf(e,t){return this.view.encodeCall.balanceOf(e,{chainId:this.context.chainId.toString(),address:this.context.address,blockTag:this.context.getBlockTag(t)})},burn(e,t,n){return this.view.encodeCall.burn(e,t,{chainId:this.context.chainId.toString(),address:this.context.address,blockTag:this.context.getBlockTag(n)})},decimals(e){return this.view.encodeCall.decimals({chainId:this.context.chainId.toString(),address:this.context.address,blockTag:this.context.getBlockTag(e)})},decreaseAllowance(e,t,n){return this.view.encodeCall.decreaseAllowance(e,t,{chainId:this.context.chainId.toString(),address:this.context.address,blockTag:this.context.getBlockTag(n)})},increaseAllowance(e,t,n){return this.view.encodeCall.increaseAllowance(e,t,{chainId:this.context.chainId.toString(),address:this.context.address,blockTag:this.context.getBlockTag(n)})},masterPenpie(e){return this.view.encodeCall.masterPenpie({chainId:this.context.chainId.toString(),address:this.context.address,blockTag:this.context.getBlockTag(e)})},mint(e,t,n){return this.view.encodeCall.mint(e,t,{chainId:this.context.chainId.toString(),address:this.context.address,blockTag:this.context.getBlockTag(n)})},name(e){return this.view.encodeCall.name({chainId:this.context.chainId.toString(),address:this.context.address,blockTag:this.context.getBlockTag(e)})},owner(e){return this.view.encodeCall.owner({chainId:this.context.chainId.toString(),address:this.context.address,blockTag:this.context.getBlockTag(e)})},renounceOwnership(e){return this.view.encodeCall.renounceOwnership({chainId:this.context.chainId.toString(),address:this.context.address,blockTag:this.context.getBlockTag(e)})},symbol(e){return this.view.encodeCall.symbol({chainId:this.context.chainId.toString(),address:this.context.address,blockTag:this.context.getBlockTag(e)})},totalSupply(e){return this.view.encodeCall.totalSupply({chainId:this.context.chainId.toString(),address:this.context.address,blockTag:this.context.getBlockTag(e)})},transfer(e,t,n){return this.view.encodeCall.transfer(e,t,{chainId:this.context.chainId.toString(),address:this.context.address,blockTag:this.context.getBlockTag(n)})},transferFrom(e,t,n,a){return this.view.encodeCall.transferFrom(e,t,n,{chainId:this.context.chainId.toString(),address:this.context.address,blockTag:this.context.getBlockTag(a)})},transferOwnership(e,t){return this.view.encodeCall.transferOwnership(e,{chainId:this.context.chainId.toString(),address:this.context.address,blockTag:this.context.getBlockTag(t)})},underlying(e){return this.view.encodeCall.underlying({chainId:this.context.chainId.toString(),address:this.context.address,blockTag:this.context.getBlockTag(e)})}}},re=class l extends Tt{static{o(this,"PenpieReceiptTokenProcessor")}onEventApproval(e,t,n,a){return t||(t=R.filters["Approval(address,address,uint256)"](null,null,null)),super.onEthEvent(e,t,n,a)}onEventOwnershipTransferred(e,t,n,a){return t||(t=R.filters["OwnershipTransferred(address,address)"](null,null)),super.onEthEvent(e,t,n,a)}onEventTransfer(e,t,n,a){return t||(t=R.filters["Transfer(address,address,uint256)"](null,null,null)),super.onEthEvent(e,t,n,a)}onCallAllowance(e,t,n){return super.onEthTrace("0xdd62ed3e",e,t,n)}onCallApprove(e,t,n){return super.onEthTrace("0x095ea7b3",e,t,n)}onCallBalanceOf(e,t,n){return super.onEthTrace("0x70a08231",e,t,n)}onCallBurn(e,t,n){return super.onEthTrace("0x9dc29fac",e,t,n)}onCallDecimals(e,t,n){return super.onEthTrace("0x313ce567",e,t,n)}onCallDecreaseAllowance(e,t,n){return super.onEthTrace("0xa457c2d7",e,t,n)}onCallIncreaseAllowance(e,t,n){return super.onEthTrace("0x39509351",e,t,n)}onCallMasterPenpie(e,t,n){return super.onEthTrace("0x3c41d5ab",e,t,n)}onCallMint(e,t,n){return super.onEthTrace("0x40c10f19",e,t,n)}onCallName(e,t,n){return super.onEthTrace("0x06fdde03",e,t,n)}onCallOwner(e,t,n){return super.onEthTrace("0x8da5cb5b",e,t,n)}onCallRenounceOwnership(e,t,n){return super.onEthTrace("0x715018a6",e,t,n)}onCallSymbol(e,t,n){return super.onEthTrace("0x95d89b41",e,t,n)}onCallTotalSupply(e,t,n){return super.onEthTrace("0x18160ddd",e,t,n)}onCallTransfer(e,t,n){return super.onEthTrace("0xa9059cbb",e,t,n)}onCallTransferFrom(e,t,n){return super.onEthTrace("0x23b872dd",e,t,n)}onCallTransferOwnership(e,t,n){return super.onEthTrace("0xf2fde38b",e,t,n)}onCallUnderlying(e,t,n){return super.onEthTrace("0x6f307dc3",e,t,n)}static filters={Approval(e,t,n){return R.filters["Approval(address,address,uint256)"](e,t,n)},OwnershipTransferred(e,t){return R.filters["OwnershipTransferred(address,address)"](e,t)},Transfer(e,t,n){return R.filters["Transfer(address,address,uint256)"](e,t,n)}};CreateBoundContractView(){let e=Ce(this.config.network,this.config.address);return new ae(this.config.address,e)}static bind(e){e.name||(e.name="PenpieReceiptToken");let t=xe(e);return t||(t=new l(e),he(e,t)),t}},H=class extends ht{static{o(this,"PenpieReceiptTokenProcessorTemplate")}bindInternal(e){e.name||(e.name="PenpieReceiptToken");let t=xe(e);return t||(t=new re(e),he(e,t)),t}onEventApproval(e,t,n,a){return t||(t=R.filters["Approval(address,address,uint256)"](null,null,null)),super.onEthEvent(e,t,n,a)}onEventOwnershipTransferred(e,t,n,a){return t||(t=R.filters["OwnershipTransferred(address,address)"](null,null)),super.onEthEvent(e,t,n,a)}onEventTransfer(e,t,n,a){return t||(t=R.filters["Transfer(address,address,uint256)"](null,null,null)),super.onEthEvent(e,t,n,a)}};function Ce(l,e){let t=yt("PenpieReceiptToken",e,l);if(!t){let n=L.connect(e,mt(l));t=new ne(n),ct("PenpieReceiptToken",e,l,t)}return t}o(Ce,"getPenpieReceiptTokenContract");import{EthChainId as gi}from"@sentio/sdk/eth";import{addContractByABI as bt,getContractByABI as Pt,addProcessor as vt,getProcessor as kt,getProvider as ft,transformEtherError as p,BaseProcessor as Et,BaseProcessorTemplate as Ii,BoundContractView as wt,ContractView as St,DummyProvider as Ot,encodeCallData as d}from"@sentio/sdk/eth";var c=N.connect("0x0",Ot),ie=class extends St{static{o(this,"PenpieStakingContractView")}constructor(e){super(e),this.callStatic.contract=e}async ETHZapper(e,t,n){try{return await this.contract.getFunction("ETHZapper()")(e||{})}catch(a){let r=new Error().stack;throw p(a,void 0,r)}}async PENDLE(e,t,n){try{return await this.contract.getFunction("PENDLE()")(e||{})}catch(a){let r=new Error().stack;throw p(a,void 0,r)}}async WETH(e,t,n){try{return await this.contract.getFunction("WETH()")(e||{})}catch(a){let r=new Error().stack;throw p(a,void 0,r)}}async accumulatedVePendle(e,t,n){try{return await this.contract.getFunction("accumulatedVePendle()")(e||{})}catch(a){let r=new Error().stack;throw p(a,void 0,r)}}async autoBribeFee(e,t,n){try{return await this.contract.getFunction("autoBribeFee()")(e||{})}catch(a){let r=new Error().stack;throw p(a,void 0,r)}}async bribeManager(e,t,n){try{return await this.contract.getFunction("bribeManager()")(e||{})}catch(a){let r=new Error().stack;throw p(a,void 0,r)}}async bribeManagerEOA(e,t,n){try{return await this.contract.getFunction("bribeManagerEOA()")(e||{})}catch(a){let r=new Error().stack;throw p(a,void 0,r)}}async distributorETH(e,t,n){try{return await this.contract.getFunction("distributorETH()")(e||{})}catch(a){let r=new Error().stack;throw p(a,void 0,r)}}async feeCollector(e,t,n){try{return await this.contract.getFunction("feeCollector()")(e||{})}catch(a){let r=new Error().stack;throw p(a,void 0,r)}}async getPoolLength(e,t,n){try{return await this.contract.getFunction("getPoolLength()")(e||{})}catch(a){let r=new Error().stack;throw p(a,void 0,r)}}async harvestCallerPendleFee(e,t,n){try{return await this.contract.getFunction("harvestCallerPendleFee()")(e||{})}catch(a){let r=new Error().stack;throw p(a,void 0,r)}}async harvestTimeGap(e,t,n){try{return await this.contract.getFunction("harvestTimeGap()")(e||{})}catch(a){let r=new Error().stack;throw p(a,void 0,r)}}async lockPeriod(e,t,n){try{return await this.contract.getFunction("lockPeriod()")(e||{})}catch(a){let r=new Error().stack;throw p(a,void 0,r)}}async mPendleConvertor(e,t,n){try{return await this.contract.getFunction("mPendleConvertor()")(e||{})}catch(a){let r=new Error().stack;throw p(a,void 0,r)}}async mPendleOFT(e,t,n){try{return await this.contract.getFunction("mPendleOFT()")(e||{})}catch(a){let r=new Error().stack;throw p(a,void 0,r)}}async marketDepositHelper(e,t,n){try{return await this.contract.getFunction("marketDepositHelper()")(e||{})}catch(a){let r=new Error().stack;throw p(a,void 0,r)}}async masterPenpie(e,t,n){try{return await this.contract.getFunction("masterPenpie()")(e||{})}catch(a){let r=new Error().stack;throw p(a,void 0,r)}}async owner(e,t,n){try{return await this.contract.getFunction("owner()")(e||{})}catch(a){let r=new Error().stack;throw p(a,void 0,r)}}async paused(e,t,n){try{return await this.contract.getFunction("paused()")(e||{})}catch(a){let r=new Error().stack;throw p(a,void 0,r)}}async pendleFeeInfos(e,t,n,a){try{return await this.contract.getFunction("pendleFeeInfos(uint256)")(e,t||{})}catch(r){let i=new Error().stack;throw p(r,void 0,i)}}async pendleRouter(e,t,n){try{return await this.contract.getFunction("pendleRouter()")(e||{})}catch(a){let r=new Error().stack;throw p(a,void 0,r)}}async pendleVote(e,t,n){try{return await this.contract.getFunction("pendleVote()")(e||{})}catch(a){let r=new Error().stack;throw p(a,void 0,r)}}async poolTokenList(e,t,n,a){try{return await this.contract.getFunction("poolTokenList(uint256)")(e,t||{})}catch(r){let i=new Error().stack;throw p(r,void 0,i)}}async pools(e,t,n,a){try{return await this.contract.getFunction("pools(address)")(e,t||{})}catch(r){let i=new Error().stack;throw p(r,void 0,i)}}async protocolFee(e,t,n){try{return await this.contract.getFunction("protocolFee()")(e||{})}catch(a){let r=new Error().stack;throw p(a,void 0,r)}}async smartPendleConvert(e,t,n){try{return await this.contract.getFunction("smartPendleConvert()")(e||{})}catch(a){let r=new Error().stack;throw p(a,void 0,r)}}async totalPendleFee(e,t,n){try{return await this.contract.getFunction("totalPendleFee()")(e||{})}catch(a){let r=new Error().stack;throw p(a,void 0,r)}}async totalUnclaimedETH(e,t,n){try{return await this.contract.getFunction("totalUnclaimedETH()")(e||{})}catch(a){let r=new Error().stack;throw p(a,void 0,r)}}async vePendle(e,t,n){try{return await this.contract.getFunction("vePendle()")(e||{})}catch(a){let r=new Error().stack;throw p(a,void 0,r)}}async vePendleHarvestCallerFee(e,t,n){try{return await this.contract.getFunction("vePendleHarvestCallerFee()")(e||{})}catch(a){let r=new Error().stack;throw p(a,void 0,r)}}async voteManager(e,t,n){try{return await this.contract.getFunction("voteManager()")(e||{})}catch(a){let r=new Error().stack;throw p(a,void 0,r)}}callStatic={contract:this.contract,async __PendleStakingBaseUpg_init(e,t,n,a,r,i,s,m,b){try{return await this.contract.getFunction("__PendleStakingBaseUpg_init(address,address,address,address,address,address)").staticCall(e,t,n,a,r,i,s||{})}catch(S){let F=new Error().stack;throw p(S,void 0,F)}},async __PendleStaking_init(e,t,n,a,r,i,s,m,b){try{return await this.contract.getFunction("__PendleStaking_init(address,address,address,address,address,address)").staticCall(e,t,n,a,r,i,s||{})}catch(S){let F=new Error().stack;throw p(S,void 0,F)}},async addPendleFee(e,t,n,a,r,i,s){try{return await this.contract.getFunction("addPendleFee(uint256,address,bool,bool)").staticCall(e,t,n,a,r||{})}catch(m){let b=new Error().stack;throw p(m,void 0,b)}},async batchHarvestMarketRewards(e,t,n,a,r){try{return await this.contract.getFunction("batchHarvestMarketRewards(address[],uint256)").staticCall(e,t,n||{})}catch(i){let s=new Error().stack;throw p(i,void 0,s)}},async bootstrapVePendle(e,t,n,a){try{return await this.contract.getFunction("bootstrapVePendle(uint256[])").staticCall(e,t||{})}catch(r){let i=new Error().stack;throw p(r,void 0,i)}},async convertPendle(e,t,n,a,r){try{return await this.contract.getFunction("convertPendle(uint256,uint256[])").staticCall(e,t,n||{})}catch(i){let s=new Error().stack;throw p(i,void 0,s)}},async depositMarket(e,t,n,a,r,i,s){try{return await this.contract.getFunction("depositMarket(address,address,address,uint256)").staticCall(e,t,n,a,r||{})}catch(m){let b=new Error().stack;throw p(m,void 0,b)}},async harvestMarketReward(e,t,n,a,r,i){try{return await this.contract.getFunction("harvestMarketReward(address,address,uint256)").staticCall(e,t,n,a||{})}catch(s){let m=new Error().stack;throw p(s,void 0,m)}},async harvestVePendleReward(e,t,n,a){try{return await this.contract.getFunction("harvestVePendleReward(address[])").staticCall(e,t||{})}catch(r){let i=new Error().stack;throw p(r,void 0,i)}},async increaseLockTime(e,t,n,a){try{return await this.contract.getFunction("increaseLockTime(uint256)").staticCall(e,t||{})}catch(r){let i=new Error().stack;throw p(r,void 0,i)}},async pause(e,t,n){try{return await this.contract.getFunction("pause()").staticCall(e||{})}catch(a){let r=new Error().stack;throw p(a,void 0,r)}},async registerPool(e,t,n,a,r,i,s){try{return await this.contract.getFunction("registerPool(address,uint256,string,string)").staticCall(e,t,n,a,r||{})}catch(m){let b=new Error().stack;throw p(m,void 0,b)}},async removePendleFee(e,t,n,a){try{return await this.contract.getFunction("removePendleFee(uint256)").staticCall(e,t||{})}catch(r){let i=new Error().stack;throw p(r,void 0,i)}},async renounceOwnership(e,t,n){try{return await this.contract.getFunction("renounceOwnership()").staticCall(e||{})}catch(a){let r=new Error().stack;throw p(a,void 0,r)}},async setAutoBribeFee(e,t,n,a){try{return await this.contract.getFunction("setAutoBribeFee(uint256)").staticCall(e,t||{})}catch(r){let i=new Error().stack;throw p(r,void 0,i)}},async setBribeManager(e,t,n,a,r){try{return await this.contract.getFunction("setBribeManager(address,address)").staticCall(e,t,n||{})}catch(i){let s=new Error().stack;throw p(i,void 0,s)}},async setETHZapper(e,t,n,a){try{return await this.contract.getFunction("setETHZapper(address)").staticCall(e,t||{})}catch(r){let i=new Error().stack;throw p(r,void 0,i)}},async setHarvestTimeGap(e,t,n,a){try{return await this.contract.getFunction("setHarvestTimeGap(uint256)").staticCall(e,t||{})}catch(r){let i=new Error().stack;throw p(r,void 0,i)}},async setLockDays(e,t,n,a){try{return await this.contract.getFunction("setLockDays(uint256)").staticCall(e,t||{})}catch(r){let i=new Error().stack;throw p(r,void 0,i)}},async setMPendleConvertor(e,t,n,a){try{return await this.contract.getFunction("setMPendleConvertor(address)").staticCall(e,t||{})}catch(r){let i=new Error().stack;throw p(r,void 0,i)}},async setMPendleOFT(e,t,n,a){try{return await this.contract.getFunction("setMPendleOFT(address)").staticCall(e,t||{})}catch(r){let i=new Error().stack;throw p(r,void 0,i)}},async setMarketDepositHelper(e,t,n,a){try{return await this.contract.getFunction("setMarketDepositHelper(address)").staticCall(e,t||{})}catch(r){let i=new Error().stack;throw p(r,void 0,i)}},async setPendleFee(e,t,n,a,r,i,s,m,b){try{return await this.contract.getFunction("setPendleFee(uint256,uint256,address,bool,bool,bool)").staticCall(e,t,n,a,r,i,s||{})}catch(S){let F=new Error().stack;throw p(S,void 0,F)}},async setSmartConvert(e,t,n,a){try{return await this.contract.getFunction("setSmartConvert(address)").staticCall(e,t||{})}catch(r){let i=new Error().stack;throw p(r,void 0,i)}},async setVote(e,t,n,a,r,i,s,m){try{return await this.contract.getFunction("setVote(address,uint256,uint256,uint256,address)").staticCall(e,t,n,a,r,i||{})}catch(b){let S=new Error().stack;throw p(b,void 0,S)}},async setVoteManager(e,t,n,a){try{return await this.contract.getFunction("setVoteManager(address)").staticCall(e,t||{})}catch(r){let i=new Error().stack;throw p(r,void 0,i)}},async setmasterPenpie(e,t,n,a){try{return await this.contract.getFunction("setmasterPenpie(address)").staticCall(e,t||{})}catch(r){let i=new Error().stack;throw p(r,void 0,i)}},async transferOwnership(e,t,n,a){try{return await this.contract.getFunction("transferOwnership(address)").staticCall(e,t||{})}catch(r){let i=new Error().stack;throw p(r,void 0,i)}},async unpause(e,t,n){try{return await this.contract.getFunction("unpause()").staticCall(e||{})}catch(a){let r=new Error().stack;throw p(a,void 0,r)}},async updateMarketRewards(e,t,n,a,r){try{return await this.contract.getFunction("updateMarketRewards(address,uint256[])").staticCall(e,t,n||{})}catch(i){let s=new Error().stack;throw p(i,void 0,s)}},async updatePoolHelper(e,t,n,a,r){try{return await this.contract.getFunction("updatePoolHelper(address,address)").staticCall(e,t,n||{})}catch(i){let s=new Error().stack;throw p(i,void 0,s)}},async vote(e,t,n,a,r){try{return await this.contract.getFunction("vote(address[],uint64[])").staticCall(e,t,n||{})}catch(i){let s=new Error().stack;throw p(i,void 0,s)}},async withdrawMarket(e,t,n,a,r,i){try{return await this.contract.getFunction("withdrawMarket(address,address,uint256)").staticCall(e,t,n,a||{})}catch(s){let m=new Error().stack;throw p(s,void 0,m)}}};encodeCall={ETHZapper(e){return d(e,"ETHZapper","function ETHZapper()",[])},PENDLE(e){return d(e,"PENDLE","function PENDLE()",[])},WETH(e){return d(e,"WETH","function WETH()",[])},__PendleStakingBaseUpg_init(e,t,n,a,r,i,s){return d(s,"__PendleStakingBaseUpg_init","function __PendleStakingBaseUpg_init(address,address,address,address,address,address)",[e,t,n,a,r,i])},__PendleStaking_init(e,t,n,a,r,i,s){return d(s,"__PendleStaking_init","function __PendleStaking_init(address,address,address,address,address,address)",[e,t,n,a,r,i])},accumulatedVePendle(e){return d(e,"accumulatedVePendle","function accumulatedVePendle()",[])},addPendleFee(e,t,n,a,r){return d(r,"addPendleFee","function addPendleFee(uint256,address,bool,bool)",[e,t,n,a])},autoBribeFee(e){return d(e,"autoBribeFee","function autoBribeFee()",[])},batchHarvestMarketRewards(e,t,n){return d(n,"batchHarvestMarketRewards","function batchHarvestMarketRewards(address[],uint256)",[e,t])},bootstrapVePendle(e,t){return d(t,"bootstrapVePendle","function bootstrapVePendle(uint256[])",[e])},bribeManager(e){return d(e,"bribeManager","function bribeManager()",[])},bribeManagerEOA(e){return d(e,"bribeManagerEOA","function bribeManagerEOA()",[])},convertPendle(e,t,n){return d(n,"convertPendle","function convertPendle(uint256,uint256[])",[e,t])},depositMarket(e,t,n,a,r){return d(r,"depositMarket","function depositMarket(address,address,address,uint256)",[e,t,n,a])},distributorETH(e){return d(e,"distributorETH","function distributorETH()",[])},feeCollector(e){return d(e,"feeCollector","function feeCollector()",[])},getPoolLength(e){return d(e,"getPoolLength","function getPoolLength()",[])},harvestCallerPendleFee(e){return d(e,"harvestCallerPendleFee","function harvestCallerPendleFee()",[])},harvestMarketReward(e,t,n,a){return d(a,"harvestMarketReward","function harvestMarketReward(address,address,uint256)",[e,t,n])},harvestTimeGap(e){return d(e,"harvestTimeGap","function harvestTimeGap()",[])},harvestVePendleReward(e,t){return d(t,"harvestVePendleReward","function harvestVePendleReward(address[])",[e])},increaseLockTime(e,t){return d(t,"increaseLockTime","function increaseLockTime(uint256)",[e])},lockPeriod(e){return d(e,"lockPeriod","function lockPeriod()",[])},mPendleConvertor(e){return d(e,"mPendleConvertor","function mPendleConvertor()",[])},mPendleOFT(e){return d(e,"mPendleOFT","function mPendleOFT()",[])},marketDepositHelper(e){return d(e,"marketDepositHelper","function marketDepositHelper()",[])},masterPenpie(e){return d(e,"masterPenpie","function masterPenpie()",[])},owner(e){return d(e,"owner","function owner()",[])},pause(e){return d(e,"pause","function pause()",[])},paused(e){return d(e,"paused","function paused()",[])},pendleFeeInfos(e,t){return d(t,"pendleFeeInfos","function pendleFeeInfos(uint256)",[e])},pendleRouter(e){return d(e,"pendleRouter","function pendleRouter()",[])},pendleVote(e){return d(e,"pendleVote","function pendleVote()",[])},poolTokenList(e,t){return d(t,"poolTokenList","function poolTokenList(uint256)",[e])},pools(e,t){return d(t,"pools","function pools(address)",[e])},protocolFee(e){return d(e,"protocolFee","function protocolFee()",[])},registerPool(e,t,n,a,r){return d(r,"registerPool","function registerPool(address,uint256,string,string)",[e,t,n,a])},removePendleFee(e,t){return d(t,"removePendleFee","function removePendleFee(uint256)",[e])},renounceOwnership(e){return d(e,"renounceOwnership","function renounceOwnership()",[])},setAutoBribeFee(e,t){return d(t,"setAutoBribeFee","function setAutoBribeFee(uint256)",[e])},setBribeManager(e,t,n){return d(n,"setBribeManager","function setBribeManager(address,address)",[e,t])},setETHZapper(e,t){return d(t,"setETHZapper","function setETHZapper(address)",[e])},setHarvestTimeGap(e,t){return d(t,"setHarvestTimeGap","function setHarvestTimeGap(uint256)",[e])},setLockDays(e,t){return d(t,"setLockDays","function setLockDays(uint256)",[e])},setMPendleConvertor(e,t){return d(t,"setMPendleConvertor","function setMPendleConvertor(address)",[e])},setMPendleOFT(e,t){return d(t,"setMPendleOFT","function setMPendleOFT(address)",[e])},setMarketDepositHelper(e,t){return d(t,"setMarketDepositHelper","function setMarketDepositHelper(address)",[e])},setPendleFee(e,t,n,a,r,i,s){return d(s,"setPendleFee","function setPendleFee(uint256,uint256,address,bool,bool,bool)",[e,t,n,a,r,i])},setSmartConvert(e,t){return d(t,"setSmartConvert","function setSmartConvert(address)",[e])},setVote(e,t,n,a,r,i){return d(i,"setVote","function setVote(address,uint256,uint256,uint256,address)",[e,t,n,a,r])},setVoteManager(e,t){return d(t,"setVoteManager","function setVoteManager(address)",[e])},setmasterPenpie(e,t){return d(t,"setmasterPenpie","function setmasterPenpie(address)",[e])},smartPendleConvert(e){return d(e,"smartPendleConvert","function smartPendleConvert()",[])},totalPendleFee(e){return d(e,"totalPendleFee","function totalPendleFee()",[])},totalUnclaimedETH(e){return d(e,"totalUnclaimedETH","function totalUnclaimedETH()",[])},transferOwnership(e,t){return d(t,"transferOwnership","function transferOwnership(address)",[e])},unpause(e){return d(e,"unpause","function unpause()",[])},updateMarketRewards(e,t,n){return d(n,"updateMarketRewards","function updateMarketRewards(address,uint256[])",[e,t])},updatePoolHelper(e,t,n){return d(n,"updatePoolHelper","function updatePoolHelper(address,address)",[e,t])},vePendle(e){return d(e,"vePendle","function vePendle()",[])},vePendleHarvestCallerFee(e){return d(e,"vePendleHarvestCallerFee","function vePendleHarvestCallerFee()",[])},vote(e,t,n){return d(n,"vote","function vote(address[],uint64[])",[e,t])},voteManager(e){return d(e,"voteManager","function voteManager()",[])},withdrawMarket(e,t,n,a){return d(a,"withdrawMarket","function withdrawMarket(address,address,uint256)",[e,t,n])}}},q=class extends wt{static{o(this,"PenpieStakingBoundContractView")}async ETHZapper(e){return await this.view.ETHZapper({blockTag:this.context.blockNumber,...e},this.context.preparedData,this.context.getEthCallContext())}async PENDLE(e){return await this.view.PENDLE({blockTag:this.context.blockNumber,...e},this.context.preparedData,this.context.getEthCallContext())}async WETH(e){return await this.view.WETH({blockTag:this.context.blockNumber,...e},this.context.preparedData,this.context.getEthCallContext())}async accumulatedVePendle(e){return await this.view.accumulatedVePendle({blockTag:this.context.blockNumber,...e},this.context.preparedData,this.context.getEthCallContext())}async autoBribeFee(e){return await this.view.autoBribeFee({blockTag:this.context.blockNumber,...e},this.context.preparedData,this.context.getEthCallContext())}async bribeManager(e){return await this.view.bribeManager({blockTag:this.context.blockNumber,...e},this.context.preparedData,this.context.getEthCallContext())}async bribeManagerEOA(e){return await this.view.bribeManagerEOA({blockTag:this.context.blockNumber,...e},this.context.preparedData,this.context.getEthCallContext())}async distributorETH(e){return await this.view.distributorETH({blockTag:this.context.blockNumber,...e},this.context.preparedData,this.context.getEthCallContext())}async feeCollector(e){return await this.view.feeCollector({blockTag:this.context.blockNumber,...e},this.context.preparedData,this.context.getEthCallContext())}async getPoolLength(e){return await this.view.getPoolLength({blockTag:this.context.blockNumber,...e},this.context.preparedData,this.context.getEthCallContext())}async harvestCallerPendleFee(e){return await this.view.harvestCallerPendleFee({blockTag:this.context.blockNumber,...e},this.context.preparedData,this.context.getEthCallContext())}async harvestTimeGap(e){return await this.view.harvestTimeGap({blockTag:this.context.blockNumber,...e},this.context.preparedData,this.context.getEthCallContext())}async lockPeriod(e){return await this.view.lockPeriod({blockTag:this.context.blockNumber,...e},this.context.preparedData,this.context.getEthCallContext())}async mPendleConvertor(e){return await this.view.mPendleConvertor({blockTag:this.context.blockNumber,...e},this.context.preparedData,this.context.getEthCallContext())}async mPendleOFT(e){return await this.view.mPendleOFT({blockTag:this.context.blockNumber,...e},this.context.preparedData,this.context.getEthCallContext())}async marketDepositHelper(e){return await this.view.marketDepositHelper({blockTag:this.context.blockNumber,...e},this.context.preparedData,this.context.getEthCallContext())}async masterPenpie(e){return await this.view.masterPenpie({blockTag:this.context.blockNumber,...e},this.context.preparedData,this.context.getEthCallContext())}async owner(e){return await this.view.owner({blockTag:this.context.blockNumber,...e},this.context.preparedData,this.context.getEthCallContext())}async paused(e){return await this.view.paused({blockTag:this.context.blockNumber,...e},this.context.preparedData,this.context.getEthCallContext())}async pendleFeeInfos(e,t){return await this.view.pendleFeeInfos(e,{blockTag:this.context.blockNumber,...t},this.context.preparedData,this.context.getEthCallContext())}async pendleRouter(e){return await this.view.pendleRouter({blockTag:this.context.blockNumber,...e},this.context.preparedData,this.context.getEthCallContext())}async pendleVote(e){return await this.view.pendleVote({blockTag:this.context.blockNumber,...e},this.context.preparedData,this.context.getEthCallContext())}async poolTokenList(e,t){return await this.view.poolTokenList(e,{blockTag:this.context.blockNumber,...t},this.context.preparedData,this.context.getEthCallContext())}async pools(e,t){return await this.view.pools(e,{blockTag:this.context.blockNumber,...t},this.context.preparedData,this.context.getEthCallContext())}async protocolFee(e){return await this.view.protocolFee({blockTag:this.context.blockNumber,...e},this.context.preparedData,this.context.getEthCallContext())}async smartPendleConvert(e){return await this.view.smartPendleConvert({blockTag:this.context.blockNumber,...e},this.context.preparedData,this.context.getEthCallContext())}async totalPendleFee(e){return await this.view.totalPendleFee({blockTag:this.context.blockNumber,...e},this.context.preparedData,this.context.getEthCallContext())}async totalUnclaimedETH(e){return await this.view.totalUnclaimedETH({blockTag:this.context.blockNumber,...e},this.context.preparedData,this.context.getEthCallContext())}async vePendle(e){return await this.view.vePendle({blockTag:this.context.blockNumber,...e},this.context.preparedData,this.context.getEthCallContext())}async vePendleHarvestCallerFee(e){return await this.view.vePendleHarvestCallerFee({blockTag:this.context.blockNumber,...e},this.context.preparedData,this.context.getEthCallContext())}async voteManager(e){return await this.view.voteManager({blockTag:this.context.blockNumber,...e},this.context.preparedData,this.context.getEthCallContext())}callStatic={view:this.view,context:this.context,async __PendleStakingBaseUpg_init(e,t,n,a,r,i,s){return await this.view.callStatic.__PendleStakingBaseUpg_init(e,t,n,a,r,i,{blockTag:this.context.blockNumber,...s},this.context.preparedData,this.context.getEthCallContext())},async __PendleStaking_init(e,t,n,a,r,i,s){return await this.view.callStatic.__PendleStaking_init(e,t,n,a,r,i,{blockTag:this.context.blockNumber,...s},this.context.preparedData,this.context.getEthCallContext())},async addPendleFee(e,t,n,a,r){return await this.view.callStatic.addPendleFee(e,t,n,a,{blockTag:this.context.blockNumber,...r},this.context.preparedData,this.context.getEthCallContext())},async batchHarvestMarketRewards(e,t,n){return await this.view.callStatic.batchHarvestMarketRewards(e,t,{blockTag:this.context.blockNumber,...n},this.context.preparedData,this.context.getEthCallContext())},async bootstrapVePendle(e,t){return await this.view.callStatic.bootstrapVePendle(e,{blockTag:this.context.blockNumber,...t},this.context.preparedData,this.context.getEthCallContext())},async convertPendle(e,t,n){return await this.view.callStatic.convertPendle(e,t,{blockTag:this.context.blockNumber,...n},this.context.preparedData,this.context.getEthCallContext())},async depositMarket(e,t,n,a,r){return await this.view.callStatic.depositMarket(e,t,n,a,{blockTag:this.context.blockNumber,...r},this.context.preparedData,this.context.getEthCallContext())},async harvestMarketReward(e,t,n,a){return await this.view.callStatic.harvestMarketReward(e,t,n,{blockTag:this.context.blockNumber,...a},this.context.preparedData,this.context.getEthCallContext())},async harvestVePendleReward(e,t){return await this.view.callStatic.harvestVePendleReward(e,{blockTag:this.context.blockNumber,...t},this.context.preparedData,this.context.getEthCallContext())},async increaseLockTime(e,t){return await this.view.callStatic.increaseLockTime(e,{blockTag:this.context.blockNumber,...t},this.context.preparedData,this.context.getEthCallContext())},async pause(e){return await this.view.callStatic.pause({blockTag:this.context.blockNumber,...e},this.context.preparedData,this.context.getEthCallContext())},async registerPool(e,t,n,a,r){return await this.view.callStatic.registerPool(e,t,n,a,{blockTag:this.context.blockNumber,...r},this.context.preparedData,this.context.getEthCallContext())},async removePendleFee(e,t){return await this.view.callStatic.removePendleFee(e,{blockTag:this.context.blockNumber,...t},this.context.preparedData,this.context.getEthCallContext())},async renounceOwnership(e){return await this.view.callStatic.renounceOwnership({blockTag:this.context.blockNumber,...e},this.context.preparedData,this.context.getEthCallContext())},async setAutoBribeFee(e,t){return await this.view.callStatic.setAutoBribeFee(e,{blockTag:this.context.blockNumber,...t},this.context.preparedData,this.context.getEthCallContext())},async setBribeManager(e,t,n){return await this.view.callStatic.setBribeManager(e,t,{blockTag:this.context.blockNumber,...n},this.context.preparedData,this.context.getEthCallContext())},async setETHZapper(e,t){return await this.view.callStatic.setETHZapper(e,{blockTag:this.context.blockNumber,...t},this.context.preparedData,this.context.getEthCallContext())},async setHarvestTimeGap(e,t){return await this.view.callStatic.setHarvestTimeGap(e,{blockTag:this.context.blockNumber,...t},this.context.preparedData,this.context.getEthCallContext())},async setLockDays(e,t){return await this.view.callStatic.setLockDays(e,{blockTag:this.context.blockNumber,...t},this.context.preparedData,this.context.getEthCallContext())},async setMPendleConvertor(e,t){return await this.view.callStatic.setMPendleConvertor(e,{blockTag:this.context.blockNumber,...t},this.context.preparedData,this.context.getEthCallContext())},async setMPendleOFT(e,t){return await this.view.callStatic.setMPendleOFT(e,{blockTag:this.context.blockNumber,...t},this.context.preparedData,this.context.getEthCallContext())},async setMarketDepositHelper(e,t){return await this.view.callStatic.setMarketDepositHelper(e,{blockTag:this.context.blockNumber,...t},this.context.preparedData,this.context.getEthCallContext())},async setPendleFee(e,t,n,a,r,i,s){return await this.view.callStatic.setPendleFee(e,t,n,a,r,i,{blockTag:this.context.blockNumber,...s},this.context.preparedData,this.context.getEthCallContext())},async setSmartConvert(e,t){return await this.view.callStatic.setSmartConvert(e,{blockTag:this.context.blockNumber,...t},this.context.preparedData,this.context.getEthCallContext())},async setVote(e,t,n,a,r,i){return await this.view.callStatic.setVote(e,t,n,a,r,{blockTag:this.context.blockNumber,...i},this.context.preparedData,this.context.getEthCallContext())},async setVoteManager(e,t){return await this.view.callStatic.setVoteManager(e,{blockTag:this.context.blockNumber,...t},this.context.preparedData,this.context.getEthCallContext())},async setmasterPenpie(e,t){return await this.view.callStatic.setmasterPenpie(e,{blockTag:this.context.blockNumber,...t},this.context.preparedData,this.context.getEthCallContext())},async transferOwnership(e,t){return await this.view.callStatic.transferOwnership(e,{blockTag:this.context.blockNumber,...t},this.context.preparedData,this.context.getEthCallContext())},async unpause(e){return await this.view.callStatic.unpause({blockTag:this.context.blockNumber,...e},this.context.preparedData,this.context.getEthCallContext())},async updateMarketRewards(e,t,n){return await this.view.callStatic.updateMarketRewards(e,t,{blockTag:this.context.blockNumber,...n},this.context.preparedData,this.context.getEthCallContext())},async updatePoolHelper(e,t,n){return await this.view.callStatic.updatePoolHelper(e,t,{blockTag:this.context.blockNumber,...n},this.context.preparedData,this.context.getEthCallContext())},async vote(e,t,n){return await this.view.callStatic.vote(e,t,{blockTag:this.context.blockNumber,...n},this.context.preparedData,this.context.getEthCallContext())},async withdrawMarket(e,t,n,a){return await this.view.callStatic.withdrawMarket(e,t,n,{blockTag:this.context.blockNumber,...a},this.context.preparedData,this.context.getEthCallContext())}};encodeCall={view:this.view,context:this.context,ETHZapper(e){return this.view.encodeCall.ETHZapper({chainId:this.context.chainId.toString(),address:this.context.address,blockTag:this.context.getBlockTag(e)})},PENDLE(e){return this.view.encodeCall.PENDLE({chainId:this.context.chainId.toString(),address:this.context.address,blockTag:this.context.getBlockTag(e)})},WETH(e){return this.view.encodeCall.WETH({chainId:this.context.chainId.toString(),address:this.context.address,blockTag:this.context.getBlockTag(e)})},__PendleStakingBaseUpg_init(e,t,n,a,r,i,s){return this.view.encodeCall.__PendleStakingBaseUpg_init(e,t,n,a,r,i,{chainId:this.context.chainId.toString(),address:this.context.address,blockTag:this.context.getBlockTag(s)})},__PendleStaking_init(e,t,n,a,r,i,s){return this.view.encodeCall.__PendleStaking_init(e,t,n,a,r,i,{chainId:this.context.chainId.toString(),address:this.context.address,blockTag:this.context.getBlockTag(s)})},accumulatedVePendle(e){return this.view.encodeCall.accumulatedVePendle({chainId:this.context.chainId.toString(),address:this.context.address,blockTag:this.context.getBlockTag(e)})},addPendleFee(e,t,n,a,r){return this.view.encodeCall.addPendleFee(e,t,n,a,{chainId:this.context.chainId.toString(),address:this.context.address,blockTag:this.context.getBlockTag(r)})},autoBribeFee(e){return this.view.encodeCall.autoBribeFee({chainId:this.context.chainId.toString(),address:this.context.address,blockTag:this.context.getBlockTag(e)})},batchHarvestMarketRewards(e,t,n){return this.view.encodeCall.batchHarvestMarketRewards(e,t,{chainId:this.context.chainId.toString(),address:this.context.address,blockTag:this.context.getBlockTag(n)})},bootstrapVePendle(e,t){return this.view.encodeCall.bootstrapVePendle(e,{chainId:this.context.chainId.toString(),address:this.context.address,blockTag:this.context.getBlockTag(t)})},bribeManager(e){return this.view.encodeCall.bribeManager({chainId:this.context.chainId.toString(),address:this.context.address,blockTag:this.context.getBlockTag(e)})},bribeManagerEOA(e){return this.view.encodeCall.bribeManagerEOA({chainId:this.context.chainId.toString(),address:this.context.address,blockTag:this.context.getBlockTag(e)})},convertPendle(e,t,n){return this.view.encodeCall.convertPendle(e,t,{chainId:this.context.chainId.toString(),address:this.context.address,blockTag:this.context.getBlockTag(n)})},depositMarket(e,t,n,a,r){return this.view.encodeCall.depositMarket(e,t,n,a,{chainId:this.context.chainId.toString(),address:this.context.address,blockTag:this.context.getBlockTag(r)})},distributorETH(e){return this.view.encodeCall.distributorETH({chainId:this.context.chainId.toString(),address:this.context.address,blockTag:this.context.getBlockTag(e)})},feeCollector(e){return this.view.encodeCall.feeCollector({chainId:this.context.chainId.toString(),address:this.context.address,blockTag:this.context.getBlockTag(e)})},getPoolLength(e){return this.view.encodeCall.getPoolLength({chainId:this.context.chainId.toString(),address:this.context.address,blockTag:this.context.getBlockTag(e)})},harvestCallerPendleFee(e){return this.view.encodeCall.harvestCallerPendleFee({chainId:this.context.chainId.toString(),address:this.context.address,blockTag:this.context.getBlockTag(e)})},harvestMarketReward(e,t,n,a){return this.view.encodeCall.harvestMarketReward(e,t,n,{chainId:this.context.chainId.toString(),address:this.context.address,blockTag:this.context.getBlockTag(a)})},harvestTimeGap(e){return this.view.encodeCall.harvestTimeGap({chainId:this.context.chainId.toString(),address:this.context.address,blockTag:this.context.getBlockTag(e)})},harvestVePendleReward(e,t){return this.view.encodeCall.harvestVePendleReward(e,{chainId:this.context.chainId.toString(),address:this.context.address,blockTag:this.context.getBlockTag(t)})},increaseLockTime(e,t){return this.view.encodeCall.increaseLockTime(e,{chainId:this.context.chainId.toString(),address:this.context.address,blockTag:this.context.getBlockTag(t)})},lockPeriod(e){return this.view.encodeCall.lockPeriod({chainId:this.context.chainId.toString(),address:this.context.address,blockTag:this.context.getBlockTag(e)})},mPendleConvertor(e){return this.view.encodeCall.mPendleConvertor({chainId:this.context.chainId.toString(),address:this.context.address,blockTag:this.context.getBlockTag(e)})},mPendleOFT(e){return this.view.encodeCall.mPendleOFT({chainId:this.context.chainId.toString(),address:this.context.address,blockTag:this.context.getBlockTag(e)})},marketDepositHelper(e){return this.view.encodeCall.marketDepositHelper({chainId:this.context.chainId.toString(),address:this.context.address,blockTag:this.context.getBlockTag(e)})},masterPenpie(e){return this.view.encodeCall.masterPenpie({chainId:this.context.chainId.toString(),address:this.context.address,blockTag:this.context.getBlockTag(e)})},owner(e){return this.view.encodeCall.owner({chainId:this.context.chainId.toString(),address:this.context.address,blockTag:this.context.getBlockTag(e)})},pause(e){return this.view.encodeCall.pause({chainId:this.context.chainId.toString(),address:this.context.address,blockTag:this.context.getBlockTag(e)})},paused(e){return this.view.encodeCall.paused({chainId:this.context.chainId.toString(),address:this.context.address,blockTag:this.context.getBlockTag(e)})},pendleFeeInfos(e,t){return this.view.encodeCall.pendleFeeInfos(e,{chainId:this.context.chainId.toString(),address:this.context.address,blockTag:this.context.getBlockTag(t)})},pendleRouter(e){return this.view.encodeCall.pendleRouter({chainId:this.context.chainId.toString(),address:this.context.address,blockTag:this.context.getBlockTag(e)})},pendleVote(e){return this.view.encodeCall.pendleVote({chainId:this.context.chainId.toString(),address:this.context.address,blockTag:this.context.getBlockTag(e)})},poolTokenList(e,t){return this.view.encodeCall.poolTokenList(e,{chainId:this.context.chainId.toString(),address:this.context.address,blockTag:this.context.getBlockTag(t)})},pools(e,t){return this.view.encodeCall.pools(e,{chainId:this.context.chainId.toString(),address:this.context.address,blockTag:this.context.getBlockTag(t)})},protocolFee(e){return this.view.encodeCall.protocolFee({chainId:this.context.chainId.toString(),address:this.context.address,blockTag:this.context.getBlockTag(e)})},registerPool(e,t,n,a,r){return this.view.encodeCall.registerPool(e,t,n,a,{chainId:this.context.chainId.toString(),address:this.context.address,blockTag:this.context.getBlockTag(r)})},removePendleFee(e,t){return this.view.encodeCall.removePendleFee(e,{chainId:this.context.chainId.toString(),address:this.context.address,blockTag:this.context.getBlockTag(t)})},renounceOwnership(e){return this.view.encodeCall.renounceOwnership({chainId:this.context.chainId.toString(),address:this.context.address,blockTag:this.context.getBlockTag(e)})},setAutoBribeFee(e,t){return this.view.encodeCall.setAutoBribeFee(e,{chainId:this.context.chainId.toString(),address:this.context.address,blockTag:this.context.getBlockTag(t)})},setBribeManager(e,t,n){return this.view.encodeCall.setBribeManager(e,t,{chainId:this.context.chainId.toString(),address:this.context.address,blockTag:this.context.getBlockTag(n)})},setETHZapper(e,t){return this.view.encodeCall.setETHZapper(e,{chainId:this.context.chainId.toString(),address:this.context.address,blockTag:this.context.getBlockTag(t)})},setHarvestTimeGap(e,t){return this.view.encodeCall.setHarvestTimeGap(e,{chainId:this.context.chainId.toString(),address:this.context.address,blockTag:this.context.getBlockTag(t)})},setLockDays(e,t){return this.view.encodeCall.setLockDays(e,{chainId:this.context.chainId.toString(),address:this.context.address,blockTag:this.context.getBlockTag(t)})},setMPendleConvertor(e,t){return this.view.encodeCall.setMPendleConvertor(e,{chainId:this.context.chainId.toString(),address:this.context.address,blockTag:this.context.getBlockTag(t)})},setMPendleOFT(e,t){return this.view.encodeCall.setMPendleOFT(e,{chainId:this.context.chainId.toString(),address:this.context.address,blockTag:this.context.getBlockTag(t)})},setMarketDepositHelper(e,t){return this.view.encodeCall.setMarketDepositHelper(e,{chainId:this.context.chainId.toString(),address:this.context.address,blockTag:this.context.getBlockTag(t)})},setPendleFee(e,t,n,a,r,i,s){return this.view.encodeCall.setPendleFee(e,t,n,a,r,i,{chainId:this.context.chainId.toString(),address:this.context.address,blockTag:this.context.getBlockTag(s)})},setSmartConvert(e,t){return this.view.encodeCall.setSmartConvert(e,{chainId:this.context.chainId.toString(),address:this.context.address,blockTag:this.context.getBlockTag(t)})},setVote(e,t,n,a,r,i){return this.view.encodeCall.setVote(e,t,n,a,r,{chainId:this.context.chainId.toString(),address:this.context.address,blockTag:this.context.getBlockTag(i)})},setVoteManager(e,t){return this.view.encodeCall.setVoteManager(e,{chainId:this.context.chainId.toString(),address:this.context.address,blockTag:this.context.getBlockTag(t)})},setmasterPenpie(e,t){return this.view.encodeCall.setmasterPenpie(e,{chainId:this.context.chainId.toString(),address:this.context.address,blockTag:this.context.getBlockTag(t)})},smartPendleConvert(e){return this.view.encodeCall.smartPendleConvert({chainId:this.context.chainId.toString(),address:this.context.address,blockTag:this.context.getBlockTag(e)})},totalPendleFee(e){return this.view.encodeCall.totalPendleFee({chainId:this.context.chainId.toString(),address:this.context.address,blockTag:this.context.getBlockTag(e)})},totalUnclaimedETH(e){return this.view.encodeCall.totalUnclaimedETH({chainId:this.context.chainId.toString(),address:this.context.address,blockTag:this.context.getBlockTag(e)})},transferOwnership(e,t){return this.view.encodeCall.transferOwnership(e,{chainId:this.context.chainId.toString(),address:this.context.address,blockTag:this.context.getBlockTag(t)})},unpause(e){return this.view.encodeCall.unpause({chainId:this.context.chainId.toString(),address:this.context.address,blockTag:this.context.getBlockTag(e)})},updateMarketRewards(e,t,n){return this.view.encodeCall.updateMarketRewards(e,t,{chainId:this.context.chainId.toString(),address:this.context.address,blockTag:this.context.getBlockTag(n)})},updatePoolHelper(e,t,n){return this.view.encodeCall.updatePoolHelper(e,t,{chainId:this.context.chainId.toString(),address:this.context.address,blockTag:this.context.getBlockTag(n)})},vePendle(e){return this.view.encodeCall.vePendle({chainId:this.context.chainId.toString(),address:this.context.address,blockTag:this.context.getBlockTag(e)})},vePendleHarvestCallerFee(e){return this.view.encodeCall.vePendleHarvestCallerFee({chainId:this.context.chainId.toString(),address:this.context.address,blockTag:this.context.getBlockTag(e)})},vote(e,t,n){return this.view.encodeCall.vote(e,t,{chainId:this.context.chainId.toString(),address:this.context.address,blockTag:this.context.getBlockTag(n)})},voteManager(e){return this.view.encodeCall.voteManager({chainId:this.context.chainId.toString(),address:this.context.address,blockTag:this.context.getBlockTag(e)})},withdrawMarket(e,t,n,a){return this.view.encodeCall.withdrawMarket(e,t,n,{chainId:this.context.chainId.toString(),address:this.context.address,blockTag:this.context.getBlockTag(a)})}}},W=class l extends Et{static{o(this,"PenpieStakingProcessor")}onEventAddPendleFee(e,t,n,a){return t||(t=c.filters["AddPendleFee(address,uint256,bool,bool)"](null,null,null,null)),super.onEthEvent(e,t,n,a)}onEventBribeManagerEOAUpdated(e,t,n,a){return t||(t=c.filters["BribeManagerEOAUpdated(address,address)"](null,null)),super.onEthEvent(e,t,n,a)}onEventBribeManagerUpdated(e,t,n,a){return t||(t=c.filters["BribeManagerUpdated(address,address)"](null,null)),super.onEthEvent(e,t,n,a)}onEventInitialized(e,t,n,a){return t||(t=c.filters["Initialized(uint8)"](null)),super.onEthEvent(e,t,n,a)}onEventNewMarketDeposit(e,t,n,a){return t||(t=c.filters["NewMarketDeposit(address,address,uint256,address,uint256)"](null,null,null,null,null)),super.onEthEvent(e,t,n,a)}onEventNewMarketWithdraw(e,t,n,a){return t||(t=c.filters["NewMarketWithdraw(address,address,uint256,address,uint256)"](null,null,null,null,null)),super.onEthEvent(e,t,n,a)}onEventOwnershipTransferred(e,t,n,a){return t||(t=c.filters["OwnershipTransferred(address,address)"](null,null)),super.onEthEvent(e,t,n,a)}onEventPaused(e,t,n,a){return t||(t=c.filters["Paused(address)"](null)),super.onEthEvent(e,t,n,a)}onEventPendleLocked(e,t,n,a){return t||(t=c.filters["PendleLocked(uint256,uint256,uint256)"](null,null,null)),super.onEthEvent(e,t,n,a)}onEventPoolAdded(e,t,n,a){return t||(t=c.filters["PoolAdded(address,address,address)"](null,null,null)),super.onEthEvent(e,t,n,a)}onEventPoolHelperUpdated(e,t,n,a){return t||(t=c.filters["PoolHelperUpdated(address)"](null)),super.onEthEvent(e,t,n,a)}onEventPoolRemoved(e,t,n,a){return t||(t=c.filters["PoolRemoved(uint256,address)"](null,null)),super.onEthEvent(e,t,n,a)}onEventRemovePendleFee(e,t,n,a){return t||(t=c.filters["RemovePendleFee(uint256,address,bool,bool)"](null,null,null,null)),super.onEthEvent(e,t,n,a)}onEventRewardPaidTo(e,t,n,a){return t||(t=c.filters["RewardPaidTo(address,address,address,uint256)"](null,null,null,null)),super.onEthEvent(e,t,n,a)}onEventSetLockDays(e,t,n,a){return t||(t=c.filters["SetLockDays(uint256,uint256)"](null,null)),super.onEthEvent(e,t,n,a)}onEventSetMPendleConvertor(e,t,n,a){return t||(t=c.filters["SetMPendleConvertor(address,address)"](null,null)),super.onEthEvent(e,t,n,a)}onEventSetPendleFee(e,t,n,a){return t||(t=c.filters["SetPendleFee(address,uint256)"](null,null)),super.onEthEvent(e,t,n,a)}onEventSmartPendleConvertUpdated(e,t,n,a){return t||(t=c.filters["SmartPendleConvertUpdated(address,address)"](null,null)),super.onEthEvent(e,t,n,a)}onEventUnpaused(e,t,n,a){return t||(t=c.filters["Unpaused(address)"](null)),super.onEthEvent(e,t,n,a)}onEventVePendleHarvested(e,t,n,a){return t||(t=c.filters["VePendleHarvested(uint256,address[],uint256[],uint256,uint256,uint256)"](null,null,null,null,null,null)),super.onEthEvent(e,t,n,a)}onEventVoteManagerUpdated(e,t,n,a){return t||(t=c.filters["VoteManagerUpdated(address,address)"](null,null)),super.onEthEvent(e,t,n,a)}onEventVoteSet(e,t,n,a){return t||(t=c.filters["VoteSet(address,uint256,uint256,uint256,address)"](null,null,null,null,null)),super.onEthEvent(e,t,n,a)}onCallETHZapper(e,t,n){return super.onEthTrace("0x8c466507",e,t,n)}onCallPENDLE(e,t,n){return super.onEthTrace("0x7cf738d2",e,t,n)}onCallWETH(e,t,n){return super.onEthTrace("0xad5c4648",e,t,n)}onCall__PendleStakingBaseUpg_init(e,t,n){return super.onEthTrace("0x1a2d5e6e",e,t,n)}onCall__PendleStaking_init(e,t,n){return super.onEthTrace("0xf23f569c",e,t,n)}onCallAccumulatedVePendle(e,t,n){return super.onEthTrace("0x3d38b3a7",e,t,n)}onCallAddPendleFee(e,t,n){return super.onEthTrace("0xab9c7997",e,t,n)}onCallAutoBribeFee(e,t,n){return super.onEthTrace("0x415bbe8a",e,t,n)}onCallBatchHarvestMarketRewards(e,t,n){return super.onEthTrace("0xce7319ae",e,t,n)}onCallBootstrapVePendle(e,t,n){return super.onEthTrace("0x0edd75d2",e,t,n)}onCallBribeManager(e,t,n){return super.onEthTrace("0xe2a578cd",e,t,n)}onCallBribeManagerEOA(e,t,n){return super.onEthTrace("0xe437ad03",e,t,n)}onCallConvertPendle(e,t,n){return super.onEthTrace("0xa8f50a44",e,t,n)}onCallDepositMarket(e,t,n){return super.onEthTrace("0x323b309a",e,t,n)}onCallDistributorETH(e,t,n){return super.onEthTrace("0xb4606bab",e,t,n)}onCallFeeCollector(e,t,n){return super.onEthTrace("0xc415b95c",e,t,n)}onCallGetPoolLength(e,t,n){return super.onEthTrace("0xb3944d52",e,t,n)}onCallHarvestCallerPendleFee(e,t,n){return super.onEthTrace("0xe7b9b93d",e,t,n)}onCallHarvestMarketReward(e,t,n){return super.onEthTrace("0x3f3e2b11",e,t,n)}onCallHarvestTimeGap(e,t,n){return super.onEthTrace("0xefbd9060",e,t,n)}onCallHarvestVePendleReward(e,t,n){return super.onEthTrace("0xfa8da921",e,t,n)}onCallIncreaseLockTime(e,t,n){return super.onEthTrace("0x79af55e4",e,t,n)}onCallLockPeriod(e,t,n){return super.onEthTrace("0x3fd8b02f",e,t,n)}onCallMPendleConvertor(e,t,n){return super.onEthTrace("0xad8fab32",e,t,n)}onCallMPendleOFT(e,t,n){return super.onEthTrace("0x612be6a2",e,t,n)}onCallMarketDepositHelper(e,t,n){return super.onEthTrace("0x4a9d7127",e,t,n)}onCallMasterPenpie(e,t,n){return super.onEthTrace("0x3c41d5ab",e,t,n)}onCallOwner(e,t,n){return super.onEthTrace("0x8da5cb5b",e,t,n)}onCallPause(e,t,n){return super.onEthTrace("0x8456cb59",e,t,n)}onCallPaused(e,t,n){return super.onEthTrace("0x5c975abb",e,t,n)}onCallPendleFeeInfos(e,t,n){return super.onEthTrace("0x7eaa176c",e,t,n)}onCallPendleRouter(e,t,n){return super.onEthTrace("0x206aeab3",e,t,n)}onCallPendleVote(e,t,n){return super.onEthTrace("0xbe18a63e",e,t,n)}onCallPoolTokenList(e,t,n){return super.onEthTrace("0x0fe79ee4",e,t,n)}onCallPools(e,t,n){return super.onEthTrace("0xa4063dbc",e,t,n)}onCallProtocolFee(e,t,n){return super.onEthTrace("0xb0e21e8a",e,t,n)}onCallRegisterPool(e,t,n){return super.onEthTrace("0x1fed6955",e,t,n)}onCallRemovePendleFee(e,t,n){return super.onEthTrace("0x719e5ff1",e,t,n)}onCallRenounceOwnership(e,t,n){return super.onEthTrace("0x715018a6",e,t,n)}onCallSetAutoBribeFee(e,t,n){return super.onEthTrace("0xf9051b72",e,t,n)}onCallSetBribeManager(e,t,n){return super.onEthTrace("0xe6ec638b",e,t,n)}onCallSetETHZapper(e,t,n){return super.onEthTrace("0x8cbfff00",e,t,n)}onCallSetHarvestTimeGap(e,t,n){return super.onEthTrace("0x3043fed0",e,t,n)}onCallSetLockDays(e,t,n){return super.onEthTrace("0xae12213b",e,t,n)}onCallSetMPendleConvertor(e,t,n){return super.onEthTrace("0xa83b67d1",e,t,n)}onCallSetMPendleOFT(e,t,n){return super.onEthTrace("0x24e7a688",e,t,n)}onCallSetMarketDepositHelper(e,t,n){return super.onEthTrace("0x910a3824",e,t,n)}onCallSetPendleFee(e,t,n){return super.onEthTrace("0x960a8a61",e,t,n)}onCallSetSmartConvert(e,t,n){return super.onEthTrace("0x62190fde",e,t,n)}onCallSetVote(e,t,n){return super.onEthTrace("0x42f86dd3",e,t,n)}onCallSetVoteManager(e,t,n){return super.onEthTrace("0xb67b6df3",e,t,n)}onCallSetmasterPenpie(e,t,n){return super.onEthTrace("0xb702c60c",e,t,n)}onCallSmartPendleConvert(e,t,n){return super.onEthTrace("0xd7b777a0",e,t,n)}onCallTotalPendleFee(e,t,n){return super.onEthTrace("0xde3fcde9",e,t,n)}onCallTotalUnclaimedETH(e,t,n){return super.onEthTrace("0x63520274",e,t,n)}onCallTransferOwnership(e,t,n){return super.onEthTrace("0xf2fde38b",e,t,n)}onCallUnpause(e,t,n){return super.onEthTrace("0x3f4ba83a",e,t,n)}onCallUpdateMarketRewards(e,t,n){return super.onEthTrace("0x78f18bc8",e,t,n)}onCallUpdatePoolHelper(e,t,n){return super.onEthTrace("0x32e525f5",e,t,n)}onCallVePendle(e,t,n){return super.onEthTrace("0x82dabb21",e,t,n)}onCallVePendleHarvestCallerFee(e,t,n){return super.onEthTrace("0x167948e0",e,t,n)}onCallVote(e,t,n){return super.onEthTrace("0x698766ee",e,t,n)}onCallVoteManager(e,t,n){return super.onEthTrace("0x42c1e587",e,t,n)}onCallWithdrawMarket(e,t,n){return super.onEthTrace("0x31f61254",e,t,n)}static filters={AddPendleFee(e,t,n,a){return c.filters["AddPendleFee(address,uint256,bool,bool)"](e,t,n,a)},BribeManagerEOAUpdated(e,t){return c.filters["BribeManagerEOAUpdated(address,address)"](e,t)},BribeManagerUpdated(e,t){return c.filters["BribeManagerUpdated(address,address)"](e,t)},Initialized(e){return c.filters["Initialized(uint8)"](e)},NewMarketDeposit(e,t,n,a,r){return c.filters["NewMarketDeposit(address,address,uint256,address,uint256)"](e,t,n,a,r)},NewMarketWithdraw(e,t,n,a,r){return c.filters["NewMarketWithdraw(address,address,uint256,address,uint256)"](e,t,n,a,r)},OwnershipTransferred(e,t){return c.filters["OwnershipTransferred(address,address)"](e,t)},Paused(e){return c.filters["Paused(address)"](e)},PendleLocked(e,t,n){return c.filters["PendleLocked(uint256,uint256,uint256)"](e,t,n)},PoolAdded(e,t,n){return c.filters["PoolAdded(address,address,address)"](e,t,n)},PoolHelperUpdated(e){return c.filters["PoolHelperUpdated(address)"](e)},PoolRemoved(e,t){return c.filters["PoolRemoved(uint256,address)"](e,t)},RemovePendleFee(e,t,n,a){return c.filters["RemovePendleFee(uint256,address,bool,bool)"](e,t,n,a)},RewardPaidTo(e,t,n,a){return c.filters["RewardPaidTo(address,address,address,uint256)"](e,t,n,a)},SetLockDays(e,t){return c.filters["SetLockDays(uint256,uint256)"](e,t)},SetMPendleConvertor(e,t){return c.filters["SetMPendleConvertor(address,address)"](e,t)},SetPendleFee(e,t){return c.filters["SetPendleFee(address,uint256)"](e,t)},SmartPendleConvertUpdated(e,t){return c.filters["SmartPendleConvertUpdated(address,address)"](e,t)},Unpaused(e){return c.filters["Unpaused(address)"](e)},VePendleHarvested(e,t,n,a,r,i){return c.filters["VePendleHarvested(uint256,address[],uint256[],uint256,uint256,uint256)"](e,t,n,a,r,i)},VoteManagerUpdated(e,t){return c.filters["VoteManagerUpdated(address,address)"](e,t)},VoteSet(e,t,n,a,r){return c.filters["VoteSet(address,uint256,uint256,uint256,address)"](e,t,n,a,r)}};CreateBoundContractView(){let e=se(this.config.network,this.config.address);return new q(this.config.address,e)}static bind(e){e.name||(e.name="PenpieStaking");let t=kt(e);return t||(t=new l(e),vt(e,t)),t}};function se(l,e){let t=Pt("PenpieStaking",e,l);if(!t){let n=N.connect(e,ft(l));t=new ie(n),bt("PenpieStaking",e,l,t)}return t}o(se,"getPenpieStakingContract");function ge(l,e){let t=se(l.getChainId(),e),n=new q(e,t);return n.context=l,n.callStatic&&(n.callStatic.context=l),n}o(ge,"getPenpieStakingContractOnContext");import{EthChainId as Vi}from"@sentio/sdk/eth";import{addContractByABI as Ft,getContractByABI as It,addProcessor as $i,getProcessor as Xi,getProvider as Mt,transformEtherError as h,BaseProcessor as es,BaseProcessorTemplate as ts,BoundContractView as Rt,ContractView as Dt,DummyProvider as Bt,encodeCallData as x}from"@sentio/sdk/eth";var ps=Y.connect("0x0",Bt),le=class extends Dt{static{o(this,"StandardizedYieldContractView")}constructor(e){super(e),this.callStatic.contract=e}async accruedRewards(e,t,n,a){try{return await this.contract.getFunction("accruedRewards(address)")(e,t||{})}catch(r){let i=new Error().stack;throw h(r,void 0,i)}}async allowance(e,t,n,a,r){try{return await this.contract.getFunction("allowance(address,address)")(e,t,n||{})}catch(i){let s=new Error().stack;throw h(i,void 0,s)}}async assetInfo(e,t,n){try{return await this.contract.getFunction("assetInfo()")(e||{})}catch(a){let r=new Error().stack;throw h(a,void 0,r)}}async balanceOf(e,t,n,a){try{return await this.contract.getFunction("balanceOf(address)")(e,t||{})}catch(r){let i=new Error().stack;throw h(r,void 0,i)}}async decimals(e,t,n){try{return await this.contract.getFunction("decimals()")(e||{})}catch(a){let r=new Error().stack;throw h(a,void 0,r)}}async exchangeRate(e,t,n){try{return await this.contract.getFunction("exchangeRate()")(e||{})}catch(a){let r=new Error().stack;throw h(a,void 0,r)}}async getRewardTokens(e,t,n){try{return await this.contract.getFunction("getRewardTokens()")(e||{})}catch(a){let r=new Error().stack;throw h(a,void 0,r)}}async getTokensIn(e,t,n){try{return await this.contract.getFunction("getTokensIn()")(e||{})}catch(a){let r=new Error().stack;throw h(a,void 0,r)}}async getTokensOut(e,t,n){try{return await this.contract.getFunction("getTokensOut()")(e||{})}catch(a){let r=new Error().stack;throw h(a,void 0,r)}}async isValidTokenIn(e,t,n,a){try{return await this.contract.getFunction("isValidTokenIn(address)")(e,t||{})}catch(r){let i=new Error().stack;throw h(r,void 0,i)}}async isValidTokenOut(e,t,n,a){try{return await this.contract.getFunction("isValidTokenOut(address)")(e,t||{})}catch(r){let i=new Error().stack;throw h(r,void 0,i)}}async name(e,t,n){try{return await this.contract.getFunction("name()")(e||{})}catch(a){let r=new Error().stack;throw h(a,void 0,r)}}async previewDeposit(e,t,n,a,r){try{return await this.contract.getFunction("previewDeposit(address,uint256)")(e,t,n||{})}catch(i){let s=new Error().stack;throw h(i,void 0,s)}}async previewRedeem(e,t,n,a,r){try{return await this.contract.getFunction("previewRedeem(address,uint256)")(e,t,n||{})}catch(i){let s=new Error().stack;throw h(i,void 0,s)}}async rewardIndexesStored(e,t,n){try{return await this.contract.getFunction("rewardIndexesStored()")(e||{})}catch(a){let r=new Error().stack;throw h(a,void 0,r)}}async symbol(e,t,n){try{return await this.contract.getFunction("symbol()")(e||{})}catch(a){let r=new Error().stack;throw h(a,void 0,r)}}async totalSupply(e,t,n){try{return await this.contract.getFunction("totalSupply()")(e||{})}catch(a){let r=new Error().stack;throw h(a,void 0,r)}}async yieldToken(e,t,n){try{return await this.contract.getFunction("yieldToken()")(e||{})}catch(a){let r=new Error().stack;throw h(a,void 0,r)}}callStatic={contract:this.contract,async approve(e,t,n,a,r){try{return await this.contract.getFunction("approve(address,uint256)").staticCall(e,t,n||{})}catch(i){let s=new Error().stack;throw h(i,void 0,s)}},async claimRewards(e,t,n,a){try{return await this.contract.getFunction("claimRewards(address)").staticCall(e,t||{})}catch(r){let i=new Error().stack;throw h(r,void 0,i)}},async deposit(e,t,n,a,r,i,s){try{return await this.contract.getFunction("deposit(address,address,uint256,uint256)").staticCall(e,t,n,a,r||{})}catch(m){let b=new Error().stack;throw h(m,void 0,b)}},async redeem(e,t,n,a,r,i,s,m){try{return await this.contract.getFunction("redeem(address,uint256,address,uint256,bool)").staticCall(e,t,n,a,r,i||{})}catch(b){let S=new Error().stack;throw h(b,void 0,S)}},async rewardIndexesCurrent(e,t,n){try{return await this.contract.getFunction("rewardIndexesCurrent()").staticCall(e||{})}catch(a){let r=new Error().stack;throw h(a,void 0,r)}},async transfer(e,t,n,a,r){try{return await this.contract.getFunction("transfer(address,uint256)").staticCall(e,t,n||{})}catch(i){let s=new Error().stack;throw h(i,void 0,s)}},async transferFrom(e,t,n,a,r,i){try{return await this.contract.getFunction("transferFrom(address,address,uint256)").staticCall(e,t,n,a||{})}catch(s){let m=new Error().stack;throw h(s,void 0,m)}}};encodeCall={accruedRewards(e,t){return x(t,"accruedRewards","function accruedRewards(address)",[e])},allowance(e,t,n){return x(n,"allowance","function allowance(address,address)",[e,t])},approve(e,t,n){return x(n,"approve","function approve(address,uint256)",[e,t])},assetInfo(e){return x(e,"assetInfo","function assetInfo()",[])},balanceOf(e,t){return x(t,"balanceOf","function balanceOf(address)",[e])},claimRewards(e,t){return x(t,"claimRewards","function claimRewards(address)",[e])},decimals(e){return x(e,"decimals","function decimals()",[])},deposit(e,t,n,a,r){return x(r,"deposit","function deposit(address,address,uint256,uint256)",[e,t,n,a])},exchangeRate(e){return x(e,"exchangeRate","function exchangeRate()",[])},getRewardTokens(e){return x(e,"getRewardTokens","function getRewardTokens()",[])},getTokensIn(e){return x(e,"getTokensIn","function getTokensIn()",[])},getTokensOut(e){return x(e,"getTokensOut","function getTokensOut()",[])},isValidTokenIn(e,t){return x(t,"isValidTokenIn","function isValidTokenIn(address)",[e])},isValidTokenOut(e,t){return x(t,"isValidTokenOut","function isValidTokenOut(address)",[e])},name(e){return x(e,"name","function name()",[])},previewDeposit(e,t,n){return x(n,"previewDeposit","function previewDeposit(address,uint256)",[e,t])},previewRedeem(e,t,n){return x(n,"previewRedeem","function previewRedeem(address,uint256)",[e,t])},redeem(e,t,n,a,r,i){return x(i,"redeem","function redeem(address,uint256,address,uint256,bool)",[e,t,n,a,r])},rewardIndexesCurrent(e){return x(e,"rewardIndexesCurrent","function rewardIndexesCurrent()",[])},rewardIndexesStored(e){return x(e,"rewardIndexesStored","function rewardIndexesStored()",[])},symbol(e){return x(e,"symbol","function symbol()",[])},totalSupply(e){return x(e,"totalSupply","function totalSupply()",[])},transfer(e,t,n){return x(n,"transfer","function transfer(address,uint256)",[e,t])},transferFrom(e,t,n,a){return x(a,"transferFrom","function transferFrom(address,address,uint256)",[e,t,n])},yieldToken(e){return x(e,"yieldToken","function yieldToken()",[])}}},oe=class extends Rt{static{o(this,"StandardizedYieldBoundContractView")}async accruedRewards(e,t){return await this.view.accruedRewards(e,{blockTag:this.context.blockNumber,...t},this.context.preparedData,this.context.getEthCallContext())}async allowance(e,t,n){return await this.view.allowance(e,t,{blockTag:this.context.blockNumber,...n},this.context.preparedData,this.context.getEthCallContext())}async assetInfo(e){return await this.view.assetInfo({blockTag:this.context.blockNumber,...e},this.context.preparedData,this.context.getEthCallContext())}async balanceOf(e,t){return await this.view.balanceOf(e,{blockTag:this.context.blockNumber,...t},this.context.preparedData,this.context.getEthCallContext())}async decimals(e){return await this.view.decimals({blockTag:this.context.blockNumber,...e},this.context.preparedData,this.context.getEthCallContext())}async exchangeRate(e){return await this.view.exchangeRate({blockTag:this.context.blockNumber,...e},this.context.preparedData,this.context.getEthCallContext())}async getRewardTokens(e){return await this.view.getRewardTokens({blockTag:this.context.blockNumber,...e},this.context.preparedData,this.context.getEthCallContext())}async getTokensIn(e){return await this.view.getTokensIn({blockTag:this.context.blockNumber,...e},this.context.preparedData,this.context.getEthCallContext())}async getTokensOut(e){return await this.view.getTokensOut({blockTag:this.context.blockNumber,...e},this.context.preparedData,this.context.getEthCallContext())}async isValidTokenIn(e,t){return await this.view.isValidTokenIn(e,{blockTag:this.context.blockNumber,...t},this.context.preparedData,this.context.getEthCallContext())}async isValidTokenOut(e,t){return await this.view.isValidTokenOut(e,{blockTag:this.context.blockNumber,...t},this.context.preparedData,this.context.getEthCallContext())}async name(e){return await this.view.name({blockTag:this.context.blockNumber,...e},this.context.preparedData,this.context.getEthCallContext())}async previewDeposit(e,t,n){return await this.view.previewDeposit(e,t,{blockTag:this.context.blockNumber,...n},this.context.preparedData,this.context.getEthCallContext())}async previewRedeem(e,t,n){return await this.view.previewRedeem(e,t,{blockTag:this.context.blockNumber,...n},this.context.preparedData,this.context.getEthCallContext())}async rewardIndexesStored(e){return await this.view.rewardIndexesStored({blockTag:this.context.blockNumber,...e},this.context.preparedData,this.context.getEthCallContext())}async symbol(e){return await this.view.symbol({blockTag:this.context.blockNumber,...e},this.context.preparedData,this.context.getEthCallContext())}async totalSupply(e){return await this.view.totalSupply({blockTag:this.context.blockNumber,...e},this.context.preparedData,this.context.getEthCallContext())}async yieldToken(e){return await this.view.yieldToken({blockTag:this.context.blockNumber,...e},this.context.preparedData,this.context.getEthCallContext())}callStatic={view:this.view,context:this.context,async approve(e,t,n){return await this.view.callStatic.approve(e,t,{blockTag:this.context.blockNumber,...n},this.context.preparedData,this.context.getEthCallContext())},async claimRewards(e,t){return await this.view.callStatic.claimRewards(e,{blockTag:this.context.blockNumber,...t},this.context.preparedData,this.context.getEthCallContext())},async deposit(e,t,n,a,r){return await this.view.callStatic.deposit(e,t,n,a,{blockTag:this.context.blockNumber,...r},this.context.preparedData,this.context.getEthCallContext())},async redeem(e,t,n,a,r,i){return await this.view.callStatic.redeem(e,t,n,a,r,{blockTag:this.context.blockNumber,...i},this.context.preparedData,this.context.getEthCallContext())},async rewardIndexesCurrent(e){return await this.view.callStatic.rewardIndexesCurrent({blockTag:this.context.blockNumber,...e},this.context.preparedData,this.context.getEthCallContext())},async transfer(e,t,n){return await this.view.callStatic.transfer(e,t,{blockTag:this.context.blockNumber,...n},this.context.preparedData,this.context.getEthCallContext())},async transferFrom(e,t,n,a){return await this.view.callStatic.transferFrom(e,t,n,{blockTag:this.context.blockNumber,...a},this.context.preparedData,this.context.getEthCallContext())}};encodeCall={view:this.view,context:this.context,accruedRewards(e,t){return this.view.encodeCall.accruedRewards(e,{chainId:this.context.chainId.toString(),address:this.context.address,blockTag:this.context.getBlockTag(t)})},allowance(e,t,n){return this.view.encodeCall.allowance(e,t,{chainId:this.context.chainId.toString(),address:this.context.address,blockTag:this.context.getBlockTag(n)})},approve(e,t,n){return this.view.encodeCall.approve(e,t,{chainId:this.context.chainId.toString(),address:this.context.address,blockTag:this.context.getBlockTag(n)})},assetInfo(e){return this.view.encodeCall.assetInfo({chainId:this.context.chainId.toString(),address:this.context.address,blockTag:this.context.getBlockTag(e)})},balanceOf(e,t){return this.view.encodeCall.balanceOf(e,{chainId:this.context.chainId.toString(),address:this.context.address,blockTag:this.context.getBlockTag(t)})},claimRewards(e,t){return this.view.encodeCall.claimRewards(e,{chainId:this.context.chainId.toString(),address:this.context.address,blockTag:this.context.getBlockTag(t)})},decimals(e){return this.view.encodeCall.decimals({chainId:this.context.chainId.toString(),address:this.context.address,blockTag:this.context.getBlockTag(e)})},deposit(e,t,n,a,r){return this.view.encodeCall.deposit(e,t,n,a,{chainId:this.context.chainId.toString(),address:this.context.address,blockTag:this.context.getBlockTag(r)})},exchangeRate(e){return this.view.encodeCall.exchangeRate({chainId:this.context.chainId.toString(),address:this.context.address,blockTag:this.context.getBlockTag(e)})},getRewardTokens(e){return this.view.encodeCall.getRewardTokens({chainId:this.context.chainId.toString(),address:this.context.address,blockTag:this.context.getBlockTag(e)})},getTokensIn(e){return this.view.encodeCall.getTokensIn({chainId:this.context.chainId.toString(),address:this.context.address,blockTag:this.context.getBlockTag(e)})},getTokensOut(e){return this.view.encodeCall.getTokensOut({chainId:this.context.chainId.toString(),address:this.context.address,blockTag:this.context.getBlockTag(e)})},isValidTokenIn(e,t){return this.view.encodeCall.isValidTokenIn(e,{chainId:this.context.chainId.toString(),address:this.context.address,blockTag:this.context.getBlockTag(t)})},isValidTokenOut(e,t){return this.view.encodeCall.isValidTokenOut(e,{chainId:this.context.chainId.toString(),address:this.context.address,blockTag:this.context.getBlockTag(t)})},name(e){return this.view.encodeCall.name({chainId:this.context.chainId.toString(),address:this.context.address,blockTag:this.context.getBlockTag(e)})},previewDeposit(e,t,n){return this.view.encodeCall.previewDeposit(e,t,{chainId:this.context.chainId.toString(),address:this.context.address,blockTag:this.context.getBlockTag(n)})},previewRedeem(e,t,n){return this.view.encodeCall.previewRedeem(e,t,{chainId:this.context.chainId.toString(),address:this.context.address,blockTag:this.context.getBlockTag(n)})},redeem(e,t,n,a,r,i){return this.view.encodeCall.redeem(e,t,n,a,r,{chainId:this.context.chainId.toString(),address:this.context.address,blockTag:this.context.getBlockTag(i)})},rewardIndexesCurrent(e){return this.view.encodeCall.rewardIndexesCurrent({chainId:this.context.chainId.toString(),address:this.context.address,blockTag:this.context.getBlockTag(e)})},rewardIndexesStored(e){return this.view.encodeCall.rewardIndexesStored({chainId:this.context.chainId.toString(),address:this.context.address,blockTag:this.context.getBlockTag(e)})},symbol(e){return this.view.encodeCall.symbol({chainId:this.context.chainId.toString(),address:this.context.address,blockTag:this.context.getBlockTag(e)})},totalSupply(e){return this.view.encodeCall.totalSupply({chainId:this.context.chainId.toString(),address:this.context.address,blockTag:this.context.getBlockTag(e)})},transfer(e,t,n){return this.view.encodeCall.transfer(e,t,{chainId:this.context.chainId.toString(),address:this.context.address,blockTag:this.context.getBlockTag(n)})},transferFrom(e,t,n,a){return this.view.encodeCall.transferFrom(e,t,n,{chainId:this.context.chainId.toString(),address:this.context.address,blockTag:this.context.getBlockTag(a)})},yieldToken(e){return this.view.encodeCall.yieldToken({chainId:this.context.chainId.toString(),address:this.context.address,blockTag:this.context.getBlockTag(e)})}}};function be(l,e){let t=It("StandardizedYield",e,l);if(!t){let n=Y.connect(e,Mt(l));t=new le(n),Ft("StandardizedYield",e,l,t)}return t}o(be,"getStandardizedYieldContract");function U(l,e){let t=be(l.getChainId(),e),n=new oe(e,t);return n.context=l,n.callStatic&&(n.callStatic.context=l),n}o(U,"getStandardizedYieldContractOnContext");import{EthChainId as ys}from"@sentio/sdk/eth";import{getERC20ContractOnContext as Jt}from"@sentio/sdk/eth/builtin/erc20";import{addContractByABI as _t,getContractByABI as At,addProcessor as ks,getProcessor as fs,getProvider as Lt,transformEtherError as C,BaseProcessor as ws,BaseProcessorTemplate as Ss,BoundContractView as Nt,ContractView as Yt,DummyProvider as jt,encodeCallData as g}from"@sentio/sdk/eth";var _s=A.connect("0x0",jt),pe=class extends Yt{static{o(this,"PendleMarketContractView")}constructor(e){super(e),this.callStatic.contract=e}async _storage(e,t,n){try{return await this.contract.getFunction("_storage()")(e||{})}catch(a){let r=new Error().stack;throw C(a,void 0,r)}}async activeBalance(e,t,n,a){try{return await this.contract.getFunction("activeBalance(address)")(e,t||{})}catch(r){let i=new Error().stack;throw C(r,void 0,i)}}async allowance(e,t,n,a,r){try{return await this.contract.getFunction("allowance(address,address)")(e,t,n||{})}catch(i){let s=new Error().stack;throw C(i,void 0,s)}}async balanceOf(e,t,n,a){try{return await this.contract.getFunction("balanceOf(address)")(e,t||{})}catch(r){let i=new Error().stack;throw C(r,void 0,i)}}async decimals(e,t,n){try{return await this.contract.getFunction("decimals()")(e||{})}catch(a){let r=new Error().stack;throw C(a,void 0,r)}}async expiry(e,t,n){try{return await this.contract.getFunction("expiry()")(e||{})}catch(a){let r=new Error().stack;throw C(a,void 0,r)}}async getRewardTokens(e,t,n){try{return await this.contract.getFunction("getRewardTokens()")(e||{})}catch(a){let r=new Error().stack;throw C(a,void 0,r)}}async isExpired(e,t,n){try{return await this.contract.getFunction("isExpired()")(e||{})}catch(a){let r=new Error().stack;throw C(a,void 0,r)}}async name(e,t,n){try{return await this.contract.getFunction("name()")(e||{})}catch(a){let r=new Error().stack;throw C(a,void 0,r)}}async observations(e,t,n,a){try{return await this.contract.getFunction("observations(uint256)")(e,t||{})}catch(r){let i=new Error().stack;throw C(r,void 0,i)}}async observe(e,t,n,a){try{return await this.contract.getFunction("observe(uint32[])")(e,t||{})}catch(r){let i=new Error().stack;throw C(r,void 0,i)}}async readState(e,t,n,a){try{return await this.contract.getFunction("readState(address)")(e,t||{})}catch(r){let i=new Error().stack;throw C(r,void 0,i)}}async readTokens(e,t,n){try{return await this.contract.getFunction("readTokens()")(e||{})}catch(a){let r=new Error().stack;throw C(a,void 0,r)}}async symbol(e,t,n){try{return await this.contract.getFunction("symbol()")(e||{})}catch(a){let r=new Error().stack;throw C(a,void 0,r)}}async totalActiveSupply(e,t,n){try{return await this.contract.getFunction("totalActiveSupply()")(e||{})}catch(a){let r=new Error().stack;throw C(a,void 0,r)}}async totalSupply(e,t,n){try{return await this.contract.getFunction("totalSupply()")(e||{})}catch(a){let r=new Error().stack;throw C(a,void 0,r)}}callStatic={contract:this.contract,async approve(e,t,n,a,r){try{return await this.contract.getFunction("approve(address,uint256)").staticCall(e,t,n||{})}catch(i){let s=new Error().stack;throw C(i,void 0,s)}},async burn(e,t,n,a,r,i){try{return await this.contract.getFunction("burn(address,address,uint256)").staticCall(e,t,n,a||{})}catch(s){let m=new Error().stack;throw C(s,void 0,m)}},async increaseObservationsCardinalityNext(e,t,n,a){try{return await this.contract.getFunction("increaseObservationsCardinalityNext(uint16)").staticCall(e,t||{})}catch(r){let i=new Error().stack;throw C(r,void 0,i)}},async mint(e,t,n,a,r,i){try{return await this.contract.getFunction("mint(address,uint256,uint256)").staticCall(e,t,n,a||{})}catch(s){let m=new Error().stack;throw C(s,void 0,m)}},async redeemRewards(e,t,n,a){try{return await this.contract.getFunction("redeemRewards(address)").staticCall(e,t||{})}catch(r){let i=new Error().stack;throw C(r,void 0,i)}},async swapExactPtForSy(e,t,n,a,r,i){try{return await this.contract.getFunction("swapExactPtForSy(address,uint256,bytes)").staticCall(e,t,n,a||{})}catch(s){let m=new Error().stack;throw C(s,void 0,m)}},async swapSyForExactPt(e,t,n,a,r,i){try{return await this.contract.getFunction("swapSyForExactPt(address,uint256,bytes)").staticCall(e,t,n,a||{})}catch(s){let m=new Error().stack;throw C(s,void 0,m)}},async transfer(e,t,n,a,r){try{return await this.contract.getFunction("transfer(address,uint256)").staticCall(e,t,n||{})}catch(i){let s=new Error().stack;throw C(i,void 0,s)}},async transferFrom(e,t,n,a,r,i){try{return await this.contract.getFunction("transferFrom(address,address,uint256)").staticCall(e,t,n,a||{})}catch(s){let m=new Error().stack;throw C(s,void 0,m)}}};encodeCall={_storage(e){return g(e,"_storage","function _storage()",[])},activeBalance(e,t){return g(t,"activeBalance","function activeBalance(address)",[e])},allowance(e,t,n){return g(n,"allowance","function allowance(address,address)",[e,t])},approve(e,t,n){return g(n,"approve","function approve(address,uint256)",[e,t])},balanceOf(e,t){return g(t,"balanceOf","function balanceOf(address)",[e])},burn(e,t,n,a){return g(a,"burn","function burn(address,address,uint256)",[e,t,n])},decimals(e){return g(e,"decimals","function decimals()",[])},expiry(e){return g(e,"expiry","function expiry()",[])},getRewardTokens(e){return g(e,"getRewardTokens","function getRewardTokens()",[])},increaseObservationsCardinalityNext(e,t){return g(t,"increaseObservationsCardinalityNext","function increaseObservationsCardinalityNext(uint16)",[e])},isExpired(e){return g(e,"isExpired","function isExpired()",[])},mint(e,t,n,a){return g(a,"mint","function mint(address,uint256,uint256)",[e,t,n])},name(e){return g(e,"name","function name()",[])},observations(e,t){return g(t,"observations","function observations(uint256)",[e])},observe(e,t){return g(t,"observe","function observe(uint32[])",[e])},readState(e,t){return g(t,"readState","function readState(address)",[e])},readTokens(e){return g(e,"readTokens","function readTokens()",[])},redeemRewards(e,t){return g(t,"redeemRewards","function redeemRewards(address)",[e])},swapExactPtForSy(e,t,n,a){return g(a,"swapExactPtForSy","function swapExactPtForSy(address,uint256,bytes)",[e,t,n])},swapSyForExactPt(e,t,n,a){return g(a,"swapSyForExactPt","function swapSyForExactPt(address,uint256,bytes)",[e,t,n])},symbol(e){return g(e,"symbol","function symbol()",[])},totalActiveSupply(e){return g(e,"totalActiveSupply","function totalActiveSupply()",[])},totalSupply(e){return g(e,"totalSupply","function totalSupply()",[])},transfer(e,t,n){return g(n,"transfer","function transfer(address,uint256)",[e,t])},transferFrom(e,t,n,a){return g(a,"transferFrom","function transferFrom(address,address,uint256)",[e,t,n])}}},de=class extends Nt{static{o(this,"PendleMarketBoundContractView")}async _storage(e){return await this.view._storage({blockTag:this.context.blockNumber,...e},this.context.preparedData,this.context.getEthCallContext())}async activeBalance(e,t){return await this.view.activeBalance(e,{blockTag:this.context.blockNumber,...t},this.context.preparedData,this.context.getEthCallContext())}async allowance(e,t,n){return await this.view.allowance(e,t,{blockTag:this.context.blockNumber,...n},this.context.preparedData,this.context.getEthCallContext())}async balanceOf(e,t){return await this.view.balanceOf(e,{blockTag:this.context.blockNumber,...t},this.context.preparedData,this.context.getEthCallContext())}async decimals(e){return await this.view.decimals({blockTag:this.context.blockNumber,...e},this.context.preparedData,this.context.getEthCallContext())}async expiry(e){return await this.view.expiry({blockTag:this.context.blockNumber,...e},this.context.preparedData,this.context.getEthCallContext())}async getRewardTokens(e){return await this.view.getRewardTokens({blockTag:this.context.blockNumber,...e},this.context.preparedData,this.context.getEthCallContext())}async isExpired(e){return await this.view.isExpired({blockTag:this.context.blockNumber,...e},this.context.preparedData,this.context.getEthCallContext())}async name(e){return await this.view.name({blockTag:this.context.blockNumber,...e},this.context.preparedData,this.context.getEthCallContext())}async observations(e,t){return await this.view.observations(e,{blockTag:this.context.blockNumber,...t},this.context.preparedData,this.context.getEthCallContext())}async observe(e,t){return await this.view.observe(e,{blockTag:this.context.blockNumber,...t},this.context.preparedData,this.context.getEthCallContext())}async readState(e,t){return await this.view.readState(e,{blockTag:this.context.blockNumber,...t},this.context.preparedData,this.context.getEthCallContext())}async readTokens(e){return await this.view.readTokens({blockTag:this.context.blockNumber,...e},this.context.preparedData,this.context.getEthCallContext())}async symbol(e){return await this.view.symbol({blockTag:this.context.blockNumber,...e},this.context.preparedData,this.context.getEthCallContext())}async totalActiveSupply(e){return await this.view.totalActiveSupply({blockTag:this.context.blockNumber,...e},this.context.preparedData,this.context.getEthCallContext())}async totalSupply(e){return await this.view.totalSupply({blockTag:this.context.blockNumber,...e},this.context.preparedData,this.context.getEthCallContext())}callStatic={view:this.view,context:this.context,async approve(e,t,n){return await this.view.callStatic.approve(e,t,{blockTag:this.context.blockNumber,...n},this.context.preparedData,this.context.getEthCallContext())},async burn(e,t,n,a){return await this.view.callStatic.burn(e,t,n,{blockTag:this.context.blockNumber,...a},this.context.preparedData,this.context.getEthCallContext())},async increaseObservationsCardinalityNext(e,t){return await this.view.callStatic.increaseObservationsCardinalityNext(e,{blockTag:this.context.blockNumber,...t},this.context.preparedData,this.context.getEthCallContext())},async mint(e,t,n,a){return await this.view.callStatic.mint(e,t,n,{blockTag:this.context.blockNumber,...a},this.context.preparedData,this.context.getEthCallContext())},async redeemRewards(e,t){return await this.view.callStatic.redeemRewards(e,{blockTag:this.context.blockNumber,...t},this.context.preparedData,this.context.getEthCallContext())},async swapExactPtForSy(e,t,n,a){return await this.view.callStatic.swapExactPtForSy(e,t,n,{blockTag:this.context.blockNumber,...a},this.context.preparedData,this.context.getEthCallContext())},async swapSyForExactPt(e,t,n,a){return await this.view.callStatic.swapSyForExactPt(e,t,n,{blockTag:this.context.blockNumber,...a},this.context.preparedData,this.context.getEthCallContext())},async transfer(e,t,n){return await this.view.callStatic.transfer(e,t,{blockTag:this.context.blockNumber,...n},this.context.preparedData,this.context.getEthCallContext())},async transferFrom(e,t,n,a){return await this.view.callStatic.transferFrom(e,t,n,{blockTag:this.context.blockNumber,...a},this.context.preparedData,this.context.getEthCallContext())}};encodeCall={view:this.view,context:this.context,_storage(e){return this.view.encodeCall._storage({chainId:this.context.chainId.toString(),address:this.context.address,blockTag:this.context.getBlockTag(e)})},activeBalance(e,t){return this.view.encodeCall.activeBalance(e,{chainId:this.context.chainId.toString(),address:this.context.address,blockTag:this.context.getBlockTag(t)})},allowance(e,t,n){return this.view.encodeCall.allowance(e,t,{chainId:this.context.chainId.toString(),address:this.context.address,blockTag:this.context.getBlockTag(n)})},approve(e,t,n){return this.view.encodeCall.approve(e,t,{chainId:this.context.chainId.toString(),address:this.context.address,blockTag:this.context.getBlockTag(n)})},balanceOf(e,t){return this.view.encodeCall.balanceOf(e,{chainId:this.context.chainId.toString(),address:this.context.address,blockTag:this.context.getBlockTag(t)})},burn(e,t,n,a){return this.view.encodeCall.burn(e,t,n,{chainId:this.context.chainId.toString(),address:this.context.address,blockTag:this.context.getBlockTag(a)})},decimals(e){return this.view.encodeCall.decimals({chainId:this.context.chainId.toString(),address:this.context.address,blockTag:this.context.getBlockTag(e)})},expiry(e){return this.view.encodeCall.expiry({chainId:this.context.chainId.toString(),address:this.context.address,blockTag:this.context.getBlockTag(e)})},getRewardTokens(e){return this.view.encodeCall.getRewardTokens({chainId:this.context.chainId.toString(),address:this.context.address,blockTag:this.context.getBlockTag(e)})},increaseObservationsCardinalityNext(e,t){return this.view.encodeCall.increaseObservationsCardinalityNext(e,{chainId:this.context.chainId.toString(),address:this.context.address,blockTag:this.context.getBlockTag(t)})},isExpired(e){return this.view.encodeCall.isExpired({chainId:this.context.chainId.toString(),address:this.context.address,blockTag:this.context.getBlockTag(e)})},mint(e,t,n,a){return this.view.encodeCall.mint(e,t,n,{chainId:this.context.chainId.toString(),address:this.context.address,blockTag:this.context.getBlockTag(a)})},name(e){return this.view.encodeCall.name({chainId:this.context.chainId.toString(),address:this.context.address,blockTag:this.context.getBlockTag(e)})},observations(e,t){return this.view.encodeCall.observations(e,{chainId:this.context.chainId.toString(),address:this.context.address,blockTag:this.context.getBlockTag(t)})},observe(e,t){return this.view.encodeCall.observe(e,{chainId:this.context.chainId.toString(),address:this.context.address,blockTag:this.context.getBlockTag(t)})},readState(e,t){return this.view.encodeCall.readState(e,{chainId:this.context.chainId.toString(),address:this.context.address,blockTag:this.context.getBlockTag(t)})},readTokens(e){return this.view.encodeCall.readTokens({chainId:this.context.chainId.toString(),address:this.context.address,blockTag:this.context.getBlockTag(e)})},redeemRewards(e,t){return this.view.encodeCall.redeemRewards(e,{chainId:this.context.chainId.toString(),address:this.context.address,blockTag:this.context.getBlockTag(t)})},swapExactPtForSy(e,t,n,a){return this.view.encodeCall.swapExactPtForSy(e,t,n,{chainId:this.context.chainId.toString(),address:this.context.address,blockTag:this.context.getBlockTag(a)})},swapSyForExactPt(e,t,n,a){return this.view.encodeCall.swapSyForExactPt(e,t,n,{chainId:this.context.chainId.toString(),address:this.context.address,blockTag:this.context.getBlockTag(a)})},symbol(e){return this.view.encodeCall.symbol({chainId:this.context.chainId.toString(),address:this.context.address,blockTag:this.context.getBlockTag(e)})},totalActiveSupply(e){return this.view.encodeCall.totalActiveSupply({chainId:this.context.chainId.toString(),address:this.context.address,blockTag:this.context.getBlockTag(e)})},totalSupply(e){return this.view.encodeCall.totalSupply({chainId:this.context.chainId.toString(),address:this.context.address,blockTag:this.context.getBlockTag(e)})},transfer(e,t,n){return this.view.encodeCall.transfer(e,t,{chainId:this.context.chainId.toString(),address:this.context.address,blockTag:this.context.getBlockTag(n)})},transferFrom(e,t,n,a){return this.view.encodeCall.transferFrom(e,t,n,{chainId:this.context.chainId.toString(),address:this.context.address,blockTag:this.context.getBlockTag(a)})}}};function Pe(l,e){let t=At("PendleMarket",e,l);if(!t){let n=A.connect(e,Lt(l));t=new pe(n),_t("PendleMarket",e,l,t)}return t}o(Pe,"getPendleMarketContract");function D(l,e){let t=Pe(l.getChainId(),e),n=new de(e,t);return n.context=l,n.callStatic&&(n.callStatic.context=l),n}o(D,"getPendleMarketContractOnContext");import{EthChainId as Ys}from"@sentio/sdk/eth";import{Entity as G,Required as T,Column as y,AbstractEntity as z}from"@sentio/sdk/store";import{DatabaseSchema as Vt}from"@sentio/sdk";var P=class extends z{id;chain_id;timestamp;creation_block_number;underlying_token_address;underlying_token_index;underlying_token_symbol;underlying_token_decimals;receipt_token_address;receipt_token_symbol;receipt_token_decimals;pool_address;pool_symbol;constructor(e){super()}};o(P,"Pools"),u([T,y("ID")],P.prototype,"id",2),u([T,y("Int")],P.prototype,"chain_id",2),u([T,y("Int")],P.prototype,"timestamp",2),u([T,y("Int")],P.prototype,"creation_block_number",2),u([T,y("String")],P.prototype,"underlying_token_address",2),u([T,y("Int")],P.prototype,"underlying_token_index",2),u([T,y("String")],P.prototype,"underlying_token_symbol",2),u([T,y("String")],P.prototype,"underlying_token_decimals",2),u([y("String")],P.prototype,"receipt_token_address",2),u([y("String")],P.prototype,"receipt_token_symbol",2),u([y("String")],P.prototype,"receipt_token_decimals",2),u([T,y("String")],P.prototype,"pool_address",2),u([T,y("String")],P.prototype,"pool_symbol",2),P=u([G("Pools")],P);var k=class extends z{id;timestamp;block_date;chain_id;underlying_token_address;underlying_token_index;pool_address;underlying_token_amount;underlying_token_amount_usd;total_fees_usd;constructor(e){super()}};o(k,"PoolSnapshot"),u([T,y("ID")],k.prototype,"id",2),u([T,y("Int")],k.prototype,"timestamp",2),u([T,y("String")],k.prototype,"block_date",2),u([T,y("Int")],k.prototype,"chain_id",2),u([T,y("String")],k.prototype,"underlying_token_address",2),u([T,y("Int")],k.prototype,"underlying_token_index",2),u([T,y("String")],k.prototype,"pool_address",2),u([T,y("Float")],k.prototype,"underlying_token_amount",2),u([y("Float")],k.prototype,"underlying_token_amount_usd",2),u([y("Float")],k.prototype,"total_fees_usd",2),k=u([G("PoolSnapshot")],k);var v=class extends z{id;timestamp;block_date;chain_id;pool_address;user_address;underlying_token_address;underlying_token_index;underlying_token_amount;underlying_token_amount_usd;total_fees_usd;constructor(e){super()}};o(v,"PositionSnapshot"),u([T,y("ID")],v.prototype,"id",2),u([T,y("Int")],v.prototype,"timestamp",2),u([T,y("String")],v.prototype,"block_date",2),u([T,y("Int")],v.prototype,"chain_id",2),u([T,y("String")],v.prototype,"pool_address",2),u([T,y("String")],v.prototype,"user_address",2),u([T,y("String")],v.prototype,"underlying_token_address",2),u([T,y("Int")],v.prototype,"underlying_token_index",2),u([T,y("Float")],v.prototype,"underlying_token_amount",2),u([y("Float")],v.prototype,"underlying_token_amount_usd",2),u([y("Float")],v.prototype,"total_fees_usd",2),v=u([G("PositionSnapshot")],v);var O=class extends z{id;user;reward_pool;constructor(e){super()}};o(O,"RewardPoolUser"),u([T,y("ID")],O.prototype,"id",2),u([T,y("String")],O.prototype,"user",2),u([T,y("String")],O.prototype,"reward_pool",2),O=u([G("RewardPoolUser")],O);var w=class extends z{id;SY;LP;rewardPool;underlying_token_address;underlying_token_decimals;constructor(e){super()}};o(w,"Rewcache"),u([T,y("ID")],w.prototype,"id",2),u([T,y("String")],w.prototype,"SY",2),u([T,y("String")],w.prototype,"LP",2),u([T,y("String")],w.prototype,"rewardPool",2),u([T,y("String")],w.prototype,"underlying_token_address",2),u([T,y("Int")],w.prototype,"underlying_token_decimals",2),w=u([G("Rewcache")],w);var Ht=`type Pools @entity {
    id: ID!
    chain_id: Int!
    timestamp: Int!
    creation_block_number: Int!
    underlying_token_address: String!
    underlying_token_index: Int!
    underlying_token_symbol: String!
    underlying_token_decimals: String!
    receipt_token_address: String
    receipt_token_symbol: String
    receipt_token_decimals: String
    pool_address: String!
    pool_symbol: String!
}

type PoolSnapshot @entity {
    id: ID!
    timestamp: Int!
    block_date: String!
    chain_id: Int!
    underlying_token_address: String!
    underlying_token_index: Int!
    pool_address: String!
    underlying_token_amount: Float!
    underlying_token_amount_usd: Float
    total_fees_usd: Float
}

type PositionSnapshot @entity {
    id: ID!
    timestamp: Int!
    block_date: String!
    chain_id: Int!
    pool_address: String!
    user_address: String!
    underlying_token_address: String!
    underlying_token_index: Int!
    underlying_token_amount: Float!

    underlying_token_amount_usd: Float
    total_fees_usd: Float
}

type RewardPoolUser @entity {
    id: ID!
    user: String!
    reward_pool: String!
}

type Rewcache @entity {
    id: ID!
    SY: String!
    LP: String!
    rewardPool: String!

    underlying_token_address: String!
    underlying_token_decimals: Int!
}`;Vt.register({source:Ht,entities:{Pools:P,PoolSnapshot:k,PositionSnapshot:v,RewardPoolUser:O,Rewcache:w}});var ve="0xca11bde05977b3631167028862be2a173976ca11";var tl=BigInt(10)**18n,V=146,B="0xF9619e8B01Acc23FAc7Ee0AEb1258433b85814ec",ke=28427475,ue=24*60;function fe(l,e,t){l[e]?l[e]+=t:l[e]=t}o(fe,"add");import{addContractByABI as Ut,getContractByABI as Gt,addProcessor as sl,getProcessor as ll,getProvider as zt,transformEtherError as I,BaseProcessor as pl,BaseProcessorTemplate as dl,BoundContractView as qt,ContractView as Wt,DummyProvider as Zt,encodeCallData as M}from"@sentio/sdk/eth";var Cl=_.connect("0x0",Zt),ce=class extends Wt{static{o(this,"Multicall2ContractView")}constructor(e){super(e),this.callStatic.contract=e}async getBlockHash(e,t,n,a){try{return await this.contract.getFunction("getBlockHash(uint256)")(e,t||{})}catch(r){let i=new Error().stack;throw I(r,void 0,i)}}async getBlockNumber(e,t,n){try{return await this.contract.getFunction("getBlockNumber()")(e||{})}catch(a){let r=new Error().stack;throw I(a,void 0,r)}}async getCurrentBlockCoinbase(e,t,n){try{return await this.contract.getFunction("getCurrentBlockCoinbase()")(e||{})}catch(a){let r=new Error().stack;throw I(a,void 0,r)}}async getCurrentBlockDifficulty(e,t,n){try{return await this.contract.getFunction("getCurrentBlockDifficulty()")(e||{})}catch(a){let r=new Error().stack;throw I(a,void 0,r)}}async getCurrentBlockGasLimit(e,t,n){try{return await this.contract.getFunction("getCurrentBlockGasLimit()")(e||{})}catch(a){let r=new Error().stack;throw I(a,void 0,r)}}async getCurrentBlockTimestamp(e,t,n){try{return await this.contract.getFunction("getCurrentBlockTimestamp()")(e||{})}catch(a){let r=new Error().stack;throw I(a,void 0,r)}}async getEthBalance(e,t,n,a){try{return await this.contract.getFunction("getEthBalance(address)")(e,t||{})}catch(r){let i=new Error().stack;throw I(r,void 0,i)}}async getL1BlockNumber(e,t,n){try{return await this.contract.getFunction("getL1BlockNumber()")(e||{})}catch(a){let r=new Error().stack;throw I(a,void 0,r)}}async getLastBlockHash(e,t,n){try{return await this.contract.getFunction("getLastBlockHash()")(e||{})}catch(a){let r=new Error().stack;throw I(a,void 0,r)}}callStatic={contract:this.contract,async aggregate(e,t,n,a){try{return await this.contract.getFunction("aggregate((address,bytes)[])").staticCall(e,t||{})}catch(r){let i=new Error().stack;throw I(r,void 0,i)}},async blockAndAggregate(e,t,n,a){try{return await this.contract.getFunction("blockAndAggregate((address,bytes)[])").staticCall(e,t||{})}catch(r){let i=new Error().stack;throw I(r,void 0,i)}},async tryAggregate(e,t,n,a,r){try{return await this.contract.getFunction("tryAggregate(bool,(address,bytes)[])").staticCall(e,t,n||{})}catch(i){let s=new Error().stack;throw I(i,void 0,s)}},async tryBlockAndAggregate(e,t,n,a,r){try{return await this.contract.getFunction("tryBlockAndAggregate(bool,(address,bytes)[])").staticCall(e,t,n||{})}catch(i){let s=new Error().stack;throw I(i,void 0,s)}}};encodeCall={aggregate(e,t){return M(t,"aggregate","function aggregate((address,bytes)[])",[e])},blockAndAggregate(e,t){return M(t,"blockAndAggregate","function blockAndAggregate((address,bytes)[])",[e])},getBlockHash(e,t){return M(t,"getBlockHash","function getBlockHash(uint256)",[e])},getBlockNumber(e){return M(e,"getBlockNumber","function getBlockNumber()",[])},getCurrentBlockCoinbase(e){return M(e,"getCurrentBlockCoinbase","function getCurrentBlockCoinbase()",[])},getCurrentBlockDifficulty(e){return M(e,"getCurrentBlockDifficulty","function getCurrentBlockDifficulty()",[])},getCurrentBlockGasLimit(e){return M(e,"getCurrentBlockGasLimit","function getCurrentBlockGasLimit()",[])},getCurrentBlockTimestamp(e){return M(e,"getCurrentBlockTimestamp","function getCurrentBlockTimestamp()",[])},getEthBalance(e,t){return M(t,"getEthBalance","function getEthBalance(address)",[e])},getL1BlockNumber(e){return M(e,"getL1BlockNumber","function getL1BlockNumber()",[])},getLastBlockHash(e){return M(e,"getLastBlockHash","function getLastBlockHash()",[])},tryAggregate(e,t,n){return M(n,"tryAggregate","function tryAggregate(bool,(address,bytes)[])",[e,t])},tryBlockAndAggregate(e,t,n){return M(n,"tryBlockAndAggregate","function tryBlockAndAggregate(bool,(address,bytes)[])",[e,t])}}},ye=class extends qt{static{o(this,"Multicall2BoundContractView")}async getBlockHash(e,t){return await this.view.getBlockHash(e,{blockTag:this.context.blockNumber,...t},this.context.preparedData,this.context.getEthCallContext())}async getBlockNumber(e){return await this.view.getBlockNumber({blockTag:this.context.blockNumber,...e},this.context.preparedData,this.context.getEthCallContext())}async getCurrentBlockCoinbase(e){return await this.view.getCurrentBlockCoinbase({blockTag:this.context.blockNumber,...e},this.context.preparedData,this.context.getEthCallContext())}async getCurrentBlockDifficulty(e){return await this.view.getCurrentBlockDifficulty({blockTag:this.context.blockNumber,...e},this.context.preparedData,this.context.getEthCallContext())}async getCurrentBlockGasLimit(e){return await this.view.getCurrentBlockGasLimit({blockTag:this.context.blockNumber,...e},this.context.preparedData,this.context.getEthCallContext())}async getCurrentBlockTimestamp(e){return await this.view.getCurrentBlockTimestamp({blockTag:this.context.blockNumber,...e},this.context.preparedData,this.context.getEthCallContext())}async getEthBalance(e,t){return await this.view.getEthBalance(e,{blockTag:this.context.blockNumber,...t},this.context.preparedData,this.context.getEthCallContext())}async getL1BlockNumber(e){return await this.view.getL1BlockNumber({blockTag:this.context.blockNumber,...e},this.context.preparedData,this.context.getEthCallContext())}async getLastBlockHash(e){return await this.view.getLastBlockHash({blockTag:this.context.blockNumber,...e},this.context.preparedData,this.context.getEthCallContext())}callStatic={view:this.view,context:this.context,async aggregate(e,t){return await this.view.callStatic.aggregate(e,{blockTag:this.context.blockNumber,...t},this.context.preparedData,this.context.getEthCallContext())},async blockAndAggregate(e,t){return await this.view.callStatic.blockAndAggregate(e,{blockTag:this.context.blockNumber,...t},this.context.preparedData,this.context.getEthCallContext())},async tryAggregate(e,t,n){return await this.view.callStatic.tryAggregate(e,t,{blockTag:this.context.blockNumber,...n},this.context.preparedData,this.context.getEthCallContext())},async tryBlockAndAggregate(e,t,n){return await this.view.callStatic.tryBlockAndAggregate(e,t,{blockTag:this.context.blockNumber,...n},this.context.preparedData,this.context.getEthCallContext())}};encodeCall={view:this.view,context:this.context,aggregate(e,t){return this.view.encodeCall.aggregate(e,{chainId:this.context.chainId.toString(),address:this.context.address,blockTag:this.context.getBlockTag(t)})},blockAndAggregate(e,t){return this.view.encodeCall.blockAndAggregate(e,{chainId:this.context.chainId.toString(),address:this.context.address,blockTag:this.context.getBlockTag(t)})},getBlockHash(e,t){return this.view.encodeCall.getBlockHash(e,{chainId:this.context.chainId.toString(),address:this.context.address,blockTag:this.context.getBlockTag(t)})},getBlockNumber(e){return this.view.encodeCall.getBlockNumber({chainId:this.context.chainId.toString(),address:this.context.address,blockTag:this.context.getBlockTag(e)})},getCurrentBlockCoinbase(e){return this.view.encodeCall.getCurrentBlockCoinbase({chainId:this.context.chainId.toString(),address:this.context.address,blockTag:this.context.getBlockTag(e)})},getCurrentBlockDifficulty(e){return this.view.encodeCall.getCurrentBlockDifficulty({chainId:this.context.chainId.toString(),address:this.context.address,blockTag:this.context.getBlockTag(e)})},getCurrentBlockGasLimit(e){return this.view.encodeCall.getCurrentBlockGasLimit({chainId:this.context.chainId.toString(),address:this.context.address,blockTag:this.context.getBlockTag(e)})},getCurrentBlockTimestamp(e){return this.view.encodeCall.getCurrentBlockTimestamp({chainId:this.context.chainId.toString(),address:this.context.address,blockTag:this.context.getBlockTag(e)})},getEthBalance(e,t){return this.view.encodeCall.getEthBalance(e,{chainId:this.context.chainId.toString(),address:this.context.address,blockTag:this.context.getBlockTag(t)})},getL1BlockNumber(e){return this.view.encodeCall.getL1BlockNumber({chainId:this.context.chainId.toString(),address:this.context.address,blockTag:this.context.getBlockTag(e)})},getLastBlockHash(e){return this.view.encodeCall.getLastBlockHash({chainId:this.context.chainId.toString(),address:this.context.address,blockTag:this.context.getBlockTag(e)})},tryAggregate(e,t,n){return this.view.encodeCall.tryAggregate(e,t,{chainId:this.context.chainId.toString(),address:this.context.address,blockTag:this.context.getBlockTag(n)})},tryBlockAndAggregate(e,t,n){return this.view.encodeCall.tryBlockAndAggregate(e,t,{chainId:this.context.chainId.toString(),address:this.context.address,blockTag:this.context.getBlockTag(n)})}}};function Qt(l,e){let t=Gt("Multicall2",e,l);if(!t){let n=_.connect(e,zt(l));t=new ce(n),Ut("Multicall2",e,l,t)}return t}o(Qt,"getMulticall2Contract");function Ee(l,e){let t=Qt(l.getChainId(),e),n=new ye(e,t);return n.context=l,n.callStatic&&(n.callStatic.context=l),n}o(Ee,"getMulticall2ContractOnContext");import{getERC20ContractOnContext as $t}from"@sentio/sdk/eth/builtin/erc20";import{addContractByABI as Sl,getContractByABI as Ol,addProcessor as Fl,getProcessor as Il,getProvider as Ml,transformEtherError as Rl,BaseProcessor as Bl,BaseProcessorTemplate as _l,BoundContractView as Al,ContractView as Nl,DummyProvider as Kt,encodeCallData as Gl}from"@sentio/sdk/eth";var ql=j.connect("0x0",Kt);import{EthChainId as $l}from"@sentio/sdk/eth";async function Se(l,e,t){let n=Ee(l,ve),a=$t(l,e),r=[];for(let s=0;s<t.length;s+=1e3){let b=t.slice(s,s+1e3).map(S=>({target:a.address,callData:a.rawContract.interface.encodeFunctionData("balanceOf",[S])}));r.push(n.callStatic.tryAggregate(!0,b))}return(await Promise.all(r)).flat().map(s=>BigInt(s.returnData))}o(Se,"readAllUserERC20Balances");async function Oe(l,e,t){let n=D(l,e.LP),[a,r]=await Promise.all([await n.isExpired(),await n.readState(n.address)]);if(a)return;let i=(await l.store.list(O,[{field:"reward_pool",op:"=",value:e.rewardPool}])).map(F=>F.user),s=await Se(l,e.rewardPool,i),m=await n.totalActiveSupply(),b=await n.activeBalance(B),S=await n.balanceOf(B);if(m!==0n&&S!==0n)for(let F=0;F<i.length;F++){let Q=r.totalSy*b*s[F]/(m*S);fe(t,i[F],Q)}}o(Oe,"addLPPositionSnapshot");import{getERC20ContractOnContext as me}from"@sentio/sdk/eth/builtin/erc20";function Z(l){let e=Math.floor(l.timestamp.getTime()/1e3),t=`${l.timestamp.getFullYear()}-${l.timestamp.getMonth()+1}-${l.timestamp.getDate()}`;return{d:e,blockDate:t}}o(Z,"getDateInfo");async function Fe(l,e){let{d:t,blockDate:n}=Z(l),a=U(l,e.SY),r=`${a.address.toLowerCase()}-${t}`;if(await l.store.get(k,r))return;let i=me(l,e.underlying_token_address),s=e.underlying_token_decimals,m=D(l,e.LP),b=(await m.activeBalance(B)).scaleDown(s),S=(await m.totalActiveSupply()).scaleDown(s),F=(await a.totalSupply()).scaleDown(s),Q=b.dividedBy(S),Me=F.multipliedBy(Q),Re=new k({id:r,timestamp:t,block_date:n,chain_id:V,underlying_token_address:i.address,underlying_token_index:0,pool_address:e.rewardPool,underlying_token_amount:Me.toNumber()});await l.store.upsert(Re)}o(Fe,"createPoolSnapshotIfNotExist");async function Ie(l,e,t,n,a){if(e=e.toLowerCase(),await l.store.get(P,e))return;let r=U(l,e),i=me(l,await r.yieldToken()),s=me(l,n),m=D(l,a),b=new P({id:e,chain_id:V,timestamp:Math.floor(l.timestamp.getTime()/1e3),creation_block_number:l.blockNumber,underlying_token_address:i.address,underlying_token_index:0,underlying_token_symbol:await i.symbol(),underlying_token_decimals:(await i.decimals()).toString(),receipt_token_address:n,receipt_token_symbol:await s.symbol(),receipt_token_decimals:(await s.decimals()).toString(),pool_address:n.toLowerCase(),pool_symbol:"**"});await l.store.upsert(b)}o(Ie,"createPoolIfNotExist");W.bind({address:B,network:Xt.SONIC_MAINNET,startBlock:ke}).onEventPoolAdded(async(l,e)=>{let t=ge(e,B),n=l.args._market,a=l.args._rewarder,r=l.args._receiptToken,s=await D(e,n).readTokens();await Ie(e,s._SY,a,r,n),await nn(e,n,s,a,r),en.bind({address:r,startBlock:l.blockNumber},e),tn.bind({address:r,startBlock:l.blockNumber},e)});var en=new H().onEventTransfer(async(l,e)=>{let t=`${l.address.toLowerCase()}-${l.args.to.toLowerCase()}`;if(!await e.store.get(O,t)){let a=new O({id:t,user:l.args.to.toLowerCase(),reward_pool:l.address.toLowerCase()});await e.store.upsert(a)}e.eventLogger.emit("Events",{chain_id:V,user_address:l.args.to.toLowerCase(),pool_address:l.address.toLowerCase(),amount:l.args.value,amount_usd:null,event_type:"Staked"})}),tn=new H().onTimeInterval(async(l,e)=>{let t=await e.store.get(w,e.address.toLowerCase());if(t||(console.log("First attempt failed, trying without toLowerCase"),t=await e.store.get(w,e.address)),t||(console.log("Second attempt failed, trying with original case"),t=await e.store.get(w,e.address.toUpperCase())),!t){console.log("All attempts failed, skipping interval");return}await Fe(e,t);let n={};await Oe(e,t,n);let a=Object.keys(n);await Promise.all(a.map(async r=>{let{d:i,blockDate:s}=Z(e),m=`${t.rewardPool}-${r}-${i}`,b=new v({id:m,timestamp:i,block_date:s,chain_id:V,pool_address:t.rewardPool,user_address:r,underlying_token_address:t.underlying_token_address,underlying_token_index:0,underlying_token_amount:n[r].scaleDown(t.underlying_token_decimals).toNumber()});await e.store.upsert(b)}))},ue,ue);async function nn(l,e,t,n,a){console.log("tokens",t);let r=U(l,t._SY),i=Jt(l,await r.yieldToken()),s=await i.decimals();await l.store.upsert(new w({id:a.toLowerCase(),SY:r.address.toLowerCase(),LP:e.toLowerCase(),rewardPool:a.toLowerCase(),underlying_token_address:i.address.toLowerCase(),underlying_token_decimals:Number(s.toString())}))}o(nn,"createRewcache");
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vc3JjL3Byb2Nlc3Nvci50cyIsICIuLi9zcmMvdHlwZXMvZXRoL2ludGVybmFsL3BlbnBpZXJlY2VpcHR0b2tlbi1wcm9jZXNzb3IudHMiLCAiLi4vc3JjL3R5cGVzL2V0aC9pbnRlcm5hbC9mYWN0b3JpZXMvRVFCQmFzZVJld2FyZF9fZmFjdG9yeS50cyIsICIuLi9zcmMvdHlwZXMvZXRoL2ludGVybmFsL2ZhY3Rvcmllcy9FUUJCYXNlUmV3YXJkVjJfX2ZhY3RvcnkudHMiLCAiLi4vc3JjL3R5cGVzL2V0aC9pbnRlcm5hbC9mYWN0b3JpZXMvRVFCQm9vc3Rlcl9fZmFjdG9yeS50cyIsICIuLi9zcmMvdHlwZXMvZXRoL2ludGVybmFsL2ZhY3Rvcmllcy9JUFByaWNlRmVlZF9fZmFjdG9yeS50cyIsICIuLi9zcmMvdHlwZXMvZXRoL2ludGVybmFsL2ZhY3Rvcmllcy9JbXBsaWNpdFN3YXBmZWVDb250cmFjdF9fZmFjdG9yeS50cyIsICIuLi9zcmMvdHlwZXMvZXRoL2ludGVybmFsL2ZhY3Rvcmllcy9MaW1pdFJvdXRlcl9fZmFjdG9yeS50cyIsICIuLi9zcmMvdHlwZXMvZXRoL2ludGVybmFsL2ZhY3Rvcmllcy9NdWx0aWNhbGwyX19mYWN0b3J5LnRzIiwgIi4uL3NyYy90eXBlcy9ldGgvaW50ZXJuYWwvZmFjdG9yaWVzL1BlbmRsZUZlZURpc3RyaWJ1dG9yVjFfX2ZhY3RvcnkudHMiLCAiLi4vc3JjL3R5cGVzL2V0aC9pbnRlcm5hbC9mYWN0b3JpZXMvUGVuZGxlRmVlRGlzdHJpYnV0b3JWMl9fZmFjdG9yeS50cyIsICIuLi9zcmMvdHlwZXMvZXRoL2ludGVybmFsL2ZhY3Rvcmllcy9QZW5kbGVHYXVnZUNvbnRyb2xsZXJfX2ZhY3RvcnkudHMiLCAiLi4vc3JjL3R5cGVzL2V0aC9pbnRlcm5hbC9mYWN0b3JpZXMvUGVuZGxlTWFya2V0X19mYWN0b3J5LnRzIiwgIi4uL3NyYy90eXBlcy9ldGgvaW50ZXJuYWwvZmFjdG9yaWVzL1BlbmRsZU1hcmtldEZhY3RvcnlfX2ZhY3RvcnkudHMiLCAiLi4vc3JjL3R5cGVzL2V0aC9pbnRlcm5hbC9mYWN0b3JpZXMvUGVuZGxlTWFya2V0RmFjdG9yeVYzX19mYWN0b3J5LnRzIiwgIi4uL3NyYy90eXBlcy9ldGgvaW50ZXJuYWwvZmFjdG9yaWVzL1BlbmRsZVJvdXRlcl9fZmFjdG9yeS50cyIsICIuLi9zcmMvdHlwZXMvZXRoL2ludGVybmFsL2ZhY3Rvcmllcy9QZW5kbGVSb3V0ZXJTdGF0aWNfX2ZhY3RvcnkudHMiLCAiLi4vc3JjL3R5cGVzL2V0aC9pbnRlcm5hbC9mYWN0b3JpZXMvUGVuZGxlUm91dGVyVjNfX2ZhY3RvcnkudHMiLCAiLi4vc3JjL3R5cGVzL2V0aC9pbnRlcm5hbC9mYWN0b3JpZXMvUGVuZGxlU3dhcF9fZmFjdG9yeS50cyIsICIuLi9zcmMvdHlwZXMvZXRoL2ludGVybmFsL2ZhY3Rvcmllcy9QZW5kbGVWZVRva2VuX19mYWN0b3J5LnRzIiwgIi4uL3NyYy90eXBlcy9ldGgvaW50ZXJuYWwvZmFjdG9yaWVzL1BlbmRsZVZvdGluZ0NvbnRyb2xsZXJfX2ZhY3RvcnkudHMiLCAiLi4vc3JjL3R5cGVzL2V0aC9pbnRlcm5hbC9mYWN0b3JpZXMvUGVuZGxlVm90aW5nRXNjcm93X19mYWN0b3J5LnRzIiwgIi4uL3NyYy90eXBlcy9ldGgvaW50ZXJuYWwvZmFjdG9yaWVzL1BlbmRsZVlpZWxkQ29udHJhY3RGYWN0b3J5X19mYWN0b3J5LnRzIiwgIi4uL3NyYy90eXBlcy9ldGgvaW50ZXJuYWwvZmFjdG9yaWVzL1BlbmRsZVlpZWxkVG9rZW5fX2ZhY3RvcnkudHMiLCAiLi4vc3JjL3R5cGVzL2V0aC9pbnRlcm5hbC9mYWN0b3JpZXMvUGVucGllUmVjZWlwdFRva2VuX19mYWN0b3J5LnRzIiwgIi4uL3NyYy90eXBlcy9ldGgvaW50ZXJuYWwvZmFjdG9yaWVzL1BlbnBpZVN0YWtpbmdfX2ZhY3RvcnkudHMiLCAiLi4vc3JjL3R5cGVzL2V0aC9pbnRlcm5hbC9mYWN0b3JpZXMvU3RhbmRhcmRpemVkWWllbGRfX2ZhY3RvcnkudHMiLCAiLi4vc3JjL3R5cGVzL2V0aC9pbnRlcm5hbC9wZW5waWVyZWNlaXB0dG9rZW4tdGVzdC11dGlscy50cyIsICIuLi9zcmMvdHlwZXMvZXRoL2ludGVybmFsL3BlbnBpZXN0YWtpbmctcHJvY2Vzc29yLnRzIiwgIi4uL3NyYy90eXBlcy9ldGgvaW50ZXJuYWwvcGVucGllc3Rha2luZy10ZXN0LXV0aWxzLnRzIiwgIi4uL3NyYy90eXBlcy9ldGgvaW50ZXJuYWwvc3RhbmRhcmRpemVkeWllbGQtcHJvY2Vzc29yLnRzIiwgIi4uL3NyYy90eXBlcy9ldGgvaW50ZXJuYWwvc3RhbmRhcmRpemVkeWllbGQtdGVzdC11dGlscy50cyIsICIuLi9zcmMvdHlwZXMvZXRoL2ludGVybmFsL3BlbmRsZW1hcmtldC1wcm9jZXNzb3IudHMiLCAiLi4vc3JjL3R5cGVzL2V0aC9pbnRlcm5hbC9wZW5kbGVtYXJrZXQtdGVzdC11dGlscy50cyIsICIuLi9zcmMvc2NoZW1hL3NjaGVtYS50cyIsICIuLi9zcmMvY29uc3RzLnRzIiwgIi4uL3NyYy9wb3NpdGlvbi1yYXcudHMiLCAiLi4vc3JjL3R5cGVzL2V0aC9pbnRlcm5hbC9tdWx0aWNhbGwyLXByb2Nlc3Nvci50cyIsICIuLi9zcmMvbXVsdGljYWxsLnRzIiwgIi4uL3NyYy90eXBlcy9ldGgvaW50ZXJuYWwvcGVuZGxleWllbGR0b2tlbi1wcm9jZXNzb3IudHMiLCAiLi4vc3JjL3R5cGVzL2V0aC9pbnRlcm5hbC9wZW5kbGV5aWVsZHRva2VuLXRlc3QtdXRpbHMudHMiLCAiLi4vc3JjL3Bvc2l0aW9uLXNuYXBzaG90LnRzIiwgIi4uL3NyYy9wb29sLnRzIiwgIi4uL3NyYy9oZWxwZXIudHMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbImltcG9ydCB7IEV0aENoYWluSWQsIEV0aENvbnRleHQgfSBmcm9tICdAc2VudGlvL3Nkay9ldGgnO1xuaW1wb3J0IHsgZ2V0UGVuZGxlWWllbGRDb250cmFjdEZhY3RvcnlDb250cmFjdE9uQ29udGV4dCB9IGZyb20gJy4vdHlwZXMvZXRoL3BlbmRsZXlpZWxkY29udHJhY3RmYWN0b3J5LmpzJztcbmltcG9ydCB7IFBlbnBpZVJlY2VpcHRUb2tlblByb2Nlc3NvclRlbXBsYXRlIH0gZnJvbSAnLi90eXBlcy9ldGgvcGVucGllcmVjZWlwdHRva2VuLmpzJztcbmltcG9ydCB7IFBlbnBpZVN0YWtpbmdQcm9jZXNzb3IsIGdldFBlbnBpZVN0YWtpbmdDb250cmFjdE9uQ29udGV4dCB9IGZyb20gJy4vdHlwZXMvZXRoL3BlbnBpZXN0YWtpbmcuanMnO1xuaW1wb3J0IHsgUGVuZGxlTWFya2V0RmFjdG9yeVYzUHJvY2Vzc29yIH0gZnJvbSAnLi90eXBlcy9ldGgvcGVuZGxlbWFya2V0ZmFjdG9yeXYzLmpzJztcbmltcG9ydCB7IGdldFN0YW5kYXJkaXplZFlpZWxkQ29udHJhY3RPbkNvbnRleHQgfSBmcm9tICcuL3R5cGVzL2V0aC9zdGFuZGFyZGl6ZWR5aWVsZC5qcyc7XG5pbXBvcnQgeyBFUkMyMFByb2Nlc3NvclRlbXBsYXRlLCBnZXRFUkMyMENvbnRyYWN0T25Db250ZXh0IH0gZnJvbSAnQHNlbnRpby9zZGsvZXRoL2J1aWx0aW4vZXJjMjAnO1xuaW1wb3J0IHtcbiAgZ2V0UGVuZGxlTWFya2V0Q29udHJhY3RPbkNvbnRleHQsXG4gIFBlbmRsZU1hcmtldEJvdW5kQ29udHJhY3RWaWV3LFxuICBQZW5kbGVNYXJrZXRQcm9jZXNzb3JUZW1wbGF0ZSxcbn0gZnJvbSAnLi90eXBlcy9ldGgvcGVuZGxlbWFya2V0LmpzJztcbmltcG9ydCB7IFJld2FyZFBvb2xVc2VyLCBSZXdjYWNoZSwgUG9zaXRpb25TbmFwc2hvdCB9IGZyb20gJy4vc2NoZW1hL3NjaGVtYS5qcyc7XG5pbXBvcnQge1xuICBDSEFJTl9JRCxcbiAgLy8gRVFCX0JPT1NURVJfQUREUkVTUyxcbiAgLy8gRVFCX0JPT1NURVJfU1RBUlRfQkxPQ0ssXG4gIE9ORV9EQVlfSU5fTUlOVVRFLFxuICBQRU5QSUVfU1RBS0lOR19BRERSRVNTLFxuICBQRU5QSUVfU1RBS0lOR19TVEFSVF9CTE9DS1xufSBmcm9tICcuL2NvbnN0cy5qcyc7XG5pbXBvcnQgeyBVc2VyUG9zaXRpb25SYXcgfSBmcm9tICcuL3Bvc2l0aW9uLXJhdy5qcyc7XG5pbXBvcnQgeyBhZGRMUFBvc2l0aW9uU25hcHNob3QgfSBmcm9tICcuL3Bvc2l0aW9uLXNuYXBzaG90LmpzJztcbmltcG9ydCB7IGNyZWF0ZVBvb2xJZk5vdEV4aXN0LCBjcmVhdGVQb29sU25hcHNob3RJZk5vdEV4aXN0IH0gZnJvbSAnLi9wb29sLmpzJztcbmltcG9ydCB7IGdldERhdGVJbmZvIH0gZnJvbSAnLi9oZWxwZXIuanMnO1xuaW1wb3J0IHsgUGVuZGxlWWllbGRUb2tlblByb2Nlc3NvclRlbXBsYXRlIH0gZnJvbSAnLi90eXBlcy9ldGgvcGVuZGxleWllbGR0b2tlbi5qcyc7XG5cblxuUGVucGllU3Rha2luZ1Byb2Nlc3Nvci5iaW5kKHtcbiAgYWRkcmVzczogUEVOUElFX1NUQUtJTkdfQUREUkVTUyxcbiAgbmV0d29yazogRXRoQ2hhaW5JZC5TT05JQ19NQUlOTkVULFxuICBzdGFydEJsb2NrOiBQRU5QSUVfU1RBS0lOR19TVEFSVF9CTE9DSyxcbn0pLm9uRXZlbnRQb29sQWRkZWQoYXN5bmMgKGV2ZW50LCBjdHgpID0+IHtcbiAgLy9cdThCQjBcdTVGNTVwb29sc1x1NEZFMVx1NjA2RlxuICBjb25zdCBwZW5waWVTdGFraW5nID0gZ2V0UGVucGllU3Rha2luZ0NvbnRyYWN0T25Db250ZXh0KGN0eCwgUEVOUElFX1NUQUtJTkdfQUREUkVTUyk7XG4gIC8vIGNvbnN0IHBvb2xJbmZvID0gYXdhaXQgYm9vc3Rlci5wb29sSW5mbyhldmVudC5hcmdzLl9waWQpO1xuICBjb25zdCBtYXJrZXRBZGRyZXNzID0gZXZlbnQuYXJncy5fbWFya2V0O1xuICBjb25zdCByZXdhcmRlckFkZHJlc3MgPSBldmVudC5hcmdzLl9yZXdhcmRlcjtcbiAgY29uc3QgcmVjZWlwdFRva2VuQWRkcmVzcyA9IGV2ZW50LmFyZ3MuX3JlY2VpcHRUb2tlbjtcbiAgY29uc3QgbWFya2V0ID0gZ2V0UGVuZGxlTWFya2V0Q29udHJhY3RPbkNvbnRleHQoY3R4LCBtYXJrZXRBZGRyZXNzKTtcbiAgY29uc3QgdG9rZW5zID0gYXdhaXQgbWFya2V0LnJlYWRUb2tlbnMoKTtcbiAgYXdhaXQgY3JlYXRlUG9vbElmTm90RXhpc3QoY3R4LCB0b2tlbnMuX1NZLCByZXdhcmRlckFkZHJlc3MsIHJlY2VpcHRUb2tlbkFkZHJlc3MsIG1hcmtldEFkZHJlc3MpO1xuXG4gIC8vXHU1MjFCXHU1RUZBXHU3RjEzXHU1QjU4XG4gIGF3YWl0IGNyZWF0ZVJld2NhY2hlKGN0eCwgbWFya2V0QWRkcmVzcywgdG9rZW5zLCByZXdhcmRlckFkZHJlc3MsIHJlY2VpcHRUb2tlbkFkZHJlc3MpO1xuXG4gIC8vIC8vIFx1OEJCMFx1NUY1NVx1NjI0MFx1NjcwOVx1NzUyOFx1NjIzN1xuICBQZW5waWVSZWNlaXB0VGVtcGxhdGUuYmluZChcbiAgICB7XG4gICAgICBhZGRyZXNzOiByZWNlaXB0VG9rZW5BZGRyZXNzLFxuICAgICAgc3RhcnRCbG9jazogZXZlbnQuYmxvY2tOdW1iZXJcbiAgICB9LFxuICAgIGN0eFxuICApO1xuICAvLyAvL1x1NUZFQlx1NzE2N1x1NzUyOFx1NjIzN1x1NEY1OVx1OTg5RFxuICBQZW5waWVQb29sVGVtcGxhdGUuYmluZChcbiAgICB7XG4gICAgICBhZGRyZXNzOiByZWNlaXB0VG9rZW5BZGRyZXNzLFxuICAgICAgc3RhcnRCbG9jazogZXZlbnQuYmxvY2tOdW1iZXJcbiAgICB9LFxuICAgIGN0eFxuICApO1xufSk7XG5cbmNvbnN0IFBlbnBpZVJlY2VpcHRUZW1wbGF0ZSA9IG5ldyBQZW5waWVSZWNlaXB0VG9rZW5Qcm9jZXNzb3JUZW1wbGF0ZSgpLm9uRXZlbnRUcmFuc2Zlcihhc3luYyAoZXZlbnQsIGN0eCkgPT4ge1xuICBjb25zdCBpZCA9IGAke2V2ZW50LmFkZHJlc3MudG9Mb3dlckNhc2UoKX0tJHtldmVudC5hcmdzLnRvLnRvTG93ZXJDYXNlKCl9YDtcbiAgY29uc3QgZW50aXR5ID0gYXdhaXQgY3R4LnN0b3JlLmdldChSZXdhcmRQb29sVXNlciwgaWQpO1xuICBpZiAoIWVudGl0eSkge1xuICAgIGNvbnN0IG5ld0VudGl0eSA9IG5ldyBSZXdhcmRQb29sVXNlcih7XG4gICAgICBpZDogaWQsXG4gICAgICB1c2VyOiBldmVudC5hcmdzLnRvLnRvTG93ZXJDYXNlKCksXG4gICAgICByZXdhcmRfcG9vbDogZXZlbnQuYWRkcmVzcy50b0xvd2VyQ2FzZSgpLFxuICB9KTtcbiAgICBhd2FpdCBjdHguc3RvcmUudXBzZXJ0KG5ld0VudGl0eSk7XG4gIH1cbiAgLy9cdThCQjBcdTVGNTVcdTY1RTVcdTVGRDdcbiAgY3R4LmV2ZW50TG9nZ2VyLmVtaXQoXCJFdmVudHNcIix7XG4gICAgICBjaGFpbl9pZDogQ0hBSU5fSUQsXG4gICAgICB1c2VyX2FkZHJlc3M6IGV2ZW50LmFyZ3MudG8udG9Mb3dlckNhc2UoKSxcbiAgICAgIHBvb2xfYWRkcmVzczpldmVudC5hZGRyZXNzLnRvTG93ZXJDYXNlKCksXG4gICAgICBhbW91bnQ6IGV2ZW50LmFyZ3MudmFsdWUsXG4gICAgICBhbW91bnRfdXNkOiBudWxsLFxuICAgICAgZXZlbnRfdHlwZTogJ1N0YWtlZCdcbiAgfSlcbn0pO1xuXG5cblxuY29uc3QgUGVucGllUG9vbFRlbXBsYXRlID0gbmV3IFBlbnBpZVJlY2VpcHRUb2tlblByb2Nlc3NvclRlbXBsYXRlKCkub25UaW1lSW50ZXJ2YWwoXG4gIGFzeW5jIChfLCBjdHgpID0+IHtcbiAgICBsZXQgcmV3Y2FjaGUgPSAoYXdhaXQgY3R4LnN0b3JlLmdldChSZXdjYWNoZSwgY3R4LmFkZHJlc3MudG9Mb3dlckNhc2UoKSkpO1xuICAgIGlmICghcmV3Y2FjaGUpIHtcbiAgICAgIGNvbnNvbGUubG9nKFwiRmlyc3QgYXR0ZW1wdCBmYWlsZWQsIHRyeWluZyB3aXRob3V0IHRvTG93ZXJDYXNlXCIpO1xuICAgICAgcmV3Y2FjaGUgPSBhd2FpdCBjdHguc3RvcmUuZ2V0KFJld2NhY2hlLCBjdHguYWRkcmVzcyk7XG4gICAgfVxuICAgIGlmICghcmV3Y2FjaGUpIHtcbiAgICAgIGNvbnNvbGUubG9nKFwiU2Vjb25kIGF0dGVtcHQgZmFpbGVkLCB0cnlpbmcgd2l0aCBvcmlnaW5hbCBjYXNlXCIpO1xuICAgICAgcmV3Y2FjaGUgPSBhd2FpdCBjdHguc3RvcmUuZ2V0KFJld2NhY2hlLCBjdHguYWRkcmVzcy50b1VwcGVyQ2FzZSgpKTtcbiAgICB9XG4gICAgaWYgKCFyZXdjYWNoZSkge1xuICAgICAgY29uc29sZS5sb2coXCJBbGwgYXR0ZW1wdHMgZmFpbGVkLCBza2lwcGluZyBpbnRlcnZhbFwiKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBhd2FpdCBjcmVhdGVQb29sU25hcHNob3RJZk5vdEV4aXN0KGN0eCwgcmV3Y2FjaGUpO1xuXG4gICAgY29uc3QgcmM6IFVzZXJQb3NpdGlvblJhdyA9IHt9O1xuICAgIGF3YWl0IGFkZExQUG9zaXRpb25TbmFwc2hvdChjdHgsIHJld2NhY2hlLCByYyk7XG4gICAgY29uc3QgdXNlcnMgPSBPYmplY3Qua2V5cyhyYyk7XG4gICAgYXdhaXQgUHJvbWlzZS5hbGwoXG4gICAgICB1c2Vycy5tYXAoYXN5bmMgKHVzZXIpID0+IHtcbiAgICAgICAgY29uc3QgeyBkLCBibG9ja0RhdGUgfSA9IGdldERhdGVJbmZvKGN0eCk7XG4gICAgICAgIGNvbnN0IGlkID0gYCR7cmV3Y2FjaGUucmV3YXJkUG9vbH0tJHt1c2VyfS0ke2R9YDtcbiAgICAgICAgY29uc3QgZW50aXR5ID0gbmV3IFBvc2l0aW9uU25hcHNob3Qoe1xuICAgICAgICAgIGlkOiBpZCxcbiAgICAgICAgICB0aW1lc3RhbXA6IGQsXG4gICAgICAgICAgYmxvY2tfZGF0ZTogYmxvY2tEYXRlLFxuICAgICAgICAgIGNoYWluX2lkOiBDSEFJTl9JRCxcbiAgICAgICAgICBwb29sX2FkZHJlc3M6IHJld2NhY2hlLnJld2FyZFBvb2wsXG4gICAgICAgICAgdXNlcl9hZGRyZXNzOiB1c2VyLFxuICAgICAgICAgIHVuZGVybHlpbmdfdG9rZW5fYWRkcmVzczogcmV3Y2FjaGUudW5kZXJseWluZ190b2tlbl9hZGRyZXNzLFxuICAgICAgICAgIHVuZGVybHlpbmdfdG9rZW5faW5kZXg6IDAsXG4gICAgICAgICAgdW5kZXJseWluZ190b2tlbl9hbW91bnQ6IHJjW3VzZXJdXG4gICAgICAgICAgICAuc2NhbGVEb3duKHJld2NhY2hlLnVuZGVybHlpbmdfdG9rZW5fZGVjaW1hbHMpXG4gICAgICAgICAgICAudG9OdW1iZXIoKSxcbiAgICAgICAgfSk7XG4gICAgICAgIGF3YWl0IGN0eC5zdG9yZS51cHNlcnQoZW50aXR5KTtcbiAgICAgIH0pXG4gICAgKTtcbiAgfSxcbiAgT05FX0RBWV9JTl9NSU5VVEUsXG4gIE9ORV9EQVlfSU5fTUlOVVRFXG4pO1xuXG5hc3luYyBmdW5jdGlvbiBjcmVhdGVSZXdjYWNoZShcbiAgY3R4OiBFdGhDb250ZXh0LFxuICBtYXJrZXRBZGRyOiBzdHJpbmcsXG4gIHRva2VuczogQXdhaXRlZDxSZXR1cm5UeXBlPFBlbmRsZU1hcmtldEJvdW5kQ29udHJhY3RWaWV3WydyZWFkVG9rZW5zJ10+PixcbiAgcmV3YXJkUG9vbEFkZHI6IHN0cmluZyxcbiAgcmVjZWlwdFRva2VuQWRkcjogc3RyaW5nXG4pIHtcbiAgY29uc29sZS5sb2coYHRva2Vuc2AsIHRva2Vucyk7XG4gIGNvbnN0IHN5ID0gZ2V0U3RhbmRhcmRpemVkWWllbGRDb250cmFjdE9uQ29udGV4dChjdHgsIHRva2Vucy5fU1kpO1xuICBjb25zdCB5aWVsZFRva2VuID0gZ2V0RVJDMjBDb250cmFjdE9uQ29udGV4dChjdHgsIGF3YWl0IHN5LnlpZWxkVG9rZW4oKSk7XG5cbiAgY29uc3QgZGVjaW1hbHMgPSBhd2FpdCB5aWVsZFRva2VuLmRlY2ltYWxzKCk7XG4gIGF3YWl0IGN0eC5zdG9yZS51cHNlcnQoXG4gICAgbmV3IFJld2NhY2hlKHtcbiAgICAgIGlkOiByZWNlaXB0VG9rZW5BZGRyLnRvTG93ZXJDYXNlKCksXG4gICAgICBTWTogc3kuYWRkcmVzcy50b0xvd2VyQ2FzZSgpLFxuICAgICAgTFA6IG1hcmtldEFkZHIudG9Mb3dlckNhc2UoKSxcbiAgICAgIHJld2FyZFBvb2w6IHJlY2VpcHRUb2tlbkFkZHIudG9Mb3dlckNhc2UoKSxcbiAgICAgIHVuZGVybHlpbmdfdG9rZW5fYWRkcmVzczogeWllbGRUb2tlbi5hZGRyZXNzLnRvTG93ZXJDYXNlKCksXG4gICAgICB1bmRlcmx5aW5nX3Rva2VuX2RlY2ltYWxzOiBOdW1iZXIoZGVjaW1hbHMudG9TdHJpbmcoKSksXG4gICAgfSlcbiAgKTtcbn1cbiIsICIvKiBBdXRvZ2VuZXJhdGVkIGZpbGUuIERvIG5vdCBlZGl0IG1hbnVhbGx5LiAqL1xuLyogdHNsaW50OmRpc2FibGUgKi9cbi8qIGVzbGludC1kaXNhYmxlICovXG5pbXBvcnQgeyBCaWdOdW1iZXJpc2gsIE92ZXJyaWRlcyB9IGZyb20gXCJldGhlcnNcIjtcbmltcG9ydCB7XG4gIGFkZENvbnRyYWN0QnlBQkksXG4gIGdldENvbnRyYWN0QnlBQkksXG4gIGFkZFByb2Nlc3NvcixcbiAgZ2V0UHJvY2Vzc29yLFxuICBnZXRQcm92aWRlcixcbiAgdHJhbnNmb3JtRXRoZXJFcnJvcixcbiAgQmluZE9wdGlvbnMsXG4gIEJhc2VQcm9jZXNzb3IsXG4gIEJhc2VQcm9jZXNzb3JUZW1wbGF0ZSxcbiAgQm91bmRDb250cmFjdFZpZXcsXG4gIENvbnRyYWN0Q29udGV4dCxcbiAgQ29udHJhY3RWaWV3LFxuICBEdW1teVByb3ZpZGVyLFxuICBFdGhDaGFpbklkLFxuICBUeXBlZENhbGxUcmFjZSxcbiAgRXRoQ29udGV4dCxcbiAgRXRoRmV0Y2hDb25maWcsXG4gIFByZXByb2Nlc3NSZXN1bHQsXG4gIGVuY29kZUNhbGxEYXRhLFxufSBmcm9tIFwiQHNlbnRpby9zZGsvZXRoXCI7XG5pbXBvcnQgeyBFdGhDYWxsUGFyYW0sIEV0aENhbGxDb250ZXh0LCBQcmVwYXJlZERhdGEgfSBmcm9tIFwiQHNlbnRpby9wcm90b3NcIjtcblxuaW1wb3J0IHsgUGVucGllUmVjZWlwdFRva2VuX19mYWN0b3J5IH0gZnJvbSBcIi4vaW5kZXguanNcIjtcbmltcG9ydCB7XG4gIFBlbnBpZVJlY2VpcHRUb2tlbixcbiAgQXBwcm92YWxFdmVudCxcbiAgQXBwcm92YWxFdmVudEZpbHRlcixcbiAgT3duZXJzaGlwVHJhbnNmZXJyZWRFdmVudCxcbiAgT3duZXJzaGlwVHJhbnNmZXJyZWRFdmVudEZpbHRlcixcbiAgVHJhbnNmZXJFdmVudCxcbiAgVHJhbnNmZXJFdmVudEZpbHRlcixcbn0gZnJvbSBcIi4vUGVucGllUmVjZWlwdFRva2VuLmpzXCI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgQWxsb3dhbmNlQ2FsbE9iamVjdCB7XG4gIG93bmVyOiBzdHJpbmc7XG4gIHNwZW5kZXI6IHN0cmluZztcbn1cblxuZXhwb3J0IHR5cGUgQWxsb3dhbmNlQ2FsbFRyYWNlID0gVHlwZWRDYWxsVHJhY2U8XG4gIFtzdHJpbmcsIHN0cmluZ10sXG4gIEFsbG93YW5jZUNhbGxPYmplY3Rcbj47XG5cbmV4cG9ydCBpbnRlcmZhY2UgQXBwcm92ZUNhbGxPYmplY3Qge1xuICBzcGVuZGVyOiBzdHJpbmc7XG4gIGFtb3VudDogYmlnaW50O1xufVxuXG5leHBvcnQgdHlwZSBBcHByb3ZlQ2FsbFRyYWNlID0gVHlwZWRDYWxsVHJhY2U8XG4gIFtzdHJpbmcsIGJpZ2ludF0sXG4gIEFwcHJvdmVDYWxsT2JqZWN0XG4+O1xuXG5leHBvcnQgaW50ZXJmYWNlIEJhbGFuY2VPZkNhbGxPYmplY3Qge1xuICBhY2NvdW50OiBzdHJpbmc7XG59XG5cbmV4cG9ydCB0eXBlIEJhbGFuY2VPZkNhbGxUcmFjZSA9IFR5cGVkQ2FsbFRyYWNlPFtzdHJpbmddLCBCYWxhbmNlT2ZDYWxsT2JqZWN0PjtcblxuZXhwb3J0IGludGVyZmFjZSBCdXJuQ2FsbE9iamVjdCB7XG4gIGFjY291bnQ6IHN0cmluZztcbiAgYW1vdW50OiBiaWdpbnQ7XG59XG5cbmV4cG9ydCB0eXBlIEJ1cm5DYWxsVHJhY2UgPSBUeXBlZENhbGxUcmFjZTxbc3RyaW5nLCBiaWdpbnRdLCBCdXJuQ2FsbE9iamVjdD47XG5cbmV4cG9ydCBpbnRlcmZhY2UgRGVjaW1hbHNDYWxsT2JqZWN0IHt9XG5cbmV4cG9ydCB0eXBlIERlY2ltYWxzQ2FsbFRyYWNlID0gVHlwZWRDYWxsVHJhY2U8W10sIERlY2ltYWxzQ2FsbE9iamVjdD47XG5cbmV4cG9ydCBpbnRlcmZhY2UgRGVjcmVhc2VBbGxvd2FuY2VDYWxsT2JqZWN0IHtcbiAgc3BlbmRlcjogc3RyaW5nO1xuICBzdWJ0cmFjdGVkVmFsdWU6IGJpZ2ludDtcbn1cblxuZXhwb3J0IHR5cGUgRGVjcmVhc2VBbGxvd2FuY2VDYWxsVHJhY2UgPSBUeXBlZENhbGxUcmFjZTxcbiAgW3N0cmluZywgYmlnaW50XSxcbiAgRGVjcmVhc2VBbGxvd2FuY2VDYWxsT2JqZWN0XG4+O1xuXG5leHBvcnQgaW50ZXJmYWNlIEluY3JlYXNlQWxsb3dhbmNlQ2FsbE9iamVjdCB7XG4gIHNwZW5kZXI6IHN0cmluZztcbiAgYWRkZWRWYWx1ZTogYmlnaW50O1xufVxuXG5leHBvcnQgdHlwZSBJbmNyZWFzZUFsbG93YW5jZUNhbGxUcmFjZSA9IFR5cGVkQ2FsbFRyYWNlPFxuICBbc3RyaW5nLCBiaWdpbnRdLFxuICBJbmNyZWFzZUFsbG93YW5jZUNhbGxPYmplY3Rcbj47XG5cbmV4cG9ydCBpbnRlcmZhY2UgTWFzdGVyUGVucGllQ2FsbE9iamVjdCB7fVxuXG5leHBvcnQgdHlwZSBNYXN0ZXJQZW5waWVDYWxsVHJhY2UgPSBUeXBlZENhbGxUcmFjZTxbXSwgTWFzdGVyUGVucGllQ2FsbE9iamVjdD47XG5cbmV4cG9ydCBpbnRlcmZhY2UgTWludENhbGxPYmplY3Qge1xuICBhY2NvdW50OiBzdHJpbmc7XG4gIGFtb3VudDogYmlnaW50O1xufVxuXG5leHBvcnQgdHlwZSBNaW50Q2FsbFRyYWNlID0gVHlwZWRDYWxsVHJhY2U8W3N0cmluZywgYmlnaW50XSwgTWludENhbGxPYmplY3Q+O1xuXG5leHBvcnQgaW50ZXJmYWNlIE5hbWVDYWxsT2JqZWN0IHt9XG5cbmV4cG9ydCB0eXBlIE5hbWVDYWxsVHJhY2UgPSBUeXBlZENhbGxUcmFjZTxbXSwgTmFtZUNhbGxPYmplY3Q+O1xuXG5leHBvcnQgaW50ZXJmYWNlIE93bmVyQ2FsbE9iamVjdCB7fVxuXG5leHBvcnQgdHlwZSBPd25lckNhbGxUcmFjZSA9IFR5cGVkQ2FsbFRyYWNlPFtdLCBPd25lckNhbGxPYmplY3Q+O1xuXG5leHBvcnQgaW50ZXJmYWNlIFJlbm91bmNlT3duZXJzaGlwQ2FsbE9iamVjdCB7fVxuXG5leHBvcnQgdHlwZSBSZW5vdW5jZU93bmVyc2hpcENhbGxUcmFjZSA9IFR5cGVkQ2FsbFRyYWNlPFxuICBbXSxcbiAgUmVub3VuY2VPd25lcnNoaXBDYWxsT2JqZWN0XG4+O1xuXG5leHBvcnQgaW50ZXJmYWNlIFN5bWJvbENhbGxPYmplY3Qge31cblxuZXhwb3J0IHR5cGUgU3ltYm9sQ2FsbFRyYWNlID0gVHlwZWRDYWxsVHJhY2U8W10sIFN5bWJvbENhbGxPYmplY3Q+O1xuXG5leHBvcnQgaW50ZXJmYWNlIFRvdGFsU3VwcGx5Q2FsbE9iamVjdCB7fVxuXG5leHBvcnQgdHlwZSBUb3RhbFN1cHBseUNhbGxUcmFjZSA9IFR5cGVkQ2FsbFRyYWNlPFtdLCBUb3RhbFN1cHBseUNhbGxPYmplY3Q+O1xuXG5leHBvcnQgaW50ZXJmYWNlIFRyYW5zZmVyQ2FsbE9iamVjdCB7XG4gIHRvOiBzdHJpbmc7XG4gIGFtb3VudDogYmlnaW50O1xufVxuXG5leHBvcnQgdHlwZSBUcmFuc2ZlckNhbGxUcmFjZSA9IFR5cGVkQ2FsbFRyYWNlPFxuICBbc3RyaW5nLCBiaWdpbnRdLFxuICBUcmFuc2ZlckNhbGxPYmplY3Rcbj47XG5cbmV4cG9ydCBpbnRlcmZhY2UgVHJhbnNmZXJGcm9tQ2FsbE9iamVjdCB7XG4gIGZyb206IHN0cmluZztcbiAgdG86IHN0cmluZztcbiAgYW1vdW50OiBiaWdpbnQ7XG59XG5cbmV4cG9ydCB0eXBlIFRyYW5zZmVyRnJvbUNhbGxUcmFjZSA9IFR5cGVkQ2FsbFRyYWNlPFxuICBbc3RyaW5nLCBzdHJpbmcsIGJpZ2ludF0sXG4gIFRyYW5zZmVyRnJvbUNhbGxPYmplY3Rcbj47XG5cbmV4cG9ydCBpbnRlcmZhY2UgVHJhbnNmZXJPd25lcnNoaXBDYWxsT2JqZWN0IHtcbiAgbmV3T3duZXI6IHN0cmluZztcbn1cblxuZXhwb3J0IHR5cGUgVHJhbnNmZXJPd25lcnNoaXBDYWxsVHJhY2UgPSBUeXBlZENhbGxUcmFjZTxcbiAgW3N0cmluZ10sXG4gIFRyYW5zZmVyT3duZXJzaGlwQ2FsbE9iamVjdFxuPjtcblxuZXhwb3J0IGludGVyZmFjZSBVbmRlcmx5aW5nQ2FsbE9iamVjdCB7fVxuXG5leHBvcnQgdHlwZSBVbmRlcmx5aW5nQ2FsbFRyYWNlID0gVHlwZWRDYWxsVHJhY2U8W10sIFVuZGVybHlpbmdDYWxsT2JqZWN0PjtcblxuY29uc3QgdGVtcGxhdGVDb250cmFjdCA9IFBlbnBpZVJlY2VpcHRUb2tlbl9fZmFjdG9yeS5jb25uZWN0KFxuICBcIjB4MFwiLFxuICBEdW1teVByb3ZpZGVyLFxuKTtcblxuZXhwb3J0IGNsYXNzIFBlbnBpZVJlY2VpcHRUb2tlbkNvbnRyYWN0VmlldyBleHRlbmRzIENvbnRyYWN0VmlldzxQZW5waWVSZWNlaXB0VG9rZW4+IHtcbiAgY29uc3RydWN0b3IoY29udHJhY3Q6IFBlbnBpZVJlY2VpcHRUb2tlbikge1xuICAgIHN1cGVyKGNvbnRyYWN0KTtcbiAgICB0aGlzLmNhbGxTdGF0aWMuY29udHJhY3QgPSBjb250cmFjdDtcbiAgfVxuXG4gIGFzeW5jIGFsbG93YW5jZShcbiAgICBvd25lcjogc3RyaW5nLFxuICAgIHNwZW5kZXI6IHN0cmluZyxcbiAgICBvdmVycmlkZXM/OiBPdmVycmlkZXMsXG4gICAgcHJlcGFyZWREYXRhPzogUHJlcGFyZWREYXRhLFxuICAgIGV0aENhbGxDb250ZXh0PzogRXRoQ2FsbENvbnRleHQsXG4gICk6IFByb21pc2U8YmlnaW50PiB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBhd2FpdCB0aGlzLmNvbnRyYWN0LmdldEZ1bmN0aW9uKFwiYWxsb3dhbmNlKGFkZHJlc3MsYWRkcmVzcylcIikoXG4gICAgICAgIG93bmVyLFxuICAgICAgICBzcGVuZGVyLFxuICAgICAgICBvdmVycmlkZXMgfHwge30sXG4gICAgICApO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGNvbnN0IHN0YWNrID0gbmV3IEVycm9yKCkuc3RhY2s7XG4gICAgICB0aHJvdyB0cmFuc2Zvcm1FdGhlckVycm9yKGUsIHVuZGVmaW5lZCwgc3RhY2spO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIGJhbGFuY2VPZihcbiAgICBhY2NvdW50OiBzdHJpbmcsXG4gICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzLFxuICAgIHByZXBhcmVkRGF0YT86IFByZXBhcmVkRGF0YSxcbiAgICBldGhDYWxsQ29udGV4dD86IEV0aENhbGxDb250ZXh0LFxuICApOiBQcm9taXNlPGJpZ2ludD4ge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gYXdhaXQgdGhpcy5jb250cmFjdC5nZXRGdW5jdGlvbihcImJhbGFuY2VPZihhZGRyZXNzKVwiKShcbiAgICAgICAgYWNjb3VudCxcbiAgICAgICAgb3ZlcnJpZGVzIHx8IHt9LFxuICAgICAgKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBjb25zdCBzdGFjayA9IG5ldyBFcnJvcigpLnN0YWNrO1xuICAgICAgdGhyb3cgdHJhbnNmb3JtRXRoZXJFcnJvcihlLCB1bmRlZmluZWQsIHN0YWNrKTtcbiAgICB9XG4gIH1cblxuICBhc3luYyBkZWNpbWFscyhcbiAgICBvdmVycmlkZXM/OiBPdmVycmlkZXMsXG4gICAgcHJlcGFyZWREYXRhPzogUHJlcGFyZWREYXRhLFxuICAgIGV0aENhbGxDb250ZXh0PzogRXRoQ2FsbENvbnRleHQsXG4gICk6IFByb21pc2U8YmlnaW50PiB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBhd2FpdCB0aGlzLmNvbnRyYWN0LmdldEZ1bmN0aW9uKFwiZGVjaW1hbHMoKVwiKShvdmVycmlkZXMgfHwge30pO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGNvbnN0IHN0YWNrID0gbmV3IEVycm9yKCkuc3RhY2s7XG4gICAgICB0aHJvdyB0cmFuc2Zvcm1FdGhlckVycm9yKGUsIHVuZGVmaW5lZCwgc3RhY2spO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIG1hc3RlclBlbnBpZShcbiAgICBvdmVycmlkZXM/OiBPdmVycmlkZXMsXG4gICAgcHJlcGFyZWREYXRhPzogUHJlcGFyZWREYXRhLFxuICAgIGV0aENhbGxDb250ZXh0PzogRXRoQ2FsbENvbnRleHQsXG4gICk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBhd2FpdCB0aGlzLmNvbnRyYWN0LmdldEZ1bmN0aW9uKFwibWFzdGVyUGVucGllKClcIikob3ZlcnJpZGVzIHx8IHt9KTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBjb25zdCBzdGFjayA9IG5ldyBFcnJvcigpLnN0YWNrO1xuICAgICAgdGhyb3cgdHJhbnNmb3JtRXRoZXJFcnJvcihlLCB1bmRlZmluZWQsIHN0YWNrKTtcbiAgICB9XG4gIH1cblxuICBhc3luYyBuYW1lKFxuICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlcyxcbiAgICBwcmVwYXJlZERhdGE/OiBQcmVwYXJlZERhdGEsXG4gICAgZXRoQ2FsbENvbnRleHQ/OiBFdGhDYWxsQ29udGV4dCxcbiAgKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuY29udHJhY3QuZ2V0RnVuY3Rpb24oXCJuYW1lKClcIikob3ZlcnJpZGVzIHx8IHt9KTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBjb25zdCBzdGFjayA9IG5ldyBFcnJvcigpLnN0YWNrO1xuICAgICAgdGhyb3cgdHJhbnNmb3JtRXRoZXJFcnJvcihlLCB1bmRlZmluZWQsIHN0YWNrKTtcbiAgICB9XG4gIH1cblxuICBhc3luYyBvd25lcihcbiAgICBvdmVycmlkZXM/OiBPdmVycmlkZXMsXG4gICAgcHJlcGFyZWREYXRhPzogUHJlcGFyZWREYXRhLFxuICAgIGV0aENhbGxDb250ZXh0PzogRXRoQ2FsbENvbnRleHQsXG4gICk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBhd2FpdCB0aGlzLmNvbnRyYWN0LmdldEZ1bmN0aW9uKFwib3duZXIoKVwiKShvdmVycmlkZXMgfHwge30pO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGNvbnN0IHN0YWNrID0gbmV3IEVycm9yKCkuc3RhY2s7XG4gICAgICB0aHJvdyB0cmFuc2Zvcm1FdGhlckVycm9yKGUsIHVuZGVmaW5lZCwgc3RhY2spO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIHN5bWJvbChcbiAgICBvdmVycmlkZXM/OiBPdmVycmlkZXMsXG4gICAgcHJlcGFyZWREYXRhPzogUHJlcGFyZWREYXRhLFxuICAgIGV0aENhbGxDb250ZXh0PzogRXRoQ2FsbENvbnRleHQsXG4gICk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBhd2FpdCB0aGlzLmNvbnRyYWN0LmdldEZ1bmN0aW9uKFwic3ltYm9sKClcIikob3ZlcnJpZGVzIHx8IHt9KTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBjb25zdCBzdGFjayA9IG5ldyBFcnJvcigpLnN0YWNrO1xuICAgICAgdGhyb3cgdHJhbnNmb3JtRXRoZXJFcnJvcihlLCB1bmRlZmluZWQsIHN0YWNrKTtcbiAgICB9XG4gIH1cblxuICBhc3luYyB0b3RhbFN1cHBseShcbiAgICBvdmVycmlkZXM/OiBPdmVycmlkZXMsXG4gICAgcHJlcGFyZWREYXRhPzogUHJlcGFyZWREYXRhLFxuICAgIGV0aENhbGxDb250ZXh0PzogRXRoQ2FsbENvbnRleHQsXG4gICk6IFByb21pc2U8YmlnaW50PiB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBhd2FpdCB0aGlzLmNvbnRyYWN0LmdldEZ1bmN0aW9uKFwidG90YWxTdXBwbHkoKVwiKShvdmVycmlkZXMgfHwge30pO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGNvbnN0IHN0YWNrID0gbmV3IEVycm9yKCkuc3RhY2s7XG4gICAgICB0aHJvdyB0cmFuc2Zvcm1FdGhlckVycm9yKGUsIHVuZGVmaW5lZCwgc3RhY2spO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIHVuZGVybHlpbmcoXG4gICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzLFxuICAgIHByZXBhcmVkRGF0YT86IFByZXBhcmVkRGF0YSxcbiAgICBldGhDYWxsQ29udGV4dD86IEV0aENhbGxDb250ZXh0LFxuICApOiBQcm9taXNlPHN0cmluZz4ge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gYXdhaXQgdGhpcy5jb250cmFjdC5nZXRGdW5jdGlvbihcInVuZGVybHlpbmcoKVwiKShvdmVycmlkZXMgfHwge30pO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGNvbnN0IHN0YWNrID0gbmV3IEVycm9yKCkuc3RhY2s7XG4gICAgICB0aHJvdyB0cmFuc2Zvcm1FdGhlckVycm9yKGUsIHVuZGVmaW5lZCwgc3RhY2spO1xuICAgIH1cbiAgfVxuXG4gIGNhbGxTdGF0aWMgPSB7XG4gICAgY29udHJhY3Q6IHRoaXMuY29udHJhY3QsXG5cbiAgICBhc3luYyBhcHByb3ZlKFxuICAgICAgc3BlbmRlcjogc3RyaW5nLFxuICAgICAgYW1vdW50OiBCaWdOdW1iZXJpc2gsXG4gICAgICBvdmVycmlkZXM/OiBPdmVycmlkZXMsXG4gICAgICBwcmVwYXJlZERhdGE/OiBQcmVwYXJlZERhdGEsXG4gICAgICBldGhDYWxsQ29udGV4dD86IEV0aENhbGxDb250ZXh0LFxuICAgICk6IFByb21pc2U8Ym9vbGVhbj4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuY29udHJhY3RcbiAgICAgICAgICAuZ2V0RnVuY3Rpb24oXCJhcHByb3ZlKGFkZHJlc3MsdWludDI1NilcIilcbiAgICAgICAgICAuc3RhdGljQ2FsbChzcGVuZGVyLCBhbW91bnQsIG92ZXJyaWRlcyB8fCB7fSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNvbnN0IHN0YWNrID0gbmV3IEVycm9yKCkuc3RhY2s7XG4gICAgICAgIHRocm93IHRyYW5zZm9ybUV0aGVyRXJyb3IoZSwgdW5kZWZpbmVkLCBzdGFjayk7XG4gICAgICB9XG4gICAgfSxcbiAgICBhc3luYyBidXJuKFxuICAgICAgYWNjb3VudDogc3RyaW5nLFxuICAgICAgYW1vdW50OiBCaWdOdW1iZXJpc2gsXG4gICAgICBvdmVycmlkZXM/OiBPdmVycmlkZXMsXG4gICAgICBwcmVwYXJlZERhdGE/OiBQcmVwYXJlZERhdGEsXG4gICAgICBldGhDYWxsQ29udGV4dD86IEV0aENhbGxDb250ZXh0LFxuICAgICk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuY29udHJhY3RcbiAgICAgICAgICAuZ2V0RnVuY3Rpb24oXCJidXJuKGFkZHJlc3MsdWludDI1NilcIilcbiAgICAgICAgICAuc3RhdGljQ2FsbChhY2NvdW50LCBhbW91bnQsIG92ZXJyaWRlcyB8fCB7fSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNvbnN0IHN0YWNrID0gbmV3IEVycm9yKCkuc3RhY2s7XG4gICAgICAgIHRocm93IHRyYW5zZm9ybUV0aGVyRXJyb3IoZSwgdW5kZWZpbmVkLCBzdGFjayk7XG4gICAgICB9XG4gICAgfSxcbiAgICBhc3luYyBkZWNyZWFzZUFsbG93YW5jZShcbiAgICAgIHNwZW5kZXI6IHN0cmluZyxcbiAgICAgIHN1YnRyYWN0ZWRWYWx1ZTogQmlnTnVtYmVyaXNoLFxuICAgICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzLFxuICAgICAgcHJlcGFyZWREYXRhPzogUHJlcGFyZWREYXRhLFxuICAgICAgZXRoQ2FsbENvbnRleHQ/OiBFdGhDYWxsQ29udGV4dCxcbiAgICApOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLmNvbnRyYWN0XG4gICAgICAgICAgLmdldEZ1bmN0aW9uKFwiZGVjcmVhc2VBbGxvd2FuY2UoYWRkcmVzcyx1aW50MjU2KVwiKVxuICAgICAgICAgIC5zdGF0aWNDYWxsKHNwZW5kZXIsIHN1YnRyYWN0ZWRWYWx1ZSwgb3ZlcnJpZGVzIHx8IHt9KTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY29uc3Qgc3RhY2sgPSBuZXcgRXJyb3IoKS5zdGFjaztcbiAgICAgICAgdGhyb3cgdHJhbnNmb3JtRXRoZXJFcnJvcihlLCB1bmRlZmluZWQsIHN0YWNrKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGFzeW5jIGluY3JlYXNlQWxsb3dhbmNlKFxuICAgICAgc3BlbmRlcjogc3RyaW5nLFxuICAgICAgYWRkZWRWYWx1ZTogQmlnTnVtYmVyaXNoLFxuICAgICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzLFxuICAgICAgcHJlcGFyZWREYXRhPzogUHJlcGFyZWREYXRhLFxuICAgICAgZXRoQ2FsbENvbnRleHQ/OiBFdGhDYWxsQ29udGV4dCxcbiAgICApOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLmNvbnRyYWN0XG4gICAgICAgICAgLmdldEZ1bmN0aW9uKFwiaW5jcmVhc2VBbGxvd2FuY2UoYWRkcmVzcyx1aW50MjU2KVwiKVxuICAgICAgICAgIC5zdGF0aWNDYWxsKHNwZW5kZXIsIGFkZGVkVmFsdWUsIG92ZXJyaWRlcyB8fCB7fSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNvbnN0IHN0YWNrID0gbmV3IEVycm9yKCkuc3RhY2s7XG4gICAgICAgIHRocm93IHRyYW5zZm9ybUV0aGVyRXJyb3IoZSwgdW5kZWZpbmVkLCBzdGFjayk7XG4gICAgICB9XG4gICAgfSxcbiAgICBhc3luYyBtaW50KFxuICAgICAgYWNjb3VudDogc3RyaW5nLFxuICAgICAgYW1vdW50OiBCaWdOdW1iZXJpc2gsXG4gICAgICBvdmVycmlkZXM/OiBPdmVycmlkZXMsXG4gICAgICBwcmVwYXJlZERhdGE/OiBQcmVwYXJlZERhdGEsXG4gICAgICBldGhDYWxsQ29udGV4dD86IEV0aENhbGxDb250ZXh0LFxuICAgICk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuY29udHJhY3RcbiAgICAgICAgICAuZ2V0RnVuY3Rpb24oXCJtaW50KGFkZHJlc3MsdWludDI1NilcIilcbiAgICAgICAgICAuc3RhdGljQ2FsbChhY2NvdW50LCBhbW91bnQsIG92ZXJyaWRlcyB8fCB7fSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNvbnN0IHN0YWNrID0gbmV3IEVycm9yKCkuc3RhY2s7XG4gICAgICAgIHRocm93IHRyYW5zZm9ybUV0aGVyRXJyb3IoZSwgdW5kZWZpbmVkLCBzdGFjayk7XG4gICAgICB9XG4gICAgfSxcbiAgICBhc3luYyByZW5vdW5jZU93bmVyc2hpcChcbiAgICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlcyxcbiAgICAgIHByZXBhcmVkRGF0YT86IFByZXBhcmVkRGF0YSxcbiAgICAgIGV0aENhbGxDb250ZXh0PzogRXRoQ2FsbENvbnRleHQsXG4gICAgKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5jb250cmFjdFxuICAgICAgICAgIC5nZXRGdW5jdGlvbihcInJlbm91bmNlT3duZXJzaGlwKClcIilcbiAgICAgICAgICAuc3RhdGljQ2FsbChvdmVycmlkZXMgfHwge30pO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjb25zdCBzdGFjayA9IG5ldyBFcnJvcigpLnN0YWNrO1xuICAgICAgICB0aHJvdyB0cmFuc2Zvcm1FdGhlckVycm9yKGUsIHVuZGVmaW5lZCwgc3RhY2spO1xuICAgICAgfVxuICAgIH0sXG4gICAgYXN5bmMgdHJhbnNmZXIoXG4gICAgICB0bzogc3RyaW5nLFxuICAgICAgYW1vdW50OiBCaWdOdW1iZXJpc2gsXG4gICAgICBvdmVycmlkZXM/OiBPdmVycmlkZXMsXG4gICAgICBwcmVwYXJlZERhdGE/OiBQcmVwYXJlZERhdGEsXG4gICAgICBldGhDYWxsQ29udGV4dD86IEV0aENhbGxDb250ZXh0LFxuICAgICk6IFByb21pc2U8Ym9vbGVhbj4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuY29udHJhY3RcbiAgICAgICAgICAuZ2V0RnVuY3Rpb24oXCJ0cmFuc2ZlcihhZGRyZXNzLHVpbnQyNTYpXCIpXG4gICAgICAgICAgLnN0YXRpY0NhbGwodG8sIGFtb3VudCwgb3ZlcnJpZGVzIHx8IHt9KTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY29uc3Qgc3RhY2sgPSBuZXcgRXJyb3IoKS5zdGFjaztcbiAgICAgICAgdGhyb3cgdHJhbnNmb3JtRXRoZXJFcnJvcihlLCB1bmRlZmluZWQsIHN0YWNrKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGFzeW5jIHRyYW5zZmVyRnJvbShcbiAgICAgIGZyb206IHN0cmluZyxcbiAgICAgIHRvOiBzdHJpbmcsXG4gICAgICBhbW91bnQ6IEJpZ051bWJlcmlzaCxcbiAgICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlcyxcbiAgICAgIHByZXBhcmVkRGF0YT86IFByZXBhcmVkRGF0YSxcbiAgICAgIGV0aENhbGxDb250ZXh0PzogRXRoQ2FsbENvbnRleHQsXG4gICAgKTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5jb250cmFjdFxuICAgICAgICAgIC5nZXRGdW5jdGlvbihcInRyYW5zZmVyRnJvbShhZGRyZXNzLGFkZHJlc3MsdWludDI1NilcIilcbiAgICAgICAgICAuc3RhdGljQ2FsbChmcm9tLCB0bywgYW1vdW50LCBvdmVycmlkZXMgfHwge30pO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjb25zdCBzdGFjayA9IG5ldyBFcnJvcigpLnN0YWNrO1xuICAgICAgICB0aHJvdyB0cmFuc2Zvcm1FdGhlckVycm9yKGUsIHVuZGVmaW5lZCwgc3RhY2spO1xuICAgICAgfVxuICAgIH0sXG4gICAgYXN5bmMgdHJhbnNmZXJPd25lcnNoaXAoXG4gICAgICBuZXdPd25lcjogc3RyaW5nLFxuICAgICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzLFxuICAgICAgcHJlcGFyZWREYXRhPzogUHJlcGFyZWREYXRhLFxuICAgICAgZXRoQ2FsbENvbnRleHQ/OiBFdGhDYWxsQ29udGV4dCxcbiAgICApOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLmNvbnRyYWN0XG4gICAgICAgICAgLmdldEZ1bmN0aW9uKFwidHJhbnNmZXJPd25lcnNoaXAoYWRkcmVzcylcIilcbiAgICAgICAgICAuc3RhdGljQ2FsbChuZXdPd25lciwgb3ZlcnJpZGVzIHx8IHt9KTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY29uc3Qgc3RhY2sgPSBuZXcgRXJyb3IoKS5zdGFjaztcbiAgICAgICAgdGhyb3cgdHJhbnNmb3JtRXRoZXJFcnJvcihlLCB1bmRlZmluZWQsIHN0YWNrKTtcbiAgICAgIH1cbiAgICB9LFxuICB9O1xuXG4gIGVuY29kZUNhbGwgPSB7XG4gICAgYWxsb3dhbmNlKFxuICAgICAgb3duZXI6IHN0cmluZyxcbiAgICAgIHNwZW5kZXI6IHN0cmluZyxcbiAgICAgIGNhbGxDb250ZXh0OiBFdGhDYWxsQ29udGV4dCxcbiAgICApOiBFdGhDYWxsUGFyYW0ge1xuICAgICAgcmV0dXJuIGVuY29kZUNhbGxEYXRhKFxuICAgICAgICBjYWxsQ29udGV4dCxcbiAgICAgICAgXCJhbGxvd2FuY2VcIixcbiAgICAgICAgXCJmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyxhZGRyZXNzKVwiLFxuICAgICAgICBbb3duZXIsIHNwZW5kZXJdLFxuICAgICAgKTtcbiAgICB9LFxuICAgIGFwcHJvdmUoXG4gICAgICBzcGVuZGVyOiBzdHJpbmcsXG4gICAgICBhbW91bnQ6IEJpZ051bWJlcmlzaCxcbiAgICAgIGNhbGxDb250ZXh0OiBFdGhDYWxsQ29udGV4dCxcbiAgICApOiBFdGhDYWxsUGFyYW0ge1xuICAgICAgcmV0dXJuIGVuY29kZUNhbGxEYXRhKFxuICAgICAgICBjYWxsQ29udGV4dCxcbiAgICAgICAgXCJhcHByb3ZlXCIsXG4gICAgICAgIFwiZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzLHVpbnQyNTYpXCIsXG4gICAgICAgIFtzcGVuZGVyLCBhbW91bnRdLFxuICAgICAgKTtcbiAgICB9LFxuICAgIGJhbGFuY2VPZihhY2NvdW50OiBzdHJpbmcsIGNhbGxDb250ZXh0OiBFdGhDYWxsQ29udGV4dCk6IEV0aENhbGxQYXJhbSB7XG4gICAgICByZXR1cm4gZW5jb2RlQ2FsbERhdGEoXG4gICAgICAgIGNhbGxDb250ZXh0LFxuICAgICAgICBcImJhbGFuY2VPZlwiLFxuICAgICAgICBcImZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzKVwiLFxuICAgICAgICBbYWNjb3VudF0sXG4gICAgICApO1xuICAgIH0sXG4gICAgYnVybihcbiAgICAgIGFjY291bnQ6IHN0cmluZyxcbiAgICAgIGFtb3VudDogQmlnTnVtYmVyaXNoLFxuICAgICAgY2FsbENvbnRleHQ6IEV0aENhbGxDb250ZXh0LFxuICAgICk6IEV0aENhbGxQYXJhbSB7XG4gICAgICByZXR1cm4gZW5jb2RlQ2FsbERhdGEoXG4gICAgICAgIGNhbGxDb250ZXh0LFxuICAgICAgICBcImJ1cm5cIixcbiAgICAgICAgXCJmdW5jdGlvbiBidXJuKGFkZHJlc3MsdWludDI1NilcIixcbiAgICAgICAgW2FjY291bnQsIGFtb3VudF0sXG4gICAgICApO1xuICAgIH0sXG4gICAgZGVjaW1hbHMoY2FsbENvbnRleHQ6IEV0aENhbGxDb250ZXh0KTogRXRoQ2FsbFBhcmFtIHtcbiAgICAgIHJldHVybiBlbmNvZGVDYWxsRGF0YShjYWxsQ29udGV4dCwgXCJkZWNpbWFsc1wiLCBcImZ1bmN0aW9uIGRlY2ltYWxzKClcIiwgW10pO1xuICAgIH0sXG4gICAgZGVjcmVhc2VBbGxvd2FuY2UoXG4gICAgICBzcGVuZGVyOiBzdHJpbmcsXG4gICAgICBzdWJ0cmFjdGVkVmFsdWU6IEJpZ051bWJlcmlzaCxcbiAgICAgIGNhbGxDb250ZXh0OiBFdGhDYWxsQ29udGV4dCxcbiAgICApOiBFdGhDYWxsUGFyYW0ge1xuICAgICAgcmV0dXJuIGVuY29kZUNhbGxEYXRhKFxuICAgICAgICBjYWxsQ29udGV4dCxcbiAgICAgICAgXCJkZWNyZWFzZUFsbG93YW5jZVwiLFxuICAgICAgICBcImZ1bmN0aW9uIGRlY3JlYXNlQWxsb3dhbmNlKGFkZHJlc3MsdWludDI1NilcIixcbiAgICAgICAgW3NwZW5kZXIsIHN1YnRyYWN0ZWRWYWx1ZV0sXG4gICAgICApO1xuICAgIH0sXG4gICAgaW5jcmVhc2VBbGxvd2FuY2UoXG4gICAgICBzcGVuZGVyOiBzdHJpbmcsXG4gICAgICBhZGRlZFZhbHVlOiBCaWdOdW1iZXJpc2gsXG4gICAgICBjYWxsQ29udGV4dDogRXRoQ2FsbENvbnRleHQsXG4gICAgKTogRXRoQ2FsbFBhcmFtIHtcbiAgICAgIHJldHVybiBlbmNvZGVDYWxsRGF0YShcbiAgICAgICAgY2FsbENvbnRleHQsXG4gICAgICAgIFwiaW5jcmVhc2VBbGxvd2FuY2VcIixcbiAgICAgICAgXCJmdW5jdGlvbiBpbmNyZWFzZUFsbG93YW5jZShhZGRyZXNzLHVpbnQyNTYpXCIsXG4gICAgICAgIFtzcGVuZGVyLCBhZGRlZFZhbHVlXSxcbiAgICAgICk7XG4gICAgfSxcbiAgICBtYXN0ZXJQZW5waWUoY2FsbENvbnRleHQ6IEV0aENhbGxDb250ZXh0KTogRXRoQ2FsbFBhcmFtIHtcbiAgICAgIHJldHVybiBlbmNvZGVDYWxsRGF0YShcbiAgICAgICAgY2FsbENvbnRleHQsXG4gICAgICAgIFwibWFzdGVyUGVucGllXCIsXG4gICAgICAgIFwiZnVuY3Rpb24gbWFzdGVyUGVucGllKClcIixcbiAgICAgICAgW10sXG4gICAgICApO1xuICAgIH0sXG4gICAgbWludChcbiAgICAgIGFjY291bnQ6IHN0cmluZyxcbiAgICAgIGFtb3VudDogQmlnTnVtYmVyaXNoLFxuICAgICAgY2FsbENvbnRleHQ6IEV0aENhbGxDb250ZXh0LFxuICAgICk6IEV0aENhbGxQYXJhbSB7XG4gICAgICByZXR1cm4gZW5jb2RlQ2FsbERhdGEoXG4gICAgICAgIGNhbGxDb250ZXh0LFxuICAgICAgICBcIm1pbnRcIixcbiAgICAgICAgXCJmdW5jdGlvbiBtaW50KGFkZHJlc3MsdWludDI1NilcIixcbiAgICAgICAgW2FjY291bnQsIGFtb3VudF0sXG4gICAgICApO1xuICAgIH0sXG4gICAgbmFtZShjYWxsQ29udGV4dDogRXRoQ2FsbENvbnRleHQpOiBFdGhDYWxsUGFyYW0ge1xuICAgICAgcmV0dXJuIGVuY29kZUNhbGxEYXRhKGNhbGxDb250ZXh0LCBcIm5hbWVcIiwgXCJmdW5jdGlvbiBuYW1lKClcIiwgW10pO1xuICAgIH0sXG4gICAgb3duZXIoY2FsbENvbnRleHQ6IEV0aENhbGxDb250ZXh0KTogRXRoQ2FsbFBhcmFtIHtcbiAgICAgIHJldHVybiBlbmNvZGVDYWxsRGF0YShjYWxsQ29udGV4dCwgXCJvd25lclwiLCBcImZ1bmN0aW9uIG93bmVyKClcIiwgW10pO1xuICAgIH0sXG4gICAgcmVub3VuY2VPd25lcnNoaXAoY2FsbENvbnRleHQ6IEV0aENhbGxDb250ZXh0KTogRXRoQ2FsbFBhcmFtIHtcbiAgICAgIHJldHVybiBlbmNvZGVDYWxsRGF0YShcbiAgICAgICAgY2FsbENvbnRleHQsXG4gICAgICAgIFwicmVub3VuY2VPd25lcnNoaXBcIixcbiAgICAgICAgXCJmdW5jdGlvbiByZW5vdW5jZU93bmVyc2hpcCgpXCIsXG4gICAgICAgIFtdLFxuICAgICAgKTtcbiAgICB9LFxuICAgIHN5bWJvbChjYWxsQ29udGV4dDogRXRoQ2FsbENvbnRleHQpOiBFdGhDYWxsUGFyYW0ge1xuICAgICAgcmV0dXJuIGVuY29kZUNhbGxEYXRhKGNhbGxDb250ZXh0LCBcInN5bWJvbFwiLCBcImZ1bmN0aW9uIHN5bWJvbCgpXCIsIFtdKTtcbiAgICB9LFxuICAgIHRvdGFsU3VwcGx5KGNhbGxDb250ZXh0OiBFdGhDYWxsQ29udGV4dCk6IEV0aENhbGxQYXJhbSB7XG4gICAgICByZXR1cm4gZW5jb2RlQ2FsbERhdGEoXG4gICAgICAgIGNhbGxDb250ZXh0LFxuICAgICAgICBcInRvdGFsU3VwcGx5XCIsXG4gICAgICAgIFwiZnVuY3Rpb24gdG90YWxTdXBwbHkoKVwiLFxuICAgICAgICBbXSxcbiAgICAgICk7XG4gICAgfSxcbiAgICB0cmFuc2ZlcihcbiAgICAgIHRvOiBzdHJpbmcsXG4gICAgICBhbW91bnQ6IEJpZ051bWJlcmlzaCxcbiAgICAgIGNhbGxDb250ZXh0OiBFdGhDYWxsQ29udGV4dCxcbiAgICApOiBFdGhDYWxsUGFyYW0ge1xuICAgICAgcmV0dXJuIGVuY29kZUNhbGxEYXRhKFxuICAgICAgICBjYWxsQ29udGV4dCxcbiAgICAgICAgXCJ0cmFuc2ZlclwiLFxuICAgICAgICBcImZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MsdWludDI1NilcIixcbiAgICAgICAgW3RvLCBhbW91bnRdLFxuICAgICAgKTtcbiAgICB9LFxuICAgIHRyYW5zZmVyRnJvbShcbiAgICAgIGZyb206IHN0cmluZyxcbiAgICAgIHRvOiBzdHJpbmcsXG4gICAgICBhbW91bnQ6IEJpZ051bWJlcmlzaCxcbiAgICAgIGNhbGxDb250ZXh0OiBFdGhDYWxsQ29udGV4dCxcbiAgICApOiBFdGhDYWxsUGFyYW0ge1xuICAgICAgcmV0dXJuIGVuY29kZUNhbGxEYXRhKFxuICAgICAgICBjYWxsQ29udGV4dCxcbiAgICAgICAgXCJ0cmFuc2ZlckZyb21cIixcbiAgICAgICAgXCJmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyxhZGRyZXNzLHVpbnQyNTYpXCIsXG4gICAgICAgIFtmcm9tLCB0bywgYW1vdW50XSxcbiAgICAgICk7XG4gICAgfSxcbiAgICB0cmFuc2Zlck93bmVyc2hpcChcbiAgICAgIG5ld093bmVyOiBzdHJpbmcsXG4gICAgICBjYWxsQ29udGV4dDogRXRoQ2FsbENvbnRleHQsXG4gICAgKTogRXRoQ2FsbFBhcmFtIHtcbiAgICAgIHJldHVybiBlbmNvZGVDYWxsRGF0YShcbiAgICAgICAgY2FsbENvbnRleHQsXG4gICAgICAgIFwidHJhbnNmZXJPd25lcnNoaXBcIixcbiAgICAgICAgXCJmdW5jdGlvbiB0cmFuc2Zlck93bmVyc2hpcChhZGRyZXNzKVwiLFxuICAgICAgICBbbmV3T3duZXJdLFxuICAgICAgKTtcbiAgICB9LFxuICAgIHVuZGVybHlpbmcoY2FsbENvbnRleHQ6IEV0aENhbGxDb250ZXh0KTogRXRoQ2FsbFBhcmFtIHtcbiAgICAgIHJldHVybiBlbmNvZGVDYWxsRGF0YShcbiAgICAgICAgY2FsbENvbnRleHQsXG4gICAgICAgIFwidW5kZXJseWluZ1wiLFxuICAgICAgICBcImZ1bmN0aW9uIHVuZGVybHlpbmcoKVwiLFxuICAgICAgICBbXSxcbiAgICAgICk7XG4gICAgfSxcbiAgfTtcbn1cblxuZXhwb3J0IGNsYXNzIFBlbnBpZVJlY2VpcHRUb2tlbkJvdW5kQ29udHJhY3RWaWV3IGV4dGVuZHMgQm91bmRDb250cmFjdFZpZXc8XG4gIFBlbnBpZVJlY2VpcHRUb2tlbixcbiAgUGVucGllUmVjZWlwdFRva2VuQ29udHJhY3RWaWV3XG4+IHtcbiAgYXN5bmMgYWxsb3dhbmNlKFxuICAgIG93bmVyOiBzdHJpbmcsXG4gICAgc3BlbmRlcjogc3RyaW5nLFxuICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlcyxcbiAgKTogUHJvbWlzZTxiaWdpbnQ+IHtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy52aWV3LmFsbG93YW5jZShcbiAgICAgIG93bmVyLFxuICAgICAgc3BlbmRlcixcbiAgICAgIHtcbiAgICAgICAgYmxvY2tUYWc6IHRoaXMuY29udGV4dC5ibG9ja051bWJlcixcbiAgICAgICAgLi4ub3ZlcnJpZGVzLFxuICAgICAgfSxcbiAgICAgIHRoaXMuY29udGV4dC5wcmVwYXJlZERhdGEsXG4gICAgICB0aGlzLmNvbnRleHQuZ2V0RXRoQ2FsbENvbnRleHQoKSxcbiAgICApO1xuICB9XG5cbiAgYXN5bmMgYmFsYW5jZU9mKGFjY291bnQ6IHN0cmluZywgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzKTogUHJvbWlzZTxiaWdpbnQ+IHtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy52aWV3LmJhbGFuY2VPZihcbiAgICAgIGFjY291bnQsXG4gICAgICB7XG4gICAgICAgIGJsb2NrVGFnOiB0aGlzLmNvbnRleHQuYmxvY2tOdW1iZXIsXG4gICAgICAgIC4uLm92ZXJyaWRlcyxcbiAgICAgIH0sXG4gICAgICB0aGlzLmNvbnRleHQucHJlcGFyZWREYXRhLFxuICAgICAgdGhpcy5jb250ZXh0LmdldEV0aENhbGxDb250ZXh0KCksXG4gICAgKTtcbiAgfVxuXG4gIGFzeW5jIGRlY2ltYWxzKG92ZXJyaWRlcz86IE92ZXJyaWRlcyk6IFByb21pc2U8YmlnaW50PiB7XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMudmlldy5kZWNpbWFscyhcbiAgICAgIHtcbiAgICAgICAgYmxvY2tUYWc6IHRoaXMuY29udGV4dC5ibG9ja051bWJlcixcbiAgICAgICAgLi4ub3ZlcnJpZGVzLFxuICAgICAgfSxcbiAgICAgIHRoaXMuY29udGV4dC5wcmVwYXJlZERhdGEsXG4gICAgICB0aGlzLmNvbnRleHQuZ2V0RXRoQ2FsbENvbnRleHQoKSxcbiAgICApO1xuICB9XG5cbiAgYXN5bmMgbWFzdGVyUGVucGllKG92ZXJyaWRlcz86IE92ZXJyaWRlcyk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMudmlldy5tYXN0ZXJQZW5waWUoXG4gICAgICB7XG4gICAgICAgIGJsb2NrVGFnOiB0aGlzLmNvbnRleHQuYmxvY2tOdW1iZXIsXG4gICAgICAgIC4uLm92ZXJyaWRlcyxcbiAgICAgIH0sXG4gICAgICB0aGlzLmNvbnRleHQucHJlcGFyZWREYXRhLFxuICAgICAgdGhpcy5jb250ZXh0LmdldEV0aENhbGxDb250ZXh0KCksXG4gICAgKTtcbiAgfVxuXG4gIGFzeW5jIG5hbWUob3ZlcnJpZGVzPzogT3ZlcnJpZGVzKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy52aWV3Lm5hbWUoXG4gICAgICB7XG4gICAgICAgIGJsb2NrVGFnOiB0aGlzLmNvbnRleHQuYmxvY2tOdW1iZXIsXG4gICAgICAgIC4uLm92ZXJyaWRlcyxcbiAgICAgIH0sXG4gICAgICB0aGlzLmNvbnRleHQucHJlcGFyZWREYXRhLFxuICAgICAgdGhpcy5jb250ZXh0LmdldEV0aENhbGxDb250ZXh0KCksXG4gICAgKTtcbiAgfVxuXG4gIGFzeW5jIG93bmVyKG92ZXJyaWRlcz86IE92ZXJyaWRlcyk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMudmlldy5vd25lcihcbiAgICAgIHtcbiAgICAgICAgYmxvY2tUYWc6IHRoaXMuY29udGV4dC5ibG9ja051bWJlcixcbiAgICAgICAgLi4ub3ZlcnJpZGVzLFxuICAgICAgfSxcbiAgICAgIHRoaXMuY29udGV4dC5wcmVwYXJlZERhdGEsXG4gICAgICB0aGlzLmNvbnRleHQuZ2V0RXRoQ2FsbENvbnRleHQoKSxcbiAgICApO1xuICB9XG5cbiAgYXN5bmMgc3ltYm9sKG92ZXJyaWRlcz86IE92ZXJyaWRlcyk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMudmlldy5zeW1ib2woXG4gICAgICB7XG4gICAgICAgIGJsb2NrVGFnOiB0aGlzLmNvbnRleHQuYmxvY2tOdW1iZXIsXG4gICAgICAgIC4uLm92ZXJyaWRlcyxcbiAgICAgIH0sXG4gICAgICB0aGlzLmNvbnRleHQucHJlcGFyZWREYXRhLFxuICAgICAgdGhpcy5jb250ZXh0LmdldEV0aENhbGxDb250ZXh0KCksXG4gICAgKTtcbiAgfVxuXG4gIGFzeW5jIHRvdGFsU3VwcGx5KG92ZXJyaWRlcz86IE92ZXJyaWRlcyk6IFByb21pc2U8YmlnaW50PiB7XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMudmlldy50b3RhbFN1cHBseShcbiAgICAgIHtcbiAgICAgICAgYmxvY2tUYWc6IHRoaXMuY29udGV4dC5ibG9ja051bWJlcixcbiAgICAgICAgLi4ub3ZlcnJpZGVzLFxuICAgICAgfSxcbiAgICAgIHRoaXMuY29udGV4dC5wcmVwYXJlZERhdGEsXG4gICAgICB0aGlzLmNvbnRleHQuZ2V0RXRoQ2FsbENvbnRleHQoKSxcbiAgICApO1xuICB9XG5cbiAgYXN5bmMgdW5kZXJseWluZyhvdmVycmlkZXM/OiBPdmVycmlkZXMpOiBQcm9taXNlPHN0cmluZz4ge1xuICAgIHJldHVybiBhd2FpdCB0aGlzLnZpZXcudW5kZXJseWluZyhcbiAgICAgIHtcbiAgICAgICAgYmxvY2tUYWc6IHRoaXMuY29udGV4dC5ibG9ja051bWJlcixcbiAgICAgICAgLi4ub3ZlcnJpZGVzLFxuICAgICAgfSxcbiAgICAgIHRoaXMuY29udGV4dC5wcmVwYXJlZERhdGEsXG4gICAgICB0aGlzLmNvbnRleHQuZ2V0RXRoQ2FsbENvbnRleHQoKSxcbiAgICApO1xuICB9XG5cbiAgY2FsbFN0YXRpYyA9IHtcbiAgICB2aWV3OiB0aGlzLnZpZXcsXG4gICAgY29udGV4dDogdGhpcy5jb250ZXh0LFxuXG4gICAgYXN5bmMgYXBwcm92ZShcbiAgICAgIHNwZW5kZXI6IHN0cmluZyxcbiAgICAgIGFtb3VudDogQmlnTnVtYmVyaXNoLFxuICAgICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzLFxuICAgICk6IFByb21pc2U8Ym9vbGVhbj4ge1xuICAgICAgcmV0dXJuIGF3YWl0IHRoaXMudmlldy5jYWxsU3RhdGljLmFwcHJvdmUoXG4gICAgICAgIHNwZW5kZXIsXG4gICAgICAgIGFtb3VudCxcbiAgICAgICAge1xuICAgICAgICAgIGJsb2NrVGFnOiB0aGlzLmNvbnRleHQuYmxvY2tOdW1iZXIsXG4gICAgICAgICAgLi4ub3ZlcnJpZGVzLFxuICAgICAgICB9LFxuICAgICAgICB0aGlzLmNvbnRleHQucHJlcGFyZWREYXRhLFxuICAgICAgICB0aGlzLmNvbnRleHQuZ2V0RXRoQ2FsbENvbnRleHQoKSxcbiAgICAgICk7XG4gICAgfSxcbiAgICBhc3luYyBidXJuKFxuICAgICAgYWNjb3VudDogc3RyaW5nLFxuICAgICAgYW1vdW50OiBCaWdOdW1iZXJpc2gsXG4gICAgICBvdmVycmlkZXM/OiBPdmVycmlkZXMsXG4gICAgKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICByZXR1cm4gYXdhaXQgdGhpcy52aWV3LmNhbGxTdGF0aWMuYnVybihcbiAgICAgICAgYWNjb3VudCxcbiAgICAgICAgYW1vdW50LFxuICAgICAgICB7XG4gICAgICAgICAgYmxvY2tUYWc6IHRoaXMuY29udGV4dC5ibG9ja051bWJlcixcbiAgICAgICAgICAuLi5vdmVycmlkZXMsXG4gICAgICAgIH0sXG4gICAgICAgIHRoaXMuY29udGV4dC5wcmVwYXJlZERhdGEsXG4gICAgICAgIHRoaXMuY29udGV4dC5nZXRFdGhDYWxsQ29udGV4dCgpLFxuICAgICAgKTtcbiAgICB9LFxuICAgIGFzeW5jIGRlY3JlYXNlQWxsb3dhbmNlKFxuICAgICAgc3BlbmRlcjogc3RyaW5nLFxuICAgICAgc3VidHJhY3RlZFZhbHVlOiBCaWdOdW1iZXJpc2gsXG4gICAgICBvdmVycmlkZXM/OiBPdmVycmlkZXMsXG4gICAgKTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgICByZXR1cm4gYXdhaXQgdGhpcy52aWV3LmNhbGxTdGF0aWMuZGVjcmVhc2VBbGxvd2FuY2UoXG4gICAgICAgIHNwZW5kZXIsXG4gICAgICAgIHN1YnRyYWN0ZWRWYWx1ZSxcbiAgICAgICAge1xuICAgICAgICAgIGJsb2NrVGFnOiB0aGlzLmNvbnRleHQuYmxvY2tOdW1iZXIsXG4gICAgICAgICAgLi4ub3ZlcnJpZGVzLFxuICAgICAgICB9LFxuICAgICAgICB0aGlzLmNvbnRleHQucHJlcGFyZWREYXRhLFxuICAgICAgICB0aGlzLmNvbnRleHQuZ2V0RXRoQ2FsbENvbnRleHQoKSxcbiAgICAgICk7XG4gICAgfSxcbiAgICBhc3luYyBpbmNyZWFzZUFsbG93YW5jZShcbiAgICAgIHNwZW5kZXI6IHN0cmluZyxcbiAgICAgIGFkZGVkVmFsdWU6IEJpZ051bWJlcmlzaCxcbiAgICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlcyxcbiAgICApOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICAgIHJldHVybiBhd2FpdCB0aGlzLnZpZXcuY2FsbFN0YXRpYy5pbmNyZWFzZUFsbG93YW5jZShcbiAgICAgICAgc3BlbmRlcixcbiAgICAgICAgYWRkZWRWYWx1ZSxcbiAgICAgICAge1xuICAgICAgICAgIGJsb2NrVGFnOiB0aGlzLmNvbnRleHQuYmxvY2tOdW1iZXIsXG4gICAgICAgICAgLi4ub3ZlcnJpZGVzLFxuICAgICAgICB9LFxuICAgICAgICB0aGlzLmNvbnRleHQucHJlcGFyZWREYXRhLFxuICAgICAgICB0aGlzLmNvbnRleHQuZ2V0RXRoQ2FsbENvbnRleHQoKSxcbiAgICAgICk7XG4gICAgfSxcbiAgICBhc3luYyBtaW50KFxuICAgICAgYWNjb3VudDogc3RyaW5nLFxuICAgICAgYW1vdW50OiBCaWdOdW1iZXJpc2gsXG4gICAgICBvdmVycmlkZXM/OiBPdmVycmlkZXMsXG4gICAgKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICByZXR1cm4gYXdhaXQgdGhpcy52aWV3LmNhbGxTdGF0aWMubWludChcbiAgICAgICAgYWNjb3VudCxcbiAgICAgICAgYW1vdW50LFxuICAgICAgICB7XG4gICAgICAgICAgYmxvY2tUYWc6IHRoaXMuY29udGV4dC5ibG9ja051bWJlcixcbiAgICAgICAgICAuLi5vdmVycmlkZXMsXG4gICAgICAgIH0sXG4gICAgICAgIHRoaXMuY29udGV4dC5wcmVwYXJlZERhdGEsXG4gICAgICAgIHRoaXMuY29udGV4dC5nZXRFdGhDYWxsQ29udGV4dCgpLFxuICAgICAgKTtcbiAgICB9LFxuICAgIGFzeW5jIHJlbm91bmNlT3duZXJzaGlwKG92ZXJyaWRlcz86IE92ZXJyaWRlcyk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgcmV0dXJuIGF3YWl0IHRoaXMudmlldy5jYWxsU3RhdGljLnJlbm91bmNlT3duZXJzaGlwKFxuICAgICAgICB7XG4gICAgICAgICAgYmxvY2tUYWc6IHRoaXMuY29udGV4dC5ibG9ja051bWJlcixcbiAgICAgICAgICAuLi5vdmVycmlkZXMsXG4gICAgICAgIH0sXG4gICAgICAgIHRoaXMuY29udGV4dC5wcmVwYXJlZERhdGEsXG4gICAgICAgIHRoaXMuY29udGV4dC5nZXRFdGhDYWxsQ29udGV4dCgpLFxuICAgICAgKTtcbiAgICB9LFxuICAgIGFzeW5jIHRyYW5zZmVyKFxuICAgICAgdG86IHN0cmluZyxcbiAgICAgIGFtb3VudDogQmlnTnVtYmVyaXNoLFxuICAgICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzLFxuICAgICk6IFByb21pc2U8Ym9vbGVhbj4ge1xuICAgICAgcmV0dXJuIGF3YWl0IHRoaXMudmlldy5jYWxsU3RhdGljLnRyYW5zZmVyKFxuICAgICAgICB0byxcbiAgICAgICAgYW1vdW50LFxuICAgICAgICB7XG4gICAgICAgICAgYmxvY2tUYWc6IHRoaXMuY29udGV4dC5ibG9ja051bWJlcixcbiAgICAgICAgICAuLi5vdmVycmlkZXMsXG4gICAgICAgIH0sXG4gICAgICAgIHRoaXMuY29udGV4dC5wcmVwYXJlZERhdGEsXG4gICAgICAgIHRoaXMuY29udGV4dC5nZXRFdGhDYWxsQ29udGV4dCgpLFxuICAgICAgKTtcbiAgICB9LFxuICAgIGFzeW5jIHRyYW5zZmVyRnJvbShcbiAgICAgIGZyb206IHN0cmluZyxcbiAgICAgIHRvOiBzdHJpbmcsXG4gICAgICBhbW91bnQ6IEJpZ051bWJlcmlzaCxcbiAgICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlcyxcbiAgICApOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICAgIHJldHVybiBhd2FpdCB0aGlzLnZpZXcuY2FsbFN0YXRpYy50cmFuc2ZlckZyb20oXG4gICAgICAgIGZyb20sXG4gICAgICAgIHRvLFxuICAgICAgICBhbW91bnQsXG4gICAgICAgIHtcbiAgICAgICAgICBibG9ja1RhZzogdGhpcy5jb250ZXh0LmJsb2NrTnVtYmVyLFxuICAgICAgICAgIC4uLm92ZXJyaWRlcyxcbiAgICAgICAgfSxcbiAgICAgICAgdGhpcy5jb250ZXh0LnByZXBhcmVkRGF0YSxcbiAgICAgICAgdGhpcy5jb250ZXh0LmdldEV0aENhbGxDb250ZXh0KCksXG4gICAgICApO1xuICAgIH0sXG4gICAgYXN5bmMgdHJhbnNmZXJPd25lcnNoaXAoXG4gICAgICBuZXdPd25lcjogc3RyaW5nLFxuICAgICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzLFxuICAgICk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgcmV0dXJuIGF3YWl0IHRoaXMudmlldy5jYWxsU3RhdGljLnRyYW5zZmVyT3duZXJzaGlwKFxuICAgICAgICBuZXdPd25lcixcbiAgICAgICAge1xuICAgICAgICAgIGJsb2NrVGFnOiB0aGlzLmNvbnRleHQuYmxvY2tOdW1iZXIsXG4gICAgICAgICAgLi4ub3ZlcnJpZGVzLFxuICAgICAgICB9LFxuICAgICAgICB0aGlzLmNvbnRleHQucHJlcGFyZWREYXRhLFxuICAgICAgICB0aGlzLmNvbnRleHQuZ2V0RXRoQ2FsbENvbnRleHQoKSxcbiAgICAgICk7XG4gICAgfSxcbiAgfTtcblxuICBlbmNvZGVDYWxsID0ge1xuICAgIHZpZXc6IHRoaXMudmlldyxcbiAgICBjb250ZXh0OiB0aGlzLmNvbnRleHQsXG5cbiAgICBhbGxvd2FuY2UoXG4gICAgICBvd25lcjogc3RyaW5nLFxuICAgICAgc3BlbmRlcjogc3RyaW5nLFxuICAgICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzLFxuICAgICk6IEV0aENhbGxQYXJhbSB7XG4gICAgICByZXR1cm4gdGhpcy52aWV3LmVuY29kZUNhbGwuYWxsb3dhbmNlKG93bmVyLCBzcGVuZGVyLCB7XG4gICAgICAgIGNoYWluSWQ6IHRoaXMuY29udGV4dC5jaGFpbklkLnRvU3RyaW5nKCksXG4gICAgICAgIGFkZHJlc3M6IHRoaXMuY29udGV4dC5hZGRyZXNzLFxuICAgICAgICBibG9ja1RhZzogdGhpcy5jb250ZXh0LmdldEJsb2NrVGFnKG92ZXJyaWRlcyksXG4gICAgICB9KTtcbiAgICB9LFxuICAgIGFwcHJvdmUoXG4gICAgICBzcGVuZGVyOiBzdHJpbmcsXG4gICAgICBhbW91bnQ6IEJpZ051bWJlcmlzaCxcbiAgICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlcyxcbiAgICApOiBFdGhDYWxsUGFyYW0ge1xuICAgICAgcmV0dXJuIHRoaXMudmlldy5lbmNvZGVDYWxsLmFwcHJvdmUoc3BlbmRlciwgYW1vdW50LCB7XG4gICAgICAgIGNoYWluSWQ6IHRoaXMuY29udGV4dC5jaGFpbklkLnRvU3RyaW5nKCksXG4gICAgICAgIGFkZHJlc3M6IHRoaXMuY29udGV4dC5hZGRyZXNzLFxuICAgICAgICBibG9ja1RhZzogdGhpcy5jb250ZXh0LmdldEJsb2NrVGFnKG92ZXJyaWRlcyksXG4gICAgICB9KTtcbiAgICB9LFxuICAgIGJhbGFuY2VPZihhY2NvdW50OiBzdHJpbmcsIG92ZXJyaWRlcz86IE92ZXJyaWRlcyk6IEV0aENhbGxQYXJhbSB7XG4gICAgICByZXR1cm4gdGhpcy52aWV3LmVuY29kZUNhbGwuYmFsYW5jZU9mKGFjY291bnQsIHtcbiAgICAgICAgY2hhaW5JZDogdGhpcy5jb250ZXh0LmNoYWluSWQudG9TdHJpbmcoKSxcbiAgICAgICAgYWRkcmVzczogdGhpcy5jb250ZXh0LmFkZHJlc3MsXG4gICAgICAgIGJsb2NrVGFnOiB0aGlzLmNvbnRleHQuZ2V0QmxvY2tUYWcob3ZlcnJpZGVzKSxcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgYnVybihcbiAgICAgIGFjY291bnQ6IHN0cmluZyxcbiAgICAgIGFtb3VudDogQmlnTnVtYmVyaXNoLFxuICAgICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzLFxuICAgICk6IEV0aENhbGxQYXJhbSB7XG4gICAgICByZXR1cm4gdGhpcy52aWV3LmVuY29kZUNhbGwuYnVybihhY2NvdW50LCBhbW91bnQsIHtcbiAgICAgICAgY2hhaW5JZDogdGhpcy5jb250ZXh0LmNoYWluSWQudG9TdHJpbmcoKSxcbiAgICAgICAgYWRkcmVzczogdGhpcy5jb250ZXh0LmFkZHJlc3MsXG4gICAgICAgIGJsb2NrVGFnOiB0aGlzLmNvbnRleHQuZ2V0QmxvY2tUYWcob3ZlcnJpZGVzKSxcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgZGVjaW1hbHMob3ZlcnJpZGVzPzogT3ZlcnJpZGVzKTogRXRoQ2FsbFBhcmFtIHtcbiAgICAgIHJldHVybiB0aGlzLnZpZXcuZW5jb2RlQ2FsbC5kZWNpbWFscyh7XG4gICAgICAgIGNoYWluSWQ6IHRoaXMuY29udGV4dC5jaGFpbklkLnRvU3RyaW5nKCksXG4gICAgICAgIGFkZHJlc3M6IHRoaXMuY29udGV4dC5hZGRyZXNzLFxuICAgICAgICBibG9ja1RhZzogdGhpcy5jb250ZXh0LmdldEJsb2NrVGFnKG92ZXJyaWRlcyksXG4gICAgICB9KTtcbiAgICB9LFxuICAgIGRlY3JlYXNlQWxsb3dhbmNlKFxuICAgICAgc3BlbmRlcjogc3RyaW5nLFxuICAgICAgc3VidHJhY3RlZFZhbHVlOiBCaWdOdW1iZXJpc2gsXG4gICAgICBvdmVycmlkZXM/OiBPdmVycmlkZXMsXG4gICAgKTogRXRoQ2FsbFBhcmFtIHtcbiAgICAgIHJldHVybiB0aGlzLnZpZXcuZW5jb2RlQ2FsbC5kZWNyZWFzZUFsbG93YW5jZShzcGVuZGVyLCBzdWJ0cmFjdGVkVmFsdWUsIHtcbiAgICAgICAgY2hhaW5JZDogdGhpcy5jb250ZXh0LmNoYWluSWQudG9TdHJpbmcoKSxcbiAgICAgICAgYWRkcmVzczogdGhpcy5jb250ZXh0LmFkZHJlc3MsXG4gICAgICAgIGJsb2NrVGFnOiB0aGlzLmNvbnRleHQuZ2V0QmxvY2tUYWcob3ZlcnJpZGVzKSxcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgaW5jcmVhc2VBbGxvd2FuY2UoXG4gICAgICBzcGVuZGVyOiBzdHJpbmcsXG4gICAgICBhZGRlZFZhbHVlOiBCaWdOdW1iZXJpc2gsXG4gICAgICBvdmVycmlkZXM/OiBPdmVycmlkZXMsXG4gICAgKTogRXRoQ2FsbFBhcmFtIHtcbiAgICAgIHJldHVybiB0aGlzLnZpZXcuZW5jb2RlQ2FsbC5pbmNyZWFzZUFsbG93YW5jZShzcGVuZGVyLCBhZGRlZFZhbHVlLCB7XG4gICAgICAgIGNoYWluSWQ6IHRoaXMuY29udGV4dC5jaGFpbklkLnRvU3RyaW5nKCksXG4gICAgICAgIGFkZHJlc3M6IHRoaXMuY29udGV4dC5hZGRyZXNzLFxuICAgICAgICBibG9ja1RhZzogdGhpcy5jb250ZXh0LmdldEJsb2NrVGFnKG92ZXJyaWRlcyksXG4gICAgICB9KTtcbiAgICB9LFxuICAgIG1hc3RlclBlbnBpZShvdmVycmlkZXM/OiBPdmVycmlkZXMpOiBFdGhDYWxsUGFyYW0ge1xuICAgICAgcmV0dXJuIHRoaXMudmlldy5lbmNvZGVDYWxsLm1hc3RlclBlbnBpZSh7XG4gICAgICAgIGNoYWluSWQ6IHRoaXMuY29udGV4dC5jaGFpbklkLnRvU3RyaW5nKCksXG4gICAgICAgIGFkZHJlc3M6IHRoaXMuY29udGV4dC5hZGRyZXNzLFxuICAgICAgICBibG9ja1RhZzogdGhpcy5jb250ZXh0LmdldEJsb2NrVGFnKG92ZXJyaWRlcyksXG4gICAgICB9KTtcbiAgICB9LFxuICAgIG1pbnQoXG4gICAgICBhY2NvdW50OiBzdHJpbmcsXG4gICAgICBhbW91bnQ6IEJpZ051bWJlcmlzaCxcbiAgICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlcyxcbiAgICApOiBFdGhDYWxsUGFyYW0ge1xuICAgICAgcmV0dXJuIHRoaXMudmlldy5lbmNvZGVDYWxsLm1pbnQoYWNjb3VudCwgYW1vdW50LCB7XG4gICAgICAgIGNoYWluSWQ6IHRoaXMuY29udGV4dC5jaGFpbklkLnRvU3RyaW5nKCksXG4gICAgICAgIGFkZHJlc3M6IHRoaXMuY29udGV4dC5hZGRyZXNzLFxuICAgICAgICBibG9ja1RhZzogdGhpcy5jb250ZXh0LmdldEJsb2NrVGFnKG92ZXJyaWRlcyksXG4gICAgICB9KTtcbiAgICB9LFxuICAgIG5hbWUob3ZlcnJpZGVzPzogT3ZlcnJpZGVzKTogRXRoQ2FsbFBhcmFtIHtcbiAgICAgIHJldHVybiB0aGlzLnZpZXcuZW5jb2RlQ2FsbC5uYW1lKHtcbiAgICAgICAgY2hhaW5JZDogdGhpcy5jb250ZXh0LmNoYWluSWQudG9TdHJpbmcoKSxcbiAgICAgICAgYWRkcmVzczogdGhpcy5jb250ZXh0LmFkZHJlc3MsXG4gICAgICAgIGJsb2NrVGFnOiB0aGlzLmNvbnRleHQuZ2V0QmxvY2tUYWcob3ZlcnJpZGVzKSxcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgb3duZXIob3ZlcnJpZGVzPzogT3ZlcnJpZGVzKTogRXRoQ2FsbFBhcmFtIHtcbiAgICAgIHJldHVybiB0aGlzLnZpZXcuZW5jb2RlQ2FsbC5vd25lcih7XG4gICAgICAgIGNoYWluSWQ6IHRoaXMuY29udGV4dC5jaGFpbklkLnRvU3RyaW5nKCksXG4gICAgICAgIGFkZHJlc3M6IHRoaXMuY29udGV4dC5hZGRyZXNzLFxuICAgICAgICBibG9ja1RhZzogdGhpcy5jb250ZXh0LmdldEJsb2NrVGFnKG92ZXJyaWRlcyksXG4gICAgICB9KTtcbiAgICB9LFxuICAgIHJlbm91bmNlT3duZXJzaGlwKG92ZXJyaWRlcz86IE92ZXJyaWRlcyk6IEV0aENhbGxQYXJhbSB7XG4gICAgICByZXR1cm4gdGhpcy52aWV3LmVuY29kZUNhbGwucmVub3VuY2VPd25lcnNoaXAoe1xuICAgICAgICBjaGFpbklkOiB0aGlzLmNvbnRleHQuY2hhaW5JZC50b1N0cmluZygpLFxuICAgICAgICBhZGRyZXNzOiB0aGlzLmNvbnRleHQuYWRkcmVzcyxcbiAgICAgICAgYmxvY2tUYWc6IHRoaXMuY29udGV4dC5nZXRCbG9ja1RhZyhvdmVycmlkZXMpLFxuICAgICAgfSk7XG4gICAgfSxcbiAgICBzeW1ib2wob3ZlcnJpZGVzPzogT3ZlcnJpZGVzKTogRXRoQ2FsbFBhcmFtIHtcbiAgICAgIHJldHVybiB0aGlzLnZpZXcuZW5jb2RlQ2FsbC5zeW1ib2woe1xuICAgICAgICBjaGFpbklkOiB0aGlzLmNvbnRleHQuY2hhaW5JZC50b1N0cmluZygpLFxuICAgICAgICBhZGRyZXNzOiB0aGlzLmNvbnRleHQuYWRkcmVzcyxcbiAgICAgICAgYmxvY2tUYWc6IHRoaXMuY29udGV4dC5nZXRCbG9ja1RhZyhvdmVycmlkZXMpLFxuICAgICAgfSk7XG4gICAgfSxcbiAgICB0b3RhbFN1cHBseShvdmVycmlkZXM/OiBPdmVycmlkZXMpOiBFdGhDYWxsUGFyYW0ge1xuICAgICAgcmV0dXJuIHRoaXMudmlldy5lbmNvZGVDYWxsLnRvdGFsU3VwcGx5KHtcbiAgICAgICAgY2hhaW5JZDogdGhpcy5jb250ZXh0LmNoYWluSWQudG9TdHJpbmcoKSxcbiAgICAgICAgYWRkcmVzczogdGhpcy5jb250ZXh0LmFkZHJlc3MsXG4gICAgICAgIGJsb2NrVGFnOiB0aGlzLmNvbnRleHQuZ2V0QmxvY2tUYWcob3ZlcnJpZGVzKSxcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgdHJhbnNmZXIoXG4gICAgICB0bzogc3RyaW5nLFxuICAgICAgYW1vdW50OiBCaWdOdW1iZXJpc2gsXG4gICAgICBvdmVycmlkZXM/OiBPdmVycmlkZXMsXG4gICAgKTogRXRoQ2FsbFBhcmFtIHtcbiAgICAgIHJldHVybiB0aGlzLnZpZXcuZW5jb2RlQ2FsbC50cmFuc2Zlcih0bywgYW1vdW50LCB7XG4gICAgICAgIGNoYWluSWQ6IHRoaXMuY29udGV4dC5jaGFpbklkLnRvU3RyaW5nKCksXG4gICAgICAgIGFkZHJlc3M6IHRoaXMuY29udGV4dC5hZGRyZXNzLFxuICAgICAgICBibG9ja1RhZzogdGhpcy5jb250ZXh0LmdldEJsb2NrVGFnKG92ZXJyaWRlcyksXG4gICAgICB9KTtcbiAgICB9LFxuICAgIHRyYW5zZmVyRnJvbShcbiAgICAgIGZyb206IHN0cmluZyxcbiAgICAgIHRvOiBzdHJpbmcsXG4gICAgICBhbW91bnQ6IEJpZ051bWJlcmlzaCxcbiAgICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlcyxcbiAgICApOiBFdGhDYWxsUGFyYW0ge1xuICAgICAgcmV0dXJuIHRoaXMudmlldy5lbmNvZGVDYWxsLnRyYW5zZmVyRnJvbShmcm9tLCB0bywgYW1vdW50LCB7XG4gICAgICAgIGNoYWluSWQ6IHRoaXMuY29udGV4dC5jaGFpbklkLnRvU3RyaW5nKCksXG4gICAgICAgIGFkZHJlc3M6IHRoaXMuY29udGV4dC5hZGRyZXNzLFxuICAgICAgICBibG9ja1RhZzogdGhpcy5jb250ZXh0LmdldEJsb2NrVGFnKG92ZXJyaWRlcyksXG4gICAgICB9KTtcbiAgICB9LFxuICAgIHRyYW5zZmVyT3duZXJzaGlwKG5ld093bmVyOiBzdHJpbmcsIG92ZXJyaWRlcz86IE92ZXJyaWRlcyk6IEV0aENhbGxQYXJhbSB7XG4gICAgICByZXR1cm4gdGhpcy52aWV3LmVuY29kZUNhbGwudHJhbnNmZXJPd25lcnNoaXAobmV3T3duZXIsIHtcbiAgICAgICAgY2hhaW5JZDogdGhpcy5jb250ZXh0LmNoYWluSWQudG9TdHJpbmcoKSxcbiAgICAgICAgYWRkcmVzczogdGhpcy5jb250ZXh0LmFkZHJlc3MsXG4gICAgICAgIGJsb2NrVGFnOiB0aGlzLmNvbnRleHQuZ2V0QmxvY2tUYWcob3ZlcnJpZGVzKSxcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgdW5kZXJseWluZyhvdmVycmlkZXM/OiBPdmVycmlkZXMpOiBFdGhDYWxsUGFyYW0ge1xuICAgICAgcmV0dXJuIHRoaXMudmlldy5lbmNvZGVDYWxsLnVuZGVybHlpbmcoe1xuICAgICAgICBjaGFpbklkOiB0aGlzLmNvbnRleHQuY2hhaW5JZC50b1N0cmluZygpLFxuICAgICAgICBhZGRyZXNzOiB0aGlzLmNvbnRleHQuYWRkcmVzcyxcbiAgICAgICAgYmxvY2tUYWc6IHRoaXMuY29udGV4dC5nZXRCbG9ja1RhZyhvdmVycmlkZXMpLFxuICAgICAgfSk7XG4gICAgfSxcbiAgfTtcbn1cblxuZXhwb3J0IHR5cGUgUGVucGllUmVjZWlwdFRva2VuQ29udGV4dCA9IENvbnRyYWN0Q29udGV4dDxcbiAgUGVucGllUmVjZWlwdFRva2VuLFxuICBQZW5waWVSZWNlaXB0VG9rZW5Cb3VuZENvbnRyYWN0Vmlld1xuPjtcblxuZXhwb3J0IGNsYXNzIFBlbnBpZVJlY2VpcHRUb2tlblByb2Nlc3NvciBleHRlbmRzIEJhc2VQcm9jZXNzb3I8XG4gIFBlbnBpZVJlY2VpcHRUb2tlbixcbiAgUGVucGllUmVjZWlwdFRva2VuQm91bmRDb250cmFjdFZpZXdcbj4ge1xuICBvbkV2ZW50QXBwcm92YWwoXG4gICAgaGFuZGxlcjogKGV2ZW50OiBBcHByb3ZhbEV2ZW50LCBjdHg6IFBlbnBpZVJlY2VpcHRUb2tlbkNvbnRleHQpID0+IHZvaWQsXG4gICAgZmlsdGVyPzogQXBwcm92YWxFdmVudEZpbHRlciB8IEFwcHJvdmFsRXZlbnRGaWx0ZXJbXSxcbiAgICBmZXRjaENvbmZpZz86IFBhcnRpYWw8RXRoRmV0Y2hDb25maWc+LFxuICAgIHByZXByb2Nlc3NIYW5kbGVyPzogKFxuICAgICAgZXZlbnQ6IEFwcHJvdmFsRXZlbnQsXG4gICAgICBjdHg6IFBlbnBpZVJlY2VpcHRUb2tlbkNvbnRleHQsXG4gICAgICBwcmVwcm9jZXNzU3RvcmU6IHsgW2s6IHN0cmluZ106IGFueSB9LFxuICAgICkgPT4gUHJvbWlzZTxQcmVwcm9jZXNzUmVzdWx0PixcbiAgKTogdGhpcyB7XG4gICAgaWYgKCFmaWx0ZXIpIHtcbiAgICAgIGZpbHRlciA9IHRlbXBsYXRlQ29udHJhY3QuZmlsdGVyc1tcIkFwcHJvdmFsKGFkZHJlc3MsYWRkcmVzcyx1aW50MjU2KVwiXShcbiAgICAgICAgbnVsbCxcbiAgICAgICAgbnVsbCxcbiAgICAgICAgbnVsbCxcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiBzdXBlci5vbkV0aEV2ZW50KGhhbmRsZXIsIGZpbHRlciEsIGZldGNoQ29uZmlnLCBwcmVwcm9jZXNzSGFuZGxlcik7XG4gIH1cblxuICBvbkV2ZW50T3duZXJzaGlwVHJhbnNmZXJyZWQoXG4gICAgaGFuZGxlcjogKFxuICAgICAgZXZlbnQ6IE93bmVyc2hpcFRyYW5zZmVycmVkRXZlbnQsXG4gICAgICBjdHg6IFBlbnBpZVJlY2VpcHRUb2tlbkNvbnRleHQsXG4gICAgKSA9PiB2b2lkLFxuICAgIGZpbHRlcj86XG4gICAgICB8IE93bmVyc2hpcFRyYW5zZmVycmVkRXZlbnRGaWx0ZXJcbiAgICAgIHwgT3duZXJzaGlwVHJhbnNmZXJyZWRFdmVudEZpbHRlcltdLFxuICAgIGZldGNoQ29uZmlnPzogUGFydGlhbDxFdGhGZXRjaENvbmZpZz4sXG4gICAgcHJlcHJvY2Vzc0hhbmRsZXI/OiAoXG4gICAgICBldmVudDogT3duZXJzaGlwVHJhbnNmZXJyZWRFdmVudCxcbiAgICAgIGN0eDogUGVucGllUmVjZWlwdFRva2VuQ29udGV4dCxcbiAgICAgIHByZXByb2Nlc3NTdG9yZTogeyBbazogc3RyaW5nXTogYW55IH0sXG4gICAgKSA9PiBQcm9taXNlPFByZXByb2Nlc3NSZXN1bHQ+LFxuICApOiB0aGlzIHtcbiAgICBpZiAoIWZpbHRlcikge1xuICAgICAgZmlsdGVyID0gdGVtcGxhdGVDb250cmFjdC5maWx0ZXJzW1xuICAgICAgICBcIk93bmVyc2hpcFRyYW5zZmVycmVkKGFkZHJlc3MsYWRkcmVzcylcIlxuICAgICAgXShudWxsLCBudWxsKTtcbiAgICB9XG4gICAgcmV0dXJuIHN1cGVyLm9uRXRoRXZlbnQoaGFuZGxlciwgZmlsdGVyISwgZmV0Y2hDb25maWcsIHByZXByb2Nlc3NIYW5kbGVyKTtcbiAgfVxuXG4gIG9uRXZlbnRUcmFuc2ZlcihcbiAgICBoYW5kbGVyOiAoZXZlbnQ6IFRyYW5zZmVyRXZlbnQsIGN0eDogUGVucGllUmVjZWlwdFRva2VuQ29udGV4dCkgPT4gdm9pZCxcbiAgICBmaWx0ZXI/OiBUcmFuc2ZlckV2ZW50RmlsdGVyIHwgVHJhbnNmZXJFdmVudEZpbHRlcltdLFxuICAgIGZldGNoQ29uZmlnPzogUGFydGlhbDxFdGhGZXRjaENvbmZpZz4sXG4gICAgcHJlcHJvY2Vzc0hhbmRsZXI/OiAoXG4gICAgICBldmVudDogVHJhbnNmZXJFdmVudCxcbiAgICAgIGN0eDogUGVucGllUmVjZWlwdFRva2VuQ29udGV4dCxcbiAgICAgIHByZXByb2Nlc3NTdG9yZTogeyBbazogc3RyaW5nXTogYW55IH0sXG4gICAgKSA9PiBQcm9taXNlPFByZXByb2Nlc3NSZXN1bHQ+LFxuICApOiB0aGlzIHtcbiAgICBpZiAoIWZpbHRlcikge1xuICAgICAgZmlsdGVyID0gdGVtcGxhdGVDb250cmFjdC5maWx0ZXJzW1wiVHJhbnNmZXIoYWRkcmVzcyxhZGRyZXNzLHVpbnQyNTYpXCJdKFxuICAgICAgICBudWxsLFxuICAgICAgICBudWxsLFxuICAgICAgICBudWxsLFxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIHN1cGVyLm9uRXRoRXZlbnQoaGFuZGxlciwgZmlsdGVyISwgZmV0Y2hDb25maWcsIHByZXByb2Nlc3NIYW5kbGVyKTtcbiAgfVxuXG4gIG9uQ2FsbEFsbG93YW5jZShcbiAgICBoYW5kbGVyOiAoY2FsbDogQWxsb3dhbmNlQ2FsbFRyYWNlLCBjdHg6IFBlbnBpZVJlY2VpcHRUb2tlbkNvbnRleHQpID0+IHZvaWQsXG4gICAgZmV0Y2hDb25maWc/OiBQYXJ0aWFsPEV0aEZldGNoQ29uZmlnPixcbiAgICBwcmVwcm9jZXNzSGFuZGxlcj86IChcbiAgICAgIGNhbGw6IEFsbG93YW5jZUNhbGxUcmFjZSxcbiAgICAgIGN0eDogUGVucGllUmVjZWlwdFRva2VuQ29udGV4dCxcbiAgICApID0+IFByb21pc2U8UHJlcHJvY2Vzc1Jlc3VsdD4sXG4gICk6IHRoaXMge1xuICAgIHJldHVybiBzdXBlci5vbkV0aFRyYWNlKFxuICAgICAgXCIweGRkNjJlZDNlXCIsXG4gICAgICBoYW5kbGVyIGFzIGFueSxcbiAgICAgIGZldGNoQ29uZmlnLFxuICAgICAgcHJlcHJvY2Vzc0hhbmRsZXIsXG4gICAgKTtcbiAgfVxuXG4gIG9uQ2FsbEFwcHJvdmUoXG4gICAgaGFuZGxlcjogKGNhbGw6IEFwcHJvdmVDYWxsVHJhY2UsIGN0eDogUGVucGllUmVjZWlwdFRva2VuQ29udGV4dCkgPT4gdm9pZCxcbiAgICBmZXRjaENvbmZpZz86IFBhcnRpYWw8RXRoRmV0Y2hDb25maWc+LFxuICAgIHByZXByb2Nlc3NIYW5kbGVyPzogKFxuICAgICAgY2FsbDogQXBwcm92ZUNhbGxUcmFjZSxcbiAgICAgIGN0eDogUGVucGllUmVjZWlwdFRva2VuQ29udGV4dCxcbiAgICApID0+IFByb21pc2U8UHJlcHJvY2Vzc1Jlc3VsdD4sXG4gICk6IHRoaXMge1xuICAgIHJldHVybiBzdXBlci5vbkV0aFRyYWNlKFxuICAgICAgXCIweDA5NWVhN2IzXCIsXG4gICAgICBoYW5kbGVyIGFzIGFueSxcbiAgICAgIGZldGNoQ29uZmlnLFxuICAgICAgcHJlcHJvY2Vzc0hhbmRsZXIsXG4gICAgKTtcbiAgfVxuXG4gIG9uQ2FsbEJhbGFuY2VPZihcbiAgICBoYW5kbGVyOiAoY2FsbDogQmFsYW5jZU9mQ2FsbFRyYWNlLCBjdHg6IFBlbnBpZVJlY2VpcHRUb2tlbkNvbnRleHQpID0+IHZvaWQsXG4gICAgZmV0Y2hDb25maWc/OiBQYXJ0aWFsPEV0aEZldGNoQ29uZmlnPixcbiAgICBwcmVwcm9jZXNzSGFuZGxlcj86IChcbiAgICAgIGNhbGw6IEJhbGFuY2VPZkNhbGxUcmFjZSxcbiAgICAgIGN0eDogUGVucGllUmVjZWlwdFRva2VuQ29udGV4dCxcbiAgICApID0+IFByb21pc2U8UHJlcHJvY2Vzc1Jlc3VsdD4sXG4gICk6IHRoaXMge1xuICAgIHJldHVybiBzdXBlci5vbkV0aFRyYWNlKFxuICAgICAgXCIweDcwYTA4MjMxXCIsXG4gICAgICBoYW5kbGVyIGFzIGFueSxcbiAgICAgIGZldGNoQ29uZmlnLFxuICAgICAgcHJlcHJvY2Vzc0hhbmRsZXIsXG4gICAgKTtcbiAgfVxuXG4gIG9uQ2FsbEJ1cm4oXG4gICAgaGFuZGxlcjogKGNhbGw6IEJ1cm5DYWxsVHJhY2UsIGN0eDogUGVucGllUmVjZWlwdFRva2VuQ29udGV4dCkgPT4gdm9pZCxcbiAgICBmZXRjaENvbmZpZz86IFBhcnRpYWw8RXRoRmV0Y2hDb25maWc+LFxuICAgIHByZXByb2Nlc3NIYW5kbGVyPzogKFxuICAgICAgY2FsbDogQnVybkNhbGxUcmFjZSxcbiAgICAgIGN0eDogUGVucGllUmVjZWlwdFRva2VuQ29udGV4dCxcbiAgICApID0+IFByb21pc2U8UHJlcHJvY2Vzc1Jlc3VsdD4sXG4gICk6IHRoaXMge1xuICAgIHJldHVybiBzdXBlci5vbkV0aFRyYWNlKFxuICAgICAgXCIweDlkYzI5ZmFjXCIsXG4gICAgICBoYW5kbGVyIGFzIGFueSxcbiAgICAgIGZldGNoQ29uZmlnLFxuICAgICAgcHJlcHJvY2Vzc0hhbmRsZXIsXG4gICAgKTtcbiAgfVxuXG4gIG9uQ2FsbERlY2ltYWxzKFxuICAgIGhhbmRsZXI6IChjYWxsOiBEZWNpbWFsc0NhbGxUcmFjZSwgY3R4OiBQZW5waWVSZWNlaXB0VG9rZW5Db250ZXh0KSA9PiB2b2lkLFxuICAgIGZldGNoQ29uZmlnPzogUGFydGlhbDxFdGhGZXRjaENvbmZpZz4sXG4gICAgcHJlcHJvY2Vzc0hhbmRsZXI/OiAoXG4gICAgICBjYWxsOiBEZWNpbWFsc0NhbGxUcmFjZSxcbiAgICAgIGN0eDogUGVucGllUmVjZWlwdFRva2VuQ29udGV4dCxcbiAgICApID0+IFByb21pc2U8UHJlcHJvY2Vzc1Jlc3VsdD4sXG4gICk6IHRoaXMge1xuICAgIHJldHVybiBzdXBlci5vbkV0aFRyYWNlKFxuICAgICAgXCIweDMxM2NlNTY3XCIsXG4gICAgICBoYW5kbGVyIGFzIGFueSxcbiAgICAgIGZldGNoQ29uZmlnLFxuICAgICAgcHJlcHJvY2Vzc0hhbmRsZXIsXG4gICAgKTtcbiAgfVxuXG4gIG9uQ2FsbERlY3JlYXNlQWxsb3dhbmNlKFxuICAgIGhhbmRsZXI6IChcbiAgICAgIGNhbGw6IERlY3JlYXNlQWxsb3dhbmNlQ2FsbFRyYWNlLFxuICAgICAgY3R4OiBQZW5waWVSZWNlaXB0VG9rZW5Db250ZXh0LFxuICAgICkgPT4gdm9pZCxcbiAgICBmZXRjaENvbmZpZz86IFBhcnRpYWw8RXRoRmV0Y2hDb25maWc+LFxuICAgIHByZXByb2Nlc3NIYW5kbGVyPzogKFxuICAgICAgY2FsbDogRGVjcmVhc2VBbGxvd2FuY2VDYWxsVHJhY2UsXG4gICAgICBjdHg6IFBlbnBpZVJlY2VpcHRUb2tlbkNvbnRleHQsXG4gICAgKSA9PiBQcm9taXNlPFByZXByb2Nlc3NSZXN1bHQ+LFxuICApOiB0aGlzIHtcbiAgICByZXR1cm4gc3VwZXIub25FdGhUcmFjZShcbiAgICAgIFwiMHhhNDU3YzJkN1wiLFxuICAgICAgaGFuZGxlciBhcyBhbnksXG4gICAgICBmZXRjaENvbmZpZyxcbiAgICAgIHByZXByb2Nlc3NIYW5kbGVyLFxuICAgICk7XG4gIH1cblxuICBvbkNhbGxJbmNyZWFzZUFsbG93YW5jZShcbiAgICBoYW5kbGVyOiAoXG4gICAgICBjYWxsOiBJbmNyZWFzZUFsbG93YW5jZUNhbGxUcmFjZSxcbiAgICAgIGN0eDogUGVucGllUmVjZWlwdFRva2VuQ29udGV4dCxcbiAgICApID0+IHZvaWQsXG4gICAgZmV0Y2hDb25maWc/OiBQYXJ0aWFsPEV0aEZldGNoQ29uZmlnPixcbiAgICBwcmVwcm9jZXNzSGFuZGxlcj86IChcbiAgICAgIGNhbGw6IEluY3JlYXNlQWxsb3dhbmNlQ2FsbFRyYWNlLFxuICAgICAgY3R4OiBQZW5waWVSZWNlaXB0VG9rZW5Db250ZXh0LFxuICAgICkgPT4gUHJvbWlzZTxQcmVwcm9jZXNzUmVzdWx0PixcbiAgKTogdGhpcyB7XG4gICAgcmV0dXJuIHN1cGVyLm9uRXRoVHJhY2UoXG4gICAgICBcIjB4Mzk1MDkzNTFcIixcbiAgICAgIGhhbmRsZXIgYXMgYW55LFxuICAgICAgZmV0Y2hDb25maWcsXG4gICAgICBwcmVwcm9jZXNzSGFuZGxlcixcbiAgICApO1xuICB9XG5cbiAgb25DYWxsTWFzdGVyUGVucGllKFxuICAgIGhhbmRsZXI6IChcbiAgICAgIGNhbGw6IE1hc3RlclBlbnBpZUNhbGxUcmFjZSxcbiAgICAgIGN0eDogUGVucGllUmVjZWlwdFRva2VuQ29udGV4dCxcbiAgICApID0+IHZvaWQsXG4gICAgZmV0Y2hDb25maWc/OiBQYXJ0aWFsPEV0aEZldGNoQ29uZmlnPixcbiAgICBwcmVwcm9jZXNzSGFuZGxlcj86IChcbiAgICAgIGNhbGw6IE1hc3RlclBlbnBpZUNhbGxUcmFjZSxcbiAgICAgIGN0eDogUGVucGllUmVjZWlwdFRva2VuQ29udGV4dCxcbiAgICApID0+IFByb21pc2U8UHJlcHJvY2Vzc1Jlc3VsdD4sXG4gICk6IHRoaXMge1xuICAgIHJldHVybiBzdXBlci5vbkV0aFRyYWNlKFxuICAgICAgXCIweDNjNDFkNWFiXCIsXG4gICAgICBoYW5kbGVyIGFzIGFueSxcbiAgICAgIGZldGNoQ29uZmlnLFxuICAgICAgcHJlcHJvY2Vzc0hhbmRsZXIsXG4gICAgKTtcbiAgfVxuXG4gIG9uQ2FsbE1pbnQoXG4gICAgaGFuZGxlcjogKGNhbGw6IE1pbnRDYWxsVHJhY2UsIGN0eDogUGVucGllUmVjZWlwdFRva2VuQ29udGV4dCkgPT4gdm9pZCxcbiAgICBmZXRjaENvbmZpZz86IFBhcnRpYWw8RXRoRmV0Y2hDb25maWc+LFxuICAgIHByZXByb2Nlc3NIYW5kbGVyPzogKFxuICAgICAgY2FsbDogTWludENhbGxUcmFjZSxcbiAgICAgIGN0eDogUGVucGllUmVjZWlwdFRva2VuQ29udGV4dCxcbiAgICApID0+IFByb21pc2U8UHJlcHJvY2Vzc1Jlc3VsdD4sXG4gICk6IHRoaXMge1xuICAgIHJldHVybiBzdXBlci5vbkV0aFRyYWNlKFxuICAgICAgXCIweDQwYzEwZjE5XCIsXG4gICAgICBoYW5kbGVyIGFzIGFueSxcbiAgICAgIGZldGNoQ29uZmlnLFxuICAgICAgcHJlcHJvY2Vzc0hhbmRsZXIsXG4gICAgKTtcbiAgfVxuXG4gIG9uQ2FsbE5hbWUoXG4gICAgaGFuZGxlcjogKGNhbGw6IE5hbWVDYWxsVHJhY2UsIGN0eDogUGVucGllUmVjZWlwdFRva2VuQ29udGV4dCkgPT4gdm9pZCxcbiAgICBmZXRjaENvbmZpZz86IFBhcnRpYWw8RXRoRmV0Y2hDb25maWc+LFxuICAgIHByZXByb2Nlc3NIYW5kbGVyPzogKFxuICAgICAgY2FsbDogTmFtZUNhbGxUcmFjZSxcbiAgICAgIGN0eDogUGVucGllUmVjZWlwdFRva2VuQ29udGV4dCxcbiAgICApID0+IFByb21pc2U8UHJlcHJvY2Vzc1Jlc3VsdD4sXG4gICk6IHRoaXMge1xuICAgIHJldHVybiBzdXBlci5vbkV0aFRyYWNlKFxuICAgICAgXCIweDA2ZmRkZTAzXCIsXG4gICAgICBoYW5kbGVyIGFzIGFueSxcbiAgICAgIGZldGNoQ29uZmlnLFxuICAgICAgcHJlcHJvY2Vzc0hhbmRsZXIsXG4gICAgKTtcbiAgfVxuXG4gIG9uQ2FsbE93bmVyKFxuICAgIGhhbmRsZXI6IChjYWxsOiBPd25lckNhbGxUcmFjZSwgY3R4OiBQZW5waWVSZWNlaXB0VG9rZW5Db250ZXh0KSA9PiB2b2lkLFxuICAgIGZldGNoQ29uZmlnPzogUGFydGlhbDxFdGhGZXRjaENvbmZpZz4sXG4gICAgcHJlcHJvY2Vzc0hhbmRsZXI/OiAoXG4gICAgICBjYWxsOiBPd25lckNhbGxUcmFjZSxcbiAgICAgIGN0eDogUGVucGllUmVjZWlwdFRva2VuQ29udGV4dCxcbiAgICApID0+IFByb21pc2U8UHJlcHJvY2Vzc1Jlc3VsdD4sXG4gICk6IHRoaXMge1xuICAgIHJldHVybiBzdXBlci5vbkV0aFRyYWNlKFxuICAgICAgXCIweDhkYTVjYjViXCIsXG4gICAgICBoYW5kbGVyIGFzIGFueSxcbiAgICAgIGZldGNoQ29uZmlnLFxuICAgICAgcHJlcHJvY2Vzc0hhbmRsZXIsXG4gICAgKTtcbiAgfVxuXG4gIG9uQ2FsbFJlbm91bmNlT3duZXJzaGlwKFxuICAgIGhhbmRsZXI6IChcbiAgICAgIGNhbGw6IFJlbm91bmNlT3duZXJzaGlwQ2FsbFRyYWNlLFxuICAgICAgY3R4OiBQZW5waWVSZWNlaXB0VG9rZW5Db250ZXh0LFxuICAgICkgPT4gdm9pZCxcbiAgICBmZXRjaENvbmZpZz86IFBhcnRpYWw8RXRoRmV0Y2hDb25maWc+LFxuICAgIHByZXByb2Nlc3NIYW5kbGVyPzogKFxuICAgICAgY2FsbDogUmVub3VuY2VPd25lcnNoaXBDYWxsVHJhY2UsXG4gICAgICBjdHg6IFBlbnBpZVJlY2VpcHRUb2tlbkNvbnRleHQsXG4gICAgKSA9PiBQcm9taXNlPFByZXByb2Nlc3NSZXN1bHQ+LFxuICApOiB0aGlzIHtcbiAgICByZXR1cm4gc3VwZXIub25FdGhUcmFjZShcbiAgICAgIFwiMHg3MTUwMThhNlwiLFxuICAgICAgaGFuZGxlciBhcyBhbnksXG4gICAgICBmZXRjaENvbmZpZyxcbiAgICAgIHByZXByb2Nlc3NIYW5kbGVyLFxuICAgICk7XG4gIH1cblxuICBvbkNhbGxTeW1ib2woXG4gICAgaGFuZGxlcjogKGNhbGw6IFN5bWJvbENhbGxUcmFjZSwgY3R4OiBQZW5waWVSZWNlaXB0VG9rZW5Db250ZXh0KSA9PiB2b2lkLFxuICAgIGZldGNoQ29uZmlnPzogUGFydGlhbDxFdGhGZXRjaENvbmZpZz4sXG4gICAgcHJlcHJvY2Vzc0hhbmRsZXI/OiAoXG4gICAgICBjYWxsOiBTeW1ib2xDYWxsVHJhY2UsXG4gICAgICBjdHg6IFBlbnBpZVJlY2VpcHRUb2tlbkNvbnRleHQsXG4gICAgKSA9PiBQcm9taXNlPFByZXByb2Nlc3NSZXN1bHQ+LFxuICApOiB0aGlzIHtcbiAgICByZXR1cm4gc3VwZXIub25FdGhUcmFjZShcbiAgICAgIFwiMHg5NWQ4OWI0MVwiLFxuICAgICAgaGFuZGxlciBhcyBhbnksXG4gICAgICBmZXRjaENvbmZpZyxcbiAgICAgIHByZXByb2Nlc3NIYW5kbGVyLFxuICAgICk7XG4gIH1cblxuICBvbkNhbGxUb3RhbFN1cHBseShcbiAgICBoYW5kbGVyOiAoXG4gICAgICBjYWxsOiBUb3RhbFN1cHBseUNhbGxUcmFjZSxcbiAgICAgIGN0eDogUGVucGllUmVjZWlwdFRva2VuQ29udGV4dCxcbiAgICApID0+IHZvaWQsXG4gICAgZmV0Y2hDb25maWc/OiBQYXJ0aWFsPEV0aEZldGNoQ29uZmlnPixcbiAgICBwcmVwcm9jZXNzSGFuZGxlcj86IChcbiAgICAgIGNhbGw6IFRvdGFsU3VwcGx5Q2FsbFRyYWNlLFxuICAgICAgY3R4OiBQZW5waWVSZWNlaXB0VG9rZW5Db250ZXh0LFxuICAgICkgPT4gUHJvbWlzZTxQcmVwcm9jZXNzUmVzdWx0PixcbiAgKTogdGhpcyB7XG4gICAgcmV0dXJuIHN1cGVyLm9uRXRoVHJhY2UoXG4gICAgICBcIjB4MTgxNjBkZGRcIixcbiAgICAgIGhhbmRsZXIgYXMgYW55LFxuICAgICAgZmV0Y2hDb25maWcsXG4gICAgICBwcmVwcm9jZXNzSGFuZGxlcixcbiAgICApO1xuICB9XG5cbiAgb25DYWxsVHJhbnNmZXIoXG4gICAgaGFuZGxlcjogKGNhbGw6IFRyYW5zZmVyQ2FsbFRyYWNlLCBjdHg6IFBlbnBpZVJlY2VpcHRUb2tlbkNvbnRleHQpID0+IHZvaWQsXG4gICAgZmV0Y2hDb25maWc/OiBQYXJ0aWFsPEV0aEZldGNoQ29uZmlnPixcbiAgICBwcmVwcm9jZXNzSGFuZGxlcj86IChcbiAgICAgIGNhbGw6IFRyYW5zZmVyQ2FsbFRyYWNlLFxuICAgICAgY3R4OiBQZW5waWVSZWNlaXB0VG9rZW5Db250ZXh0LFxuICAgICkgPT4gUHJvbWlzZTxQcmVwcm9jZXNzUmVzdWx0PixcbiAgKTogdGhpcyB7XG4gICAgcmV0dXJuIHN1cGVyLm9uRXRoVHJhY2UoXG4gICAgICBcIjB4YTkwNTljYmJcIixcbiAgICAgIGhhbmRsZXIgYXMgYW55LFxuICAgICAgZmV0Y2hDb25maWcsXG4gICAgICBwcmVwcm9jZXNzSGFuZGxlcixcbiAgICApO1xuICB9XG5cbiAgb25DYWxsVHJhbnNmZXJGcm9tKFxuICAgIGhhbmRsZXI6IChcbiAgICAgIGNhbGw6IFRyYW5zZmVyRnJvbUNhbGxUcmFjZSxcbiAgICAgIGN0eDogUGVucGllUmVjZWlwdFRva2VuQ29udGV4dCxcbiAgICApID0+IHZvaWQsXG4gICAgZmV0Y2hDb25maWc/OiBQYXJ0aWFsPEV0aEZldGNoQ29uZmlnPixcbiAgICBwcmVwcm9jZXNzSGFuZGxlcj86IChcbiAgICAgIGNhbGw6IFRyYW5zZmVyRnJvbUNhbGxUcmFjZSxcbiAgICAgIGN0eDogUGVucGllUmVjZWlwdFRva2VuQ29udGV4dCxcbiAgICApID0+IFByb21pc2U8UHJlcHJvY2Vzc1Jlc3VsdD4sXG4gICk6IHRoaXMge1xuICAgIHJldHVybiBzdXBlci5vbkV0aFRyYWNlKFxuICAgICAgXCIweDIzYjg3MmRkXCIsXG4gICAgICBoYW5kbGVyIGFzIGFueSxcbiAgICAgIGZldGNoQ29uZmlnLFxuICAgICAgcHJlcHJvY2Vzc0hhbmRsZXIsXG4gICAgKTtcbiAgfVxuXG4gIG9uQ2FsbFRyYW5zZmVyT3duZXJzaGlwKFxuICAgIGhhbmRsZXI6IChcbiAgICAgIGNhbGw6IFRyYW5zZmVyT3duZXJzaGlwQ2FsbFRyYWNlLFxuICAgICAgY3R4OiBQZW5waWVSZWNlaXB0VG9rZW5Db250ZXh0LFxuICAgICkgPT4gdm9pZCxcbiAgICBmZXRjaENvbmZpZz86IFBhcnRpYWw8RXRoRmV0Y2hDb25maWc+LFxuICAgIHByZXByb2Nlc3NIYW5kbGVyPzogKFxuICAgICAgY2FsbDogVHJhbnNmZXJPd25lcnNoaXBDYWxsVHJhY2UsXG4gICAgICBjdHg6IFBlbnBpZVJlY2VpcHRUb2tlbkNvbnRleHQsXG4gICAgKSA9PiBQcm9taXNlPFByZXByb2Nlc3NSZXN1bHQ+LFxuICApOiB0aGlzIHtcbiAgICByZXR1cm4gc3VwZXIub25FdGhUcmFjZShcbiAgICAgIFwiMHhmMmZkZTM4YlwiLFxuICAgICAgaGFuZGxlciBhcyBhbnksXG4gICAgICBmZXRjaENvbmZpZyxcbiAgICAgIHByZXByb2Nlc3NIYW5kbGVyLFxuICAgICk7XG4gIH1cblxuICBvbkNhbGxVbmRlcmx5aW5nKFxuICAgIGhhbmRsZXI6IChcbiAgICAgIGNhbGw6IFVuZGVybHlpbmdDYWxsVHJhY2UsXG4gICAgICBjdHg6IFBlbnBpZVJlY2VpcHRUb2tlbkNvbnRleHQsXG4gICAgKSA9PiB2b2lkLFxuICAgIGZldGNoQ29uZmlnPzogUGFydGlhbDxFdGhGZXRjaENvbmZpZz4sXG4gICAgcHJlcHJvY2Vzc0hhbmRsZXI/OiAoXG4gICAgICBjYWxsOiBVbmRlcmx5aW5nQ2FsbFRyYWNlLFxuICAgICAgY3R4OiBQZW5waWVSZWNlaXB0VG9rZW5Db250ZXh0LFxuICAgICkgPT4gUHJvbWlzZTxQcmVwcm9jZXNzUmVzdWx0PixcbiAgKTogdGhpcyB7XG4gICAgcmV0dXJuIHN1cGVyLm9uRXRoVHJhY2UoXG4gICAgICBcIjB4NmYzMDdkYzNcIixcbiAgICAgIGhhbmRsZXIgYXMgYW55LFxuICAgICAgZmV0Y2hDb25maWcsXG4gICAgICBwcmVwcm9jZXNzSGFuZGxlcixcbiAgICApO1xuICB9XG5cbiAgcHVibGljIHN0YXRpYyBmaWx0ZXJzID0ge1xuICAgIEFwcHJvdmFsKFxuICAgICAgb3duZXI/OiBzdHJpbmcgfCBudWxsLFxuICAgICAgc3BlbmRlcj86IHN0cmluZyB8IG51bGwsXG4gICAgICB2YWx1ZT86IG51bGwsXG4gICAgKTogQXBwcm92YWxFdmVudEZpbHRlciB7XG4gICAgICByZXR1cm4gdGVtcGxhdGVDb250cmFjdC5maWx0ZXJzW1wiQXBwcm92YWwoYWRkcmVzcyxhZGRyZXNzLHVpbnQyNTYpXCJdKFxuICAgICAgICBvd25lcixcbiAgICAgICAgc3BlbmRlcixcbiAgICAgICAgdmFsdWUsXG4gICAgICApO1xuICAgIH0sXG4gICAgT3duZXJzaGlwVHJhbnNmZXJyZWQoXG4gICAgICBwcmV2aW91c093bmVyPzogc3RyaW5nIHwgbnVsbCxcbiAgICAgIG5ld093bmVyPzogc3RyaW5nIHwgbnVsbCxcbiAgICApOiBPd25lcnNoaXBUcmFuc2ZlcnJlZEV2ZW50RmlsdGVyIHtcbiAgICAgIHJldHVybiB0ZW1wbGF0ZUNvbnRyYWN0LmZpbHRlcnNbXCJPd25lcnNoaXBUcmFuc2ZlcnJlZChhZGRyZXNzLGFkZHJlc3MpXCJdKFxuICAgICAgICBwcmV2aW91c093bmVyLFxuICAgICAgICBuZXdPd25lcixcbiAgICAgICk7XG4gICAgfSxcbiAgICBUcmFuc2ZlcihcbiAgICAgIGZyb20/OiBzdHJpbmcgfCBudWxsLFxuICAgICAgdG8/OiBzdHJpbmcgfCBudWxsLFxuICAgICAgdmFsdWU/OiBudWxsLFxuICAgICk6IFRyYW5zZmVyRXZlbnRGaWx0ZXIge1xuICAgICAgcmV0dXJuIHRlbXBsYXRlQ29udHJhY3QuZmlsdGVyc1tcIlRyYW5zZmVyKGFkZHJlc3MsYWRkcmVzcyx1aW50MjU2KVwiXShcbiAgICAgICAgZnJvbSxcbiAgICAgICAgdG8sXG4gICAgICAgIHZhbHVlLFxuICAgICAgKTtcbiAgICB9LFxuICB9O1xuXG4gIHByb3RlY3RlZCBDcmVhdGVCb3VuZENvbnRyYWN0VmlldygpOiBQZW5waWVSZWNlaXB0VG9rZW5Cb3VuZENvbnRyYWN0VmlldyB7XG4gICAgY29uc3QgdmlldyA9IGdldFBlbnBpZVJlY2VpcHRUb2tlbkNvbnRyYWN0KFxuICAgICAgdGhpcy5jb25maWcubmV0d29yayxcbiAgICAgIHRoaXMuY29uZmlnLmFkZHJlc3MsXG4gICAgKTtcbiAgICByZXR1cm4gbmV3IFBlbnBpZVJlY2VpcHRUb2tlbkJvdW5kQ29udHJhY3RWaWV3KHRoaXMuY29uZmlnLmFkZHJlc3MsIHZpZXcpO1xuICB9XG5cbiAgcHVibGljIHN0YXRpYyBiaW5kKG9wdGlvbnM6IEJpbmRPcHRpb25zKTogUGVucGllUmVjZWlwdFRva2VuUHJvY2Vzc29yIHtcbiAgICBpZiAoIW9wdGlvbnMubmFtZSkge1xuICAgICAgb3B0aW9ucy5uYW1lID0gXCJQZW5waWVSZWNlaXB0VG9rZW5cIjtcbiAgICB9XG4gICAgbGV0IHByb2Nlc3NvciA9IGdldFByb2Nlc3NvcihvcHRpb25zKSBhcyBQZW5waWVSZWNlaXB0VG9rZW5Qcm9jZXNzb3I7XG4gICAgaWYgKCFwcm9jZXNzb3IpIHtcbiAgICAgIHByb2Nlc3NvciA9IG5ldyBQZW5waWVSZWNlaXB0VG9rZW5Qcm9jZXNzb3Iob3B0aW9ucyk7XG4gICAgICBhZGRQcm9jZXNzb3Iob3B0aW9ucywgcHJvY2Vzc29yKTtcbiAgICB9XG4gICAgcmV0dXJuIHByb2Nlc3NvcjtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgUGVucGllUmVjZWlwdFRva2VuUHJvY2Vzc29yVGVtcGxhdGUgZXh0ZW5kcyBCYXNlUHJvY2Vzc29yVGVtcGxhdGU8XG4gIFBlbnBpZVJlY2VpcHRUb2tlbixcbiAgUGVucGllUmVjZWlwdFRva2VuQm91bmRDb250cmFjdFZpZXdcbj4ge1xuICBiaW5kSW50ZXJuYWwob3B0aW9uczogQmluZE9wdGlvbnMpIHtcbiAgICBpZiAoIW9wdGlvbnMubmFtZSkge1xuICAgICAgb3B0aW9ucy5uYW1lID0gXCJQZW5waWVSZWNlaXB0VG9rZW5cIjtcbiAgICB9XG4gICAgbGV0IHByb2Nlc3NvciA9IGdldFByb2Nlc3NvcihvcHRpb25zKSBhcyBQZW5waWVSZWNlaXB0VG9rZW5Qcm9jZXNzb3I7XG4gICAgaWYgKCFwcm9jZXNzb3IpIHtcbiAgICAgIHByb2Nlc3NvciA9IG5ldyBQZW5waWVSZWNlaXB0VG9rZW5Qcm9jZXNzb3Iob3B0aW9ucyk7XG4gICAgICBhZGRQcm9jZXNzb3Iob3B0aW9ucywgcHJvY2Vzc29yKTtcbiAgICB9XG4gICAgcmV0dXJuIHByb2Nlc3NvcjtcbiAgfVxuXG4gIG9uRXZlbnRBcHByb3ZhbChcbiAgICBoYW5kbGVyOiAoZXZlbnQ6IEFwcHJvdmFsRXZlbnQsIGN0eDogUGVucGllUmVjZWlwdFRva2VuQ29udGV4dCkgPT4gdm9pZCxcbiAgICBmaWx0ZXI/OiBBcHByb3ZhbEV2ZW50RmlsdGVyIHwgQXBwcm92YWxFdmVudEZpbHRlcltdLFxuICAgIGZldGNoQ29uZmlnPzogUGFydGlhbDxFdGhGZXRjaENvbmZpZz4sXG4gICAgcHJlcHJvY2Vzc0hhbmRsZXI/OiAoXG4gICAgICBldmVudDogQXBwcm92YWxFdmVudCxcbiAgICAgIGN0eDogUGVucGllUmVjZWlwdFRva2VuQ29udGV4dCxcbiAgICAgIHByZXByb2Nlc3NTdG9yZTogeyBbazogc3RyaW5nXTogYW55IH0sXG4gICAgKSA9PiBQcm9taXNlPFByZXByb2Nlc3NSZXN1bHQ+LFxuICApOiB0aGlzIHtcbiAgICBpZiAoIWZpbHRlcikge1xuICAgICAgZmlsdGVyID0gdGVtcGxhdGVDb250cmFjdC5maWx0ZXJzW1wiQXBwcm92YWwoYWRkcmVzcyxhZGRyZXNzLHVpbnQyNTYpXCJdKFxuICAgICAgICBudWxsLFxuICAgICAgICBudWxsLFxuICAgICAgICBudWxsLFxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIHN1cGVyLm9uRXRoRXZlbnQoaGFuZGxlciwgZmlsdGVyISwgZmV0Y2hDb25maWcsIHByZXByb2Nlc3NIYW5kbGVyKTtcbiAgfVxuXG4gIG9uRXZlbnRPd25lcnNoaXBUcmFuc2ZlcnJlZChcbiAgICBoYW5kbGVyOiAoXG4gICAgICBldmVudDogT3duZXJzaGlwVHJhbnNmZXJyZWRFdmVudCxcbiAgICAgIGN0eDogUGVucGllUmVjZWlwdFRva2VuQ29udGV4dCxcbiAgICApID0+IHZvaWQsXG4gICAgZmlsdGVyPzpcbiAgICAgIHwgT3duZXJzaGlwVHJhbnNmZXJyZWRFdmVudEZpbHRlclxuICAgICAgfCBPd25lcnNoaXBUcmFuc2ZlcnJlZEV2ZW50RmlsdGVyW10sXG4gICAgZmV0Y2hDb25maWc/OiBQYXJ0aWFsPEV0aEZldGNoQ29uZmlnPixcbiAgICBwcmVwcm9jZXNzSGFuZGxlcj86IChcbiAgICAgIGV2ZW50OiBPd25lcnNoaXBUcmFuc2ZlcnJlZEV2ZW50LFxuICAgICAgY3R4OiBQZW5waWVSZWNlaXB0VG9rZW5Db250ZXh0LFxuICAgICAgcHJlcHJvY2Vzc1N0b3JlOiB7IFtrOiBzdHJpbmddOiBhbnkgfSxcbiAgICApID0+IFByb21pc2U8UHJlcHJvY2Vzc1Jlc3VsdD4sXG4gICk6IHRoaXMge1xuICAgIGlmICghZmlsdGVyKSB7XG4gICAgICBmaWx0ZXIgPSB0ZW1wbGF0ZUNvbnRyYWN0LmZpbHRlcnNbXG4gICAgICAgIFwiT3duZXJzaGlwVHJhbnNmZXJyZWQoYWRkcmVzcyxhZGRyZXNzKVwiXG4gICAgICBdKG51bGwsIG51bGwpO1xuICAgIH1cbiAgICByZXR1cm4gc3VwZXIub25FdGhFdmVudChoYW5kbGVyLCBmaWx0ZXIhLCBmZXRjaENvbmZpZywgcHJlcHJvY2Vzc0hhbmRsZXIpO1xuICB9XG5cbiAgb25FdmVudFRyYW5zZmVyKFxuICAgIGhhbmRsZXI6IChldmVudDogVHJhbnNmZXJFdmVudCwgY3R4OiBQZW5waWVSZWNlaXB0VG9rZW5Db250ZXh0KSA9PiB2b2lkLFxuICAgIGZpbHRlcj86IFRyYW5zZmVyRXZlbnRGaWx0ZXIgfCBUcmFuc2ZlckV2ZW50RmlsdGVyW10sXG4gICAgZmV0Y2hDb25maWc/OiBQYXJ0aWFsPEV0aEZldGNoQ29uZmlnPixcbiAgICBwcmVwcm9jZXNzSGFuZGxlcj86IChcbiAgICAgIGV2ZW50OiBUcmFuc2ZlckV2ZW50LFxuICAgICAgY3R4OiBQZW5waWVSZWNlaXB0VG9rZW5Db250ZXh0LFxuICAgICAgcHJlcHJvY2Vzc1N0b3JlOiB7IFtrOiBzdHJpbmddOiBhbnkgfSxcbiAgICApID0+IFByb21pc2U8UHJlcHJvY2Vzc1Jlc3VsdD4sXG4gICk6IHRoaXMge1xuICAgIGlmICghZmlsdGVyKSB7XG4gICAgICBmaWx0ZXIgPSB0ZW1wbGF0ZUNvbnRyYWN0LmZpbHRlcnNbXCJUcmFuc2ZlcihhZGRyZXNzLGFkZHJlc3MsdWludDI1NilcIl0oXG4gICAgICAgIG51bGwsXG4gICAgICAgIG51bGwsXG4gICAgICAgIG51bGwsXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gc3VwZXIub25FdGhFdmVudChoYW5kbGVyLCBmaWx0ZXIhLCBmZXRjaENvbmZpZywgcHJlcHJvY2Vzc0hhbmRsZXIpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRQZW5waWVSZWNlaXB0VG9rZW5Db250cmFjdChcbiAgY2hhaW5JZDogRXRoQ2hhaW5JZCxcbiAgYWRkcmVzczogc3RyaW5nLFxuKTogUGVucGllUmVjZWlwdFRva2VuQ29udHJhY3RWaWV3IHtcbiAgbGV0IGNvbnRyYWN0ID0gZ2V0Q29udHJhY3RCeUFCSShcbiAgICBcIlBlbnBpZVJlY2VpcHRUb2tlblwiLFxuICAgIGFkZHJlc3MsXG4gICAgY2hhaW5JZCxcbiAgKSBhcyBQZW5waWVSZWNlaXB0VG9rZW5Db250cmFjdFZpZXc7XG4gIGlmICghY29udHJhY3QpIHtcbiAgICBjb25zdCByYXdDb250cmFjdCA9IFBlbnBpZVJlY2VpcHRUb2tlbl9fZmFjdG9yeS5jb25uZWN0KFxuICAgICAgYWRkcmVzcyxcbiAgICAgIGdldFByb3ZpZGVyKGNoYWluSWQpLFxuICAgICk7XG4gICAgY29udHJhY3QgPSBuZXcgUGVucGllUmVjZWlwdFRva2VuQ29udHJhY3RWaWV3KHJhd0NvbnRyYWN0KTtcbiAgICBhZGRDb250cmFjdEJ5QUJJKFwiUGVucGllUmVjZWlwdFRva2VuXCIsIGFkZHJlc3MsIGNoYWluSWQsIGNvbnRyYWN0KTtcbiAgfVxuICByZXR1cm4gY29udHJhY3Q7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRQZW5waWVSZWNlaXB0VG9rZW5Db250cmFjdE9uQ29udGV4dChcbiAgY29udGV4dDogRXRoQ29udGV4dCxcbiAgYWRkcmVzczogc3RyaW5nLFxuKTogUGVucGllUmVjZWlwdFRva2VuQm91bmRDb250cmFjdFZpZXcge1xuICBjb25zdCB2aWV3ID0gZ2V0UGVucGllUmVjZWlwdFRva2VuQ29udHJhY3QoY29udGV4dC5nZXRDaGFpbklkKCksIGFkZHJlc3MpO1xuICBjb25zdCBib3VuZFZpZXcgPSBuZXcgUGVucGllUmVjZWlwdFRva2VuQm91bmRDb250cmFjdFZpZXcoYWRkcmVzcywgdmlldyk7XG4gIGJvdW5kVmlldy5jb250ZXh0ID0gY29udGV4dDtcbiAgaWYgKGJvdW5kVmlldy5jYWxsU3RhdGljKSB7XG4gICAgYm91bmRWaWV3LmNhbGxTdGF0aWMuY29udGV4dCA9IGNvbnRleHQ7XG4gIH1cbiAgcmV0dXJuIGJvdW5kVmlldztcbn1cbiIsICIvKiBBdXRvZ2VuZXJhdGVkIGZpbGUuIERvIG5vdCBlZGl0IG1hbnVhbGx5LiAqL1xuLyogdHNsaW50OmRpc2FibGUgKi9cbi8qIGVzbGludC1kaXNhYmxlICovXG4vLyBAdHMtbm9jaGVja1xuaW1wb3J0IHsgbmV3Q29udHJhY3QsIG5ld0ludGVyZmFjZSB9IGZyb20gXCJAc2VudGlvL3Nkay9ldGhcIjtcblxuaW1wb3J0IHsgQ29udHJhY3QsIFNpZ25lciwgUHJvdmlkZXIsIEludGVyZmFjZSB9IGZyb20gXCJldGhlcnNcIjtcbmltcG9ydCB0eXBlIHtcbiAgRVFCQmFzZVJld2FyZCxcbiAgRVFCQmFzZVJld2FyZEludGVyZmFjZSxcbn0gZnJvbSBcIi4uL0VRQkJhc2VSZXdhcmQuanNcIjtcblxuY29uc3QgX2FiaSA9IFtcbiAge1xuICAgIGlucHV0czogW10sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcIm5vbnBheWFibGVcIixcbiAgICB0eXBlOiBcImNvbnN0cnVjdG9yXCIsXG4gIH0sXG4gIHtcbiAgICBhbm9ueW1vdXM6IGZhbHNlLFxuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbmRleGVkOiBmYWxzZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJfYm9vc3RlclwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcIkJvb3N0ZXJVcGRhdGVkXCIsXG4gICAgdHlwZTogXCJldmVudFwiLFxuICB9LFxuICB7XG4gICAgYW5vbnltb3VzOiBmYWxzZSxcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogdHJ1ZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJfdXNlclwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IGZhbHNlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIl9hbW91bnRcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJFbWVyZ2VuY3lXaXRoZHJhd25cIixcbiAgICB0eXBlOiBcImV2ZW50XCIsXG4gIH0sXG4gIHtcbiAgICBhbm9ueW1vdXM6IGZhbHNlLFxuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbmRleGVkOiBmYWxzZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQ4XCIsXG4gICAgICAgIG5hbWU6IFwidmVyc2lvblwiLFxuICAgICAgICB0eXBlOiBcInVpbnQ4XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJJbml0aWFsaXplZFwiLFxuICAgIHR5cGU6IFwiZXZlbnRcIixcbiAgfSxcbiAge1xuICAgIGFub255bW91czogZmFsc2UsXG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IHRydWUsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwiX3Jld2FyZFRva2VuXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogZmFsc2UsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwiX3Jld2FyZFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcIlJld2FyZEFkZGVkXCIsXG4gICAgdHlwZTogXCJldmVudFwiLFxuICB9LFxuICB7XG4gICAgYW5vbnltb3VzOiBmYWxzZSxcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogdHJ1ZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJfdXNlclwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IHRydWUsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwiX3Jld2FyZFRva2VuXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogZmFsc2UsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwiX3Jld2FyZFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcIlJld2FyZFBhaWRcIixcbiAgICB0eXBlOiBcImV2ZW50XCIsXG4gIH0sXG4gIHtcbiAgICBhbm9ueW1vdXM6IGZhbHNlLFxuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbmRleGVkOiB0cnVlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcIl9yZXdhcmRUb2tlblwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcIlJld2FyZFRva2VuQWRkZWRcIixcbiAgICB0eXBlOiBcImV2ZW50XCIsXG4gIH0sXG4gIHtcbiAgICBhbm9ueW1vdXM6IGZhbHNlLFxuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbmRleGVkOiB0cnVlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYnl0ZXMzMlwiLFxuICAgICAgICBuYW1lOiBcInJvbGVcIixcbiAgICAgICAgdHlwZTogXCJieXRlczMyXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbmRleGVkOiB0cnVlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYnl0ZXMzMlwiLFxuICAgICAgICBuYW1lOiBcInByZXZpb3VzQWRtaW5Sb2xlXCIsXG4gICAgICAgIHR5cGU6IFwiYnl0ZXMzMlwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogdHJ1ZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImJ5dGVzMzJcIixcbiAgICAgICAgbmFtZTogXCJuZXdBZG1pblJvbGVcIixcbiAgICAgICAgdHlwZTogXCJieXRlczMyXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJSb2xlQWRtaW5DaGFuZ2VkXCIsXG4gICAgdHlwZTogXCJldmVudFwiLFxuICB9LFxuICB7XG4gICAgYW5vbnltb3VzOiBmYWxzZSxcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogdHJ1ZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImJ5dGVzMzJcIixcbiAgICAgICAgbmFtZTogXCJyb2xlXCIsXG4gICAgICAgIHR5cGU6IFwiYnl0ZXMzMlwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogdHJ1ZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJhY2NvdW50XCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogdHJ1ZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJzZW5kZXJcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJSb2xlR3JhbnRlZFwiLFxuICAgIHR5cGU6IFwiZXZlbnRcIixcbiAgfSxcbiAge1xuICAgIGFub255bW91czogZmFsc2UsXG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IHRydWUsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJieXRlczMyXCIsXG4gICAgICAgIG5hbWU6IFwicm9sZVwiLFxuICAgICAgICB0eXBlOiBcImJ5dGVzMzJcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IHRydWUsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwiYWNjb3VudFwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IHRydWUsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwic2VuZGVyXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG5hbWU6IFwiUm9sZVJldm9rZWRcIixcbiAgICB0eXBlOiBcImV2ZW50XCIsXG4gIH0sXG4gIHtcbiAgICBhbm9ueW1vdXM6IGZhbHNlLFxuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbmRleGVkOiB0cnVlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcIl91c2VyXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogZmFsc2UsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwiX2Ftb3VudFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcIlN0YWtlZFwiLFxuICAgIHR5cGU6IFwiZXZlbnRcIixcbiAgfSxcbiAge1xuICAgIGFub255bW91czogZmFsc2UsXG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IHRydWUsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwiX3VzZXJcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbmRleGVkOiBmYWxzZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJfYW1vdW50XCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG5hbWU6IFwiV2l0aGRyYXduXCIsXG4gICAgdHlwZTogXCJldmVudFwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXSxcbiAgICBuYW1lOiBcIkFETUlOX1JPTEVcIixcbiAgICBvdXRwdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJieXRlczMyXCIsXG4gICAgICAgIG5hbWU6IFwiXCIsXG4gICAgICAgIHR5cGU6IFwiYnl0ZXMzMlwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJ2aWV3XCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXSxcbiAgICBuYW1lOiBcIkRFRkFVTFRfQURNSU5fUk9MRVwiLFxuICAgIG91dHB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImJ5dGVzMzJcIixcbiAgICAgICAgbmFtZTogXCJcIixcbiAgICAgICAgdHlwZTogXCJieXRlczMyXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcInZpZXdcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtdLFxuICAgIG5hbWU6IFwiWkFQX1JPTEVcIixcbiAgICBvdXRwdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJieXRlczMyXCIsXG4gICAgICAgIG5hbWU6IFwiXCIsXG4gICAgICAgIHR5cGU6IFwiYnl0ZXMzMlwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJ2aWV3XCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwiYWNjb3VudFwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcImJhbGFuY2VPZlwiLFxuICAgIG91dHB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcInZpZXdcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtdLFxuICAgIG5hbWU6IFwiYm9vc3RlclwiLFxuICAgIG91dHB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcInZpZXdcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJfcmV3YXJkVG9rZW5cIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIl9hbW91bnRcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJkb25hdGVcIixcbiAgICBvdXRwdXRzOiBbXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwicGF5YWJsZVwiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW10sXG4gICAgbmFtZTogXCJkdXJhdGlvblwiLFxuICAgIG91dHB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcInZpZXdcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJfYWNjb3VudFwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwiX3Jld2FyZFRva2VuXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG5hbWU6IFwiZWFybmVkXCIsXG4gICAgb3V0cHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIlwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwidmlld1wiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW10sXG4gICAgbmFtZTogXCJlbWVyZ2VuY3lXaXRoZHJhd1wiLFxuICAgIG91dHB1dHM6IFtdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJub25wYXlhYmxlXCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwiX2FjY291bnRcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJnZXRSZXdhcmRcIixcbiAgICBvdXRwdXRzOiBbXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwibm9ucGF5YWJsZVwiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW10sXG4gICAgbmFtZTogXCJnZXRSZXdhcmRUb2tlbnNcIixcbiAgICBvdXRwdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzW11cIixcbiAgICAgICAgbmFtZTogXCJcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzW11cIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwidmlld1wiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW10sXG4gICAgbmFtZTogXCJnZXRSZXdhcmRUb2tlbnNMZW5ndGhcIixcbiAgICBvdXRwdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwiXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJ2aWV3XCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJieXRlczMyXCIsXG4gICAgICAgIG5hbWU6IFwicm9sZVwiLFxuICAgICAgICB0eXBlOiBcImJ5dGVzMzJcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcImdldFJvbGVBZG1pblwiLFxuICAgIG91dHB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImJ5dGVzMzJcIixcbiAgICAgICAgbmFtZTogXCJcIixcbiAgICAgICAgdHlwZTogXCJieXRlczMyXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcInZpZXdcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJfYWNjb3VudFwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcImdldFVzZXJBbW91bnRUaW1lXCIsXG4gICAgb3V0cHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIlwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwidmlld1wiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYnl0ZXMzMlwiLFxuICAgICAgICBuYW1lOiBcInJvbGVcIixcbiAgICAgICAgdHlwZTogXCJieXRlczMyXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcImFjY291bnRcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJncmFudFJvbGVcIixcbiAgICBvdXRwdXRzOiBbXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwibm9ucGF5YWJsZVwiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYnl0ZXMzMlwiLFxuICAgICAgICBuYW1lOiBcInJvbGVcIixcbiAgICAgICAgdHlwZTogXCJieXRlczMyXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcImFjY291bnRcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJoYXNSb2xlXCIsXG4gICAgb3V0cHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYm9vbFwiLFxuICAgICAgICBuYW1lOiBcIlwiLFxuICAgICAgICB0eXBlOiBcImJvb2xcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwidmlld1wiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcIl9ib29zdGVyXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG5hbWU6IFwiaW5pdGlhbGl6ZVwiLFxuICAgIG91dHB1dHM6IFtdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJub25wYXlhYmxlXCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwiXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG5hbWU6IFwiaXNSZXdhcmRUb2tlblwiLFxuICAgIG91dHB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImJvb2xcIixcbiAgICAgICAgbmFtZTogXCJcIixcbiAgICAgICAgdHlwZTogXCJib29sXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcInZpZXdcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJfcmV3YXJkVG9rZW5cIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJsYXN0VGltZVJld2FyZEFwcGxpY2FibGVcIixcbiAgICBvdXRwdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwiXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJ2aWV3XCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXSxcbiAgICBuYW1lOiBcInBpZFwiLFxuICAgIG91dHB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcInZpZXdcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJfcmV3YXJkVG9rZW5cIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIl9yZXdhcmRzXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG5hbWU6IFwicXVldWVOZXdSZXdhcmRzXCIsXG4gICAgb3V0cHV0czogW10sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcInBheWFibGVcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImJ5dGVzMzJcIixcbiAgICAgICAgbmFtZTogXCJyb2xlXCIsXG4gICAgICAgIHR5cGU6IFwiYnl0ZXMzMlwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJhY2NvdW50XCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG5hbWU6IFwicmVub3VuY2VSb2xlXCIsXG4gICAgb3V0cHV0czogW10sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcIm5vbnBheWFibGVcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImJ5dGVzMzJcIixcbiAgICAgICAgbmFtZTogXCJyb2xlXCIsXG4gICAgICAgIHR5cGU6IFwiYnl0ZXMzMlwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJhY2NvdW50XCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG5hbWU6IFwicmV2b2tlUm9sZVwiLFxuICAgIG91dHB1dHM6IFtdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJub25wYXlhYmxlXCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwiX3Jld2FyZFRva2VuXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG5hbWU6IFwicmV3YXJkUGVyVG9rZW5cIixcbiAgICBvdXRwdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwiXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJ2aWV3XCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwiXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG5hbWU6IFwicmV3YXJkVG9rZW5zXCIsXG4gICAgb3V0cHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcIlwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwidmlld1wiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcIlwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcInJld2FyZHNcIixcbiAgICBvdXRwdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwicGVyaW9kRmluaXNoXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJyZXdhcmRSYXRlXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJsYXN0VXBkYXRlVGltZVwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwicmV3YXJkUGVyVG9rZW5TdG9yZWRcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcInF1ZXVlZFJld2FyZHNcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcInZpZXdcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJfcGlkXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJfc3Rha2luZ1Rva2VuXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJfcmV3YXJkVG9rZW5cIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJzZXRQYXJhbXNcIixcbiAgICBvdXRwdXRzOiBbXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwibm9ucGF5YWJsZVwiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIl9hbW91bnRcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJzdGFrZVwiLFxuICAgIG91dHB1dHM6IFtdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJub25wYXlhYmxlXCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXSxcbiAgICBuYW1lOiBcInN0YWtlQWxsXCIsXG4gICAgb3V0cHV0czogW10sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcIm5vbnBheWFibGVcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJfZm9yXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJfYW1vdW50XCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG5hbWU6IFwic3Rha2VGb3JcIixcbiAgICBvdXRwdXRzOiBbXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwibm9ucGF5YWJsZVwiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW10sXG4gICAgbmFtZTogXCJzdGFraW5nVG9rZW5cIixcbiAgICBvdXRwdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJjb250cmFjdCBJRVJDMjBcIixcbiAgICAgICAgbmFtZTogXCJcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcInZpZXdcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImJ5dGVzNFwiLFxuICAgICAgICBuYW1lOiBcImludGVyZmFjZUlkXCIsXG4gICAgICAgIHR5cGU6IFwiYnl0ZXM0XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJzdXBwb3J0c0ludGVyZmFjZVwiLFxuICAgIG91dHB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImJvb2xcIixcbiAgICAgICAgbmFtZTogXCJcIixcbiAgICAgICAgdHlwZTogXCJib29sXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcInZpZXdcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtdLFxuICAgIG5hbWU6IFwidG90YWxTdXBwbHlcIixcbiAgICBvdXRwdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwiXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJ2aWV3XCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwiXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG5hbWU6IFwidXNlckFtb3VudFRpbWVcIixcbiAgICBvdXRwdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwiXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJ2aWV3XCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwiXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG5hbWU6IFwidXNlckxhc3RUaW1lXCIsXG4gICAgb3V0cHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIlwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwidmlld1wiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcIlwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwiXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG5hbWU6IFwidXNlclJld2FyZHNcIixcbiAgICBvdXRwdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwidXNlclJld2FyZFBlclRva2VuUGFpZFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwicmV3YXJkc1wiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwidmlld1wiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcImFtb3VudFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcIndpdGhkcmF3XCIsXG4gICAgb3V0cHV0czogW10sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcIm5vbnBheWFibGVcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtdLFxuICAgIG5hbWU6IFwid2l0aGRyYXdBbGxcIixcbiAgICBvdXRwdXRzOiBbXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwibm9ucGF5YWJsZVwiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcIl9hY2NvdW50XCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJfYW1vdW50XCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG5hbWU6IFwid2l0aGRyYXdGb3JcIixcbiAgICBvdXRwdXRzOiBbXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwibm9ucGF5YWJsZVwiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJwYXlhYmxlXCIsXG4gICAgdHlwZTogXCJyZWNlaXZlXCIsXG4gIH0sXG5dIGFzIGNvbnN0O1xuXG5leHBvcnQgY2xhc3MgRVFCQmFzZVJld2FyZF9fZmFjdG9yeSB7XG4gIHN0YXRpYyByZWFkb25seSBhYmkgPSBfYWJpO1xuICBzdGF0aWMgY3JlYXRlSW50ZXJmYWNlKCk6IEVRQkJhc2VSZXdhcmRJbnRlcmZhY2Uge1xuICAgIHJldHVybiBuZXdJbnRlcmZhY2UoX2FiaSkgYXMgRVFCQmFzZVJld2FyZEludGVyZmFjZTtcbiAgfVxuICBzdGF0aWMgY29ubmVjdChcbiAgICBhZGRyZXNzOiBzdHJpbmcsXG4gICAgc2lnbmVyT3JQcm92aWRlcjogU2lnbmVyIHwgUHJvdmlkZXIsXG4gICk6IEVRQkJhc2VSZXdhcmQge1xuICAgIHJldHVybiBuZXdDb250cmFjdChhZGRyZXNzLCBfYWJpLCBzaWduZXJPclByb3ZpZGVyKSBhcyBFUUJCYXNlUmV3YXJkO1xuICB9XG59XG4iLCAiLyogQXV0b2dlbmVyYXRlZCBmaWxlLiBEbyBub3QgZWRpdCBtYW51YWxseS4gKi9cbi8qIHRzbGludDpkaXNhYmxlICovXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xuLy8gQHRzLW5vY2hlY2tcbmltcG9ydCB7IG5ld0NvbnRyYWN0LCBuZXdJbnRlcmZhY2UgfSBmcm9tIFwiQHNlbnRpby9zZGsvZXRoXCI7XG5cbmltcG9ydCB7IENvbnRyYWN0LCBTaWduZXIsIFByb3ZpZGVyLCBJbnRlcmZhY2UgfSBmcm9tIFwiZXRoZXJzXCI7XG5pbXBvcnQgdHlwZSB7XG4gIEVRQkJhc2VSZXdhcmRWMixcbiAgRVFCQmFzZVJld2FyZFYySW50ZXJmYWNlLFxufSBmcm9tIFwiLi4vRVFCQmFzZVJld2FyZFYyLmpzXCI7XG5cbmNvbnN0IF9hYmkgPSBbXG4gIHtcbiAgICBpbnB1dHM6IFtdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJub25wYXlhYmxlXCIsXG4gICAgdHlwZTogXCJjb25zdHJ1Y3RvclwiLFxuICB9LFxuICB7XG4gICAgYW5vbnltb3VzOiBmYWxzZSxcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogZmFsc2UsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwiX2Jvb3N0ZXJcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJCb29zdGVyVXBkYXRlZFwiLFxuICAgIHR5cGU6IFwiZXZlbnRcIixcbiAgfSxcbiAge1xuICAgIGFub255bW91czogZmFsc2UsXG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IHRydWUsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwiX3VzZXJcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbmRleGVkOiBmYWxzZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJfYW1vdW50XCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG5hbWU6IFwiRW1lcmdlbmN5V2l0aGRyYXduXCIsXG4gICAgdHlwZTogXCJldmVudFwiLFxuICB9LFxuICB7XG4gICAgYW5vbnltb3VzOiBmYWxzZSxcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogZmFsc2UsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50OFwiLFxuICAgICAgICBuYW1lOiBcInZlcnNpb25cIixcbiAgICAgICAgdHlwZTogXCJ1aW50OFwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG5hbWU6IFwiSW5pdGlhbGl6ZWRcIixcbiAgICB0eXBlOiBcImV2ZW50XCIsXG4gIH0sXG4gIHtcbiAgICBhbm9ueW1vdXM6IGZhbHNlLFxuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbmRleGVkOiB0cnVlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcIl9yZXdhcmRUb2tlblwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IGZhbHNlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIl9yZXdhcmRcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJSZXdhcmRBZGRlZFwiLFxuICAgIHR5cGU6IFwiZXZlbnRcIixcbiAgfSxcbiAge1xuICAgIGFub255bW91czogZmFsc2UsXG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IHRydWUsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwiX3VzZXJcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbmRleGVkOiB0cnVlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcIl9yZXdhcmRUb2tlblwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IGZhbHNlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIl9yZXdhcmRcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJSZXdhcmRQYWlkXCIsXG4gICAgdHlwZTogXCJldmVudFwiLFxuICB9LFxuICB7XG4gICAgYW5vbnltb3VzOiBmYWxzZSxcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogdHJ1ZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJfcmV3YXJkVG9rZW5cIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJSZXdhcmRUb2tlbkFkZGVkXCIsXG4gICAgdHlwZTogXCJldmVudFwiLFxuICB9LFxuICB7XG4gICAgYW5vbnltb3VzOiBmYWxzZSxcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogdHJ1ZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImJ5dGVzMzJcIixcbiAgICAgICAgbmFtZTogXCJyb2xlXCIsXG4gICAgICAgIHR5cGU6IFwiYnl0ZXMzMlwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogdHJ1ZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImJ5dGVzMzJcIixcbiAgICAgICAgbmFtZTogXCJwcmV2aW91c0FkbWluUm9sZVwiLFxuICAgICAgICB0eXBlOiBcImJ5dGVzMzJcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IHRydWUsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJieXRlczMyXCIsXG4gICAgICAgIG5hbWU6IFwibmV3QWRtaW5Sb2xlXCIsXG4gICAgICAgIHR5cGU6IFwiYnl0ZXMzMlwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG5hbWU6IFwiUm9sZUFkbWluQ2hhbmdlZFwiLFxuICAgIHR5cGU6IFwiZXZlbnRcIixcbiAgfSxcbiAge1xuICAgIGFub255bW91czogZmFsc2UsXG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IHRydWUsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJieXRlczMyXCIsXG4gICAgICAgIG5hbWU6IFwicm9sZVwiLFxuICAgICAgICB0eXBlOiBcImJ5dGVzMzJcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IHRydWUsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwiYWNjb3VudFwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IHRydWUsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwic2VuZGVyXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG5hbWU6IFwiUm9sZUdyYW50ZWRcIixcbiAgICB0eXBlOiBcImV2ZW50XCIsXG4gIH0sXG4gIHtcbiAgICBhbm9ueW1vdXM6IGZhbHNlLFxuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbmRleGVkOiB0cnVlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYnl0ZXMzMlwiLFxuICAgICAgICBuYW1lOiBcInJvbGVcIixcbiAgICAgICAgdHlwZTogXCJieXRlczMyXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbmRleGVkOiB0cnVlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcImFjY291bnRcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbmRleGVkOiB0cnVlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcInNlbmRlclwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcIlJvbGVSZXZva2VkXCIsXG4gICAgdHlwZTogXCJldmVudFwiLFxuICB9LFxuICB7XG4gICAgYW5vbnltb3VzOiBmYWxzZSxcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogdHJ1ZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJfdXNlclwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IGZhbHNlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIl9hbW91bnRcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJTdGFrZWRcIixcbiAgICB0eXBlOiBcImV2ZW50XCIsXG4gIH0sXG4gIHtcbiAgICBhbm9ueW1vdXM6IGZhbHNlLFxuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbmRleGVkOiB0cnVlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcIl91c2VyXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogZmFsc2UsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwiX2Ftb3VudFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcIldpdGhkcmF3blwiLFxuICAgIHR5cGU6IFwiZXZlbnRcIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW10sXG4gICAgbmFtZTogXCJERUZBVUxUX0FETUlOX1JPTEVcIixcbiAgICBvdXRwdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJieXRlczMyXCIsXG4gICAgICAgIG5hbWU6IFwiXCIsXG4gICAgICAgIHR5cGU6IFwiYnl0ZXMzMlwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJ2aWV3XCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwiYWNjb3VudFwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcImJhbGFuY2VPZlwiLFxuICAgIG91dHB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcInZpZXdcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtdLFxuICAgIG5hbWU6IFwiYm9vc3RlclwiLFxuICAgIG91dHB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcInZpZXdcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJfcmV3YXJkVG9rZW5cIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIl9hbW91bnRcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJkb25hdGVcIixcbiAgICBvdXRwdXRzOiBbXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwicGF5YWJsZVwiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW10sXG4gICAgbmFtZTogXCJkdXJhdGlvblwiLFxuICAgIG91dHB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcInZpZXdcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJfYWNjb3VudFwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwiX3Jld2FyZFRva2VuXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG5hbWU6IFwiZWFybmVkXCIsXG4gICAgb3V0cHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIlwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwidmlld1wiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW10sXG4gICAgbmFtZTogXCJlbWVyZ2VuY3lXaXRoZHJhd1wiLFxuICAgIG91dHB1dHM6IFtdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJub25wYXlhYmxlXCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwiX2FjY291bnRcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJnZXRSZXdhcmRcIixcbiAgICBvdXRwdXRzOiBbXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwibm9ucGF5YWJsZVwiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW10sXG4gICAgbmFtZTogXCJnZXRSZXdhcmRUb2tlbnNcIixcbiAgICBvdXRwdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzW11cIixcbiAgICAgICAgbmFtZTogXCJcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzW11cIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwidmlld1wiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW10sXG4gICAgbmFtZTogXCJnZXRSZXdhcmRUb2tlbnNMZW5ndGhcIixcbiAgICBvdXRwdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwiXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJ2aWV3XCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJieXRlczMyXCIsXG4gICAgICAgIG5hbWU6IFwicm9sZVwiLFxuICAgICAgICB0eXBlOiBcImJ5dGVzMzJcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcImdldFJvbGVBZG1pblwiLFxuICAgIG91dHB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImJ5dGVzMzJcIixcbiAgICAgICAgbmFtZTogXCJcIixcbiAgICAgICAgdHlwZTogXCJieXRlczMyXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcInZpZXdcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJfYWNjb3VudFwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcImdldFVzZXJBbW91bnRUaW1lXCIsXG4gICAgb3V0cHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIlwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwidmlld1wiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYnl0ZXMzMlwiLFxuICAgICAgICBuYW1lOiBcInJvbGVcIixcbiAgICAgICAgdHlwZTogXCJieXRlczMyXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcImFjY291bnRcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJncmFudFJvbGVcIixcbiAgICBvdXRwdXRzOiBbXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwibm9ucGF5YWJsZVwiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYnl0ZXMzMlwiLFxuICAgICAgICBuYW1lOiBcInJvbGVcIixcbiAgICAgICAgdHlwZTogXCJieXRlczMyXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcImFjY291bnRcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJoYXNSb2xlXCIsXG4gICAgb3V0cHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYm9vbFwiLFxuICAgICAgICBuYW1lOiBcIlwiLFxuICAgICAgICB0eXBlOiBcImJvb2xcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwidmlld1wiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcIl9vd25lclwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwiX2Jvb3N0ZXJcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJpbml0aWFsaXplXCIsXG4gICAgb3V0cHV0czogW10sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcIm5vbnBheWFibGVcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJpc1Jld2FyZFRva2VuXCIsXG4gICAgb3V0cHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYm9vbFwiLFxuICAgICAgICBuYW1lOiBcIlwiLFxuICAgICAgICB0eXBlOiBcImJvb2xcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwidmlld1wiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcIl9yZXdhcmRUb2tlblwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcImxhc3RUaW1lUmV3YXJkQXBwbGljYWJsZVwiLFxuICAgIG91dHB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcInZpZXdcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtdLFxuICAgIG5hbWU6IFwicGlkXCIsXG4gICAgb3V0cHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIlwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwidmlld1wiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcIl9yZXdhcmRUb2tlblwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwiX3Jld2FyZHNcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJxdWV1ZU5ld1Jld2FyZHNcIixcbiAgICBvdXRwdXRzOiBbXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwicGF5YWJsZVwiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYnl0ZXMzMlwiLFxuICAgICAgICBuYW1lOiBcInJvbGVcIixcbiAgICAgICAgdHlwZTogXCJieXRlczMyXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcImFjY291bnRcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJyZW5vdW5jZVJvbGVcIixcbiAgICBvdXRwdXRzOiBbXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwibm9ucGF5YWJsZVwiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYnl0ZXMzMlwiLFxuICAgICAgICBuYW1lOiBcInJvbGVcIixcbiAgICAgICAgdHlwZTogXCJieXRlczMyXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcImFjY291bnRcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJyZXZva2VSb2xlXCIsXG4gICAgb3V0cHV0czogW10sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcIm5vbnBheWFibGVcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJfcmV3YXJkVG9rZW5cIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJyZXdhcmRQZXJUb2tlblwiLFxuICAgIG91dHB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcInZpZXdcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJyZXdhcmRUb2tlbnNcIixcbiAgICBvdXRwdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwiXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJ2aWV3XCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwiXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG5hbWU6IFwicmV3YXJkc1wiLFxuICAgIG91dHB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJwZXJpb2RGaW5pc2hcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcInJld2FyZFJhdGVcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcImxhc3RVcGRhdGVUaW1lXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJyZXdhcmRQZXJUb2tlblN0b3JlZFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwicXVldWVkUmV3YXJkc1wiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwidmlld1wiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIl9waWRcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcIl9zdGFraW5nVG9rZW5cIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcIl9yZXdhcmRUb2tlblwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwiX2VxYlphcFwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcInNldFBhcmFtc1wiLFxuICAgIG91dHB1dHM6IFtdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJub25wYXlhYmxlXCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwiX3BpZFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwiX3N0YWtpbmdUb2tlblwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwiX3Jld2FyZFRva2VuXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG5hbWU6IFwic2V0UGFyYW1zXCIsXG4gICAgb3V0cHV0czogW10sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcIm5vbnBheWFibGVcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJfYW1vdW50XCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG5hbWU6IFwic3Rha2VcIixcbiAgICBvdXRwdXRzOiBbXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwibm9ucGF5YWJsZVwiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW10sXG4gICAgbmFtZTogXCJzdGFrZUFsbFwiLFxuICAgIG91dHB1dHM6IFtdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJub25wYXlhYmxlXCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwiX2ZvclwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwiX2Ftb3VudFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcInN0YWtlRm9yXCIsXG4gICAgb3V0cHV0czogW10sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcIm5vbnBheWFibGVcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtdLFxuICAgIG5hbWU6IFwic3Rha2luZ1Rva2VuXCIsXG4gICAgb3V0cHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiY29udHJhY3QgSUVSQzIwXCIsXG4gICAgICAgIG5hbWU6IFwiXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJ2aWV3XCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJieXRlczRcIixcbiAgICAgICAgbmFtZTogXCJpbnRlcmZhY2VJZFwiLFxuICAgICAgICB0eXBlOiBcImJ5dGVzNFwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG5hbWU6IFwic3VwcG9ydHNJbnRlcmZhY2VcIixcbiAgICBvdXRwdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJib29sXCIsXG4gICAgICAgIG5hbWU6IFwiXCIsXG4gICAgICAgIHR5cGU6IFwiYm9vbFwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJ2aWV3XCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXSxcbiAgICBuYW1lOiBcInRvdGFsU3VwcGx5XCIsXG4gICAgb3V0cHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIlwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwidmlld1wiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcIlwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcInVzZXJBbW91bnRUaW1lXCIsXG4gICAgb3V0cHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIlwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwidmlld1wiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcIlwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcInVzZXJMYXN0VGltZVwiLFxuICAgIG91dHB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcInZpZXdcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcIlwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcInVzZXJSZXdhcmRzXCIsXG4gICAgb3V0cHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcInVzZXJSZXdhcmRQZXJUb2tlblBhaWRcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcInJld2FyZHNcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcInZpZXdcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJhbW91bnRcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJ3aXRoZHJhd1wiLFxuICAgIG91dHB1dHM6IFtdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJub25wYXlhYmxlXCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXSxcbiAgICBuYW1lOiBcIndpdGhkcmF3QWxsXCIsXG4gICAgb3V0cHV0czogW10sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcIm5vbnBheWFibGVcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJfYWNjb3VudFwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwiX2Ftb3VudFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcIndpdGhkcmF3Rm9yXCIsXG4gICAgb3V0cHV0czogW10sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcIm5vbnBheWFibGVcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwicGF5YWJsZVwiLFxuICAgIHR5cGU6IFwicmVjZWl2ZVwiLFxuICB9LFxuXSBhcyBjb25zdDtcblxuZXhwb3J0IGNsYXNzIEVRQkJhc2VSZXdhcmRWMl9fZmFjdG9yeSB7XG4gIHN0YXRpYyByZWFkb25seSBhYmkgPSBfYWJpO1xuICBzdGF0aWMgY3JlYXRlSW50ZXJmYWNlKCk6IEVRQkJhc2VSZXdhcmRWMkludGVyZmFjZSB7XG4gICAgcmV0dXJuIG5ld0ludGVyZmFjZShfYWJpKSBhcyBFUUJCYXNlUmV3YXJkVjJJbnRlcmZhY2U7XG4gIH1cbiAgc3RhdGljIGNvbm5lY3QoXG4gICAgYWRkcmVzczogc3RyaW5nLFxuICAgIHNpZ25lck9yUHJvdmlkZXI6IFNpZ25lciB8IFByb3ZpZGVyLFxuICApOiBFUUJCYXNlUmV3YXJkVjIge1xuICAgIHJldHVybiBuZXdDb250cmFjdChhZGRyZXNzLCBfYWJpLCBzaWduZXJPclByb3ZpZGVyKSBhcyBFUUJCYXNlUmV3YXJkVjI7XG4gIH1cbn1cbiIsICIvKiBBdXRvZ2VuZXJhdGVkIGZpbGUuIERvIG5vdCBlZGl0IG1hbnVhbGx5LiAqL1xuLyogdHNsaW50OmRpc2FibGUgKi9cbi8qIGVzbGludC1kaXNhYmxlICovXG4vLyBAdHMtbm9jaGVja1xuaW1wb3J0IHsgbmV3Q29udHJhY3QsIG5ld0ludGVyZmFjZSB9IGZyb20gXCJAc2VudGlvL3Nkay9ldGhcIjtcblxuaW1wb3J0IHsgQ29udHJhY3QsIFNpZ25lciwgUHJvdmlkZXIsIEludGVyZmFjZSB9IGZyb20gXCJldGhlcnNcIjtcbmltcG9ydCB0eXBlIHsgRVFCQm9vc3RlciwgRVFCQm9vc3RlckludGVyZmFjZSB9IGZyb20gXCIuLi9FUUJCb29zdGVyLmpzXCI7XG5cbmNvbnN0IF9hYmkgPSBbXG4gIHtcbiAgICBhbm9ueW1vdXM6IGZhbHNlLFxuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbmRleGVkOiB0cnVlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcIl91c2VyXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogdHJ1ZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJfcG9vbGlkXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogZmFsc2UsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwiX2Ftb3VudFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcIkRlcG9zaXRlZFwiLFxuICAgIHR5cGU6IFwiZXZlbnRcIixcbiAgfSxcbiAge1xuICAgIGFub255bW91czogZmFsc2UsXG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IGZhbHNlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIl9waWRcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbmRleGVkOiB0cnVlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcIl9jYWxsZXJcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbmRleGVkOiB0cnVlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcIl90b2tlblwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IGZhbHNlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIl9hbW91bnRcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJFYXJtYXJrSW5jZW50aXZlU2VudFwiLFxuICAgIHR5cGU6IFwiZXZlbnRcIixcbiAgfSxcbiAge1xuICAgIGFub255bW91czogZmFsc2UsXG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IHRydWUsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwiX3RvXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogZmFsc2UsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwiX2VxYkFtb3VudFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IGZhbHNlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIl94RXFiQW1vdW50XCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG5hbWU6IFwiRXFiUmV3YXJkc1NlbnRcIixcbiAgICB0eXBlOiBcImV2ZW50XCIsXG4gIH0sXG4gIHtcbiAgICBhbm9ueW1vdXM6IGZhbHNlLFxuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbmRleGVkOiBmYWxzZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQ4XCIsXG4gICAgICAgIG5hbWU6IFwidmVyc2lvblwiLFxuICAgICAgICB0eXBlOiBcInVpbnQ4XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJJbml0aWFsaXplZFwiLFxuICAgIHR5cGU6IFwiZXZlbnRcIixcbiAgfSxcbiAge1xuICAgIGFub255bW91czogZmFsc2UsXG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IHRydWUsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwicHJldmlvdXNPd25lclwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IHRydWUsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwibmV3T3duZXJcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJPd25lcnNoaXBUcmFuc2ZlcnJlZFwiLFxuICAgIHR5cGU6IFwiZXZlbnRcIixcbiAgfSxcbiAge1xuICAgIGFub255bW91czogZmFsc2UsXG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IHRydWUsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwiX3BpZFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IHRydWUsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwiX21hcmtldFwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IGZhbHNlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcIl90b2tlblwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IGZhbHNlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcIl9yZXdhcmRQb29sXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG5hbWU6IFwiUG9vbEFkZGVkXCIsXG4gICAgdHlwZTogXCJldmVudFwiLFxuICB9LFxuICB7XG4gICAgYW5vbnltb3VzOiBmYWxzZSxcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogZmFsc2UsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwiX3BpZFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IHRydWUsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwiX3Jld2FyZFRva2VuXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogZmFsc2UsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwiX2Ftb3VudFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcIlJld2FyZENsYWltZWRcIixcbiAgICB0eXBlOiBcImV2ZW50XCIsXG4gIH0sXG4gIHtcbiAgICBhbm9ueW1vdXM6IGZhbHNlLFxuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbmRleGVkOiBmYWxzZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJfcGlkXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogdHJ1ZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJfdG9rZW5cIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbmRleGVkOiBmYWxzZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJfYW1vdW50XCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG5hbWU6IFwiVHJlYXN1cnlTZW50XCIsXG4gICAgdHlwZTogXCJldmVudFwiLFxuICB9LFxuICB7XG4gICAgYW5vbnltb3VzOiBmYWxzZSxcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogdHJ1ZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJfdXNlclwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IHRydWUsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwiX3Bvb2xpZFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IGZhbHNlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIl9hbW91bnRcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJXaXRoZHJhd25cIixcbiAgICB0eXBlOiBcImV2ZW50XCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtdLFxuICAgIG5hbWU6IFwiREVOT01JTkFUT1JcIixcbiAgICBvdXRwdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwiXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJ2aWV3XCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXSxcbiAgICBuYW1lOiBcIk1heEZlZXNcIixcbiAgICBvdXRwdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwiXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJ2aWV3XCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwiX21hcmtldFwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwiX3Rva2VuXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJfcmV3YXJkUG9vbFwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcImFkZFBvb2xcIixcbiAgICBvdXRwdXRzOiBbXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwibm9ucGF5YWJsZVwiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcIl9tYXJrZXRcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJhZGRQb29sQmVhY29uXCIsXG4gICAgb3V0cHV0czogW10sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcIm5vbnBheWFibGVcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtdLFxuICAgIG5hbWU6IFwiY29udHJpYnV0b3JcIixcbiAgICBvdXRwdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwiXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJ2aWV3XCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwiX3BpZFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwiX2Ftb3VudFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJib29sXCIsXG4gICAgICAgIG5hbWU6IFwiX3N0YWtlXCIsXG4gICAgICAgIHR5cGU6IFwiYm9vbFwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG5hbWU6IFwiZGVwb3NpdFwiLFxuICAgIG91dHB1dHM6IFtdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJub25wYXlhYmxlXCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwiX3BpZFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJib29sXCIsXG4gICAgICAgIG5hbWU6IFwiX3N0YWtlXCIsXG4gICAgICAgIHR5cGU6IFwiYm9vbFwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG5hbWU6IFwiZGVwb3NpdEFsbFwiLFxuICAgIG91dHB1dHM6IFtdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJub25wYXlhYmxlXCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXSxcbiAgICBuYW1lOiBcImVQZW5kbGVJbmNlbnRpdmVcIixcbiAgICBvdXRwdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwiXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJ2aWV3XCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXSxcbiAgICBuYW1lOiBcImVQZW5kbGVSZXdhcmRQb29sXCIsXG4gICAgb3V0cHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcIlwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwidmlld1wiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW10sXG4gICAgbmFtZTogXCJlUGVuZGxlUmV3YXJkUmVjZWl2ZXJcIixcbiAgICBvdXRwdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwiXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJ2aWV3XCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXSxcbiAgICBuYW1lOiBcImVhcm1hcmtJbmNlbnRpdmVcIixcbiAgICBvdXRwdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwiXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJ2aWV3XCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXSxcbiAgICBuYW1lOiBcImVhcm1hcmtPbk9wZXJhdGlvblwiLFxuICAgIG91dHB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImJvb2xcIixcbiAgICAgICAgbmFtZTogXCJcIixcbiAgICAgICAgdHlwZTogXCJib29sXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcInZpZXdcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJfcGlkXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG5hbWU6IFwiZWFybWFya1Jld2FyZHNcIixcbiAgICBvdXRwdXRzOiBbXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwibm9ucGF5YWJsZVwiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIl9waWRcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NltdXCIsXG4gICAgICAgIG5hbWU6IFwiX2Ftb3VudHNcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2W11cIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcImVhcm1hcmtSZXdhcmRzTWFudWFsbHlcIixcbiAgICBvdXRwdXRzOiBbXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwibm9ucGF5YWJsZVwiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW10sXG4gICAgbmFtZTogXCJlcWJcIixcbiAgICBvdXRwdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwiXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJ2aWV3XCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXSxcbiAgICBuYW1lOiBcImVxYkNvbmZpZ1wiLFxuICAgIG91dHB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImNvbnRyYWN0IElFcWJDb25maWdcIixcbiAgICAgICAgbmFtZTogXCJcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcInZpZXdcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtdLFxuICAgIG5hbWU6IFwiZXFiTWludGVyXCIsXG4gICAgb3V0cHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcIlwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwidmlld1wiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW10sXG4gICAgbmFtZTogXCJmYXJtRXFiU2hhcmVcIixcbiAgICBvdXRwdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwiXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJ2aWV3XCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXSxcbiAgICBuYW1lOiBcImluaXRpYWxpemVcIixcbiAgICBvdXRwdXRzOiBbXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwibm9ucGF5YWJsZVwiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW10sXG4gICAgbmFtZTogXCJpc1NodXRkb3duXCIsXG4gICAgb3V0cHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYm9vbFwiLFxuICAgICAgICBuYW1lOiBcIlwiLFxuICAgICAgICB0eXBlOiBcImJvb2xcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwidmlld1wiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW10sXG4gICAgbmFtZTogXCJvd25lclwiLFxuICAgIG91dHB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcInZpZXdcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtdLFxuICAgIG5hbWU6IFwicGVuZGxlXCIsXG4gICAgb3V0cHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcIlwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwidmlld1wiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW10sXG4gICAgbmFtZTogXCJwZW5kbGVQcm94eVwiLFxuICAgIG91dHB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcInZpZXdcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtdLFxuICAgIG5hbWU6IFwicGxhdGZvcm1GZWVcIixcbiAgICBvdXRwdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwiXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJ2aWV3XCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwiXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG5hbWU6IFwicG9vbEluZm9cIixcbiAgICBvdXRwdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwibWFya2V0XCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJ0b2tlblwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwicmV3YXJkUG9vbFwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJib29sXCIsXG4gICAgICAgIG5hbWU6IFwic2h1dGRvd25cIixcbiAgICAgICAgdHlwZTogXCJib29sXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcInZpZXdcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtdLFxuICAgIG5hbWU6IFwicG9vbExlbmd0aFwiLFxuICAgIG91dHB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcInZpZXdcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtdLFxuICAgIG5hbWU6IFwicmVub3VuY2VPd25lcnNoaXBcIixcbiAgICBvdXRwdXRzOiBbXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwibm9ucGF5YWJsZVwiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIl9waWRcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcIl9hY2NvdW50XCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJfdG9rZW5cIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIl9hbW91bnRcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJyZXdhcmRDbGFpbWVkXCIsXG4gICAgb3V0cHV0czogW10sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcIm5vbnBheWFibGVcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJfY29udHJpYnV0b3JcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJzZXRDb250cmlidXRvclwiLFxuICAgIG91dHB1dHM6IFtdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJub25wYXlhYmxlXCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJib29sXCIsXG4gICAgICAgIG5hbWU6IFwiX2Vhcm1hcmtPbk9wZXJhdGlvblwiLFxuICAgICAgICB0eXBlOiBcImJvb2xcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcInNldEVhcm1hcmtPbk9wZXJhdGlvblwiLFxuICAgIG91dHB1dHM6IFtdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJub25wYXlhYmxlXCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwiX2VxYkNvbmZpZ1wiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcInNldEVxYkNvbmZpZ1wiLFxuICAgIG91dHB1dHM6IFtdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJub25wYXlhYmxlXCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwiX2Zhcm1FcWJTaGFyZVwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcInNldEZhcm1FcWJTaGFyZVwiLFxuICAgIG91dHB1dHM6IFtdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJub25wYXlhYmxlXCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwiX3ZsRXFiSW5jZW50aXZlXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJfZVBlbmRsZUluY2VudGl2ZVwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwiX3BsYXRmb3JtRmVlXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJfZWFybWFya0luY2VudGl2ZVwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcInNldEZlZXNcIixcbiAgICBvdXRwdXRzOiBbXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwibm9ucGF5YWJsZVwiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcIl9wZW5kbGVcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcIl9wZW5kbGVQcm94eVwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwiX2VxYk1pbnRlclwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwiX2VxYlwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwiX3hFcWJcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcIl92bEVxYlwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwiX2VQZW5kbGVSZXdhcmRSZWNlaXZlclwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwiX2VQZW5kbGVSZXdhcmRQb29sXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJfdHJlYXN1cnlcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJzZXRQYXJhbXNcIixcbiAgICBvdXRwdXRzOiBbXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwibm9ucGF5YWJsZVwiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIl90ZWFtRXFiU2hhcmVcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJzZXRUZWFtRXFiU2hhcmVcIixcbiAgICBvdXRwdXRzOiBbXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwibm9ucGF5YWJsZVwiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcIl90cmVhc3VyeVwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcInNldFRyZWFzdXJ5XCIsXG4gICAgb3V0cHV0czogW10sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcIm5vbnBheWFibGVcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJfdmxFcWJcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJzZXRWbEVxYlwiLFxuICAgIG91dHB1dHM6IFtdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJub25wYXlhYmxlXCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwiX3BpZFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcInNodXRkb3duUG9vbFwiLFxuICAgIG91dHB1dHM6IFtdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJub25wYXlhYmxlXCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXSxcbiAgICBuYW1lOiBcInNodXRkb3duU3lzdGVtXCIsXG4gICAgb3V0cHV0czogW10sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcIm5vbnBheWFibGVcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtdLFxuICAgIG5hbWU6IFwidGVhbUVxYlNoYXJlXCIsXG4gICAgb3V0cHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIlwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwidmlld1wiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcIm5ld093bmVyXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG5hbWU6IFwidHJhbnNmZXJPd25lcnNoaXBcIixcbiAgICBvdXRwdXRzOiBbXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwibm9ucGF5YWJsZVwiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW10sXG4gICAgbmFtZTogXCJ0cmVhc3VyeVwiLFxuICAgIG91dHB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcInZpZXdcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtdLFxuICAgIG5hbWU6IFwidmxFcWJcIixcbiAgICBvdXRwdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwiXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJ2aWV3XCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXSxcbiAgICBuYW1lOiBcInZsRXFiSW5jZW50aXZlXCIsXG4gICAgb3V0cHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIlwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwidmlld1wiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIl9waWRcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIl9hbW91bnRcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJ3aXRoZHJhd1wiLFxuICAgIG91dHB1dHM6IFtdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJub25wYXlhYmxlXCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwiX3BpZFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcIndpdGhkcmF3QWxsXCIsXG4gICAgb3V0cHV0czogW10sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcIm5vbnBheWFibGVcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtdLFxuICAgIG5hbWU6IFwieEVxYlwiLFxuICAgIG91dHB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcInZpZXdcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwicGF5YWJsZVwiLFxuICAgIHR5cGU6IFwicmVjZWl2ZVwiLFxuICB9LFxuXSBhcyBjb25zdDtcblxuZXhwb3J0IGNsYXNzIEVRQkJvb3N0ZXJfX2ZhY3Rvcnkge1xuICBzdGF0aWMgcmVhZG9ubHkgYWJpID0gX2FiaTtcbiAgc3RhdGljIGNyZWF0ZUludGVyZmFjZSgpOiBFUUJCb29zdGVySW50ZXJmYWNlIHtcbiAgICByZXR1cm4gbmV3SW50ZXJmYWNlKF9hYmkpIGFzIEVRQkJvb3N0ZXJJbnRlcmZhY2U7XG4gIH1cbiAgc3RhdGljIGNvbm5lY3QoXG4gICAgYWRkcmVzczogc3RyaW5nLFxuICAgIHNpZ25lck9yUHJvdmlkZXI6IFNpZ25lciB8IFByb3ZpZGVyLFxuICApOiBFUUJCb29zdGVyIHtcbiAgICByZXR1cm4gbmV3Q29udHJhY3QoYWRkcmVzcywgX2FiaSwgc2lnbmVyT3JQcm92aWRlcikgYXMgRVFCQm9vc3RlcjtcbiAgfVxufVxuIiwgIi8qIEF1dG9nZW5lcmF0ZWQgZmlsZS4gRG8gbm90IGVkaXQgbWFudWFsbHkuICovXG4vKiB0c2xpbnQ6ZGlzYWJsZSAqL1xuLyogZXNsaW50LWRpc2FibGUgKi9cbi8vIEB0cy1ub2NoZWNrXG5pbXBvcnQgeyBuZXdDb250cmFjdCwgbmV3SW50ZXJmYWNlIH0gZnJvbSBcIkBzZW50aW8vc2RrL2V0aFwiO1xuXG5pbXBvcnQgeyBDb250cmFjdCwgU2lnbmVyLCBQcm92aWRlciwgSW50ZXJmYWNlIH0gZnJvbSBcImV0aGVyc1wiO1xuaW1wb3J0IHR5cGUgeyBJUFByaWNlRmVlZCwgSVBQcmljZUZlZWRJbnRlcmZhY2UgfSBmcm9tIFwiLi4vSVBQcmljZUZlZWQuanNcIjtcblxuY29uc3QgX2FiaSA9IFtcbiAge1xuICAgIGlucHV0czogW10sXG4gICAgbmFtZTogXCJnZXRQcmljZVwiLFxuICAgIG91dHB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcInZpZXdcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG5dIGFzIGNvbnN0O1xuXG5leHBvcnQgY2xhc3MgSVBQcmljZUZlZWRfX2ZhY3Rvcnkge1xuICBzdGF0aWMgcmVhZG9ubHkgYWJpID0gX2FiaTtcbiAgc3RhdGljIGNyZWF0ZUludGVyZmFjZSgpOiBJUFByaWNlRmVlZEludGVyZmFjZSB7XG4gICAgcmV0dXJuIG5ld0ludGVyZmFjZShfYWJpKSBhcyBJUFByaWNlRmVlZEludGVyZmFjZTtcbiAgfVxuICBzdGF0aWMgY29ubmVjdChcbiAgICBhZGRyZXNzOiBzdHJpbmcsXG4gICAgc2lnbmVyT3JQcm92aWRlcjogU2lnbmVyIHwgUHJvdmlkZXIsXG4gICk6IElQUHJpY2VGZWVkIHtcbiAgICByZXR1cm4gbmV3Q29udHJhY3QoYWRkcmVzcywgX2FiaSwgc2lnbmVyT3JQcm92aWRlcikgYXMgSVBQcmljZUZlZWQ7XG4gIH1cbn1cbiIsICIvKiBBdXRvZ2VuZXJhdGVkIGZpbGUuIERvIG5vdCBlZGl0IG1hbnVhbGx5LiAqL1xuLyogdHNsaW50OmRpc2FibGUgKi9cbi8qIGVzbGludC1kaXNhYmxlICovXG4vLyBAdHMtbm9jaGVja1xuaW1wb3J0IHsgbmV3Q29udHJhY3QsIG5ld0ludGVyZmFjZSB9IGZyb20gXCJAc2VudGlvL3Nkay9ldGhcIjtcblxuaW1wb3J0IHsgQ29udHJhY3QsIFNpZ25lciwgUHJvdmlkZXIsIEludGVyZmFjZSB9IGZyb20gXCJldGhlcnNcIjtcbmltcG9ydCB0eXBlIHtcbiAgSW1wbGljaXRTd2FwZmVlQ29udHJhY3QsXG4gIEltcGxpY2l0U3dhcGZlZUNvbnRyYWN0SW50ZXJmYWNlLFxufSBmcm9tIFwiLi4vSW1wbGljaXRTd2FwZmVlQ29udHJhY3QuanNcIjtcblxuY29uc3QgX2FiaSA9IFtcbiAge1xuICAgIGlucHV0czogW10sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcIm5vbnBheWFibGVcIixcbiAgICB0eXBlOiBcImNvbnN0cnVjdG9yXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImludDI1NlwiLFxuICAgICAgICBuYW1lOiBcImV4Y2hhbmdlUmF0ZVwiLFxuICAgICAgICB0eXBlOiBcImludDI1NlwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG5hbWU6IFwiTWFya2V0RXhjaGFuZ2VSYXRlQmVsb3dPbmVcIixcbiAgICB0eXBlOiBcImVycm9yXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtdLFxuICAgIG5hbWU6IFwiTWFya2V0RXhwaXJlZFwiLFxuICAgIHR5cGU6IFwiZXJyb3JcIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiaW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwiY3VycmVudEFtb3VudFwiLFxuICAgICAgICB0eXBlOiBcImludDI1NlwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImludDI1NlwiLFxuICAgICAgICBuYW1lOiBcInJlcXVpcmVkQW1vdW50XCIsXG4gICAgICAgIHR5cGU6IFwiaW50MjU2XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJNYXJrZXRJbnN1ZmZpY2llbnRQdEZvclRyYWRlXCIsXG4gICAgdHlwZTogXCJlcnJvclwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXSxcbiAgICBuYW1lOiBcIk1hcmtldFByb3BvcnRpb25NdXN0Tm90RXF1YWxPbmVcIixcbiAgICB0eXBlOiBcImVycm9yXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImludDI1NlwiLFxuICAgICAgICBuYW1lOiBcInByb3BvcnRpb25cIixcbiAgICAgICAgdHlwZTogXCJpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJtYXhQcm9wb3J0aW9uXCIsXG4gICAgICAgIHR5cGU6IFwiaW50MjU2XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJNYXJrZXRQcm9wb3J0aW9uVG9vSGlnaFwiLFxuICAgIHR5cGU6IFwiZXJyb3JcIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiaW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwicmF0ZVNjYWxhclwiLFxuICAgICAgICB0eXBlOiBcImludDI1NlwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG5hbWU6IFwiTWFya2V0UmF0ZVNjYWxhckJlbG93WmVyb1wiLFxuICAgIHR5cGU6IFwiZXJyb3JcIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW10sXG4gICAgbmFtZTogXCJNYXJrZXRaZXJvTG5JbXBsaWVkUmF0ZVwiLFxuICAgIHR5cGU6IFwiZXJyb3JcIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiaW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwidG90YWxQdFwiLFxuICAgICAgICB0eXBlOiBcImludDI1NlwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImludDI1NlwiLFxuICAgICAgICBuYW1lOiBcInRvdGFsQXNzZXRcIixcbiAgICAgICAgdHlwZTogXCJpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcIk1hcmtldFplcm9Ub3RhbFB0T3JUb3RhbEFzc2V0XCIsXG4gICAgdHlwZTogXCJlcnJvclwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXSxcbiAgICBuYW1lOiBcIktcIixcbiAgICBvdXRwdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJcIixcbiAgICAgICAgdHlwZTogXCJpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwidmlld1wiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcIm1hcmtldFwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGNvbXBvbmVudHM6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiaW50MjU2XCIsXG4gICAgICAgICAgICBuYW1lOiBcInRvdGFsUHRcIixcbiAgICAgICAgICAgIHR5cGU6IFwiaW50MjU2XCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiaW50MjU2XCIsXG4gICAgICAgICAgICBuYW1lOiBcInRvdGFsU3lcIixcbiAgICAgICAgICAgIHR5cGU6IFwiaW50MjU2XCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiaW50MjU2XCIsXG4gICAgICAgICAgICBuYW1lOiBcInRvdGFsTHBcIixcbiAgICAgICAgICAgIHR5cGU6IFwiaW50MjU2XCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgbmFtZTogXCJ0cmVhc3VyeVwiLFxuICAgICAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiaW50MjU2XCIsXG4gICAgICAgICAgICBuYW1lOiBcInNjYWxhclJvb3RcIixcbiAgICAgICAgICAgIHR5cGU6IFwiaW50MjU2XCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgbmFtZTogXCJleHBpcnlcIixcbiAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgIG5hbWU6IFwibG5GZWVSYXRlUm9vdFwiLFxuICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgbmFtZTogXCJyZXNlcnZlRmVlUGVyY2VudFwiLFxuICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgbmFtZTogXCJsYXN0TG5JbXBsaWVkUmF0ZVwiLFxuICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInN0cnVjdCBNYXJrZXRTdGF0ZVwiLFxuICAgICAgICBuYW1lOiBcInByZXZTdGF0ZVwiLFxuICAgICAgICB0eXBlOiBcInR1cGxlXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiaW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwibmV0UHRUb0FjY291bnRcIixcbiAgICAgICAgdHlwZTogXCJpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcImV4ZWN1dGVcIixcbiAgICBvdXRwdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJuZXRTY3lUb0FjY291bnRcIixcbiAgICAgICAgdHlwZTogXCJpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwidmlld1wiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbl0gYXMgY29uc3Q7XG5cbmV4cG9ydCBjbGFzcyBJbXBsaWNpdFN3YXBmZWVDb250cmFjdF9fZmFjdG9yeSB7XG4gIHN0YXRpYyByZWFkb25seSBhYmkgPSBfYWJpO1xuICBzdGF0aWMgY3JlYXRlSW50ZXJmYWNlKCk6IEltcGxpY2l0U3dhcGZlZUNvbnRyYWN0SW50ZXJmYWNlIHtcbiAgICByZXR1cm4gbmV3SW50ZXJmYWNlKF9hYmkpIGFzIEltcGxpY2l0U3dhcGZlZUNvbnRyYWN0SW50ZXJmYWNlO1xuICB9XG4gIHN0YXRpYyBjb25uZWN0KFxuICAgIGFkZHJlc3M6IHN0cmluZyxcbiAgICBzaWduZXJPclByb3ZpZGVyOiBTaWduZXIgfCBQcm92aWRlcixcbiAgKTogSW1wbGljaXRTd2FwZmVlQ29udHJhY3Qge1xuICAgIHJldHVybiBuZXdDb250cmFjdChcbiAgICAgIGFkZHJlc3MsXG4gICAgICBfYWJpLFxuICAgICAgc2lnbmVyT3JQcm92aWRlcixcbiAgICApIGFzIEltcGxpY2l0U3dhcGZlZUNvbnRyYWN0O1xuICB9XG59XG4iLCAiLyogQXV0b2dlbmVyYXRlZCBmaWxlLiBEbyBub3QgZWRpdCBtYW51YWxseS4gKi9cbi8qIHRzbGludDpkaXNhYmxlICovXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xuLy8gQHRzLW5vY2hlY2tcbmltcG9ydCB7IG5ld0NvbnRyYWN0LCBuZXdJbnRlcmZhY2UgfSBmcm9tIFwiQHNlbnRpby9zZGsvZXRoXCI7XG5cbmltcG9ydCB7IENvbnRyYWN0LCBTaWduZXIsIFByb3ZpZGVyLCBJbnRlcmZhY2UgfSBmcm9tIFwiZXRoZXJzXCI7XG5pbXBvcnQgdHlwZSB7IExpbWl0Um91dGVyLCBMaW1pdFJvdXRlckludGVyZmFjZSB9IGZyb20gXCIuLi9MaW1pdFJvdXRlci5qc1wiO1xuXG5jb25zdCBfYWJpID0gW1xuICB7XG4gICAgYW5vbnltb3VzOiBmYWxzZSxcbiAgICBpbnB1dHM6IFtdLFxuICAgIG5hbWU6IFwiRUlQNzEyRG9tYWluQ2hhbmdlZFwiLFxuICAgIHR5cGU6IFwiZXZlbnRcIixcbiAgfSxcbiAge1xuICAgIGFub255bW91czogZmFsc2UsXG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IGZhbHNlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDhcIixcbiAgICAgICAgbmFtZTogXCJ2ZXJzaW9uXCIsXG4gICAgICAgIHR5cGU6IFwidWludDhcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcIkluaXRpYWxpemVkXCIsXG4gICAgdHlwZTogXCJldmVudFwiLFxuICB9LFxuICB7XG4gICAgYW5vbnltb3VzOiBmYWxzZSxcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogdHJ1ZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJtYWtlclwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IGZhbHNlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIm9sZE5vbmNlXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogZmFsc2UsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwibmV3Tm9uY2VcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJOb25jZUluY3JlYXNlZFwiLFxuICAgIHR5cGU6IFwiZXZlbnRcIixcbiAgfSxcbiAge1xuICAgIGFub255bW91czogZmFsc2UsXG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IHRydWUsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwibWFrZXJcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbmRleGVkOiB0cnVlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYnl0ZXMzMlwiLFxuICAgICAgICBuYW1lOiBcIm9yZGVySGFzaFwiLFxuICAgICAgICB0eXBlOiBcImJ5dGVzMzJcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcIk9yZGVyQ2FuY2VsZWRcIixcbiAgICB0eXBlOiBcImV2ZW50XCIsXG4gIH0sXG4gIHtcbiAgICBhbm9ueW1vdXM6IGZhbHNlLFxuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbmRleGVkOiB0cnVlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYnl0ZXMzMlwiLFxuICAgICAgICBuYW1lOiBcIm9yZGVySGFzaFwiLFxuICAgICAgICB0eXBlOiBcImJ5dGVzMzJcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IHRydWUsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJlbnVtIElQTGltaXRPcmRlclR5cGUuT3JkZXJUeXBlXCIsXG4gICAgICAgIG5hbWU6IFwib3JkZXJUeXBlXCIsXG4gICAgICAgIHR5cGU6IFwidWludDhcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IHRydWUsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwiWVRcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbmRleGVkOiBmYWxzZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJ0b2tlblwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IGZhbHNlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIm5ldElucHV0RnJvbU1ha2VyXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogZmFsc2UsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwibmV0T3V0cHV0VG9NYWtlclwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IGZhbHNlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcImZlZUFtb3VudFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IGZhbHNlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIm5vdGlvbmFsVm9sdW1lXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG5hbWU6IFwiT3JkZXJGaWxsZWRcIixcbiAgICB0eXBlOiBcImV2ZW50XCIsXG4gIH0sXG4gIHtcbiAgICBhbm9ueW1vdXM6IGZhbHNlLFxuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbmRleGVkOiB0cnVlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYnl0ZXMzMlwiLFxuICAgICAgICBuYW1lOiBcIm9yZGVySGFzaFwiLFxuICAgICAgICB0eXBlOiBcImJ5dGVzMzJcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IHRydWUsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJlbnVtIElQTGltaXRPcmRlclR5cGUuT3JkZXJUeXBlXCIsXG4gICAgICAgIG5hbWU6IFwib3JkZXJUeXBlXCIsXG4gICAgICAgIHR5cGU6IFwidWludDhcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IHRydWUsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwiWVRcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbmRleGVkOiBmYWxzZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJ0b2tlblwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IGZhbHNlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIm5ldElucHV0RnJvbU1ha2VyXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogZmFsc2UsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwibmV0T3V0cHV0VG9NYWtlclwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IGZhbHNlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcImZlZUFtb3VudFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IGZhbHNlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIm5vdGlvbmFsVm9sdW1lXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogZmFsc2UsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwibWFrZXJcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbmRleGVkOiBmYWxzZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJ0YWtlclwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcIk9yZGVyRmlsbGVkVjJcIixcbiAgICB0eXBlOiBcImV2ZW50XCIsXG4gIH0sXG4gIHtcbiAgICBhbm9ueW1vdXM6IGZhbHNlLFxuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbmRleGVkOiB0cnVlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcInByZXZpb3VzT3duZXJcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbmRleGVkOiB0cnVlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcIm5ld093bmVyXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG5hbWU6IFwiT3duZXJzaGlwVHJhbnNmZXJyZWRcIixcbiAgICB0eXBlOiBcImV2ZW50XCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtdLFxuICAgIG5hbWU6IFwiRE9NQUlOX1NFUEFSQVRPUlwiLFxuICAgIG91dHB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImJ5dGVzMzJcIixcbiAgICAgICAgbmFtZTogXCJcIixcbiAgICAgICAgdHlwZTogXCJieXRlczMyXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcInZpZXdcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQ4XCIsXG4gICAgICAgIG5hbWU6IFwiYW1vdW50XCIsXG4gICAgICAgIHR5cGU6IFwidWludDhcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcImFkdmFuY2VOb25jZVwiLFxuICAgIG91dHB1dHM6IFtdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJub25wYXlhYmxlXCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGNvbXBvbmVudHM6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgbmFtZTogXCJzYWx0XCIsXG4gICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICBuYW1lOiBcImV4cGlyeVwiLFxuICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgbmFtZTogXCJub25jZVwiLFxuICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiZW51bSBJUExpbWl0T3JkZXJUeXBlLk9yZGVyVHlwZVwiLFxuICAgICAgICAgICAgbmFtZTogXCJvcmRlclR5cGVcIixcbiAgICAgICAgICAgIHR5cGU6IFwidWludDhcIixcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICBuYW1lOiBcInRva2VuXCIsXG4gICAgICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICBuYW1lOiBcIllUXCIsXG4gICAgICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICBuYW1lOiBcIm1ha2VyXCIsXG4gICAgICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICBuYW1lOiBcInJlY2VpdmVyXCIsXG4gICAgICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICBuYW1lOiBcIm1ha2luZ0Ftb3VudFwiLFxuICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgbmFtZTogXCJsbkltcGxpZWRSYXRlXCIsXG4gICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICBuYW1lOiBcImZhaWxTYWZlUmF0ZVwiLFxuICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYnl0ZXNcIixcbiAgICAgICAgICAgIG5hbWU6IFwicGVybWl0XCIsXG4gICAgICAgICAgICB0eXBlOiBcImJ5dGVzXCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInN0cnVjdCBPcmRlcltdXCIsXG4gICAgICAgIG5hbWU6IFwib3JkZXJzXCIsXG4gICAgICAgIHR5cGU6IFwidHVwbGVbXVwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG5hbWU6IFwiY2FuY2VsQmF0Y2hcIixcbiAgICBvdXRwdXRzOiBbXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwibm9ucGF5YWJsZVwiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBjb21wb25lbnRzOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgIG5hbWU6IFwic2FsdFwiLFxuICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgbmFtZTogXCJleHBpcnlcIixcbiAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgIG5hbWU6IFwibm9uY2VcIixcbiAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImVudW0gSVBMaW1pdE9yZGVyVHlwZS5PcmRlclR5cGVcIixcbiAgICAgICAgICAgIG5hbWU6IFwib3JkZXJUeXBlXCIsXG4gICAgICAgICAgICB0eXBlOiBcInVpbnQ4XCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgbmFtZTogXCJ0b2tlblwiLFxuICAgICAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgbmFtZTogXCJZVFwiLFxuICAgICAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgbmFtZTogXCJtYWtlclwiLFxuICAgICAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgbmFtZTogXCJyZWNlaXZlclwiLFxuICAgICAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgbmFtZTogXCJtYWtpbmdBbW91bnRcIixcbiAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgIG5hbWU6IFwibG5JbXBsaWVkUmF0ZVwiLFxuICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgbmFtZTogXCJmYWlsU2FmZVJhdGVcIixcbiAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImJ5dGVzXCIsXG4gICAgICAgICAgICBuYW1lOiBcInBlcm1pdFwiLFxuICAgICAgICAgICAgdHlwZTogXCJieXRlc1wiLFxuICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIGludGVybmFsVHlwZTogXCJzdHJ1Y3QgT3JkZXJcIixcbiAgICAgICAgbmFtZTogXCJvcmRlclwiLFxuICAgICAgICB0eXBlOiBcInR1cGxlXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJjYW5jZWxTaW5nbGVcIixcbiAgICBvdXRwdXRzOiBbXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwibm9ucGF5YWJsZVwiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW10sXG4gICAgbmFtZTogXCJjbGFpbU93bmVyc2hpcFwiLFxuICAgIG91dHB1dHM6IFtdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJub25wYXlhYmxlXCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXSxcbiAgICBuYW1lOiBcImVpcDcxMkRvbWFpblwiLFxuICAgIG91dHB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImJ5dGVzMVwiLFxuICAgICAgICBuYW1lOiBcImZpZWxkc1wiLFxuICAgICAgICB0eXBlOiBcImJ5dGVzMVwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInN0cmluZ1wiLFxuICAgICAgICBuYW1lOiBcIm5hbWVcIixcbiAgICAgICAgdHlwZTogXCJzdHJpbmdcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJzdHJpbmdcIixcbiAgICAgICAgbmFtZTogXCJ2ZXJzaW9uXCIsXG4gICAgICAgIHR5cGU6IFwic3RyaW5nXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcImNoYWluSWRcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcInZlcmlmeWluZ0NvbnRyYWN0XCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImJ5dGVzMzJcIixcbiAgICAgICAgbmFtZTogXCJzYWx0XCIsXG4gICAgICAgIHR5cGU6IFwiYnl0ZXMzMlwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZbXVwiLFxuICAgICAgICBuYW1lOiBcImV4dGVuc2lvbnNcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2W11cIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwidmlld1wiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW10sXG4gICAgbmFtZTogXCJmZWVSZWNpcGllbnRcIixcbiAgICBvdXRwdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwiXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJ2aWV3XCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGNvbXBvbmVudHM6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBjb21wb25lbnRzOiBbXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICAgIG5hbWU6IFwic2FsdFwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgICBuYW1lOiBcImV4cGlyeVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgICBuYW1lOiBcIm5vbmNlXCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiZW51bSBJUExpbWl0T3JkZXJUeXBlLk9yZGVyVHlwZVwiLFxuICAgICAgICAgICAgICAgIG5hbWU6IFwib3JkZXJUeXBlXCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJ1aW50OFwiLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgICAgICBuYW1lOiBcInRva2VuXCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgICAgIG5hbWU6IFwiWVRcIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICAgICAgbmFtZTogXCJtYWtlclwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgICAgICBuYW1lOiBcInJlY2VpdmVyXCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICAgIG5hbWU6IFwibWFraW5nQW1vdW50XCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICAgIG5hbWU6IFwibG5JbXBsaWVkUmF0ZVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgICBuYW1lOiBcImZhaWxTYWZlUmF0ZVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImJ5dGVzXCIsXG4gICAgICAgICAgICAgICAgbmFtZTogXCJwZXJtaXRcIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcImJ5dGVzXCIsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInN0cnVjdCBPcmRlclwiLFxuICAgICAgICAgICAgbmFtZTogXCJvcmRlclwiLFxuICAgICAgICAgICAgdHlwZTogXCJ0dXBsZVwiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImJ5dGVzXCIsXG4gICAgICAgICAgICBuYW1lOiBcInNpZ25hdHVyZVwiLFxuICAgICAgICAgICAgdHlwZTogXCJieXRlc1wiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgIG5hbWU6IFwibWFraW5nQW1vdW50XCIsXG4gICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwic3RydWN0IEZpbGxPcmRlclBhcmFtc1tdXCIsXG4gICAgICAgIG5hbWU6IFwicGFyYW1zXCIsXG4gICAgICAgIHR5cGU6IFwidHVwbGVbXVwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJyZWNlaXZlclwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwibWF4VGFraW5nXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImJ5dGVzXCIsXG4gICAgICAgIG5hbWU6IFwiXCIsXG4gICAgICAgIHR5cGU6IFwiYnl0ZXNcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJieXRlc1wiLFxuICAgICAgICBuYW1lOiBcImNhbGxiYWNrXCIsXG4gICAgICAgIHR5cGU6IFwiYnl0ZXNcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcImZpbGxcIixcbiAgICBvdXRwdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwiYWN0dWFsTWFraW5nXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJhY3R1YWxUYWtpbmdcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcInRvdGFsRmVlXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImJ5dGVzXCIsXG4gICAgICAgIG5hbWU6IFwiY2FsbGJhY2tSZXR1cm5cIixcbiAgICAgICAgdHlwZTogXCJieXRlc1wiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJub25wYXlhYmxlXCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwiWVRcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJnZXRMbkZlZVJhdGVSb290XCIsXG4gICAgb3V0cHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcInJlc1wiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwidmlld1wiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBjb21wb25lbnRzOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgIG5hbWU6IFwic2FsdFwiLFxuICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgbmFtZTogXCJleHBpcnlcIixcbiAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgIG5hbWU6IFwibm9uY2VcIixcbiAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImVudW0gSVBMaW1pdE9yZGVyVHlwZS5PcmRlclR5cGVcIixcbiAgICAgICAgICAgIG5hbWU6IFwib3JkZXJUeXBlXCIsXG4gICAgICAgICAgICB0eXBlOiBcInVpbnQ4XCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgbmFtZTogXCJ0b2tlblwiLFxuICAgICAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgbmFtZTogXCJZVFwiLFxuICAgICAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgbmFtZTogXCJtYWtlclwiLFxuICAgICAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgbmFtZTogXCJyZWNlaXZlclwiLFxuICAgICAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgbmFtZTogXCJtYWtpbmdBbW91bnRcIixcbiAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgIG5hbWU6IFwibG5JbXBsaWVkUmF0ZVwiLFxuICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgbmFtZTogXCJmYWlsU2FmZVJhdGVcIixcbiAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImJ5dGVzXCIsXG4gICAgICAgICAgICBuYW1lOiBcInBlcm1pdFwiLFxuICAgICAgICAgICAgdHlwZTogXCJieXRlc1wiLFxuICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIGludGVybmFsVHlwZTogXCJzdHJ1Y3QgT3JkZXJcIixcbiAgICAgICAgbmFtZTogXCJvcmRlclwiLFxuICAgICAgICB0eXBlOiBcInR1cGxlXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJoYXNoT3JkZXJcIixcbiAgICBvdXRwdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJieXRlczMyXCIsXG4gICAgICAgIG5hbWU6IFwiXCIsXG4gICAgICAgIHR5cGU6IFwiYnl0ZXMzMlwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJ2aWV3XCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXSxcbiAgICBuYW1lOiBcImluY3JlYXNlTm9uY2VcIixcbiAgICBvdXRwdXRzOiBbXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwibm9ucGF5YWJsZVwiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcIl9mZWVSZWNpcGllbnRcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJpbml0aWFsaXplXCIsXG4gICAgb3V0cHV0czogW10sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcIm5vbnBheWFibGVcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJub25jZVwiLFxuICAgIG91dHB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcInZpZXdcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJtYWtlckFkZHJlc3NcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIm1ha2VyTm9uY2VcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJub25jZUVxdWFsc1wiLFxuICAgIG91dHB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImJvb2xcIixcbiAgICAgICAgbmFtZTogXCJcIixcbiAgICAgICAgdHlwZTogXCJib29sXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcInZpZXdcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImJ5dGVzMzJbXVwiLFxuICAgICAgICBuYW1lOiBcIm9yZGVySGFzaGVzXCIsXG4gICAgICAgIHR5cGU6IFwiYnl0ZXMzMltdXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJvcmRlclN0YXR1c2VzXCIsXG4gICAgb3V0cHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NltdXCIsXG4gICAgICAgIG5hbWU6IFwicmVtYWluaW5nc1wiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZbXVwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZbXVwiLFxuICAgICAgICBuYW1lOiBcImZpbGxlZEFtb3VudHNcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2W11cIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwidmlld1wiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYnl0ZXMzMltdXCIsXG4gICAgICAgIG5hbWU6IFwib3JkZXJIYXNoZXNcIixcbiAgICAgICAgdHlwZTogXCJieXRlczMyW11cIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcIm9yZGVyU3RhdHVzZXNSYXdcIixcbiAgICBvdXRwdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2W11cIixcbiAgICAgICAgbmFtZTogXCJyZW1haW5pbmdzUmF3XCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NltdXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NltdXCIsXG4gICAgICAgIG5hbWU6IFwiZmlsbGVkQW1vdW50c1wiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZbXVwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJ2aWV3XCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXSxcbiAgICBuYW1lOiBcIm93bmVyXCIsXG4gICAgb3V0cHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcIlwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwidmlld1wiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW10sXG4gICAgbmFtZTogXCJwZW5kaW5nT3duZXJcIixcbiAgICBvdXRwdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwiXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJ2aWV3XCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwiX2ZlZVJlY2lwaWVudFwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcInNldEZlZVJlY2lwaWVudFwiLFxuICAgIG91dHB1dHM6IFtdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJub25wYXlhYmxlXCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzW11cIixcbiAgICAgICAgbmFtZTogXCJZVHNcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzW11cIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2W11cIixcbiAgICAgICAgbmFtZTogXCJsbkZlZVJhdGVSb290c1wiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZbXVwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG5hbWU6IFwic2V0TG5GZWVSYXRlUm9vdHNcIixcbiAgICBvdXRwdXRzOiBbXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwibm9ucGF5YWJsZVwiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcInRhcmdldFwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJieXRlc1wiLFxuICAgICAgICBuYW1lOiBcImRhdGFcIixcbiAgICAgICAgdHlwZTogXCJieXRlc1wiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG5hbWU6IFwic2ltdWxhdGVcIixcbiAgICBvdXRwdXRzOiBbXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwicGF5YWJsZVwiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcIm5ld093bmVyXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImJvb2xcIixcbiAgICAgICAgbmFtZTogXCJkaXJlY3RcIixcbiAgICAgICAgdHlwZTogXCJib29sXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYm9vbFwiLFxuICAgICAgICBuYW1lOiBcInJlbm91bmNlXCIsXG4gICAgICAgIHR5cGU6IFwiYm9vbFwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG5hbWU6IFwidHJhbnNmZXJPd25lcnNoaXBcIixcbiAgICBvdXRwdXRzOiBbXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwibm9ucGF5YWJsZVwiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJwYXlhYmxlXCIsXG4gICAgdHlwZTogXCJyZWNlaXZlXCIsXG4gIH0sXG5dIGFzIGNvbnN0O1xuXG5leHBvcnQgY2xhc3MgTGltaXRSb3V0ZXJfX2ZhY3Rvcnkge1xuICBzdGF0aWMgcmVhZG9ubHkgYWJpID0gX2FiaTtcbiAgc3RhdGljIGNyZWF0ZUludGVyZmFjZSgpOiBMaW1pdFJvdXRlckludGVyZmFjZSB7XG4gICAgcmV0dXJuIG5ld0ludGVyZmFjZShfYWJpKSBhcyBMaW1pdFJvdXRlckludGVyZmFjZTtcbiAgfVxuICBzdGF0aWMgY29ubmVjdChcbiAgICBhZGRyZXNzOiBzdHJpbmcsXG4gICAgc2lnbmVyT3JQcm92aWRlcjogU2lnbmVyIHwgUHJvdmlkZXIsXG4gICk6IExpbWl0Um91dGVyIHtcbiAgICByZXR1cm4gbmV3Q29udHJhY3QoYWRkcmVzcywgX2FiaSwgc2lnbmVyT3JQcm92aWRlcikgYXMgTGltaXRSb3V0ZXI7XG4gIH1cbn1cbiIsICIvKiBBdXRvZ2VuZXJhdGVkIGZpbGUuIERvIG5vdCBlZGl0IG1hbnVhbGx5LiAqL1xuLyogdHNsaW50OmRpc2FibGUgKi9cbi8qIGVzbGludC1kaXNhYmxlICovXG4vLyBAdHMtbm9jaGVja1xuaW1wb3J0IHsgbmV3Q29udHJhY3QsIG5ld0ludGVyZmFjZSB9IGZyb20gXCJAc2VudGlvL3Nkay9ldGhcIjtcblxuaW1wb3J0IHsgQ29udHJhY3QsIFNpZ25lciwgUHJvdmlkZXIsIEludGVyZmFjZSB9IGZyb20gXCJldGhlcnNcIjtcbmltcG9ydCB0eXBlIHsgTXVsdGljYWxsMiwgTXVsdGljYWxsMkludGVyZmFjZSB9IGZyb20gXCIuLi9NdWx0aWNhbGwyLmpzXCI7XG5cbmNvbnN0IF9hYmkgPSBbXG4gIHtcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgY29tcG9uZW50czogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICBuYW1lOiBcInRhcmdldFwiLFxuICAgICAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYnl0ZXNcIixcbiAgICAgICAgICAgIG5hbWU6IFwiY2FsbERhdGFcIixcbiAgICAgICAgICAgIHR5cGU6IFwiYnl0ZXNcIixcbiAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwic3RydWN0IE11bHRpY2FsbDIuQ2FsbFtdXCIsXG4gICAgICAgIG5hbWU6IFwiY2FsbHNcIixcbiAgICAgICAgdHlwZTogXCJ0dXBsZVtdXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJhZ2dyZWdhdGVcIixcbiAgICBvdXRwdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwiYmxvY2tOdW1iZXJcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYnl0ZXNbXVwiLFxuICAgICAgICBuYW1lOiBcInJldHVybkRhdGFcIixcbiAgICAgICAgdHlwZTogXCJieXRlc1tdXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcIm5vbnBheWFibGVcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgY29tcG9uZW50czogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICBuYW1lOiBcInRhcmdldFwiLFxuICAgICAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYnl0ZXNcIixcbiAgICAgICAgICAgIG5hbWU6IFwiY2FsbERhdGFcIixcbiAgICAgICAgICAgIHR5cGU6IFwiYnl0ZXNcIixcbiAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwic3RydWN0IE11bHRpY2FsbDIuQ2FsbFtdXCIsXG4gICAgICAgIG5hbWU6IFwiY2FsbHNcIixcbiAgICAgICAgdHlwZTogXCJ0dXBsZVtdXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJibG9ja0FuZEFnZ3JlZ2F0ZVwiLFxuICAgIG91dHB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJibG9ja051bWJlclwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJieXRlczMyXCIsXG4gICAgICAgIG5hbWU6IFwiYmxvY2tIYXNoXCIsXG4gICAgICAgIHR5cGU6IFwiYnl0ZXMzMlwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgY29tcG9uZW50czogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJib29sXCIsXG4gICAgICAgICAgICBuYW1lOiBcInN1Y2Nlc3NcIixcbiAgICAgICAgICAgIHR5cGU6IFwiYm9vbFwiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImJ5dGVzXCIsXG4gICAgICAgICAgICBuYW1lOiBcInJldHVybkRhdGFcIixcbiAgICAgICAgICAgIHR5cGU6IFwiYnl0ZXNcIixcbiAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwic3RydWN0IE11bHRpY2FsbDIuUmVzdWx0W11cIixcbiAgICAgICAgbmFtZTogXCJyZXR1cm5EYXRhXCIsXG4gICAgICAgIHR5cGU6IFwidHVwbGVbXVwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJub25wYXlhYmxlXCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwiYmxvY2tOdW1iZXJcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJnZXRCbG9ja0hhc2hcIixcbiAgICBvdXRwdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJieXRlczMyXCIsXG4gICAgICAgIG5hbWU6IFwiYmxvY2tIYXNoXCIsXG4gICAgICAgIHR5cGU6IFwiYnl0ZXMzMlwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJ2aWV3XCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXSxcbiAgICBuYW1lOiBcImdldEJsb2NrTnVtYmVyXCIsXG4gICAgb3V0cHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcImJsb2NrTnVtYmVyXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJ2aWV3XCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXSxcbiAgICBuYW1lOiBcImdldEN1cnJlbnRCbG9ja0NvaW5iYXNlXCIsXG4gICAgb3V0cHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcImNvaW5iYXNlXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJ2aWV3XCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXSxcbiAgICBuYW1lOiBcImdldEN1cnJlbnRCbG9ja0RpZmZpY3VsdHlcIixcbiAgICBvdXRwdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwiZGlmZmljdWx0eVwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwidmlld1wiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW10sXG4gICAgbmFtZTogXCJnZXRDdXJyZW50QmxvY2tHYXNMaW1pdFwiLFxuICAgIG91dHB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJnYXNsaW1pdFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwidmlld1wiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW10sXG4gICAgbmFtZTogXCJnZXRDdXJyZW50QmxvY2tUaW1lc3RhbXBcIixcbiAgICBvdXRwdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwidGltZXN0YW1wXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJ2aWV3XCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwiYWRkclwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcImdldEV0aEJhbGFuY2VcIixcbiAgICBvdXRwdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwiYmFsYW5jZVwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwidmlld1wiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW10sXG4gICAgbmFtZTogXCJnZXRMMUJsb2NrTnVtYmVyXCIsXG4gICAgb3V0cHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcImwxQmxvY2tOdW1iZXJcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcInZpZXdcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtdLFxuICAgIG5hbWU6IFwiZ2V0TGFzdEJsb2NrSGFzaFwiLFxuICAgIG91dHB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImJ5dGVzMzJcIixcbiAgICAgICAgbmFtZTogXCJibG9ja0hhc2hcIixcbiAgICAgICAgdHlwZTogXCJieXRlczMyXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcInZpZXdcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImJvb2xcIixcbiAgICAgICAgbmFtZTogXCJyZXF1aXJlU3VjY2Vzc1wiLFxuICAgICAgICB0eXBlOiBcImJvb2xcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGNvbXBvbmVudHM6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgbmFtZTogXCJ0YXJnZXRcIixcbiAgICAgICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImJ5dGVzXCIsXG4gICAgICAgICAgICBuYW1lOiBcImNhbGxEYXRhXCIsXG4gICAgICAgICAgICB0eXBlOiBcImJ5dGVzXCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInN0cnVjdCBNdWx0aWNhbGwyLkNhbGxbXVwiLFxuICAgICAgICBuYW1lOiBcImNhbGxzXCIsXG4gICAgICAgIHR5cGU6IFwidHVwbGVbXVwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG5hbWU6IFwidHJ5QWdncmVnYXRlXCIsXG4gICAgb3V0cHV0czogW1xuICAgICAge1xuICAgICAgICBjb21wb25lbnRzOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImJvb2xcIixcbiAgICAgICAgICAgIG5hbWU6IFwic3VjY2Vzc1wiLFxuICAgICAgICAgICAgdHlwZTogXCJib29sXCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYnl0ZXNcIixcbiAgICAgICAgICAgIG5hbWU6IFwicmV0dXJuRGF0YVwiLFxuICAgICAgICAgICAgdHlwZTogXCJieXRlc1wiLFxuICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIGludGVybmFsVHlwZTogXCJzdHJ1Y3QgTXVsdGljYWxsMi5SZXN1bHRbXVwiLFxuICAgICAgICBuYW1lOiBcInJldHVybkRhdGFcIixcbiAgICAgICAgdHlwZTogXCJ0dXBsZVtdXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcIm5vbnBheWFibGVcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImJvb2xcIixcbiAgICAgICAgbmFtZTogXCJyZXF1aXJlU3VjY2Vzc1wiLFxuICAgICAgICB0eXBlOiBcImJvb2xcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGNvbXBvbmVudHM6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgbmFtZTogXCJ0YXJnZXRcIixcbiAgICAgICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImJ5dGVzXCIsXG4gICAgICAgICAgICBuYW1lOiBcImNhbGxEYXRhXCIsXG4gICAgICAgICAgICB0eXBlOiBcImJ5dGVzXCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInN0cnVjdCBNdWx0aWNhbGwyLkNhbGxbXVwiLFxuICAgICAgICBuYW1lOiBcImNhbGxzXCIsXG4gICAgICAgIHR5cGU6IFwidHVwbGVbXVwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG5hbWU6IFwidHJ5QmxvY2tBbmRBZ2dyZWdhdGVcIixcbiAgICBvdXRwdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwiYmxvY2tOdW1iZXJcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYnl0ZXMzMlwiLFxuICAgICAgICBuYW1lOiBcImJsb2NrSGFzaFwiLFxuICAgICAgICB0eXBlOiBcImJ5dGVzMzJcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGNvbXBvbmVudHM6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYm9vbFwiLFxuICAgICAgICAgICAgbmFtZTogXCJzdWNjZXNzXCIsXG4gICAgICAgICAgICB0eXBlOiBcImJvb2xcIixcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJieXRlc1wiLFxuICAgICAgICAgICAgbmFtZTogXCJyZXR1cm5EYXRhXCIsXG4gICAgICAgICAgICB0eXBlOiBcImJ5dGVzXCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInN0cnVjdCBNdWx0aWNhbGwyLlJlc3VsdFtdXCIsXG4gICAgICAgIG5hbWU6IFwicmV0dXJuRGF0YVwiLFxuICAgICAgICB0eXBlOiBcInR1cGxlW11cIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwibm9ucGF5YWJsZVwiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbl0gYXMgY29uc3Q7XG5cbmV4cG9ydCBjbGFzcyBNdWx0aWNhbGwyX19mYWN0b3J5IHtcbiAgc3RhdGljIHJlYWRvbmx5IGFiaSA9IF9hYmk7XG4gIHN0YXRpYyBjcmVhdGVJbnRlcmZhY2UoKTogTXVsdGljYWxsMkludGVyZmFjZSB7XG4gICAgcmV0dXJuIG5ld0ludGVyZmFjZShfYWJpKSBhcyBNdWx0aWNhbGwySW50ZXJmYWNlO1xuICB9XG4gIHN0YXRpYyBjb25uZWN0KFxuICAgIGFkZHJlc3M6IHN0cmluZyxcbiAgICBzaWduZXJPclByb3ZpZGVyOiBTaWduZXIgfCBQcm92aWRlcixcbiAgKTogTXVsdGljYWxsMiB7XG4gICAgcmV0dXJuIG5ld0NvbnRyYWN0KGFkZHJlc3MsIF9hYmksIHNpZ25lck9yUHJvdmlkZXIpIGFzIE11bHRpY2FsbDI7XG4gIH1cbn1cbiIsICIvKiBBdXRvZ2VuZXJhdGVkIGZpbGUuIERvIG5vdCBlZGl0IG1hbnVhbGx5LiAqL1xuLyogdHNsaW50OmRpc2FibGUgKi9cbi8qIGVzbGludC1kaXNhYmxlICovXG4vLyBAdHMtbm9jaGVja1xuaW1wb3J0IHsgbmV3Q29udHJhY3QsIG5ld0ludGVyZmFjZSB9IGZyb20gXCJAc2VudGlvL3Nkay9ldGhcIjtcblxuaW1wb3J0IHsgQ29udHJhY3QsIFNpZ25lciwgUHJvdmlkZXIsIEludGVyZmFjZSB9IGZyb20gXCJldGhlcnNcIjtcbmltcG9ydCB0eXBlIHtcbiAgUGVuZGxlRmVlRGlzdHJpYnV0b3JWMSxcbiAgUGVuZGxlRmVlRGlzdHJpYnV0b3JWMUludGVyZmFjZSxcbn0gZnJvbSBcIi4uL1BlbmRsZUZlZURpc3RyaWJ1dG9yVjEuanNcIjtcblxuY29uc3QgX2FiaSA9IFtcbiAge1xuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcIl92b3RpbmdDb250cm9sbGVyXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJfdmVQZW5kbGVcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcIl9yZXdhcmRUb2tlblwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwibm9ucGF5YWJsZVwiLFxuICAgIHR5cGU6IFwiY29uc3RydWN0b3JcIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW10sXG4gICAgbmFtZTogXCJBcnJheUxlbmd0aE1pc21hdGNoXCIsXG4gICAgdHlwZTogXCJlcnJvclwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXSxcbiAgICBuYW1lOiBcIkZERXBvY2hMZW5ndGhNaXNtYXRjaFwiLFxuICAgIHR5cGU6IFwiZXJyb3JcIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcInBvb2xcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJGREludmFsaWRQb29sXCIsXG4gICAgdHlwZTogXCJlcnJvclwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwic3RhcnRFcG9jaFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcIkZESW52YWxpZFN0YXJ0RXBvY2hcIixcbiAgICB0eXBlOiBcImVycm9yXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJsYXN0RnVuZGVkXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJ3VGltZVwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcIkZESW52YWxpZFdUaW1lRnVuZFwiLFxuICAgIHR5cGU6IFwiZXJyb3JcIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcInBvb2xcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJGRFBvb2xBbHJlYWR5RXhpc3RzXCIsXG4gICAgdHlwZTogXCJlcnJvclwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwiYWN0dWFsVG90YWxBbW91bnRcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcImV4cGVjdGVkVG90YWxBbW91bnRcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJGRFRvdGFsQW1vdW50RnVuZGVkTm90TWF0Y2hcIixcbiAgICB0eXBlOiBcImVycm9yXCIsXG4gIH0sXG4gIHtcbiAgICBhbm9ueW1vdXM6IGZhbHNlLFxuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbmRleGVkOiBmYWxzZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJwcmV2aW91c0FkbWluXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogZmFsc2UsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwibmV3QWRtaW5cIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJBZG1pbkNoYW5nZWRcIixcbiAgICB0eXBlOiBcImV2ZW50XCIsXG4gIH0sXG4gIHtcbiAgICBhbm9ueW1vdXM6IGZhbHNlLFxuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbmRleGVkOiB0cnVlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcImJlYWNvblwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcIkJlYWNvblVwZ3JhZGVkXCIsXG4gICAgdHlwZTogXCJldmVudFwiLFxuICB9LFxuICB7XG4gICAgYW5vbnltb3VzOiBmYWxzZSxcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogdHJ1ZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJwb29sXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogdHJ1ZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJ1c2VyXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogZmFsc2UsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwid1RpbWVcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbmRleGVkOiBmYWxzZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJhbW91bnRcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJDbGFpbVJld2FyZFwiLFxuICAgIHR5cGU6IFwiZXZlbnRcIixcbiAgfSxcbiAge1xuICAgIGFub255bW91czogZmFsc2UsXG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IGZhbHNlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDhcIixcbiAgICAgICAgbmFtZTogXCJ2ZXJzaW9uXCIsXG4gICAgICAgIHR5cGU6IFwidWludDhcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcIkluaXRpYWxpemVkXCIsXG4gICAgdHlwZTogXCJldmVudFwiLFxuICB9LFxuICB7XG4gICAgYW5vbnltb3VzOiBmYWxzZSxcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogdHJ1ZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJwcmV2aW91c093bmVyXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogdHJ1ZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJuZXdPd25lclwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcIk93bmVyc2hpcFRyYW5zZmVycmVkXCIsXG4gICAgdHlwZTogXCJldmVudFwiLFxuICB9LFxuICB7XG4gICAgYW5vbnltb3VzOiBmYWxzZSxcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogdHJ1ZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJwb29sXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogdHJ1ZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJzdGFydFdlZWtcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJQb29sQWRkZWRcIixcbiAgICB0eXBlOiBcImV2ZW50XCIsXG4gIH0sXG4gIHtcbiAgICBhbm9ueW1vdXM6IGZhbHNlLFxuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbmRleGVkOiB0cnVlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcInBvb2xcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbmRleGVkOiB0cnVlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIndUaW1lXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogZmFsc2UsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwiYW1vdW50XCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG5hbWU6IFwiVXBkYXRlRmVlXCIsXG4gICAgdHlwZTogXCJldmVudFwiLFxuICB9LFxuICB7XG4gICAgYW5vbnltb3VzOiBmYWxzZSxcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogdHJ1ZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJpbXBsZW1lbnRhdGlvblwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcIlVwZ3JhZGVkXCIsXG4gICAgdHlwZTogXCJldmVudFwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwicG9vbFwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwiX3N0YXJ0V2Vla1wiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcImFkZFBvb2xcIixcbiAgICBvdXRwdXRzOiBbXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwibm9ucGF5YWJsZVwiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIlwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcImFsbFBvb2xzXCIsXG4gICAgb3V0cHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcIlwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwidmlld1wiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW10sXG4gICAgbmFtZTogXCJjbGFpbU93bmVyc2hpcFwiLFxuICAgIG91dHB1dHM6IFtdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJub25wYXlhYmxlXCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwidXNlclwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzW11cIixcbiAgICAgICAgbmFtZTogXCJwb29sc1wiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NbXVwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG5hbWU6IFwiY2xhaW1SZXdhcmRcIixcbiAgICBvdXRwdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2W11cIixcbiAgICAgICAgbmFtZTogXCJhbW91bnRSZXdhcmRPdXRcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2W11cIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwibm9ucGF5YWJsZVwiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcIlwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwiXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG5hbWU6IFwiZmVlc1wiLFxuICAgIG91dHB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcInZpZXdcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NbXVwiLFxuICAgICAgICBuYW1lOiBcInBvb2xzXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1tdXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NltdW11cIixcbiAgICAgICAgbmFtZTogXCJ3VGltZXNcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2W11bXVwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZbXVtdXCIsXG4gICAgICAgIG5hbWU6IFwiYW1vdW50c1wiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZbXVtdXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcInRvdGFsQW1vdW50VG9GdW5kXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG5hbWU6IFwiZnVuZFwiLFxuICAgIG91dHB1dHM6IFtdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJub25wYXlhYmxlXCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXSxcbiAgICBuYW1lOiBcImdldEFsbEFjdGl2ZVBvb2xzXCIsXG4gICAgb3V0cHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1tdXCIsXG4gICAgICAgIG5hbWU6IFwiXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1tdXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcInZpZXdcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtdLFxuICAgIG5hbWU6IFwiZ2V0QWxsUG9vbHNcIixcbiAgICBvdXRwdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzW11cIixcbiAgICAgICAgbmFtZTogXCJcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzW11cIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwidmlld1wiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW10sXG4gICAgbmFtZTogXCJpbml0aWFsaXplXCIsXG4gICAgb3V0cHV0czogW10sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcIm5vbnBheWFibGVcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJsYXN0RnVuZGVkV2Vla1wiLFxuICAgIG91dHB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcInZpZXdcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtdLFxuICAgIG5hbWU6IFwib3duZXJcIixcbiAgICBvdXRwdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwiXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJ2aWV3XCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXSxcbiAgICBuYW1lOiBcInBlbmRpbmdPd25lclwiLFxuICAgIG91dHB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcInZpZXdcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtdLFxuICAgIG5hbWU6IFwicHJveGlhYmxlVVVJRFwiLFxuICAgIG91dHB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImJ5dGVzMzJcIixcbiAgICAgICAgbmFtZTogXCJcIixcbiAgICAgICAgdHlwZTogXCJieXRlczMyXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcInZpZXdcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtdLFxuICAgIG5hbWU6IFwidG9rZW5cIixcbiAgICBvdXRwdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwiXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJ2aWV3XCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwibmV3T3duZXJcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYm9vbFwiLFxuICAgICAgICBuYW1lOiBcImRpcmVjdFwiLFxuICAgICAgICB0eXBlOiBcImJvb2xcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJib29sXCIsXG4gICAgICAgIG5hbWU6IFwicmVub3VuY2VcIixcbiAgICAgICAgdHlwZTogXCJib29sXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJ0cmFuc2Zlck93bmVyc2hpcFwiLFxuICAgIG91dHB1dHM6IFtdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJub25wYXlhYmxlXCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwibmV3SW1wbGVtZW50YXRpb25cIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJ1cGdyYWRlVG9cIixcbiAgICBvdXRwdXRzOiBbXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwibm9ucGF5YWJsZVwiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcIm5ld0ltcGxlbWVudGF0aW9uXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImJ5dGVzXCIsXG4gICAgICAgIG5hbWU6IFwiZGF0YVwiLFxuICAgICAgICB0eXBlOiBcImJ5dGVzXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJ1cGdyYWRlVG9BbmRDYWxsXCIsXG4gICAgb3V0cHV0czogW10sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcInBheWFibGVcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcIlwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcInVzZXJJbmZvXCIsXG4gICAgb3V0cHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDEyOFwiLFxuICAgICAgICBuYW1lOiBcImZpcnN0VW5jbGFpbWVkV2Vla1wiLFxuICAgICAgICB0eXBlOiBcInVpbnQxMjhcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MTI4XCIsXG4gICAgICAgIG5hbWU6IFwiaXRlclwiLFxuICAgICAgICB0eXBlOiBcInVpbnQxMjhcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwidmlld1wiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW10sXG4gICAgbmFtZTogXCJ2ZVBlbmRsZVwiLFxuICAgIG91dHB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcInZpZXdcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtdLFxuICAgIG5hbWU6IFwidm90aW5nQ29udHJvbGxlclwiLFxuICAgIG91dHB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcInZpZXdcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG5dIGFzIGNvbnN0O1xuXG5leHBvcnQgY2xhc3MgUGVuZGxlRmVlRGlzdHJpYnV0b3JWMV9fZmFjdG9yeSB7XG4gIHN0YXRpYyByZWFkb25seSBhYmkgPSBfYWJpO1xuICBzdGF0aWMgY3JlYXRlSW50ZXJmYWNlKCk6IFBlbmRsZUZlZURpc3RyaWJ1dG9yVjFJbnRlcmZhY2Uge1xuICAgIHJldHVybiBuZXdJbnRlcmZhY2UoX2FiaSkgYXMgUGVuZGxlRmVlRGlzdHJpYnV0b3JWMUludGVyZmFjZTtcbiAgfVxuICBzdGF0aWMgY29ubmVjdChcbiAgICBhZGRyZXNzOiBzdHJpbmcsXG4gICAgc2lnbmVyT3JQcm92aWRlcjogU2lnbmVyIHwgUHJvdmlkZXIsXG4gICk6IFBlbmRsZUZlZURpc3RyaWJ1dG9yVjEge1xuICAgIHJldHVybiBuZXdDb250cmFjdChcbiAgICAgIGFkZHJlc3MsXG4gICAgICBfYWJpLFxuICAgICAgc2lnbmVyT3JQcm92aWRlcixcbiAgICApIGFzIFBlbmRsZUZlZURpc3RyaWJ1dG9yVjE7XG4gIH1cbn1cbiIsICIvKiBBdXRvZ2VuZXJhdGVkIGZpbGUuIERvIG5vdCBlZGl0IG1hbnVhbGx5LiAqL1xuLyogdHNsaW50OmRpc2FibGUgKi9cbi8qIGVzbGludC1kaXNhYmxlICovXG4vLyBAdHMtbm9jaGVja1xuaW1wb3J0IHsgbmV3Q29udHJhY3QsIG5ld0ludGVyZmFjZSB9IGZyb20gXCJAc2VudGlvL3Nkay9ldGhcIjtcblxuaW1wb3J0IHsgQ29udHJhY3QsIFNpZ25lciwgUHJvdmlkZXIsIEludGVyZmFjZSB9IGZyb20gXCJldGhlcnNcIjtcbmltcG9ydCB0eXBlIHtcbiAgUGVuZGxlRmVlRGlzdHJpYnV0b3JWMixcbiAgUGVuZGxlRmVlRGlzdHJpYnV0b3JWMkludGVyZmFjZSxcbn0gZnJvbSBcIi4uL1BlbmRsZUZlZURpc3RyaWJ1dG9yVjIuanNcIjtcblxuY29uc3QgX2FiaSA9IFtcbiAge1xuICAgIGlucHV0czogW10sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcIm5vbnBheWFibGVcIixcbiAgICB0eXBlOiBcImNvbnN0cnVjdG9yXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtdLFxuICAgIG5hbWU6IFwiQXJyYXlMZW5ndGhNaXNtYXRjaFwiLFxuICAgIHR5cGU6IFwiZXJyb3JcIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW10sXG4gICAgbmFtZTogXCJJbnZhbGlkTWVya2xlUHJvb2ZcIixcbiAgICB0eXBlOiBcImVycm9yXCIsXG4gIH0sXG4gIHtcbiAgICBhbm9ueW1vdXM6IGZhbHNlLFxuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbmRleGVkOiBmYWxzZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJwcmV2aW91c0FkbWluXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogZmFsc2UsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwibmV3QWRtaW5cIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJBZG1pbkNoYW5nZWRcIixcbiAgICB0eXBlOiBcImV2ZW50XCIsXG4gIH0sXG4gIHtcbiAgICBhbm9ueW1vdXM6IGZhbHNlLFxuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbmRleGVkOiB0cnVlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcImJlYWNvblwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcIkJlYWNvblVwZ3JhZGVkXCIsXG4gICAgdHlwZTogXCJldmVudFwiLFxuICB9LFxuICB7XG4gICAgYW5vbnltb3VzOiBmYWxzZSxcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogdHJ1ZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJ1c2VyXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogZmFsc2UsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwiYW1vdW50T3V0XCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG5hbWU6IFwiQ2xhaW1lZFwiLFxuICAgIHR5cGU6IFwiZXZlbnRcIixcbiAgfSxcbiAge1xuICAgIGFub255bW91czogZmFsc2UsXG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IGZhbHNlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDhcIixcbiAgICAgICAgbmFtZTogXCJ2ZXJzaW9uXCIsXG4gICAgICAgIHR5cGU6IFwidWludDhcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcIkluaXRpYWxpemVkXCIsXG4gICAgdHlwZTogXCJldmVudFwiLFxuICB9LFxuICB7XG4gICAgYW5vbnltb3VzOiBmYWxzZSxcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogdHJ1ZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJwcmV2aW91c093bmVyXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogdHJ1ZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJuZXdPd25lclwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcIk93bmVyc2hpcFRyYW5zZmVycmVkXCIsXG4gICAgdHlwZTogXCJldmVudFwiLFxuICB9LFxuICB7XG4gICAgYW5vbnltb3VzOiBmYWxzZSxcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogdHJ1ZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImJ5dGVzMzJcIixcbiAgICAgICAgbmFtZTogXCJtZXJrbGVSb290XCIsXG4gICAgICAgIHR5cGU6IFwiYnl0ZXMzMlwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogZmFsc2UsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwiYW1vdW50RnVuZGVkXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG5hbWU6IFwiU2V0TWVya2xlUm9vdEFuZEZ1bmRcIixcbiAgICB0eXBlOiBcImV2ZW50XCIsXG4gIH0sXG4gIHtcbiAgICBhbm9ueW1vdXM6IGZhbHNlLFxuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbmRleGVkOiB0cnVlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcInVzZXJcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbmRleGVkOiBmYWxzZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJzdW1Ub3BVcFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcIlVwZGF0ZVByb3RvY29sQ2xhaW1hYmxlXCIsXG4gICAgdHlwZTogXCJldmVudFwiLFxuICB9LFxuICB7XG4gICAgYW5vbnltb3VzOiBmYWxzZSxcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogdHJ1ZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJpbXBsZW1lbnRhdGlvblwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcIlVwZ3JhZGVkXCIsXG4gICAgdHlwZTogXCJldmVudFwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXSxcbiAgICBuYW1lOiBcImNsYWltT3duZXJzaGlwXCIsXG4gICAgb3V0cHV0czogW10sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcIm5vbnBheWFibGVcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJyZWNlaXZlclwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzW11cIixcbiAgICAgICAgbmFtZTogXCJwb29sc1wiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NbXVwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG5hbWU6IFwiY2xhaW1Qcm90b2NvbFwiLFxuICAgIG91dHB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJ0b3RhbEFtb3VudE91dFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2W11cIixcbiAgICAgICAgbmFtZTogXCJhbW91bnRzT3V0XCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NltdXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcIm5vbnBheWFibGVcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJyZWNlaXZlclwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwidG90YWxBY2NydWVkXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImJ5dGVzMzJbXVwiLFxuICAgICAgICBuYW1lOiBcInByb29mXCIsXG4gICAgICAgIHR5cGU6IFwiYnl0ZXMzMltdXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJjbGFpbVJldGFpbFwiLFxuICAgIG91dHB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJhbW91bnRPdXRcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcIm5vbnBheWFibGVcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJjbGFpbWVkXCIsXG4gICAgb3V0cHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIlwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwidmlld1wiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcInVzZXJcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1tdXCIsXG4gICAgICAgIG5hbWU6IFwicG9vbHNcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzW11cIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcImdldFByb3RvY29sQ2xhaW1hYmxlc1wiLFxuICAgIG91dHB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZbXVwiLFxuICAgICAgICBuYW1lOiBcImNsYWltYWJsZXNcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2W11cIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwidmlld1wiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcInVzZXJcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJnZXRQcm90b2NvbFRvdGFsQWNjcnVlZFwiLFxuICAgIG91dHB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcInZpZXdcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtdLFxuICAgIG5hbWU6IFwiaW5pdGlhbGl6ZVwiLFxuICAgIG91dHB1dHM6IFtdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJub25wYXlhYmxlXCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXSxcbiAgICBuYW1lOiBcIm1lcmtsZVJvb3RcIixcbiAgICBvdXRwdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJieXRlczMyXCIsXG4gICAgICAgIG5hbWU6IFwiXCIsXG4gICAgICAgIHR5cGU6IFwiYnl0ZXMzMlwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJ2aWV3XCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXSxcbiAgICBuYW1lOiBcIm93bmVyXCIsXG4gICAgb3V0cHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcIlwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwidmlld1wiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW10sXG4gICAgbmFtZTogXCJwZW5kaW5nT3duZXJcIixcbiAgICBvdXRwdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwiXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJ2aWV3XCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXSxcbiAgICBuYW1lOiBcInByb3hpYWJsZVVVSURcIixcbiAgICBvdXRwdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJieXRlczMyXCIsXG4gICAgICAgIG5hbWU6IFwiXCIsXG4gICAgICAgIHR5cGU6IFwiYnl0ZXMzMlwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJ2aWV3XCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJieXRlczMyXCIsXG4gICAgICAgIG5hbWU6IFwibmV3TWVya2xlUm9vdFwiLFxuICAgICAgICB0eXBlOiBcImJ5dGVzMzJcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwiYW1vdW50VG9GdW5kXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG5hbWU6IFwic2V0TWVya2xlUm9vdEFuZEZ1bmRcIixcbiAgICBvdXRwdXRzOiBbXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwicGF5YWJsZVwiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcIm5ld093bmVyXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImJvb2xcIixcbiAgICAgICAgbmFtZTogXCJkaXJlY3RcIixcbiAgICAgICAgdHlwZTogXCJib29sXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYm9vbFwiLFxuICAgICAgICBuYW1lOiBcInJlbm91bmNlXCIsXG4gICAgICAgIHR5cGU6IFwiYm9vbFwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG5hbWU6IFwidHJhbnNmZXJPd25lcnNoaXBcIixcbiAgICBvdXRwdXRzOiBbXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwibm9ucGF5YWJsZVwiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBjb21wb25lbnRzOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgIG5hbWU6IFwidXNlclwiLFxuICAgICAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYnl0ZXMzMltdXCIsXG4gICAgICAgICAgICBuYW1lOiBcInByb29mXCIsXG4gICAgICAgICAgICB0eXBlOiBcImJ5dGVzMzJbXVwiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NbXVwiLFxuICAgICAgICAgICAgbmFtZTogXCJwb29sc1wiLFxuICAgICAgICAgICAgdHlwZTogXCJhZGRyZXNzW11cIixcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2W11cIixcbiAgICAgICAgICAgIG5hbWU6IFwidG9wVXBzXCIsXG4gICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZbXVwiLFxuICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIGludGVybmFsVHlwZTogXCJzdHJ1Y3QgSVBGZWVEaXN0cmlidXRvclYyLlVwZGF0ZVByb3RvY29sU3RydWN0XCIsXG4gICAgICAgIG5hbWU6IFwiZWxlXCIsXG4gICAgICAgIHR5cGU6IFwidHVwbGVcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcInVwZGF0ZVByb3RvY29sQ2xhaW1hYmxlXCIsXG4gICAgb3V0cHV0czogW10sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcIm5vbnBheWFibGVcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgY29tcG9uZW50czogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICBuYW1lOiBcInVzZXJcIixcbiAgICAgICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImJ5dGVzMzJbXVwiLFxuICAgICAgICAgICAgbmFtZTogXCJwcm9vZlwiLFxuICAgICAgICAgICAgdHlwZTogXCJieXRlczMyW11cIixcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzW11cIixcbiAgICAgICAgICAgIG5hbWU6IFwicG9vbHNcIixcbiAgICAgICAgICAgIHR5cGU6IFwiYWRkcmVzc1tdXCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NltdXCIsXG4gICAgICAgICAgICBuYW1lOiBcInRvcFVwc1wiLFxuICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2W11cIixcbiAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwic3RydWN0IElQRmVlRGlzdHJpYnV0b3JWMi5VcGRhdGVQcm90b2NvbFN0cnVjdFtdXCIsXG4gICAgICAgIG5hbWU6IFwiYXJyXCIsXG4gICAgICAgIHR5cGU6IFwidHVwbGVbXVwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG5hbWU6IFwidXBkYXRlUHJvdG9jb2xDbGFpbWFibGVzXCIsXG4gICAgb3V0cHV0czogW10sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcIm5vbnBheWFibGVcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJuZXdJbXBsZW1lbnRhdGlvblwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcInVwZ3JhZGVUb1wiLFxuICAgIG91dHB1dHM6IFtdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJub25wYXlhYmxlXCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwibmV3SW1wbGVtZW50YXRpb25cIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYnl0ZXNcIixcbiAgICAgICAgbmFtZTogXCJkYXRhXCIsXG4gICAgICAgIHR5cGU6IFwiYnl0ZXNcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcInVwZ3JhZGVUb0FuZENhbGxcIixcbiAgICBvdXRwdXRzOiBbXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwicGF5YWJsZVwiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJwYXlhYmxlXCIsXG4gICAgdHlwZTogXCJyZWNlaXZlXCIsXG4gIH0sXG5dIGFzIGNvbnN0O1xuXG5leHBvcnQgY2xhc3MgUGVuZGxlRmVlRGlzdHJpYnV0b3JWMl9fZmFjdG9yeSB7XG4gIHN0YXRpYyByZWFkb25seSBhYmkgPSBfYWJpO1xuICBzdGF0aWMgY3JlYXRlSW50ZXJmYWNlKCk6IFBlbmRsZUZlZURpc3RyaWJ1dG9yVjJJbnRlcmZhY2Uge1xuICAgIHJldHVybiBuZXdJbnRlcmZhY2UoX2FiaSkgYXMgUGVuZGxlRmVlRGlzdHJpYnV0b3JWMkludGVyZmFjZTtcbiAgfVxuICBzdGF0aWMgY29ubmVjdChcbiAgICBhZGRyZXNzOiBzdHJpbmcsXG4gICAgc2lnbmVyT3JQcm92aWRlcjogU2lnbmVyIHwgUHJvdmlkZXIsXG4gICk6IFBlbmRsZUZlZURpc3RyaWJ1dG9yVjIge1xuICAgIHJldHVybiBuZXdDb250cmFjdChcbiAgICAgIGFkZHJlc3MsXG4gICAgICBfYWJpLFxuICAgICAgc2lnbmVyT3JQcm92aWRlcixcbiAgICApIGFzIFBlbmRsZUZlZURpc3RyaWJ1dG9yVjI7XG4gIH1cbn1cbiIsICIvKiBBdXRvZ2VuZXJhdGVkIGZpbGUuIERvIG5vdCBlZGl0IG1hbnVhbGx5LiAqL1xuLyogdHNsaW50OmRpc2FibGUgKi9cbi8qIGVzbGludC1kaXNhYmxlICovXG4vLyBAdHMtbm9jaGVja1xuaW1wb3J0IHsgbmV3Q29udHJhY3QsIG5ld0ludGVyZmFjZSB9IGZyb20gXCJAc2VudGlvL3Nkay9ldGhcIjtcblxuaW1wb3J0IHsgQ29udHJhY3QsIFNpZ25lciwgUHJvdmlkZXIsIEludGVyZmFjZSB9IGZyb20gXCJldGhlcnNcIjtcbmltcG9ydCB0eXBlIHtcbiAgUGVuZGxlR2F1Z2VDb250cm9sbGVyLFxuICBQZW5kbGVHYXVnZUNvbnRyb2xsZXJJbnRlcmZhY2UsXG59IGZyb20gXCIuLi9QZW5kbGVHYXVnZUNvbnRyb2xsZXIuanNcIjtcblxuY29uc3QgX2FiaSA9IFtcbiAge1xuICAgIGFub255bW91czogZmFsc2UsXG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IHRydWUsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwibWFya2V0XCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogZmFsc2UsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwiYW1vdW50XCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG5hbWU6IFwiTWFya2V0Q2xhaW1SZXdhcmRcIixcbiAgICB0eXBlOiBcImV2ZW50XCIsXG4gIH0sXG4gIHtcbiAgICBhbm9ueW1vdXM6IGZhbHNlLFxuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbmRleGVkOiB0cnVlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcIm1hcmtldFwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IGZhbHNlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcInBlbmRsZVBlclNlY1wiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IGZhbHNlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcImluY2VudGl2ZUVuZHNBdFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcIlVwZGF0ZU1hcmtldFJld2FyZFwiLFxuICAgIHR5cGU6IFwiZXZlbnRcIixcbiAgfSxcbiAge1xuICAgIGFub255bW91czogZmFsc2UsXG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IHRydWUsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MTI4XCIsXG4gICAgICAgIG5hbWU6IFwid1RpbWVcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MTI4XCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbmRleGVkOiBmYWxzZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NbXVwiLFxuICAgICAgICBuYW1lOiBcIm1hcmtldHNcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzW11cIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IGZhbHNlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NltdXCIsXG4gICAgICAgIG5hbWU6IFwicGVuZGxlQW1vdW50c1wiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZbXVwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG5hbWU6IFwiUmVjZWl2ZVZvdGluZ1Jlc3VsdHNcIixcbiAgICB0eXBlOiBcImV2ZW50XCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJhbW91bnRcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJmdW5kUGVuZGxlXCIsXG4gICAgb3V0cHV0czogW10sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcIm5vbnBheWFibGVcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtdLFxuICAgIG5hbWU6IFwicGVuZGxlXCIsXG4gICAgb3V0cHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcIlwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwibm9ucGF5YWJsZVwiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW10sXG4gICAgbmFtZTogXCJyZWRlZW1NYXJrZXRSZXdhcmRcIixcbiAgICBvdXRwdXRzOiBbXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwibm9ucGF5YWJsZVwiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcInBvb2xcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJyZXdhcmREYXRhXCIsXG4gICAgb3V0cHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDEyOFwiLFxuICAgICAgICBuYW1lOiBcInBlbmRsZVBlclNlY1wiLFxuICAgICAgICB0eXBlOiBcInVpbnQxMjhcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MTI4XCIsXG4gICAgICAgIG5hbWU6IFwiXCIsXG4gICAgICAgIHR5cGU6IFwidWludDEyOFwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQxMjhcIixcbiAgICAgICAgbmFtZTogXCJcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MTI4XCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDEyOFwiLFxuICAgICAgICBuYW1lOiBcIlwiLFxuICAgICAgICB0eXBlOiBcInVpbnQxMjhcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwidmlld1wiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcImFtb3VudFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcIndpdGhkcmF3UGVuZGxlXCIsXG4gICAgb3V0cHV0czogW10sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcIm5vbnBheWFibGVcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG5dIGFzIGNvbnN0O1xuXG5leHBvcnQgY2xhc3MgUGVuZGxlR2F1Z2VDb250cm9sbGVyX19mYWN0b3J5IHtcbiAgc3RhdGljIHJlYWRvbmx5IGFiaSA9IF9hYmk7XG4gIHN0YXRpYyBjcmVhdGVJbnRlcmZhY2UoKTogUGVuZGxlR2F1Z2VDb250cm9sbGVySW50ZXJmYWNlIHtcbiAgICByZXR1cm4gbmV3SW50ZXJmYWNlKF9hYmkpIGFzIFBlbmRsZUdhdWdlQ29udHJvbGxlckludGVyZmFjZTtcbiAgfVxuICBzdGF0aWMgY29ubmVjdChcbiAgICBhZGRyZXNzOiBzdHJpbmcsXG4gICAgc2lnbmVyT3JQcm92aWRlcjogU2lnbmVyIHwgUHJvdmlkZXIsXG4gICk6IFBlbmRsZUdhdWdlQ29udHJvbGxlciB7XG4gICAgcmV0dXJuIG5ld0NvbnRyYWN0KFxuICAgICAgYWRkcmVzcyxcbiAgICAgIF9hYmksXG4gICAgICBzaWduZXJPclByb3ZpZGVyLFxuICAgICkgYXMgUGVuZGxlR2F1Z2VDb250cm9sbGVyO1xuICB9XG59XG4iLCAiLyogQXV0b2dlbmVyYXRlZCBmaWxlLiBEbyBub3QgZWRpdCBtYW51YWxseS4gKi9cbi8qIHRzbGludDpkaXNhYmxlICovXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xuLy8gQHRzLW5vY2hlY2tcbmltcG9ydCB7IG5ld0NvbnRyYWN0LCBuZXdJbnRlcmZhY2UgfSBmcm9tIFwiQHNlbnRpby9zZGsvZXRoXCI7XG5cbmltcG9ydCB7IENvbnRyYWN0LCBTaWduZXIsIFByb3ZpZGVyLCBJbnRlcmZhY2UgfSBmcm9tIFwiZXRoZXJzXCI7XG5pbXBvcnQgdHlwZSB7IFBlbmRsZU1hcmtldCwgUGVuZGxlTWFya2V0SW50ZXJmYWNlIH0gZnJvbSBcIi4uL1BlbmRsZU1hcmtldC5qc1wiO1xuXG5jb25zdCBfYWJpID0gW1xuICB7XG4gICAgYW5vbnltb3VzOiBmYWxzZSxcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogdHJ1ZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJvd25lclwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IHRydWUsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwic3BlbmRlclwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IGZhbHNlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcInZhbHVlXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG5hbWU6IFwiQXBwcm92YWxcIixcbiAgICB0eXBlOiBcImV2ZW50XCIsXG4gIH0sXG4gIHtcbiAgICBhbm9ueW1vdXM6IGZhbHNlLFxuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbmRleGVkOiB0cnVlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcInJlY2VpdmVyU3lcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbmRleGVkOiB0cnVlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcInJlY2VpdmVyUHRcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbmRleGVkOiBmYWxzZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJuZXRMcEJ1cm5lZFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IGZhbHNlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIm5ldFN5T3V0XCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogZmFsc2UsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwibmV0UHRPdXRcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJCdXJuXCIsXG4gICAgdHlwZTogXCJldmVudFwiLFxuICB9LFxuICB7XG4gICAgYW5vbnltb3VzOiBmYWxzZSxcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogZmFsc2UsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MTZcIixcbiAgICAgICAgbmFtZTogXCJvYnNlcnZhdGlvbkNhcmRpbmFsaXR5TmV4dE9sZFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQxNlwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogZmFsc2UsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MTZcIixcbiAgICAgICAgbmFtZTogXCJvYnNlcnZhdGlvbkNhcmRpbmFsaXR5TmV4dE5ld1wiLFxuICAgICAgICB0eXBlOiBcInVpbnQxNlwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG5hbWU6IFwiSW5jcmVhc2VPYnNlcnZhdGlvbkNhcmRpbmFsaXR5TmV4dFwiLFxuICAgIHR5cGU6IFwiZXZlbnRcIixcbiAgfSxcbiAge1xuICAgIGFub255bW91czogZmFsc2UsXG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IHRydWUsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwicmVjZWl2ZXJcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbmRleGVkOiBmYWxzZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJuZXRMcE1pbnRlZFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IGZhbHNlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIm5ldFN5VXNlZFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IGZhbHNlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIm5ldFB0VXNlZFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcIk1pbnRcIixcbiAgICB0eXBlOiBcImV2ZW50XCIsXG4gIH0sXG4gIHtcbiAgICBhbm9ueW1vdXM6IGZhbHNlLFxuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbmRleGVkOiB0cnVlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcImNhbGxlclwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IHRydWUsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwicmVjZWl2ZXJcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbmRleGVkOiBmYWxzZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIm5ldFB0T3V0XCIsXG4gICAgICAgIHR5cGU6IFwiaW50MjU2XCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbmRleGVkOiBmYWxzZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIm5ldFN5T3V0XCIsXG4gICAgICAgIHR5cGU6IFwiaW50MjU2XCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbmRleGVkOiBmYWxzZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJuZXRTeUZlZVwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IGZhbHNlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIm5ldFN5VG9SZXNlcnZlXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG5hbWU6IFwiU3dhcFwiLFxuICAgIHR5cGU6IFwiZXZlbnRcIixcbiAgfSxcbiAge1xuICAgIGFub255bW91czogZmFsc2UsXG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IHRydWUsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwiZnJvbVwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IHRydWUsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwidG9cIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbmRleGVkOiBmYWxzZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJ2YWx1ZVwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcIlRyYW5zZmVyXCIsXG4gICAgdHlwZTogXCJldmVudFwiLFxuICB9LFxuICB7XG4gICAgYW5vbnltb3VzOiBmYWxzZSxcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogdHJ1ZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJ0aW1lc3RhbXBcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbmRleGVkOiBmYWxzZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJsbkxhc3RJbXBsaWVkUmF0ZVwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcIlVwZGF0ZUltcGxpZWRSYXRlXCIsXG4gICAgdHlwZTogXCJldmVudFwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXSxcbiAgICBuYW1lOiBcIl9zdG9yYWdlXCIsXG4gICAgb3V0cHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiaW50MTI4XCIsXG4gICAgICAgIG5hbWU6IFwidG90YWxQdFwiLFxuICAgICAgICB0eXBlOiBcImludDEyOFwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImludDEyOFwiLFxuICAgICAgICBuYW1lOiBcInRvdGFsU3lcIixcbiAgICAgICAgdHlwZTogXCJpbnQxMjhcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50OTZcIixcbiAgICAgICAgbmFtZTogXCJsYXN0TG5JbXBsaWVkUmF0ZVwiLFxuICAgICAgICB0eXBlOiBcInVpbnQ5NlwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQxNlwiLFxuICAgICAgICBuYW1lOiBcIm9ic2VydmF0aW9uSW5kZXhcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MTZcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MTZcIixcbiAgICAgICAgbmFtZTogXCJvYnNlcnZhdGlvbkNhcmRpbmFsaXR5XCIsXG4gICAgICAgIHR5cGU6IFwidWludDE2XCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDE2XCIsXG4gICAgICAgIG5hbWU6IFwib2JzZXJ2YXRpb25DYXJkaW5hbGl0eU5leHRcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MTZcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwidmlld1wiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcInVzZXJcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJhY3RpdmVCYWxhbmNlXCIsXG4gICAgb3V0cHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIlwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwidmlld1wiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcIm93bmVyXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJzcGVuZGVyXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG5hbWU6IFwiYWxsb3dhbmNlXCIsXG4gICAgb3V0cHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIlwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwidmlld1wiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcInNwZW5kZXJcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcImFtb3VudFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcImFwcHJvdmVcIixcbiAgICBvdXRwdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJib29sXCIsXG4gICAgICAgIG5hbWU6IFwiXCIsXG4gICAgICAgIHR5cGU6IFwiYm9vbFwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJub25wYXlhYmxlXCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwiYWNjb3VudFwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcImJhbGFuY2VPZlwiLFxuICAgIG91dHB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcInZpZXdcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJyZWNlaXZlclN5XCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJyZWNlaXZlclB0XCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJuZXRMcFRvQnVyblwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcImJ1cm5cIixcbiAgICBvdXRwdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwibmV0U3lPdXRcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIm5ldFB0T3V0XCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJub25wYXlhYmxlXCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXSxcbiAgICBuYW1lOiBcImRlY2ltYWxzXCIsXG4gICAgb3V0cHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDhcIixcbiAgICAgICAgbmFtZTogXCJcIixcbiAgICAgICAgdHlwZTogXCJ1aW50OFwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJ2aWV3XCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXSxcbiAgICBuYW1lOiBcImV4cGlyeVwiLFxuICAgIG91dHB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcInZpZXdcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtdLFxuICAgIG5hbWU6IFwiZ2V0UmV3YXJkVG9rZW5zXCIsXG4gICAgb3V0cHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1tdXCIsXG4gICAgICAgIG5hbWU6IFwiXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1tdXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcInZpZXdcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQxNlwiLFxuICAgICAgICBuYW1lOiBcImNhcmRpbmFsaXR5TmV4dFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQxNlwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG5hbWU6IFwiaW5jcmVhc2VPYnNlcnZhdGlvbnNDYXJkaW5hbGl0eU5leHRcIixcbiAgICBvdXRwdXRzOiBbXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwibm9ucGF5YWJsZVwiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW10sXG4gICAgbmFtZTogXCJpc0V4cGlyZWRcIixcbiAgICBvdXRwdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJib29sXCIsXG4gICAgICAgIG5hbWU6IFwiXCIsXG4gICAgICAgIHR5cGU6IFwiYm9vbFwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJ2aWV3XCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwicmVjZWl2ZXJcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIm5ldFN5RGVzaXJlZFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwibmV0UHREZXNpcmVkXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG5hbWU6IFwibWludFwiLFxuICAgIG91dHB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJuZXRMcE91dFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwibmV0U3lVc2VkXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJuZXRQdFVzZWRcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcIm5vbnBheWFibGVcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtdLFxuICAgIG5hbWU6IFwibmFtZVwiLFxuICAgIG91dHB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInN0cmluZ1wiLFxuICAgICAgICBuYW1lOiBcIlwiLFxuICAgICAgICB0eXBlOiBcInN0cmluZ1wiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJ2aWV3XCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwiaW5kZXhcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJvYnNlcnZhdGlvbnNcIixcbiAgICBvdXRwdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MzJcIixcbiAgICAgICAgbmFtZTogXCJibG9ja1RpbWVzdGFtcFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQzMlwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyMTZcIixcbiAgICAgICAgbmFtZTogXCJsbkltcGxpZWRSYXRlQ3VtdWxhdGl2ZVwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyMTZcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJib29sXCIsXG4gICAgICAgIG5hbWU6IFwiaW5pdGlhbGl6ZWRcIixcbiAgICAgICAgdHlwZTogXCJib29sXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcInZpZXdcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQzMltdXCIsXG4gICAgICAgIG5hbWU6IFwic2Vjb25kc0Fnb3NcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MzJbXVwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG5hbWU6IFwib2JzZXJ2ZVwiLFxuICAgIG91dHB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyMTZbXVwiLFxuICAgICAgICBuYW1lOiBcImxuSW1wbGllZFJhdGVDdW11bGF0aXZlXCIsXG4gICAgICAgIHR5cGU6IFwidWludDIxNltdXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcInZpZXdcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJyb3V0ZXJcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJyZWFkU3RhdGVcIixcbiAgICBvdXRwdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGNvbXBvbmVudHM6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiaW50MjU2XCIsXG4gICAgICAgICAgICBuYW1lOiBcInRvdGFsUHRcIixcbiAgICAgICAgICAgIHR5cGU6IFwiaW50MjU2XCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiaW50MjU2XCIsXG4gICAgICAgICAgICBuYW1lOiBcInRvdGFsU3lcIixcbiAgICAgICAgICAgIHR5cGU6IFwiaW50MjU2XCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiaW50MjU2XCIsXG4gICAgICAgICAgICBuYW1lOiBcInRvdGFsTHBcIixcbiAgICAgICAgICAgIHR5cGU6IFwiaW50MjU2XCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgbmFtZTogXCJ0cmVhc3VyeVwiLFxuICAgICAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiaW50MjU2XCIsXG4gICAgICAgICAgICBuYW1lOiBcInNjYWxhclJvb3RcIixcbiAgICAgICAgICAgIHR5cGU6IFwiaW50MjU2XCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgbmFtZTogXCJleHBpcnlcIixcbiAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgIG5hbWU6IFwibG5GZWVSYXRlUm9vdFwiLFxuICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgbmFtZTogXCJyZXNlcnZlRmVlUGVyY2VudFwiLFxuICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgbmFtZTogXCJsYXN0TG5JbXBsaWVkUmF0ZVwiLFxuICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInN0cnVjdCBNYXJrZXRTdGF0ZVwiLFxuICAgICAgICBuYW1lOiBcIm1hcmtldFwiLFxuICAgICAgICB0eXBlOiBcInR1cGxlXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcInZpZXdcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtdLFxuICAgIG5hbWU6IFwicmVhZFRva2Vuc1wiLFxuICAgIG91dHB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImNvbnRyYWN0IElTdGFuZGFyZGl6ZWRZaWVsZFwiLFxuICAgICAgICBuYW1lOiBcIl9TWVwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJjb250cmFjdCBJUFByaW5jaXBhbFRva2VuXCIsXG4gICAgICAgIG5hbWU6IFwiX1BUXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImNvbnRyYWN0IElQWWllbGRUb2tlblwiLFxuICAgICAgICBuYW1lOiBcIl9ZVFwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwidmlld1wiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcInVzZXJcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJyZWRlZW1SZXdhcmRzXCIsXG4gICAgb3V0cHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NltdXCIsXG4gICAgICAgIG5hbWU6IFwiXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NltdXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcIm5vbnBheWFibGVcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJyZWNlaXZlclwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwiZXhhY3RQdEluXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImJ5dGVzXCIsXG4gICAgICAgIG5hbWU6IFwiZGF0YVwiLFxuICAgICAgICB0eXBlOiBcImJ5dGVzXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJzd2FwRXhhY3RQdEZvclN5XCIsXG4gICAgb3V0cHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIm5ldFN5T3V0XCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJuZXRTeUZlZVwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwibm9ucGF5YWJsZVwiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcInJlY2VpdmVyXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJleGFjdFB0T3V0XCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImJ5dGVzXCIsXG4gICAgICAgIG5hbWU6IFwiZGF0YVwiLFxuICAgICAgICB0eXBlOiBcImJ5dGVzXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJzd2FwU3lGb3JFeGFjdFB0XCIsXG4gICAgb3V0cHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIm5ldFN5SW5cIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIm5ldFN5RmVlXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJub25wYXlhYmxlXCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXSxcbiAgICBuYW1lOiBcInN5bWJvbFwiLFxuICAgIG91dHB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInN0cmluZ1wiLFxuICAgICAgICBuYW1lOiBcIlwiLFxuICAgICAgICB0eXBlOiBcInN0cmluZ1wiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJ2aWV3XCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXSxcbiAgICBuYW1lOiBcInRvdGFsQWN0aXZlU3VwcGx5XCIsXG4gICAgb3V0cHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIlwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwidmlld1wiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW10sXG4gICAgbmFtZTogXCJ0b3RhbFN1cHBseVwiLFxuICAgIG91dHB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcInZpZXdcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJ0b1wiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwiYW1vdW50XCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG5hbWU6IFwidHJhbnNmZXJcIixcbiAgICBvdXRwdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJib29sXCIsXG4gICAgICAgIG5hbWU6IFwiXCIsXG4gICAgICAgIHR5cGU6IFwiYm9vbFwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJub25wYXlhYmxlXCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwiZnJvbVwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwidG9cIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcImFtb3VudFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcInRyYW5zZmVyRnJvbVwiLFxuICAgIG91dHB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImJvb2xcIixcbiAgICAgICAgbmFtZTogXCJcIixcbiAgICAgICAgdHlwZTogXCJib29sXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcIm5vbnBheWFibGVcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG5dIGFzIGNvbnN0O1xuXG5leHBvcnQgY2xhc3MgUGVuZGxlTWFya2V0X19mYWN0b3J5IHtcbiAgc3RhdGljIHJlYWRvbmx5IGFiaSA9IF9hYmk7XG4gIHN0YXRpYyBjcmVhdGVJbnRlcmZhY2UoKTogUGVuZGxlTWFya2V0SW50ZXJmYWNlIHtcbiAgICByZXR1cm4gbmV3SW50ZXJmYWNlKF9hYmkpIGFzIFBlbmRsZU1hcmtldEludGVyZmFjZTtcbiAgfVxuICBzdGF0aWMgY29ubmVjdChcbiAgICBhZGRyZXNzOiBzdHJpbmcsXG4gICAgc2lnbmVyT3JQcm92aWRlcjogU2lnbmVyIHwgUHJvdmlkZXIsXG4gICk6IFBlbmRsZU1hcmtldCB7XG4gICAgcmV0dXJuIG5ld0NvbnRyYWN0KGFkZHJlc3MsIF9hYmksIHNpZ25lck9yUHJvdmlkZXIpIGFzIFBlbmRsZU1hcmtldDtcbiAgfVxufVxuIiwgIi8qIEF1dG9nZW5lcmF0ZWQgZmlsZS4gRG8gbm90IGVkaXQgbWFudWFsbHkuICovXG4vKiB0c2xpbnQ6ZGlzYWJsZSAqL1xuLyogZXNsaW50LWRpc2FibGUgKi9cbi8vIEB0cy1ub2NoZWNrXG5pbXBvcnQgeyBuZXdDb250cmFjdCwgbmV3SW50ZXJmYWNlIH0gZnJvbSBcIkBzZW50aW8vc2RrL2V0aFwiO1xuXG5pbXBvcnQgeyBDb250cmFjdCwgU2lnbmVyLCBQcm92aWRlciwgSW50ZXJmYWNlIH0gZnJvbSBcImV0aGVyc1wiO1xuaW1wb3J0IHR5cGUge1xuICBQZW5kbGVNYXJrZXRGYWN0b3J5LFxuICBQZW5kbGVNYXJrZXRGYWN0b3J5SW50ZXJmYWNlLFxufSBmcm9tIFwiLi4vUGVuZGxlTWFya2V0RmFjdG9yeS5qc1wiO1xuXG5jb25zdCBfYWJpID0gW1xuICB7XG4gICAgYW5vbnltb3VzOiBmYWxzZSxcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogdHJ1ZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJtYXJrZXRcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbmRleGVkOiB0cnVlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcIlBUXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogZmFsc2UsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJzY2FsYXJSb290XCIsXG4gICAgICAgIHR5cGU6IFwiaW50MjU2XCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbmRleGVkOiBmYWxzZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImludDI1NlwiLFxuICAgICAgICBuYW1lOiBcImluaXRpYWxBbmNob3JcIixcbiAgICAgICAgdHlwZTogXCJpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcIkNyZWF0ZU5ld01hcmtldFwiLFxuICAgIHR5cGU6IFwiZXZlbnRcIixcbiAgfSxcbiAge1xuICAgIGFub255bW91czogZmFsc2UsXG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IHRydWUsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwidHJlYXN1cnlcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbmRleGVkOiBmYWxzZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQ4MFwiLFxuICAgICAgICBuYW1lOiBcImRlZmF1bHRMbkZlZVJhdGVSb290XCIsXG4gICAgICAgIHR5cGU6IFwidWludDgwXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbmRleGVkOiBmYWxzZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQ4XCIsXG4gICAgICAgIG5hbWU6IFwicmVzZXJ2ZUZlZVBlcmNlbnRcIixcbiAgICAgICAgdHlwZTogXCJ1aW50OFwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG5hbWU6IFwiTmV3TWFya2V0Q29uZmlnXCIsXG4gICAgdHlwZTogXCJldmVudFwiLFxuICB9LFxuICB7XG4gICAgYW5vbnltb3VzOiBmYWxzZSxcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogdHJ1ZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJyb3V0ZXJcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbmRleGVkOiBmYWxzZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQ4MFwiLFxuICAgICAgICBuYW1lOiBcImxuRmVlUmF0ZVJvb3RcIixcbiAgICAgICAgdHlwZTogXCJ1aW50ODBcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IGZhbHNlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDhcIixcbiAgICAgICAgbmFtZTogXCJyZXNlcnZlRmVlUGVyY2VudFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQ4XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJTZXRPdmVycmlkZGVuRmVlXCIsXG4gICAgdHlwZTogXCJldmVudFwiLFxuICB9LFxuICB7XG4gICAgYW5vbnltb3VzOiBmYWxzZSxcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogdHJ1ZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJyb3V0ZXJcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJVbnNldE92ZXJyaWRkZW5GZWVcIixcbiAgICB0eXBlOiBcImV2ZW50XCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJyb3V0ZXJcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJnZXRNYXJrZXRDb25maWdcIixcbiAgICBvdXRwdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwidHJlYXN1cnlcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDgwXCIsXG4gICAgICAgIG5hbWU6IFwibG5GZWVSYXRlUm9vdFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQ4MFwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQ4XCIsXG4gICAgICAgIG5hbWU6IFwicmVzZXJ2ZUZlZVBlcmNlbnRcIixcbiAgICAgICAgdHlwZTogXCJ1aW50OFwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJ2aWV3XCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwibWFya2V0XCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG5hbWU6IFwiaXNWYWxpZE1hcmtldFwiLFxuICAgIG91dHB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImJvb2xcIixcbiAgICAgICAgbmFtZTogXCJcIixcbiAgICAgICAgdHlwZTogXCJib29sXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcInZpZXdcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG5dIGFzIGNvbnN0O1xuXG5leHBvcnQgY2xhc3MgUGVuZGxlTWFya2V0RmFjdG9yeV9fZmFjdG9yeSB7XG4gIHN0YXRpYyByZWFkb25seSBhYmkgPSBfYWJpO1xuICBzdGF0aWMgY3JlYXRlSW50ZXJmYWNlKCk6IFBlbmRsZU1hcmtldEZhY3RvcnlJbnRlcmZhY2Uge1xuICAgIHJldHVybiBuZXdJbnRlcmZhY2UoX2FiaSkgYXMgUGVuZGxlTWFya2V0RmFjdG9yeUludGVyZmFjZTtcbiAgfVxuICBzdGF0aWMgY29ubmVjdChcbiAgICBhZGRyZXNzOiBzdHJpbmcsXG4gICAgc2lnbmVyT3JQcm92aWRlcjogU2lnbmVyIHwgUHJvdmlkZXIsXG4gICk6IFBlbmRsZU1hcmtldEZhY3Rvcnkge1xuICAgIHJldHVybiBuZXdDb250cmFjdChhZGRyZXNzLCBfYWJpLCBzaWduZXJPclByb3ZpZGVyKSBhcyBQZW5kbGVNYXJrZXRGYWN0b3J5O1xuICB9XG59XG4iLCAiLyogQXV0b2dlbmVyYXRlZCBmaWxlLiBEbyBub3QgZWRpdCBtYW51YWxseS4gKi9cbi8qIHRzbGludDpkaXNhYmxlICovXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xuLy8gQHRzLW5vY2hlY2tcbmltcG9ydCB7IG5ld0NvbnRyYWN0LCBuZXdJbnRlcmZhY2UgfSBmcm9tIFwiQHNlbnRpby9zZGsvZXRoXCI7XG5cbmltcG9ydCB7IENvbnRyYWN0LCBTaWduZXIsIFByb3ZpZGVyLCBJbnRlcmZhY2UgfSBmcm9tIFwiZXRoZXJzXCI7XG5pbXBvcnQgdHlwZSB7XG4gIFBlbmRsZU1hcmtldEZhY3RvcnlWMyxcbiAgUGVuZGxlTWFya2V0RmFjdG9yeVYzSW50ZXJmYWNlLFxufSBmcm9tIFwiLi4vUGVuZGxlTWFya2V0RmFjdG9yeVYzLmpzXCI7XG5cbmNvbnN0IF9hYmkgPSBbXG4gIHtcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJfeWllbGRDb250cmFjdEZhY3RvcnlcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcIl9tYXJrZXRDcmVhdGlvbkNvZGVDb250cmFjdEFcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIl9tYXJrZXRDcmVhdGlvbkNvZGVTaXplQVwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwiX21hcmtldENyZWF0aW9uQ29kZUNvbnRyYWN0QlwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwiX21hcmtldENyZWF0aW9uQ29kZVNpemVCXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJfdHJlYXN1cnlcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDhcIixcbiAgICAgICAgbmFtZTogXCJfcmVzZXJ2ZUZlZVBlcmNlbnRcIixcbiAgICAgICAgdHlwZTogXCJ1aW50OFwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJfdmVQZW5kbGVcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcIl9nYXVnZUNvbnRyb2xsZXJcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcIm5vbnBheWFibGVcIixcbiAgICB0eXBlOiBcImNvbnN0cnVjdG9yXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJhZGRyXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG5hbWU6IFwiTUZOb3RQZW5kbGVNYXJrZXRcIixcbiAgICB0eXBlOiBcImVycm9yXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtdLFxuICAgIG5hbWU6IFwiTWFya2V0RmFjdG9yeUV4cGlyZWRQdFwiLFxuICAgIHR5cGU6IFwiZXJyb3JcIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiaW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwiaW5pdGlhbEFuY2hvclwiLFxuICAgICAgICB0eXBlOiBcImludDI1NlwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIm1pbkluaXRpYWxBbmNob3JcIixcbiAgICAgICAgdHlwZTogXCJpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcIk1hcmtldEZhY3RvcnlJbml0aWFsQW5jaG9yVG9vTG93XCIsXG4gICAgdHlwZTogXCJlcnJvclwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXSxcbiAgICBuYW1lOiBcIk1hcmtldEZhY3RvcnlJbnZhbGlkUHRcIixcbiAgICB0eXBlOiBcImVycm9yXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQ4MFwiLFxuICAgICAgICBuYW1lOiBcImxuRmVlUmF0ZVJvb3RcIixcbiAgICAgICAgdHlwZTogXCJ1aW50ODBcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwibWF4TG5GZWVSYXRlUm9vdFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcIk1hcmtldEZhY3RvcnlMbkZlZVJhdGVSb290VG9vSGlnaFwiLFxuICAgIHR5cGU6IFwiZXJyb3JcIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW10sXG4gICAgbmFtZTogXCJNYXJrZXRGYWN0b3J5TWFya2V0RXhpc3RzXCIsXG4gICAgdHlwZTogXCJlcnJvclwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50ODBcIixcbiAgICAgICAgbmFtZTogXCJvdmVycmlkZGVuRmVlXCIsXG4gICAgICAgIHR5cGU6IFwidWludDgwXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIm1hcmtldExuRmVlUmF0ZVJvb3RcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJNYXJrZXRGYWN0b3J5T3ZlcnJpZGRlbkZlZVRvb0hpZ2hcIixcbiAgICB0eXBlOiBcImVycm9yXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQ4XCIsXG4gICAgICAgIG5hbWU6IFwicmVzZXJ2ZUZlZVBlcmNlbnRcIixcbiAgICAgICAgdHlwZTogXCJ1aW50OFwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQ4XCIsXG4gICAgICAgIG5hbWU6IFwibWF4UmVzZXJ2ZUZlZVBlcmNlbnRcIixcbiAgICAgICAgdHlwZTogXCJ1aW50OFwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG5hbWU6IFwiTWFya2V0RmFjdG9yeVJlc2VydmVGZWVQZXJjZW50VG9vSGlnaFwiLFxuICAgIHR5cGU6IFwiZXJyb3JcIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW10sXG4gICAgbmFtZTogXCJNYXJrZXRGYWN0b3J5WmVyb1RyZWFzdXJ5XCIsXG4gICAgdHlwZTogXCJlcnJvclwiLFxuICB9LFxuICB7XG4gICAgYW5vbnltb3VzOiBmYWxzZSxcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogdHJ1ZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJtYXJrZXRcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbmRleGVkOiB0cnVlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcIlBUXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogZmFsc2UsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJzY2FsYXJSb290XCIsXG4gICAgICAgIHR5cGU6IFwiaW50MjU2XCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbmRleGVkOiBmYWxzZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImludDI1NlwiLFxuICAgICAgICBuYW1lOiBcImluaXRpYWxBbmNob3JcIixcbiAgICAgICAgdHlwZTogXCJpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IGZhbHNlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcImxuRmVlUmF0ZVJvb3RcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJDcmVhdGVOZXdNYXJrZXRcIixcbiAgICB0eXBlOiBcImV2ZW50XCIsXG4gIH0sXG4gIHtcbiAgICBhbm9ueW1vdXM6IGZhbHNlLFxuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbmRleGVkOiBmYWxzZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQ4XCIsXG4gICAgICAgIG5hbWU6IFwidmVyc2lvblwiLFxuICAgICAgICB0eXBlOiBcInVpbnQ4XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJJbml0aWFsaXplZFwiLFxuICAgIHR5cGU6IFwiZXZlbnRcIixcbiAgfSxcbiAge1xuICAgIGFub255bW91czogZmFsc2UsXG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IHRydWUsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwidHJlYXN1cnlcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbmRleGVkOiBmYWxzZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQ4XCIsXG4gICAgICAgIG5hbWU6IFwicmVzZXJ2ZUZlZVBlcmNlbnRcIixcbiAgICAgICAgdHlwZTogXCJ1aW50OFwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG5hbWU6IFwiTmV3VHJlYXN1cnlBbmRGZWVSZXNlcnZlXCIsXG4gICAgdHlwZTogXCJldmVudFwiLFxuICB9LFxuICB7XG4gICAgYW5vbnltb3VzOiBmYWxzZSxcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogdHJ1ZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJwcmV2aW91c093bmVyXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogdHJ1ZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJuZXdPd25lclwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcIk93bmVyc2hpcFRyYW5zZmVycmVkXCIsXG4gICAgdHlwZTogXCJldmVudFwiLFxuICB9LFxuICB7XG4gICAgYW5vbnltb3VzOiBmYWxzZSxcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogdHJ1ZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJyb3V0ZXJcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbmRleGVkOiB0cnVlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcIm1hcmtldFwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IGZhbHNlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDgwXCIsXG4gICAgICAgIG5hbWU6IFwibG5GZWVSYXRlUm9vdFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQ4MFwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG5hbWU6IFwiU2V0T3ZlcnJpZGRlbkZlZVwiLFxuICAgIHR5cGU6IFwiZXZlbnRcIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW10sXG4gICAgbmFtZTogXCJjbGFpbU93bmVyc2hpcFwiLFxuICAgIG91dHB1dHM6IFtdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJub25wYXlhYmxlXCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwiUFRcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiaW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwic2NhbGFyUm9vdFwiLFxuICAgICAgICB0eXBlOiBcImludDI1NlwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImludDI1NlwiLFxuICAgICAgICBuYW1lOiBcImluaXRpYWxBbmNob3JcIixcbiAgICAgICAgdHlwZTogXCJpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50ODBcIixcbiAgICAgICAgbmFtZTogXCJsbkZlZVJhdGVSb290XCIsXG4gICAgICAgIHR5cGU6IFwidWludDgwXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJjcmVhdGVOZXdNYXJrZXRcIixcbiAgICBvdXRwdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwibWFya2V0XCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJub25wYXlhYmxlXCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXSxcbiAgICBuYW1lOiBcImdhdWdlQ29udHJvbGxlclwiLFxuICAgIG91dHB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcInZpZXdcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJtYXJrZXRcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcInJvdXRlclwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcImdldE1hcmtldENvbmZpZ1wiLFxuICAgIG91dHB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJfdHJlYXN1cnlcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDgwXCIsXG4gICAgICAgIG5hbWU6IFwiX292ZXJyaWRkZW5GZWVcIixcbiAgICAgICAgdHlwZTogXCJ1aW50ODBcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50OFwiLFxuICAgICAgICBuYW1lOiBcIl9yZXNlcnZlRmVlUGVyY2VudFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQ4XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcInZpZXdcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJtYXJrZXRcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJpc1ZhbGlkTWFya2V0XCIsXG4gICAgb3V0cHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYm9vbFwiLFxuICAgICAgICBuYW1lOiBcIlwiLFxuICAgICAgICB0eXBlOiBcImJvb2xcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwidmlld1wiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW10sXG4gICAgbmFtZTogXCJtYXJrZXRDcmVhdGlvbkNvZGVDb250cmFjdEFcIixcbiAgICBvdXRwdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwiXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJ2aWV3XCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXSxcbiAgICBuYW1lOiBcIm1hcmtldENyZWF0aW9uQ29kZUNvbnRyYWN0QlwiLFxuICAgIG91dHB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcInZpZXdcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtdLFxuICAgIG5hbWU6IFwibWFya2V0Q3JlYXRpb25Db2RlU2l6ZUFcIixcbiAgICBvdXRwdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwiXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJ2aWV3XCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXSxcbiAgICBuYW1lOiBcIm1hcmtldENyZWF0aW9uQ29kZVNpemVCXCIsXG4gICAgb3V0cHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIlwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwidmlld1wiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW10sXG4gICAgbmFtZTogXCJtYXhMbkZlZVJhdGVSb290XCIsXG4gICAgb3V0cHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIlwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwidmlld1wiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW10sXG4gICAgbmFtZTogXCJtYXhSZXNlcnZlRmVlUGVyY2VudFwiLFxuICAgIG91dHB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQ4XCIsXG4gICAgICAgIG5hbWU6IFwiXCIsXG4gICAgICAgIHR5cGU6IFwidWludDhcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwidmlld1wiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW10sXG4gICAgbmFtZTogXCJtaW5Jbml0aWFsQW5jaG9yXCIsXG4gICAgb3V0cHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiaW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwiXCIsXG4gICAgICAgIHR5cGU6IFwiaW50MjU2XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcInZpZXdcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtdLFxuICAgIG5hbWU6IFwib3duZXJcIixcbiAgICBvdXRwdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwiXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJ2aWV3XCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXSxcbiAgICBuYW1lOiBcInBlbmRpbmdPd25lclwiLFxuICAgIG91dHB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcInZpZXdcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtdLFxuICAgIG5hbWU6IFwicmVzZXJ2ZUZlZVBlcmNlbnRcIixcbiAgICBvdXRwdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50OFwiLFxuICAgICAgICBuYW1lOiBcIlwiLFxuICAgICAgICB0eXBlOiBcInVpbnQ4XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcInZpZXdcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJyb3V0ZXJcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcIm1hcmtldFwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50ODBcIixcbiAgICAgICAgbmFtZTogXCJuZXdGZWVcIixcbiAgICAgICAgdHlwZTogXCJ1aW50ODBcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcInNldE92ZXJyaWRkZW5GZWVcIixcbiAgICBvdXRwdXRzOiBbXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwibm9ucGF5YWJsZVwiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcIm5ld1RyZWFzdXJ5XCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQ4XCIsXG4gICAgICAgIG5hbWU6IFwibmV3UmVzZXJ2ZUZlZVBlcmNlbnRcIixcbiAgICAgICAgdHlwZTogXCJ1aW50OFwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG5hbWU6IFwic2V0VHJlYXN1cnlBbmRGZWVSZXNlcnZlXCIsXG4gICAgb3V0cHV0czogW10sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcIm5vbnBheWFibGVcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJuZXdPd25lclwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJib29sXCIsXG4gICAgICAgIG5hbWU6IFwiZGlyZWN0XCIsXG4gICAgICAgIHR5cGU6IFwiYm9vbFwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImJvb2xcIixcbiAgICAgICAgbmFtZTogXCJyZW5vdW5jZVwiLFxuICAgICAgICB0eXBlOiBcImJvb2xcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcInRyYW5zZmVyT3duZXJzaGlwXCIsXG4gICAgb3V0cHV0czogW10sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcIm5vbnBheWFibGVcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtdLFxuICAgIG5hbWU6IFwidHJlYXN1cnlcIixcbiAgICBvdXRwdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwiXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJ2aWV3XCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXSxcbiAgICBuYW1lOiBcInZlUGVuZGxlXCIsXG4gICAgb3V0cHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcIlwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwidmlld1wiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW10sXG4gICAgbmFtZTogXCJ5aWVsZENvbnRyYWN0RmFjdG9yeVwiLFxuICAgIG91dHB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcInZpZXdcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG5dIGFzIGNvbnN0O1xuXG5leHBvcnQgY2xhc3MgUGVuZGxlTWFya2V0RmFjdG9yeVYzX19mYWN0b3J5IHtcbiAgc3RhdGljIHJlYWRvbmx5IGFiaSA9IF9hYmk7XG4gIHN0YXRpYyBjcmVhdGVJbnRlcmZhY2UoKTogUGVuZGxlTWFya2V0RmFjdG9yeVYzSW50ZXJmYWNlIHtcbiAgICByZXR1cm4gbmV3SW50ZXJmYWNlKF9hYmkpIGFzIFBlbmRsZU1hcmtldEZhY3RvcnlWM0ludGVyZmFjZTtcbiAgfVxuICBzdGF0aWMgY29ubmVjdChcbiAgICBhZGRyZXNzOiBzdHJpbmcsXG4gICAgc2lnbmVyT3JQcm92aWRlcjogU2lnbmVyIHwgUHJvdmlkZXIsXG4gICk6IFBlbmRsZU1hcmtldEZhY3RvcnlWMyB7XG4gICAgcmV0dXJuIG5ld0NvbnRyYWN0KFxuICAgICAgYWRkcmVzcyxcbiAgICAgIF9hYmksXG4gICAgICBzaWduZXJPclByb3ZpZGVyLFxuICAgICkgYXMgUGVuZGxlTWFya2V0RmFjdG9yeVYzO1xuICB9XG59XG4iLCAiLyogQXV0b2dlbmVyYXRlZCBmaWxlLiBEbyBub3QgZWRpdCBtYW51YWxseS4gKi9cbi8qIHRzbGludDpkaXNhYmxlICovXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xuLy8gQHRzLW5vY2hlY2tcbmltcG9ydCB7IG5ld0NvbnRyYWN0LCBuZXdJbnRlcmZhY2UgfSBmcm9tIFwiQHNlbnRpby9zZGsvZXRoXCI7XG5cbmltcG9ydCB7IENvbnRyYWN0LCBTaWduZXIsIFByb3ZpZGVyLCBJbnRlcmZhY2UgfSBmcm9tIFwiZXRoZXJzXCI7XG5pbXBvcnQgdHlwZSB7IFBlbmRsZVJvdXRlciwgUGVuZGxlUm91dGVySW50ZXJmYWNlIH0gZnJvbSBcIi4uL1BlbmRsZVJvdXRlci5qc1wiO1xuXG5jb25zdCBfYWJpID0gW1xuICB7XG4gICAgYW5vbnltb3VzOiBmYWxzZSxcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogdHJ1ZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJjYWxsZXJcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbmRleGVkOiB0cnVlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcIm1hcmtldFwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IHRydWUsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwicmVjZWl2ZXJcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbmRleGVkOiBmYWxzZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJuZXRTeVVzZWRcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbmRleGVkOiBmYWxzZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJuZXRQdFVzZWRcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbmRleGVkOiBmYWxzZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJuZXRMcE91dFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcIkFkZExpcXVpZGl0eUR1YWxTeUFuZFB0XCIsXG4gICAgdHlwZTogXCJldmVudFwiLFxuICB9LFxuICB7XG4gICAgYW5vbnltb3VzOiBmYWxzZSxcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogdHJ1ZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJjYWxsZXJcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbmRleGVkOiB0cnVlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcIm1hcmtldFwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IHRydWUsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwidG9rZW5JblwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IGZhbHNlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcInJlY2VpdmVyXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogZmFsc2UsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwibmV0VG9rZW5Vc2VkXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogZmFsc2UsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwibmV0UHRVc2VkXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogZmFsc2UsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwibmV0THBPdXRcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJBZGRMaXF1aWRpdHlEdWFsVG9rZW5BbmRQdFwiLFxuICAgIHR5cGU6IFwiZXZlbnRcIixcbiAgfSxcbiAge1xuICAgIGFub255bW91czogZmFsc2UsXG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IHRydWUsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwiY2FsbGVyXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogdHJ1ZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJtYXJrZXRcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbmRleGVkOiB0cnVlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcInJlY2VpdmVyXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogZmFsc2UsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwibmV0UHRJblwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IGZhbHNlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIm5ldExwT3V0XCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG5hbWU6IFwiQWRkTGlxdWlkaXR5U2luZ2xlUHRcIixcbiAgICB0eXBlOiBcImV2ZW50XCIsXG4gIH0sXG4gIHtcbiAgICBhbm9ueW1vdXM6IGZhbHNlLFxuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbmRleGVkOiB0cnVlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcImNhbGxlclwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IHRydWUsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwibWFya2V0XCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogdHJ1ZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJyZWNlaXZlclwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IGZhbHNlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIm5ldFN5SW5cIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbmRleGVkOiBmYWxzZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJuZXRMcE91dFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcIkFkZExpcXVpZGl0eVNpbmdsZVN5XCIsXG4gICAgdHlwZTogXCJldmVudFwiLFxuICB9LFxuICB7XG4gICAgYW5vbnltb3VzOiBmYWxzZSxcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogdHJ1ZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJjYWxsZXJcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbmRleGVkOiB0cnVlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcIm1hcmtldFwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IHRydWUsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwicmVjZWl2ZXJcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbmRleGVkOiBmYWxzZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJuZXRTeUluXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogZmFsc2UsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwibmV0THBPdXRcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbmRleGVkOiBmYWxzZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJuZXRZdE91dFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcIkFkZExpcXVpZGl0eVNpbmdsZVN5S2VlcFl0XCIsXG4gICAgdHlwZTogXCJldmVudFwiLFxuICB9LFxuICB7XG4gICAgYW5vbnltb3VzOiBmYWxzZSxcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogdHJ1ZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJjYWxsZXJcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbmRleGVkOiB0cnVlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcIm1hcmtldFwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IHRydWUsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwidG9rZW5cIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbmRleGVkOiBmYWxzZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJyZWNlaXZlclwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IGZhbHNlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIm5ldFRva2VuSW5cIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbmRleGVkOiBmYWxzZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJuZXRMcE91dFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcIkFkZExpcXVpZGl0eVNpbmdsZVRva2VuXCIsXG4gICAgdHlwZTogXCJldmVudFwiLFxuICB9LFxuICB7XG4gICAgYW5vbnltb3VzOiBmYWxzZSxcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogdHJ1ZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJjYWxsZXJcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbmRleGVkOiB0cnVlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcIm1hcmtldFwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IHRydWUsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwidG9rZW5cIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbmRleGVkOiBmYWxzZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJyZWNlaXZlclwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IGZhbHNlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIm5ldFRva2VuSW5cIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbmRleGVkOiBmYWxzZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJuZXRMcE91dFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IGZhbHNlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIm5ldFl0T3V0XCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG5hbWU6IFwiQWRkTGlxdWlkaXR5U2luZ2xlVG9rZW5LZWVwWXRcIixcbiAgICB0eXBlOiBcImV2ZW50XCIsXG4gIH0sXG4gIHtcbiAgICBhbm9ueW1vdXM6IGZhbHNlLFxuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbmRleGVkOiB0cnVlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcImNhbGxlclwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IHRydWUsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwicmVjZWl2ZXJcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbmRleGVkOiB0cnVlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcIllUXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogZmFsc2UsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwibmV0U3lJblwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IGZhbHNlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIm5ldFB5T3V0XCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG5hbWU6IFwiTWludFB5RnJvbVN5XCIsXG4gICAgdHlwZTogXCJldmVudFwiLFxuICB9LFxuICB7XG4gICAgYW5vbnltb3VzOiBmYWxzZSxcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogdHJ1ZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJjYWxsZXJcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbmRleGVkOiB0cnVlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcInRva2VuSW5cIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbmRleGVkOiB0cnVlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcIllUXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogZmFsc2UsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwicmVjZWl2ZXJcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbmRleGVkOiBmYWxzZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJuZXRUb2tlbkluXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogZmFsc2UsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwibmV0UHlPdXRcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJNaW50UHlGcm9tVG9rZW5cIixcbiAgICB0eXBlOiBcImV2ZW50XCIsXG4gIH0sXG4gIHtcbiAgICBhbm9ueW1vdXM6IGZhbHNlLFxuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbmRleGVkOiB0cnVlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcImNhbGxlclwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IHRydWUsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwidG9rZW5JblwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IHRydWUsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwiU1lcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbmRleGVkOiBmYWxzZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJyZWNlaXZlclwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IGZhbHNlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIm5ldFRva2VuSW5cIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbmRleGVkOiBmYWxzZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJuZXRTeU91dFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcIk1pbnRTeUZyb21Ub2tlblwiLFxuICAgIHR5cGU6IFwiZXZlbnRcIixcbiAgfSxcbiAge1xuICAgIGFub255bW91czogZmFsc2UsXG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IHRydWUsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwiY2FsbGVyXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogdHJ1ZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJyZWNlaXZlclwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IHRydWUsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwiWVRcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbmRleGVkOiBmYWxzZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJuZXRQeUluXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogZmFsc2UsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwibmV0U3lPdXRcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJSZWRlZW1QeVRvU3lcIixcbiAgICB0eXBlOiBcImV2ZW50XCIsXG4gIH0sXG4gIHtcbiAgICBhbm9ueW1vdXM6IGZhbHNlLFxuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbmRleGVkOiB0cnVlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcImNhbGxlclwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IHRydWUsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwidG9rZW5PdXRcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbmRleGVkOiB0cnVlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcIllUXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogZmFsc2UsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwicmVjZWl2ZXJcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbmRleGVkOiBmYWxzZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJuZXRQeUluXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogZmFsc2UsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwibmV0VG9rZW5PdXRcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJSZWRlZW1QeVRvVG9rZW5cIixcbiAgICB0eXBlOiBcImV2ZW50XCIsXG4gIH0sXG4gIHtcbiAgICBhbm9ueW1vdXM6IGZhbHNlLFxuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbmRleGVkOiB0cnVlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcImNhbGxlclwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IHRydWUsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwidG9rZW5PdXRcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbmRleGVkOiB0cnVlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcIlNZXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogZmFsc2UsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwicmVjZWl2ZXJcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbmRleGVkOiBmYWxzZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJuZXRTeUluXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogZmFsc2UsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwibmV0VG9rZW5PdXRcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJSZWRlZW1TeVRvVG9rZW5cIixcbiAgICB0eXBlOiBcImV2ZW50XCIsXG4gIH0sXG4gIHtcbiAgICBhbm9ueW1vdXM6IGZhbHNlLFxuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbmRleGVkOiB0cnVlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcImNhbGxlclwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IHRydWUsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwibWFya2V0XCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogdHJ1ZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJyZWNlaXZlclwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IGZhbHNlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIm5ldExwVG9SZW1vdmVcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbmRleGVkOiBmYWxzZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJuZXRQdE91dFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IGZhbHNlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIm5ldFN5T3V0XCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG5hbWU6IFwiUmVtb3ZlTGlxdWlkaXR5RHVhbFN5QW5kUHRcIixcbiAgICB0eXBlOiBcImV2ZW50XCIsXG4gIH0sXG4gIHtcbiAgICBhbm9ueW1vdXM6IGZhbHNlLFxuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbmRleGVkOiB0cnVlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcImNhbGxlclwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IHRydWUsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwibWFya2V0XCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogdHJ1ZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJ0b2tlbk91dFwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IGZhbHNlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcInJlY2VpdmVyXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogZmFsc2UsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwibmV0THBUb1JlbW92ZVwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IGZhbHNlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIm5ldFB0T3V0XCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogZmFsc2UsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwibmV0VG9rZW5PdXRcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJSZW1vdmVMaXF1aWRpdHlEdWFsVG9rZW5BbmRQdFwiLFxuICAgIHR5cGU6IFwiZXZlbnRcIixcbiAgfSxcbiAge1xuICAgIGFub255bW91czogZmFsc2UsXG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IHRydWUsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwiY2FsbGVyXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogdHJ1ZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJtYXJrZXRcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbmRleGVkOiB0cnVlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcInJlY2VpdmVyXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogZmFsc2UsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwibmV0THBUb1JlbW92ZVwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IGZhbHNlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIm5ldFB0T3V0XCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG5hbWU6IFwiUmVtb3ZlTGlxdWlkaXR5U2luZ2xlUHRcIixcbiAgICB0eXBlOiBcImV2ZW50XCIsXG4gIH0sXG4gIHtcbiAgICBhbm9ueW1vdXM6IGZhbHNlLFxuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbmRleGVkOiB0cnVlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcImNhbGxlclwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IHRydWUsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwibWFya2V0XCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogdHJ1ZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJyZWNlaXZlclwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IGZhbHNlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIm5ldExwVG9SZW1vdmVcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbmRleGVkOiBmYWxzZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJuZXRTeU91dFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcIlJlbW92ZUxpcXVpZGl0eVNpbmdsZVN5XCIsXG4gICAgdHlwZTogXCJldmVudFwiLFxuICB9LFxuICB7XG4gICAgYW5vbnltb3VzOiBmYWxzZSxcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogdHJ1ZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJjYWxsZXJcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbmRleGVkOiB0cnVlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcIm1hcmtldFwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IHRydWUsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwidG9rZW5cIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbmRleGVkOiBmYWxzZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJyZWNlaXZlclwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IGZhbHNlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIm5ldExwVG9SZW1vdmVcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbmRleGVkOiBmYWxzZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJuZXRUb2tlbk91dFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcIlJlbW92ZUxpcXVpZGl0eVNpbmdsZVRva2VuXCIsXG4gICAgdHlwZTogXCJldmVudFwiLFxuICB9LFxuICB7XG4gICAgYW5vbnltb3VzOiBmYWxzZSxcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogdHJ1ZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJjYWxsZXJcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbmRleGVkOiB0cnVlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcIm1hcmtldFwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IHRydWUsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwicmVjZWl2ZXJcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbmRleGVkOiBmYWxzZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIm5ldFB0VG9BY2NvdW50XCIsXG4gICAgICAgIHR5cGU6IFwiaW50MjU2XCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbmRleGVkOiBmYWxzZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIm5ldFN5VG9BY2NvdW50XCIsXG4gICAgICAgIHR5cGU6IFwiaW50MjU2XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJTd2FwUHRBbmRTeVwiLFxuICAgIHR5cGU6IFwiZXZlbnRcIixcbiAgfSxcbiAge1xuICAgIGFub255bW91czogZmFsc2UsXG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IHRydWUsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwiY2FsbGVyXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogdHJ1ZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJtYXJrZXRcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbmRleGVkOiB0cnVlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcInRva2VuXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogZmFsc2UsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwicmVjZWl2ZXJcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbmRleGVkOiBmYWxzZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIm5ldFB0VG9BY2NvdW50XCIsXG4gICAgICAgIHR5cGU6IFwiaW50MjU2XCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbmRleGVkOiBmYWxzZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIm5ldFRva2VuVG9BY2NvdW50XCIsXG4gICAgICAgIHR5cGU6IFwiaW50MjU2XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJTd2FwUHRBbmRUb2tlblwiLFxuICAgIHR5cGU6IFwiZXZlbnRcIixcbiAgfSxcbiAge1xuICAgIGFub255bW91czogZmFsc2UsXG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IHRydWUsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwiY2FsbGVyXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogdHJ1ZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJtYXJrZXRcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbmRleGVkOiB0cnVlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcInJlY2VpdmVyXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogZmFsc2UsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJuZXRQdFRvQWNjb3VudFwiLFxuICAgICAgICB0eXBlOiBcImludDI1NlwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogZmFsc2UsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJuZXRZdFRvQWNjb3VudFwiLFxuICAgICAgICB0eXBlOiBcImludDI1NlwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG5hbWU6IFwiU3dhcFB0QW5kWXRcIixcbiAgICB0eXBlOiBcImV2ZW50XCIsXG4gIH0sXG4gIHtcbiAgICBhbm9ueW1vdXM6IGZhbHNlLFxuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbmRleGVkOiB0cnVlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcImNhbGxlclwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IHRydWUsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwibWFya2V0XCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogdHJ1ZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJyZWNlaXZlclwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IGZhbHNlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiaW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwibmV0WXRUb0FjY291bnRcIixcbiAgICAgICAgdHlwZTogXCJpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IGZhbHNlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiaW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwibmV0U3lUb0FjY291bnRcIixcbiAgICAgICAgdHlwZTogXCJpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcIlN3YXBZdEFuZFN5XCIsXG4gICAgdHlwZTogXCJldmVudFwiLFxuICB9LFxuICB7XG4gICAgYW5vbnltb3VzOiBmYWxzZSxcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogdHJ1ZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJjYWxsZXJcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbmRleGVkOiB0cnVlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcIm1hcmtldFwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IHRydWUsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwidG9rZW5cIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbmRleGVkOiBmYWxzZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJyZWNlaXZlclwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IGZhbHNlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiaW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwibmV0WXRUb0FjY291bnRcIixcbiAgICAgICAgdHlwZTogXCJpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IGZhbHNlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiaW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwibmV0VG9rZW5Ub0FjY291bnRcIixcbiAgICAgICAgdHlwZTogXCJpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcIlN3YXBZdEFuZFRva2VuXCIsXG4gICAgdHlwZTogXCJldmVudFwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwicmVjZWl2ZXJcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcIm1hcmtldFwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwibmV0U3lEZXNpcmVkXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJuZXRQdERlc2lyZWRcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIm1pbkxwT3V0XCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG5hbWU6IFwiYWRkTGlxdWlkaXR5RHVhbFN5QW5kUHRcIixcbiAgICBvdXRwdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwibmV0THBPdXRcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIm5ldFN5VXNlZFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwibmV0UHRVc2VkXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJub25wYXlhYmxlXCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwicmVjZWl2ZXJcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcIm1hcmtldFwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGNvbXBvbmVudHM6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgbmFtZTogXCJ0b2tlbkluXCIsXG4gICAgICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICBuYW1lOiBcIm5ldFRva2VuSW5cIixcbiAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgIG5hbWU6IFwidG9rZW5NaW50U3lcIixcbiAgICAgICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgIG5hbWU6IFwiYnVsa1wiLFxuICAgICAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgbmFtZTogXCJwZW5kbGVTd2FwXCIsXG4gICAgICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGNvbXBvbmVudHM6IFtcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJlbnVtIFN3YXBUeXBlXCIsXG4gICAgICAgICAgICAgICAgbmFtZTogXCJzd2FwVHlwZVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwidWludDhcIixcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICAgICAgbmFtZTogXCJleHRSb3V0ZXJcIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJieXRlc1wiLFxuICAgICAgICAgICAgICAgIG5hbWU6IFwiZXh0Q2FsbGRhdGFcIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcImJ5dGVzXCIsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYm9vbFwiLFxuICAgICAgICAgICAgICAgIG5hbWU6IFwibmVlZFNjYWxlXCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJib29sXCIsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInN0cnVjdCBTd2FwRGF0YVwiLFxuICAgICAgICAgICAgbmFtZTogXCJzd2FwRGF0YVwiLFxuICAgICAgICAgICAgdHlwZTogXCJ0dXBsZVwiLFxuICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIGludGVybmFsVHlwZTogXCJzdHJ1Y3QgVG9rZW5JbnB1dFwiLFxuICAgICAgICBuYW1lOiBcImlucHV0XCIsXG4gICAgICAgIHR5cGU6IFwidHVwbGVcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwibmV0UHREZXNpcmVkXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJtaW5McE91dFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcImFkZExpcXVpZGl0eUR1YWxUb2tlbkFuZFB0XCIsXG4gICAgb3V0cHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIm5ldExwT3V0XCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJuZXRUb2tlblVzZWRcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIm5ldFB0VXNlZFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwicGF5YWJsZVwiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcInJlY2VpdmVyXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJtYXJrZXRcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIm5ldFB0SW5cIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIm1pbkxwT3V0XCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgY29tcG9uZW50czogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICBuYW1lOiBcImd1ZXNzTWluXCIsXG4gICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICBuYW1lOiBcImd1ZXNzTWF4XCIsXG4gICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICBuYW1lOiBcImd1ZXNzT2ZmY2hhaW5cIixcbiAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgIG5hbWU6IFwibWF4SXRlcmF0aW9uXCIsXG4gICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICBuYW1lOiBcImVwc1wiLFxuICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInN0cnVjdCBBcHByb3hQYXJhbXNcIixcbiAgICAgICAgbmFtZTogXCJndWVzc1B0U3dhcFRvU3lcIixcbiAgICAgICAgdHlwZTogXCJ0dXBsZVwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG5hbWU6IFwiYWRkTGlxdWlkaXR5U2luZ2xlUHRcIixcbiAgICBvdXRwdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwibmV0THBPdXRcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIm5ldFN5RmVlXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJub25wYXlhYmxlXCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwicmVjZWl2ZXJcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcIm1hcmtldFwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwibmV0U3lJblwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwibWluTHBPdXRcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBjb21wb25lbnRzOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgIG5hbWU6IFwiZ3Vlc3NNaW5cIixcbiAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgIG5hbWU6IFwiZ3Vlc3NNYXhcIixcbiAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgIG5hbWU6IFwiZ3Vlc3NPZmZjaGFpblwiLFxuICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgbmFtZTogXCJtYXhJdGVyYXRpb25cIixcbiAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgIG5hbWU6IFwiZXBzXCIsXG4gICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwic3RydWN0IEFwcHJveFBhcmFtc1wiLFxuICAgICAgICBuYW1lOiBcImd1ZXNzUHRSZWNlaXZlZEZyb21TeVwiLFxuICAgICAgICB0eXBlOiBcInR1cGxlXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJhZGRMaXF1aWRpdHlTaW5nbGVTeVwiLFxuICAgIG91dHB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJuZXRMcE91dFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwibmV0U3lGZWVcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcIm5vbnBheWFibGVcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJyZWNlaXZlclwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwibWFya2V0XCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJuZXRTeUluXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJtaW5McE91dFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwibWluWXRPdXRcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJhZGRMaXF1aWRpdHlTaW5nbGVTeUtlZXBZdFwiLFxuICAgIG91dHB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJuZXRMcE91dFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwibmV0WXRPdXRcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcIm5vbnBheWFibGVcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJyZWNlaXZlclwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwibWFya2V0XCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJtaW5McE91dFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGNvbXBvbmVudHM6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgbmFtZTogXCJndWVzc01pblwiLFxuICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgbmFtZTogXCJndWVzc01heFwiLFxuICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgbmFtZTogXCJndWVzc09mZmNoYWluXCIsXG4gICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICBuYW1lOiBcIm1heEl0ZXJhdGlvblwiLFxuICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgbmFtZTogXCJlcHNcIixcbiAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIGludGVybmFsVHlwZTogXCJzdHJ1Y3QgQXBwcm94UGFyYW1zXCIsXG4gICAgICAgIG5hbWU6IFwiZ3Vlc3NQdFJlY2VpdmVkRnJvbVN5XCIsXG4gICAgICAgIHR5cGU6IFwidHVwbGVcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGNvbXBvbmVudHM6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgbmFtZTogXCJ0b2tlbkluXCIsXG4gICAgICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICBuYW1lOiBcIm5ldFRva2VuSW5cIixcbiAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgIG5hbWU6IFwidG9rZW5NaW50U3lcIixcbiAgICAgICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgIG5hbWU6IFwiYnVsa1wiLFxuICAgICAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgbmFtZTogXCJwZW5kbGVTd2FwXCIsXG4gICAgICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGNvbXBvbmVudHM6IFtcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJlbnVtIFN3YXBUeXBlXCIsXG4gICAgICAgICAgICAgICAgbmFtZTogXCJzd2FwVHlwZVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwidWludDhcIixcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICAgICAgbmFtZTogXCJleHRSb3V0ZXJcIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJieXRlc1wiLFxuICAgICAgICAgICAgICAgIG5hbWU6IFwiZXh0Q2FsbGRhdGFcIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcImJ5dGVzXCIsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYm9vbFwiLFxuICAgICAgICAgICAgICAgIG5hbWU6IFwibmVlZFNjYWxlXCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJib29sXCIsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInN0cnVjdCBTd2FwRGF0YVwiLFxuICAgICAgICAgICAgbmFtZTogXCJzd2FwRGF0YVwiLFxuICAgICAgICAgICAgdHlwZTogXCJ0dXBsZVwiLFxuICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIGludGVybmFsVHlwZTogXCJzdHJ1Y3QgVG9rZW5JbnB1dFwiLFxuICAgICAgICBuYW1lOiBcImlucHV0XCIsXG4gICAgICAgIHR5cGU6IFwidHVwbGVcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcImFkZExpcXVpZGl0eVNpbmdsZVRva2VuXCIsXG4gICAgb3V0cHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIm5ldExwT3V0XCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJuZXRTeUZlZVwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwicGF5YWJsZVwiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcInJlY2VpdmVyXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJtYXJrZXRcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIm1pbkxwT3V0XCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJtaW5ZdE91dFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGNvbXBvbmVudHM6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgbmFtZTogXCJ0b2tlbkluXCIsXG4gICAgICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICBuYW1lOiBcIm5ldFRva2VuSW5cIixcbiAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgIG5hbWU6IFwidG9rZW5NaW50U3lcIixcbiAgICAgICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgIG5hbWU6IFwiYnVsa1wiLFxuICAgICAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgbmFtZTogXCJwZW5kbGVTd2FwXCIsXG4gICAgICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGNvbXBvbmVudHM6IFtcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJlbnVtIFN3YXBUeXBlXCIsXG4gICAgICAgICAgICAgICAgbmFtZTogXCJzd2FwVHlwZVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwidWludDhcIixcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICAgICAgbmFtZTogXCJleHRSb3V0ZXJcIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJieXRlc1wiLFxuICAgICAgICAgICAgICAgIG5hbWU6IFwiZXh0Q2FsbGRhdGFcIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcImJ5dGVzXCIsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYm9vbFwiLFxuICAgICAgICAgICAgICAgIG5hbWU6IFwibmVlZFNjYWxlXCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJib29sXCIsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInN0cnVjdCBTd2FwRGF0YVwiLFxuICAgICAgICAgICAgbmFtZTogXCJzd2FwRGF0YVwiLFxuICAgICAgICAgICAgdHlwZTogXCJ0dXBsZVwiLFxuICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIGludGVybmFsVHlwZTogXCJzdHJ1Y3QgVG9rZW5JbnB1dFwiLFxuICAgICAgICBuYW1lOiBcImlucHV0XCIsXG4gICAgICAgIHR5cGU6IFwidHVwbGVcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcImFkZExpcXVpZGl0eVNpbmdsZVRva2VuS2VlcFl0XCIsXG4gICAgb3V0cHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIm5ldExwT3V0XCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJuZXRZdE91dFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwibm9ucGF5YWJsZVwiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBjb21wb25lbnRzOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NbXVwiLFxuICAgICAgICAgICAgbmFtZTogXCJ0b2tlbnNcIixcbiAgICAgICAgICAgIHR5cGU6IFwiYWRkcmVzc1tdXCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgbmFtZTogXCJzcGVuZGVyXCIsXG4gICAgICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwic3RydWN0IElQQWN0aW9uTWlzYy5NdWx0aUFwcHJvdmFsW11cIixcbiAgICAgICAgbmFtZTogXCJcIixcbiAgICAgICAgdHlwZTogXCJ0dXBsZVtdXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJhcHByb3ZlSW5mXCIsXG4gICAgb3V0cHV0czogW10sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcIm5vbnBheWFibGVcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgY29tcG9uZW50czogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJib29sXCIsXG4gICAgICAgICAgICBuYW1lOiBcImFsbG93RmFpbHVyZVwiLFxuICAgICAgICAgICAgdHlwZTogXCJib29sXCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYnl0ZXNcIixcbiAgICAgICAgICAgIG5hbWU6IFwiY2FsbERhdGFcIixcbiAgICAgICAgICAgIHR5cGU6IFwiYnl0ZXNcIixcbiAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwic3RydWN0IElQQWN0aW9uTWlzYy5DYWxsM1tdXCIsXG4gICAgICAgIG5hbWU6IFwiY2FsbHNcIixcbiAgICAgICAgdHlwZTogXCJ0dXBsZVtdXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJiYXRjaEV4ZWNcIixcbiAgICBvdXRwdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGNvbXBvbmVudHM6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYm9vbFwiLFxuICAgICAgICAgICAgbmFtZTogXCJzdWNjZXNzXCIsXG4gICAgICAgICAgICB0eXBlOiBcImJvb2xcIixcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJieXRlc1wiLFxuICAgICAgICAgICAgbmFtZTogXCJyZXR1cm5EYXRhXCIsXG4gICAgICAgICAgICB0eXBlOiBcImJ5dGVzXCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInN0cnVjdCBJUEFjdGlvbk1pc2MuUmVzdWx0W11cIixcbiAgICAgICAgbmFtZTogXCJyZXR1cm5EYXRhXCIsXG4gICAgICAgIHR5cGU6IFwidHVwbGVbXVwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJub25wYXlhYmxlXCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJieXRlczRcIixcbiAgICAgICAgbmFtZTogXCJfZnVuY3Rpb25TZWxlY3RvclwiLFxuICAgICAgICB0eXBlOiBcImJ5dGVzNFwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG5hbWU6IFwiZmFjZXRBZGRyZXNzXCIsXG4gICAgb3V0cHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcImZhY2V0QWRkcmVzc19cIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcInZpZXdcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtdLFxuICAgIG5hbWU6IFwiZmFjZXRBZGRyZXNzZXNcIixcbiAgICBvdXRwdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzW11cIixcbiAgICAgICAgbmFtZTogXCJmYWNldEFkZHJlc3Nlc19cIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzW11cIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwidmlld1wiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcIl9mYWNldFwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcImZhY2V0RnVuY3Rpb25TZWxlY3RvcnNcIixcbiAgICBvdXRwdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJieXRlczRbXVwiLFxuICAgICAgICBuYW1lOiBcImZhY2V0RnVuY3Rpb25TZWxlY3RvcnNfXCIsXG4gICAgICAgIHR5cGU6IFwiYnl0ZXM0W11cIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwidmlld1wiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW10sXG4gICAgbmFtZTogXCJmYWNldHNcIixcbiAgICBvdXRwdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGNvbXBvbmVudHM6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgbmFtZTogXCJmYWNldEFkZHJlc3NcIixcbiAgICAgICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImJ5dGVzNFtdXCIsXG4gICAgICAgICAgICBuYW1lOiBcImZ1bmN0aW9uU2VsZWN0b3JzXCIsXG4gICAgICAgICAgICB0eXBlOiBcImJ5dGVzNFtdXCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInN0cnVjdCBJRGlhbW9uZExvdXBlLkZhY2V0W11cIixcbiAgICAgICAgbmFtZTogXCJmYWNldHNfXCIsXG4gICAgICAgIHR5cGU6IFwidHVwbGVbXVwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJ2aWV3XCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwicmVjZWl2ZXJcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcIllUXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJuZXRTeUluXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJtaW5QeU91dFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcIm1pbnRQeUZyb21TeVwiLFxuICAgIG91dHB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJuZXRQeU91dFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwibm9ucGF5YWJsZVwiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcInJlY2VpdmVyXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJZVFwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwibWluUHlPdXRcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBjb21wb25lbnRzOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgIG5hbWU6IFwidG9rZW5JblwiLFxuICAgICAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgbmFtZTogXCJuZXRUb2tlbkluXCIsXG4gICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICBuYW1lOiBcInRva2VuTWludFN5XCIsXG4gICAgICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICBuYW1lOiBcImJ1bGtcIixcbiAgICAgICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgIG5hbWU6IFwicGVuZGxlU3dhcFwiLFxuICAgICAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBjb21wb25lbnRzOiBbXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiZW51bSBTd2FwVHlwZVwiLFxuICAgICAgICAgICAgICAgIG5hbWU6IFwic3dhcFR5cGVcIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcInVpbnQ4XCIsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgICAgIG5hbWU6IFwiZXh0Um91dGVyXCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYnl0ZXNcIixcbiAgICAgICAgICAgICAgICBuYW1lOiBcImV4dENhbGxkYXRhXCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJieXRlc1wiLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImJvb2xcIixcbiAgICAgICAgICAgICAgICBuYW1lOiBcIm5lZWRTY2FsZVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwiYm9vbFwiLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJzdHJ1Y3QgU3dhcERhdGFcIixcbiAgICAgICAgICAgIG5hbWU6IFwic3dhcERhdGFcIixcbiAgICAgICAgICAgIHR5cGU6IFwidHVwbGVcIixcbiAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwic3RydWN0IFRva2VuSW5wdXRcIixcbiAgICAgICAgbmFtZTogXCJpbnB1dFwiLFxuICAgICAgICB0eXBlOiBcInR1cGxlXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJtaW50UHlGcm9tVG9rZW5cIixcbiAgICBvdXRwdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwibmV0UHlPdXRcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcInBheWFibGVcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJyZWNlaXZlclwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwiU1lcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIm1pblN5T3V0XCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgY29tcG9uZW50czogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICBuYW1lOiBcInRva2VuSW5cIixcbiAgICAgICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgIG5hbWU6IFwibmV0VG9rZW5JblwiLFxuICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgbmFtZTogXCJ0b2tlbk1pbnRTeVwiLFxuICAgICAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgbmFtZTogXCJidWxrXCIsXG4gICAgICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICBuYW1lOiBcInBlbmRsZVN3YXBcIixcbiAgICAgICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgY29tcG9uZW50czogW1xuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImVudW0gU3dhcFR5cGVcIixcbiAgICAgICAgICAgICAgICBuYW1lOiBcInN3YXBUeXBlXCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJ1aW50OFwiLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgICAgICBuYW1lOiBcImV4dFJvdXRlclwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImJ5dGVzXCIsXG4gICAgICAgICAgICAgICAgbmFtZTogXCJleHRDYWxsZGF0YVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwiYnl0ZXNcIixcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJib29sXCIsXG4gICAgICAgICAgICAgICAgbmFtZTogXCJuZWVkU2NhbGVcIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcImJvb2xcIixcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwic3RydWN0IFN3YXBEYXRhXCIsXG4gICAgICAgICAgICBuYW1lOiBcInN3YXBEYXRhXCIsXG4gICAgICAgICAgICB0eXBlOiBcInR1cGxlXCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInN0cnVjdCBUb2tlbklucHV0XCIsXG4gICAgICAgIG5hbWU6IFwiaW5wdXRcIixcbiAgICAgICAgdHlwZTogXCJ0dXBsZVwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG5hbWU6IFwibWludFN5RnJvbVRva2VuXCIsXG4gICAgb3V0cHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIm5ldFN5T3V0XCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJwYXlhYmxlXCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwidXNlclwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzW11cIixcbiAgICAgICAgbmFtZTogXCJzeXNcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzW11cIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzW11cIixcbiAgICAgICAgbmFtZTogXCJ5dHNcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzW11cIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzW11cIixcbiAgICAgICAgbmFtZTogXCJtYXJrZXRzXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1tdXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJyZWRlZW1EdWVJbnRlcmVzdEFuZFJld2FyZHNcIixcbiAgICBvdXRwdXRzOiBbXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwibm9ucGF5YWJsZVwiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcInJlY2VpdmVyXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJZVFwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwibmV0UHlJblwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwibWluU3lPdXRcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJyZWRlZW1QeVRvU3lcIixcbiAgICBvdXRwdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwibmV0U3lPdXRcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcIm5vbnBheWFibGVcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJyZWNlaXZlclwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwiWVRcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIm5ldFB5SW5cIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBjb21wb25lbnRzOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgIG5hbWU6IFwidG9rZW5PdXRcIixcbiAgICAgICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgIG5hbWU6IFwibWluVG9rZW5PdXRcIixcbiAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgIG5hbWU6IFwidG9rZW5SZWRlZW1TeVwiLFxuICAgICAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgbmFtZTogXCJidWxrXCIsXG4gICAgICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICBuYW1lOiBcInBlbmRsZVN3YXBcIixcbiAgICAgICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgY29tcG9uZW50czogW1xuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImVudW0gU3dhcFR5cGVcIixcbiAgICAgICAgICAgICAgICBuYW1lOiBcInN3YXBUeXBlXCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJ1aW50OFwiLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgICAgICBuYW1lOiBcImV4dFJvdXRlclwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImJ5dGVzXCIsXG4gICAgICAgICAgICAgICAgbmFtZTogXCJleHRDYWxsZGF0YVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwiYnl0ZXNcIixcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJib29sXCIsXG4gICAgICAgICAgICAgICAgbmFtZTogXCJuZWVkU2NhbGVcIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcImJvb2xcIixcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwic3RydWN0IFN3YXBEYXRhXCIsXG4gICAgICAgICAgICBuYW1lOiBcInN3YXBEYXRhXCIsXG4gICAgICAgICAgICB0eXBlOiBcInR1cGxlXCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInN0cnVjdCBUb2tlbk91dHB1dFwiLFxuICAgICAgICBuYW1lOiBcIm91dHB1dFwiLFxuICAgICAgICB0eXBlOiBcInR1cGxlXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJyZWRlZW1QeVRvVG9rZW5cIixcbiAgICBvdXRwdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwibmV0VG9rZW5PdXRcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcIm5vbnBheWFibGVcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJyZWNlaXZlclwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwiU1lcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIm5ldFN5SW5cIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBjb21wb25lbnRzOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgIG5hbWU6IFwidG9rZW5PdXRcIixcbiAgICAgICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgIG5hbWU6IFwibWluVG9rZW5PdXRcIixcbiAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgIG5hbWU6IFwidG9rZW5SZWRlZW1TeVwiLFxuICAgICAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgbmFtZTogXCJidWxrXCIsXG4gICAgICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICBuYW1lOiBcInBlbmRsZVN3YXBcIixcbiAgICAgICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgY29tcG9uZW50czogW1xuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImVudW0gU3dhcFR5cGVcIixcbiAgICAgICAgICAgICAgICBuYW1lOiBcInN3YXBUeXBlXCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJ1aW50OFwiLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgICAgICBuYW1lOiBcImV4dFJvdXRlclwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImJ5dGVzXCIsXG4gICAgICAgICAgICAgICAgbmFtZTogXCJleHRDYWxsZGF0YVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwiYnl0ZXNcIixcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJib29sXCIsXG4gICAgICAgICAgICAgICAgbmFtZTogXCJuZWVkU2NhbGVcIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcImJvb2xcIixcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwic3RydWN0IFN3YXBEYXRhXCIsXG4gICAgICAgICAgICBuYW1lOiBcInN3YXBEYXRhXCIsXG4gICAgICAgICAgICB0eXBlOiBcInR1cGxlXCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInN0cnVjdCBUb2tlbk91dHB1dFwiLFxuICAgICAgICBuYW1lOiBcIm91dHB1dFwiLFxuICAgICAgICB0eXBlOiBcInR1cGxlXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJyZWRlZW1TeVRvVG9rZW5cIixcbiAgICBvdXRwdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwibmV0VG9rZW5PdXRcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcIm5vbnBheWFibGVcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJyZWNlaXZlclwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwibWFya2V0XCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJuZXRMcFRvUmVtb3ZlXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJtaW5TeU91dFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwibWluUHRPdXRcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJyZW1vdmVMaXF1aWRpdHlEdWFsU3lBbmRQdFwiLFxuICAgIG91dHB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJuZXRTeU91dFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwibmV0UHRPdXRcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcIm5vbnBheWFibGVcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJyZWNlaXZlclwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwibWFya2V0XCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJuZXRMcFRvUmVtb3ZlXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgY29tcG9uZW50czogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICBuYW1lOiBcInRva2VuT3V0XCIsXG4gICAgICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICBuYW1lOiBcIm1pblRva2VuT3V0XCIsXG4gICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICBuYW1lOiBcInRva2VuUmVkZWVtU3lcIixcbiAgICAgICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgIG5hbWU6IFwiYnVsa1wiLFxuICAgICAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgbmFtZTogXCJwZW5kbGVTd2FwXCIsXG4gICAgICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGNvbXBvbmVudHM6IFtcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJlbnVtIFN3YXBUeXBlXCIsXG4gICAgICAgICAgICAgICAgbmFtZTogXCJzd2FwVHlwZVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwidWludDhcIixcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICAgICAgbmFtZTogXCJleHRSb3V0ZXJcIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJieXRlc1wiLFxuICAgICAgICAgICAgICAgIG5hbWU6IFwiZXh0Q2FsbGRhdGFcIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcImJ5dGVzXCIsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYm9vbFwiLFxuICAgICAgICAgICAgICAgIG5hbWU6IFwibmVlZFNjYWxlXCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJib29sXCIsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInN0cnVjdCBTd2FwRGF0YVwiLFxuICAgICAgICAgICAgbmFtZTogXCJzd2FwRGF0YVwiLFxuICAgICAgICAgICAgdHlwZTogXCJ0dXBsZVwiLFxuICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIGludGVybmFsVHlwZTogXCJzdHJ1Y3QgVG9rZW5PdXRwdXRcIixcbiAgICAgICAgbmFtZTogXCJvdXRwdXRcIixcbiAgICAgICAgdHlwZTogXCJ0dXBsZVwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJtaW5QdE91dFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcInJlbW92ZUxpcXVpZGl0eUR1YWxUb2tlbkFuZFB0XCIsXG4gICAgb3V0cHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIm5ldFRva2VuT3V0XCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJuZXRQdE91dFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwibm9ucGF5YWJsZVwiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcInJlY2VpdmVyXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJtYXJrZXRcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIm5ldExwVG9SZW1vdmVcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIm1pblB0T3V0XCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgY29tcG9uZW50czogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICBuYW1lOiBcImd1ZXNzTWluXCIsXG4gICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICBuYW1lOiBcImd1ZXNzTWF4XCIsXG4gICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICBuYW1lOiBcImd1ZXNzT2ZmY2hhaW5cIixcbiAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgIG5hbWU6IFwibWF4SXRlcmF0aW9uXCIsXG4gICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICBuYW1lOiBcImVwc1wiLFxuICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInN0cnVjdCBBcHByb3hQYXJhbXNcIixcbiAgICAgICAgbmFtZTogXCJndWVzc1B0T3V0XCIsXG4gICAgICAgIHR5cGU6IFwidHVwbGVcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcInJlbW92ZUxpcXVpZGl0eVNpbmdsZVB0XCIsXG4gICAgb3V0cHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIm5ldFB0T3V0XCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJuZXRTeUZlZVwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwibm9ucGF5YWJsZVwiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcInJlY2VpdmVyXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJtYXJrZXRcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIm5ldExwVG9SZW1vdmVcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIm1pblN5T3V0XCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG5hbWU6IFwicmVtb3ZlTGlxdWlkaXR5U2luZ2xlU3lcIixcbiAgICBvdXRwdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwibmV0U3lPdXRcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIm5ldFN5RmVlXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJub25wYXlhYmxlXCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwicmVjZWl2ZXJcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcIm1hcmtldFwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwibmV0THBUb1JlbW92ZVwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGNvbXBvbmVudHM6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgbmFtZTogXCJ0b2tlbk91dFwiLFxuICAgICAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgbmFtZTogXCJtaW5Ub2tlbk91dFwiLFxuICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgbmFtZTogXCJ0b2tlblJlZGVlbVN5XCIsXG4gICAgICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICBuYW1lOiBcImJ1bGtcIixcbiAgICAgICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgIG5hbWU6IFwicGVuZGxlU3dhcFwiLFxuICAgICAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBjb21wb25lbnRzOiBbXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiZW51bSBTd2FwVHlwZVwiLFxuICAgICAgICAgICAgICAgIG5hbWU6IFwic3dhcFR5cGVcIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcInVpbnQ4XCIsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgICAgIG5hbWU6IFwiZXh0Um91dGVyXCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYnl0ZXNcIixcbiAgICAgICAgICAgICAgICBuYW1lOiBcImV4dENhbGxkYXRhXCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJieXRlc1wiLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImJvb2xcIixcbiAgICAgICAgICAgICAgICBuYW1lOiBcIm5lZWRTY2FsZVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwiYm9vbFwiLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJzdHJ1Y3QgU3dhcERhdGFcIixcbiAgICAgICAgICAgIG5hbWU6IFwic3dhcERhdGFcIixcbiAgICAgICAgICAgIHR5cGU6IFwidHVwbGVcIixcbiAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwic3RydWN0IFRva2VuT3V0cHV0XCIsXG4gICAgICAgIG5hbWU6IFwib3V0cHV0XCIsXG4gICAgICAgIHR5cGU6IFwidHVwbGVcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcInJlbW92ZUxpcXVpZGl0eVNpbmdsZVRva2VuXCIsXG4gICAgb3V0cHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIm5ldFRva2VuT3V0XCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJuZXRTeUZlZVwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwibm9ucGF5YWJsZVwiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiaW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwicHRUb0FjY291bnRcIixcbiAgICAgICAgdHlwZTogXCJpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJzeVRvQWNjb3VudFwiLFxuICAgICAgICB0eXBlOiBcImludDI1NlwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImJ5dGVzXCIsXG4gICAgICAgIG5hbWU6IFwiZGF0YVwiLFxuICAgICAgICB0eXBlOiBcImJ5dGVzXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJzd2FwQ2FsbGJhY2tcIixcbiAgICBvdXRwdXRzOiBbXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwibm9ucGF5YWJsZVwiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcInJlY2VpdmVyXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJtYXJrZXRcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcImV4YWN0UHRJblwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwibWluU3lPdXRcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJzd2FwRXhhY3RQdEZvclN5XCIsXG4gICAgb3V0cHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIm5ldFN5T3V0XCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJuZXRTeUZlZVwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwibm9ucGF5YWJsZVwiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcInJlY2VpdmVyXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJtYXJrZXRcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcImV4YWN0UHRJblwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGNvbXBvbmVudHM6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgbmFtZTogXCJ0b2tlbk91dFwiLFxuICAgICAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgbmFtZTogXCJtaW5Ub2tlbk91dFwiLFxuICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgbmFtZTogXCJ0b2tlblJlZGVlbVN5XCIsXG4gICAgICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICBuYW1lOiBcImJ1bGtcIixcbiAgICAgICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgIG5hbWU6IFwicGVuZGxlU3dhcFwiLFxuICAgICAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBjb21wb25lbnRzOiBbXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiZW51bSBTd2FwVHlwZVwiLFxuICAgICAgICAgICAgICAgIG5hbWU6IFwic3dhcFR5cGVcIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcInVpbnQ4XCIsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgICAgIG5hbWU6IFwiZXh0Um91dGVyXCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYnl0ZXNcIixcbiAgICAgICAgICAgICAgICBuYW1lOiBcImV4dENhbGxkYXRhXCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJieXRlc1wiLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImJvb2xcIixcbiAgICAgICAgICAgICAgICBuYW1lOiBcIm5lZWRTY2FsZVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwiYm9vbFwiLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJzdHJ1Y3QgU3dhcERhdGFcIixcbiAgICAgICAgICAgIG5hbWU6IFwic3dhcERhdGFcIixcbiAgICAgICAgICAgIHR5cGU6IFwidHVwbGVcIixcbiAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwic3RydWN0IFRva2VuT3V0cHV0XCIsXG4gICAgICAgIG5hbWU6IFwib3V0cHV0XCIsXG4gICAgICAgIHR5cGU6IFwidHVwbGVcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcInN3YXBFeGFjdFB0Rm9yVG9rZW5cIixcbiAgICBvdXRwdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwibmV0VG9rZW5PdXRcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIm5ldFN5RmVlXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJub25wYXlhYmxlXCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwicmVjZWl2ZXJcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcIm1hcmtldFwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwiZXhhY3RQdEluXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJtaW5ZdE91dFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGNvbXBvbmVudHM6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgbmFtZTogXCJndWVzc01pblwiLFxuICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgbmFtZTogXCJndWVzc01heFwiLFxuICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgbmFtZTogXCJndWVzc09mZmNoYWluXCIsXG4gICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICBuYW1lOiBcIm1heEl0ZXJhdGlvblwiLFxuICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgbmFtZTogXCJlcHNcIixcbiAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIGludGVybmFsVHlwZTogXCJzdHJ1Y3QgQXBwcm94UGFyYW1zXCIsXG4gICAgICAgIG5hbWU6IFwiZ3Vlc3NUb3RhbFB0VG9Td2FwXCIsXG4gICAgICAgIHR5cGU6IFwidHVwbGVcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcInN3YXBFeGFjdFB0Rm9yWXRcIixcbiAgICBvdXRwdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwibmV0WXRPdXRcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIm5ldFN5RmVlXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJub25wYXlhYmxlXCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwicmVjZWl2ZXJcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcIm1hcmtldFwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwiZXhhY3RTeUluXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJtaW5QdE91dFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGNvbXBvbmVudHM6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgbmFtZTogXCJndWVzc01pblwiLFxuICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgbmFtZTogXCJndWVzc01heFwiLFxuICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgbmFtZTogXCJndWVzc09mZmNoYWluXCIsXG4gICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICBuYW1lOiBcIm1heEl0ZXJhdGlvblwiLFxuICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgbmFtZTogXCJlcHNcIixcbiAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIGludGVybmFsVHlwZTogXCJzdHJ1Y3QgQXBwcm94UGFyYW1zXCIsXG4gICAgICAgIG5hbWU6IFwiZ3Vlc3NQdE91dFwiLFxuICAgICAgICB0eXBlOiBcInR1cGxlXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJzd2FwRXhhY3RTeUZvclB0XCIsXG4gICAgb3V0cHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIm5ldFB0T3V0XCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJuZXRTeUZlZVwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwibm9ucGF5YWJsZVwiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcInJlY2VpdmVyXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJtYXJrZXRcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcImV4YWN0U3lJblwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwibWluWXRPdXRcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBjb21wb25lbnRzOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgIG5hbWU6IFwiZ3Vlc3NNaW5cIixcbiAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgIG5hbWU6IFwiZ3Vlc3NNYXhcIixcbiAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgIG5hbWU6IFwiZ3Vlc3NPZmZjaGFpblwiLFxuICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgbmFtZTogXCJtYXhJdGVyYXRpb25cIixcbiAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgIG5hbWU6IFwiZXBzXCIsXG4gICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwic3RydWN0IEFwcHJveFBhcmFtc1wiLFxuICAgICAgICBuYW1lOiBcImd1ZXNzWXRPdXRcIixcbiAgICAgICAgdHlwZTogXCJ0dXBsZVwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG5hbWU6IFwic3dhcEV4YWN0U3lGb3JZdFwiLFxuICAgIG91dHB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJuZXRZdE91dFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwibmV0U3lGZWVcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcIm5vbnBheWFibGVcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJyZWNlaXZlclwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwibWFya2V0XCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJtaW5QdE91dFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGNvbXBvbmVudHM6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgbmFtZTogXCJndWVzc01pblwiLFxuICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgbmFtZTogXCJndWVzc01heFwiLFxuICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgbmFtZTogXCJndWVzc09mZmNoYWluXCIsXG4gICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICBuYW1lOiBcIm1heEl0ZXJhdGlvblwiLFxuICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgbmFtZTogXCJlcHNcIixcbiAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIGludGVybmFsVHlwZTogXCJzdHJ1Y3QgQXBwcm94UGFyYW1zXCIsXG4gICAgICAgIG5hbWU6IFwiZ3Vlc3NQdE91dFwiLFxuICAgICAgICB0eXBlOiBcInR1cGxlXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBjb21wb25lbnRzOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgIG5hbWU6IFwidG9rZW5JblwiLFxuICAgICAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgbmFtZTogXCJuZXRUb2tlbkluXCIsXG4gICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICBuYW1lOiBcInRva2VuTWludFN5XCIsXG4gICAgICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICBuYW1lOiBcImJ1bGtcIixcbiAgICAgICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgIG5hbWU6IFwicGVuZGxlU3dhcFwiLFxuICAgICAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBjb21wb25lbnRzOiBbXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiZW51bSBTd2FwVHlwZVwiLFxuICAgICAgICAgICAgICAgIG5hbWU6IFwic3dhcFR5cGVcIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcInVpbnQ4XCIsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgICAgIG5hbWU6IFwiZXh0Um91dGVyXCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYnl0ZXNcIixcbiAgICAgICAgICAgICAgICBuYW1lOiBcImV4dENhbGxkYXRhXCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJieXRlc1wiLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImJvb2xcIixcbiAgICAgICAgICAgICAgICBuYW1lOiBcIm5lZWRTY2FsZVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwiYm9vbFwiLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJzdHJ1Y3QgU3dhcERhdGFcIixcbiAgICAgICAgICAgIG5hbWU6IFwic3dhcERhdGFcIixcbiAgICAgICAgICAgIHR5cGU6IFwidHVwbGVcIixcbiAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwic3RydWN0IFRva2VuSW5wdXRcIixcbiAgICAgICAgbmFtZTogXCJpbnB1dFwiLFxuICAgICAgICB0eXBlOiBcInR1cGxlXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJzd2FwRXhhY3RUb2tlbkZvclB0XCIsXG4gICAgb3V0cHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIm5ldFB0T3V0XCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJuZXRTeUZlZVwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwicGF5YWJsZVwiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcInJlY2VpdmVyXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJtYXJrZXRcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIm1pbll0T3V0XCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgY29tcG9uZW50czogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICBuYW1lOiBcImd1ZXNzTWluXCIsXG4gICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICBuYW1lOiBcImd1ZXNzTWF4XCIsXG4gICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICBuYW1lOiBcImd1ZXNzT2ZmY2hhaW5cIixcbiAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgIG5hbWU6IFwibWF4SXRlcmF0aW9uXCIsXG4gICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICBuYW1lOiBcImVwc1wiLFxuICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInN0cnVjdCBBcHByb3hQYXJhbXNcIixcbiAgICAgICAgbmFtZTogXCJndWVzc1l0T3V0XCIsXG4gICAgICAgIHR5cGU6IFwidHVwbGVcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGNvbXBvbmVudHM6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgbmFtZTogXCJ0b2tlbkluXCIsXG4gICAgICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICBuYW1lOiBcIm5ldFRva2VuSW5cIixcbiAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgIG5hbWU6IFwidG9rZW5NaW50U3lcIixcbiAgICAgICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgIG5hbWU6IFwiYnVsa1wiLFxuICAgICAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgbmFtZTogXCJwZW5kbGVTd2FwXCIsXG4gICAgICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGNvbXBvbmVudHM6IFtcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJlbnVtIFN3YXBUeXBlXCIsXG4gICAgICAgICAgICAgICAgbmFtZTogXCJzd2FwVHlwZVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwidWludDhcIixcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICAgICAgbmFtZTogXCJleHRSb3V0ZXJcIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJieXRlc1wiLFxuICAgICAgICAgICAgICAgIG5hbWU6IFwiZXh0Q2FsbGRhdGFcIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcImJ5dGVzXCIsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYm9vbFwiLFxuICAgICAgICAgICAgICAgIG5hbWU6IFwibmVlZFNjYWxlXCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJib29sXCIsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInN0cnVjdCBTd2FwRGF0YVwiLFxuICAgICAgICAgICAgbmFtZTogXCJzd2FwRGF0YVwiLFxuICAgICAgICAgICAgdHlwZTogXCJ0dXBsZVwiLFxuICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIGludGVybmFsVHlwZTogXCJzdHJ1Y3QgVG9rZW5JbnB1dFwiLFxuICAgICAgICBuYW1lOiBcImlucHV0XCIsXG4gICAgICAgIHR5cGU6IFwidHVwbGVcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcInN3YXBFeGFjdFRva2VuRm9yWXRcIixcbiAgICBvdXRwdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwibmV0WXRPdXRcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIm5ldFN5RmVlXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJwYXlhYmxlXCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwicmVjZWl2ZXJcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcIm1hcmtldFwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwiZXhhY3RZdEluXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJtaW5QdE91dFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGNvbXBvbmVudHM6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgbmFtZTogXCJndWVzc01pblwiLFxuICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgbmFtZTogXCJndWVzc01heFwiLFxuICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgbmFtZTogXCJndWVzc09mZmNoYWluXCIsXG4gICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICBuYW1lOiBcIm1heEl0ZXJhdGlvblwiLFxuICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgbmFtZTogXCJlcHNcIixcbiAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIGludGVybmFsVHlwZTogXCJzdHJ1Y3QgQXBwcm94UGFyYW1zXCIsXG4gICAgICAgIG5hbWU6IFwiZ3Vlc3NUb3RhbFB0U3dhcHBlZFwiLFxuICAgICAgICB0eXBlOiBcInR1cGxlXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJzd2FwRXhhY3RZdEZvclB0XCIsXG4gICAgb3V0cHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIm5ldFB0T3V0XCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJuZXRTeUZlZVwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwibm9ucGF5YWJsZVwiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcInJlY2VpdmVyXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJtYXJrZXRcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcImV4YWN0WXRJblwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwibWluU3lPdXRcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJzd2FwRXhhY3RZdEZvclN5XCIsXG4gICAgb3V0cHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIm5ldFN5T3V0XCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJuZXRTeUZlZVwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwibm9ucGF5YWJsZVwiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcInJlY2VpdmVyXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJtYXJrZXRcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIm5ldFl0SW5cIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBjb21wb25lbnRzOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgIG5hbWU6IFwidG9rZW5PdXRcIixcbiAgICAgICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgIG5hbWU6IFwibWluVG9rZW5PdXRcIixcbiAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgIG5hbWU6IFwidG9rZW5SZWRlZW1TeVwiLFxuICAgICAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgbmFtZTogXCJidWxrXCIsXG4gICAgICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICBuYW1lOiBcInBlbmRsZVN3YXBcIixcbiAgICAgICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgY29tcG9uZW50czogW1xuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImVudW0gU3dhcFR5cGVcIixcbiAgICAgICAgICAgICAgICBuYW1lOiBcInN3YXBUeXBlXCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJ1aW50OFwiLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgICAgICBuYW1lOiBcImV4dFJvdXRlclwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImJ5dGVzXCIsXG4gICAgICAgICAgICAgICAgbmFtZTogXCJleHRDYWxsZGF0YVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwiYnl0ZXNcIixcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJib29sXCIsXG4gICAgICAgICAgICAgICAgbmFtZTogXCJuZWVkU2NhbGVcIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcImJvb2xcIixcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwic3RydWN0IFN3YXBEYXRhXCIsXG4gICAgICAgICAgICBuYW1lOiBcInN3YXBEYXRhXCIsXG4gICAgICAgICAgICB0eXBlOiBcInR1cGxlXCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInN0cnVjdCBUb2tlbk91dHB1dFwiLFxuICAgICAgICBuYW1lOiBcIm91dHB1dFwiLFxuICAgICAgICB0eXBlOiBcInR1cGxlXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJzd2FwRXhhY3RZdEZvclRva2VuXCIsXG4gICAgb3V0cHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIm5ldFRva2VuT3V0XCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJuZXRTeUZlZVwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwibm9ucGF5YWJsZVwiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcInJlY2VpdmVyXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJtYXJrZXRcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcImV4YWN0U3lPdXRcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIm1heFB0SW5cIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBjb21wb25lbnRzOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgIG5hbWU6IFwiZ3Vlc3NNaW5cIixcbiAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgIG5hbWU6IFwiZ3Vlc3NNYXhcIixcbiAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgIG5hbWU6IFwiZ3Vlc3NPZmZjaGFpblwiLFxuICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgbmFtZTogXCJtYXhJdGVyYXRpb25cIixcbiAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgIG5hbWU6IFwiZXBzXCIsXG4gICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwic3RydWN0IEFwcHJveFBhcmFtc1wiLFxuICAgICAgICBuYW1lOiBcImd1ZXNzUHRJblwiLFxuICAgICAgICB0eXBlOiBcInR1cGxlXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJzd2FwUHRGb3JFeGFjdFN5XCIsXG4gICAgb3V0cHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIm5ldFB0SW5cIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIm5ldFN5RmVlXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJub25wYXlhYmxlXCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwicmVjZWl2ZXJcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcIm1hcmtldFwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwiZXhhY3RQdE91dFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwibWF4U3lJblwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcInN3YXBTeUZvckV4YWN0UHRcIixcbiAgICBvdXRwdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwibmV0U3lJblwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwibmV0U3lGZWVcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcIm5vbnBheWFibGVcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJyZWNlaXZlclwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwibWFya2V0XCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJleGFjdFl0T3V0XCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJtYXhTeUluXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG5hbWU6IFwic3dhcFN5Rm9yRXhhY3RZdFwiLFxuICAgIG91dHB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJuZXRTeUluXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJuZXRTeUZlZVwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwibm9ucGF5YWJsZVwiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcInJlY2VpdmVyXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJtYXJrZXRcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcImV4YWN0U3lPdXRcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIm1heFl0SW5cIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBjb21wb25lbnRzOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgIG5hbWU6IFwiZ3Vlc3NNaW5cIixcbiAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgIG5hbWU6IFwiZ3Vlc3NNYXhcIixcbiAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgIG5hbWU6IFwiZ3Vlc3NPZmZjaGFpblwiLFxuICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgbmFtZTogXCJtYXhJdGVyYXRpb25cIixcbiAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgIG5hbWU6IFwiZXBzXCIsXG4gICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwic3RydWN0IEFwcHJveFBhcmFtc1wiLFxuICAgICAgICBuYW1lOiBcImd1ZXNzWXRJblwiLFxuICAgICAgICB0eXBlOiBcInR1cGxlXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJzd2FwWXRGb3JFeGFjdFN5XCIsXG4gICAgb3V0cHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIm5ldFl0SW5cIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIm5ldFN5RmVlXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJub25wYXlhYmxlXCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuXSBhcyBjb25zdDtcblxuZXhwb3J0IGNsYXNzIFBlbmRsZVJvdXRlcl9fZmFjdG9yeSB7XG4gIHN0YXRpYyByZWFkb25seSBhYmkgPSBfYWJpO1xuICBzdGF0aWMgY3JlYXRlSW50ZXJmYWNlKCk6IFBlbmRsZVJvdXRlckludGVyZmFjZSB7XG4gICAgcmV0dXJuIG5ld0ludGVyZmFjZShfYWJpKSBhcyBQZW5kbGVSb3V0ZXJJbnRlcmZhY2U7XG4gIH1cbiAgc3RhdGljIGNvbm5lY3QoXG4gICAgYWRkcmVzczogc3RyaW5nLFxuICAgIHNpZ25lck9yUHJvdmlkZXI6IFNpZ25lciB8IFByb3ZpZGVyLFxuICApOiBQZW5kbGVSb3V0ZXIge1xuICAgIHJldHVybiBuZXdDb250cmFjdChhZGRyZXNzLCBfYWJpLCBzaWduZXJPclByb3ZpZGVyKSBhcyBQZW5kbGVSb3V0ZXI7XG4gIH1cbn1cbiIsICIvKiBBdXRvZ2VuZXJhdGVkIGZpbGUuIERvIG5vdCBlZGl0IG1hbnVhbGx5LiAqL1xuLyogdHNsaW50OmRpc2FibGUgKi9cbi8qIGVzbGludC1kaXNhYmxlICovXG4vLyBAdHMtbm9jaGVja1xuaW1wb3J0IHsgbmV3Q29udHJhY3QsIG5ld0ludGVyZmFjZSB9IGZyb20gXCJAc2VudGlvL3Nkay9ldGhcIjtcblxuaW1wb3J0IHsgQ29udHJhY3QsIFNpZ25lciwgUHJvdmlkZXIsIEludGVyZmFjZSB9IGZyb20gXCJldGhlcnNcIjtcbmltcG9ydCB0eXBlIHtcbiAgUGVuZGxlUm91dGVyU3RhdGljLFxuICBQZW5kbGVSb3V0ZXJTdGF0aWNJbnRlcmZhY2UsXG59IGZyb20gXCIuLi9QZW5kbGVSb3V0ZXJTdGF0aWMuanNcIjtcblxuY29uc3QgX2FiaSA9IFtcbiAge1xuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiY29udHJhY3QgSVBZaWVsZENvbnRyYWN0RmFjdG9yeVwiLFxuICAgICAgICBuYW1lOiBcIl95aWVsZENvbnRyYWN0RmFjdG9yeVwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJjb250cmFjdCBJUE1hcmtldEZhY3RvcnlcIixcbiAgICAgICAgbmFtZTogXCJfbWFya2V0RmFjdG9yeVwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJjb250cmFjdCBJUFZvdGluZ0VzY3Jvd01haW5jaGFpblwiLFxuICAgICAgICBuYW1lOiBcIl92ZVBFTkRMRVwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJjb250cmFjdCBJUEJ1bGtTZWxsZXJGYWN0b3J5XCIsXG4gICAgICAgIG5hbWU6IFwiX2J1bGtGYWN0b3J5XCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJub25wYXlhYmxlXCIsXG4gICAgdHlwZTogXCJjb25zdHJ1Y3RvclwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwiY3VycmVudEFtb3VudFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwicmVxdWlyZWRBbW91bnRcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJCdWxrSW5zdWZmaWNpZW50U3lGb3JUcmFkZVwiLFxuICAgIHR5cGU6IFwiZXJyb3JcIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcImN1cnJlbnRBbW91bnRcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcInJlcXVpcmVkQW1vdW50XCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG5hbWU6IFwiQnVsa0luc3VmZmljaWVudFRva2VuRm9yVHJhZGVcIixcbiAgICB0eXBlOiBcImVycm9yXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJleHBpcnlcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJFeHBpcnlJblRoZVBhc3RcIixcbiAgICB0eXBlOiBcImVycm9yXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJ3VGltZVwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcIkludmFsaWRXVGltZVwiLFxuICAgIHR5cGU6IFwiZXJyb3JcIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIm5ldFN5RGVzaXJlZFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwibmV0U3lVc2VkXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG5hbWU6IFwiUm91dGVyTm90QWxsU3lVc2VkXCIsXG4gICAgdHlwZTogXCJlcnJvclwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXSxcbiAgICBuYW1lOiBcIlZFRXhjZWVkZWRNYXhMb2NrVGltZVwiLFxuICAgIHR5cGU6IFwiZXJyb3JcIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW10sXG4gICAgbmFtZTogXCJWRUluc3VmZmljaWVudExvY2tUaW1lXCIsXG4gICAgdHlwZTogXCJlcnJvclwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXSxcbiAgICBuYW1lOiBcIlZFTm90QWxsb3dlZFJlZHVjZUV4cGlyeVwiLFxuICAgIHR5cGU6IFwiZXJyb3JcIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW10sXG4gICAgbmFtZTogXCJWRVplcm9BbW91bnRMb2NrZWRcIixcbiAgICB0eXBlOiBcImVycm9yXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtdLFxuICAgIG5hbWU6IFwiWUNFeHBpcmVkXCIsXG4gICAgdHlwZTogXCJlcnJvclwiLFxuICB9LFxuICB7XG4gICAgYW5vbnltb3VzOiBmYWxzZSxcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogZmFsc2UsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwicHJldmlvdXNBZG1pblwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IGZhbHNlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcIm5ld0FkbWluXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG5hbWU6IFwiQWRtaW5DaGFuZ2VkXCIsXG4gICAgdHlwZTogXCJldmVudFwiLFxuICB9LFxuICB7XG4gICAgYW5vbnltb3VzOiBmYWxzZSxcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogdHJ1ZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJiZWFjb25cIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJCZWFjb25VcGdyYWRlZFwiLFxuICAgIHR5cGU6IFwiZXZlbnRcIixcbiAgfSxcbiAge1xuICAgIGFub255bW91czogZmFsc2UsXG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IGZhbHNlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDhcIixcbiAgICAgICAgbmFtZTogXCJ2ZXJzaW9uXCIsXG4gICAgICAgIHR5cGU6IFwidWludDhcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcIkluaXRpYWxpemVkXCIsXG4gICAgdHlwZTogXCJldmVudFwiLFxuICB9LFxuICB7XG4gICAgYW5vbnltb3VzOiBmYWxzZSxcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogdHJ1ZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJwcmV2aW91c093bmVyXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogdHJ1ZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJuZXdPd25lclwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcIk93bmVyc2hpcFRyYW5zZmVycmVkXCIsXG4gICAgdHlwZTogXCJldmVudFwiLFxuICB9LFxuICB7XG4gICAgYW5vbnltb3VzOiBmYWxzZSxcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogdHJ1ZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJpbXBsZW1lbnRhdGlvblwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcIlVwZ3JhZGVkXCIsXG4gICAgdHlwZTogXCJldmVudFwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXSxcbiAgICBuYW1lOiBcIk1BWF9MT0NLX1RJTUVcIixcbiAgICBvdXRwdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MTI4XCIsXG4gICAgICAgIG5hbWU6IFwiXCIsXG4gICAgICAgIHR5cGU6IFwidWludDEyOFwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJ2aWV3XCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXSxcbiAgICBuYW1lOiBcIk1JTl9MT0NLX1RJTUVcIixcbiAgICBvdXRwdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MTI4XCIsXG4gICAgICAgIG5hbWU6IFwiXCIsXG4gICAgICAgIHR5cGU6IFwidWludDEyOFwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJ2aWV3XCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwibWFya2V0XCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJuZXRTeURlc2lyZWRcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIm5ldFB0RGVzaXJlZFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcImFkZExpcXVpZGl0eUR1YWxTeUFuZFB0U3RhdGljXCIsXG4gICAgb3V0cHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIm5ldExwT3V0XCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJuZXRTeVVzZWRcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIm5ldFB0VXNlZFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwidmlld1wiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcIm1hcmtldFwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwidG9rZW5JblwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwibmV0VG9rZW5EZXNpcmVkXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJidWxrXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJuZXRQdERlc2lyZWRcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJhZGRMaXF1aWRpdHlEdWFsVG9rZW5BbmRQdFN0YXRpY1wiLFxuICAgIG91dHB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJuZXRMcE91dFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwibmV0VG9rZW5Vc2VkXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJuZXRQdFVzZWRcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcInZpZXdcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJtYXJrZXRcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcImJhc2VUb2tlblwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwibmV0QmFzZVRva2VuSW5cIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcImJ1bGtcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJhZGRMaXF1aWRpdHlTaW5nbGVCYXNlVG9rZW5TdGF0aWNcIixcbiAgICBvdXRwdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwibmV0THBPdXRcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIm5ldFB0RnJvbVN3YXBcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIm5ldFN5RmVlXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJwcmljZUltcGFjdFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwibm9ucGF5YWJsZVwiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcIm1hcmtldFwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwibmV0UHRJblwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcImFkZExpcXVpZGl0eVNpbmdsZVB0U3RhdGljXCIsXG4gICAgb3V0cHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIm5ldExwT3V0XCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJuZXRQdFRvU3dhcFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwibmV0U3lGZWVcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcInByaWNlSW1wYWN0XCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJub25wYXlhYmxlXCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwibWFya2V0XCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJuZXRTeUluXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG5hbWU6IFwiYWRkTGlxdWlkaXR5U2luZ2xlU3lTdGF0aWNcIixcbiAgICBvdXRwdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwibmV0THBPdXRcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIm5ldFB0RnJvbVN3YXBcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIm5ldFN5RmVlXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJwcmljZUltcGFjdFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwibm9ucGF5YWJsZVwiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcIm1hcmtldFwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJuZXRQdE91dFwiLFxuICAgICAgICB0eXBlOiBcImludDI1NlwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG5hbWU6IFwiY2FsY1ByaWNlSW1wYWN0XCIsXG4gICAgb3V0cHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcInByaWNlSW1wYWN0XCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJub25wYXlhYmxlXCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXSxcbiAgICBuYW1lOiBcImNsYWltT3duZXJzaGlwXCIsXG4gICAgb3V0cHV0czogW10sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcIm5vbnBheWFibGVcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImNvbnRyYWN0IElTdGFuZGFyZGl6ZWRZaWVsZFwiLFxuICAgICAgICBuYW1lOiBcIlNZXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJ0b2tlbkluXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJidWxrXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJuZXRTeU91dFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcImdldEFtb3VudFRva2VuVG9NaW50U3lcIixcbiAgICBvdXRwdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwibmV0VG9rZW5JblwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwidmlld1wiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcInRva2VuXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJTWVwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcImdldEJ1bGtTZWxsZXJJbmZvXCIsXG4gICAgb3V0cHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcImJ1bGtcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcInRvdGFsVG9rZW5cIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcInRvdGFsU3lcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcInZpZXdcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJ0b2tlblwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwiU1lcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIm5ldFRva2VuSW5cIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIm5ldFN5SW5cIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJnZXRCdWxrU2VsbGVySW5mb1wiLFxuICAgIG91dHB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJidWxrXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJ0b3RhbFRva2VuXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJ0b3RhbFN5XCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJ2aWV3XCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXSxcbiAgICBuYW1lOiBcImdldERlZmF1bHRBcHByb3hQYXJhbXNcIixcbiAgICBvdXRwdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGNvbXBvbmVudHM6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgbmFtZTogXCJndWVzc01pblwiLFxuICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgbmFtZTogXCJndWVzc01heFwiLFxuICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgbmFtZTogXCJndWVzc09mZmNoYWluXCIsXG4gICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICBuYW1lOiBcIm1heEl0ZXJhdGlvblwiLFxuICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgbmFtZTogXCJlcHNcIixcbiAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIGludGVybmFsVHlwZTogXCJzdHJ1Y3QgQXBwcm94UGFyYW1zXCIsXG4gICAgICAgIG5hbWU6IFwiXCIsXG4gICAgICAgIHR5cGU6IFwidHVwbGVcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwicHVyZVwiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcIm1hcmtldFwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcImdldEV4Y2hhbmdlUmF0ZVwiLFxuICAgIG91dHB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcIm5vbnBheWFibGVcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJtYXJrZXRcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJnZXRNYXJrZXRJbmZvXCIsXG4gICAgb3V0cHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcInB0XCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJzeVwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGNvbXBvbmVudHM6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiaW50MjU2XCIsXG4gICAgICAgICAgICBuYW1lOiBcInRvdGFsUHRcIixcbiAgICAgICAgICAgIHR5cGU6IFwiaW50MjU2XCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiaW50MjU2XCIsXG4gICAgICAgICAgICBuYW1lOiBcInRvdGFsU3lcIixcbiAgICAgICAgICAgIHR5cGU6IFwiaW50MjU2XCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiaW50MjU2XCIsXG4gICAgICAgICAgICBuYW1lOiBcInRvdGFsTHBcIixcbiAgICAgICAgICAgIHR5cGU6IFwiaW50MjU2XCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgbmFtZTogXCJ0cmVhc3VyeVwiLFxuICAgICAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiaW50MjU2XCIsXG4gICAgICAgICAgICBuYW1lOiBcInNjYWxhclJvb3RcIixcbiAgICAgICAgICAgIHR5cGU6IFwiaW50MjU2XCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgbmFtZTogXCJleHBpcnlcIixcbiAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgIG5hbWU6IFwibG5GZWVSYXRlUm9vdFwiLFxuICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgbmFtZTogXCJyZXNlcnZlRmVlUGVyY2VudFwiLFxuICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgbmFtZTogXCJsYXN0TG5JbXBsaWVkUmF0ZVwiLFxuICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInN0cnVjdCBNYXJrZXRTdGF0ZVwiLFxuICAgICAgICBuYW1lOiBcInN0YXRlXCIsXG4gICAgICAgIHR5cGU6IFwidHVwbGVcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJpbXBsaWVkWWllbGRcIixcbiAgICAgICAgdHlwZTogXCJpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwiZXhjaGFuZ2VSYXRlXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJub25wYXlhYmxlXCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwicHlcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJnZXRQWVwiLFxuICAgIG91dHB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJwdFwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwieXRcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcInZpZXdcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJweVwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcImdldFBZSW5mb1wiLFxuICAgIG91dHB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJleGNoYW5nZVJhdGVcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcInRvdGFsU3VwcGx5XCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgY29tcG9uZW50czogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICBuYW1lOiBcInJld2FyZFRva2VuXCIsXG4gICAgICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICBuYW1lOiBcImluZGV4XCIsXG4gICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwic3RydWN0IFJvdXRlclN0YXRpYy5SZXdhcmRJbmRleFtdXCIsXG4gICAgICAgIG5hbWU6IFwicmV3YXJkSW5kZXhlc1wiLFxuICAgICAgICB0eXBlOiBcInR1cGxlW11cIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwibm9ucGF5YWJsZVwiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcInRva2VuXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG5hbWU6IFwiZ2V0UGVuZGxlVG9rZW5UeXBlXCIsXG4gICAgb3V0cHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYm9vbFwiLFxuICAgICAgICBuYW1lOiBcImlzUFRcIixcbiAgICAgICAgdHlwZTogXCJib29sXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYm9vbFwiLFxuICAgICAgICBuYW1lOiBcImlzWVRcIixcbiAgICAgICAgdHlwZTogXCJib29sXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYm9vbFwiLFxuICAgICAgICBuYW1lOiBcImlzTWFya2V0XCIsXG4gICAgICAgIHR5cGU6IFwiYm9vbFwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJ2aWV3XCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwibWFya2V0XCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG5hbWU6IFwiZ2V0UHRJbXBsaWVkWWllbGRcIixcbiAgICBvdXRwdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJcIixcbiAgICAgICAgdHlwZTogXCJpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwidmlld1wiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcIm1hcmtldFwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcImdldFN5TWFya2V0XCIsXG4gICAgb3V0cHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiY29udHJhY3QgSVN0YW5kYXJkaXplZFlpZWxkXCIsXG4gICAgICAgIG5hbWU6IFwiXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJ2aWV3XCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwicHlUb2tlblwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwibWFya2V0XCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG5hbWU6IFwiZ2V0VG9rZW5zSW5PdXRcIixcbiAgICBvdXRwdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzW11cIixcbiAgICAgICAgbmFtZTogXCJ0b2tlbnNJblwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NbXVwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NbXVwiLFxuICAgICAgICBuYW1lOiBcInRva2Vuc091dFwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NbXVwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJ2aWV3XCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwibWFya2V0XCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIm5ldFB0T3V0XCIsXG4gICAgICAgIHR5cGU6IFwiaW50MjU2XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJnZXRUcmFkZUV4Y2hhbmdlUmF0ZUluY2x1ZGVGZWVcIixcbiAgICBvdXRwdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwiXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJub25wYXlhYmxlXCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwibWFya2V0XCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJ1c2VyXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG5hbWU6IFwiZ2V0VXNlck1hcmtldEluZm9cIixcbiAgICBvdXRwdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGNvbXBvbmVudHM6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgbmFtZTogXCJtYXJrZXRcIixcbiAgICAgICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgIG5hbWU6IFwibHBCYWxhbmNlXCIsXG4gICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGNvbXBvbmVudHM6IFtcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICAgICAgbmFtZTogXCJ0b2tlblwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgICBuYW1lOiBcImFtb3VudFwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJzdHJ1Y3QgUm91dGVyU3RhdGljLlRva2VuQW1vdW50XCIsXG4gICAgICAgICAgICBuYW1lOiBcInB0QmFsYW5jZVwiLFxuICAgICAgICAgICAgdHlwZTogXCJ0dXBsZVwiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgY29tcG9uZW50czogW1xuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgICAgICBuYW1lOiBcInRva2VuXCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICAgIG5hbWU6IFwiYW1vdW50XCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInN0cnVjdCBSb3V0ZXJTdGF0aWMuVG9rZW5BbW91bnRcIixcbiAgICAgICAgICAgIG5hbWU6IFwic3lCYWxhbmNlXCIsXG4gICAgICAgICAgICB0eXBlOiBcInR1cGxlXCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBjb21wb25lbnRzOiBbXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiZW51bSBJU3RhbmRhcmRpemVkWWllbGQuQXNzZXRUeXBlXCIsXG4gICAgICAgICAgICAgICAgbmFtZTogXCJhc3NldFR5cGVcIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcInVpbnQ4XCIsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgICAgIG5hbWU6IFwiYXNzZXRBZGRyZXNzXCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICAgIG5hbWU6IFwiYW1vdW50XCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInN0cnVjdCBSb3V0ZXJTdGF0aWMuQXNzZXRBbW91bnRcIixcbiAgICAgICAgICAgIG5hbWU6IFwiYXNzZXRCYWxhbmNlXCIsXG4gICAgICAgICAgICB0eXBlOiBcInR1cGxlXCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInN0cnVjdCBSb3V0ZXJTdGF0aWMuVXNlck1hcmtldEluZm9cIixcbiAgICAgICAgbmFtZTogXCJ1c2VyTWFya2V0SW5mb1wiLFxuICAgICAgICB0eXBlOiBcInR1cGxlXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcInZpZXdcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJ1c2VyXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NbXVwiLFxuICAgICAgICBuYW1lOiBcIm1hcmtldHNcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzW11cIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcImdldFVzZXJNYXJrZXRQb3NpdGlvbnNcIixcbiAgICBvdXRwdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGNvbXBvbmVudHM6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgbmFtZTogXCJtYXJrZXRcIixcbiAgICAgICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgIG5hbWU6IFwibHBCYWxhbmNlXCIsXG4gICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGNvbXBvbmVudHM6IFtcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICAgICAgbmFtZTogXCJ0b2tlblwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgICBuYW1lOiBcImFtb3VudFwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJzdHJ1Y3QgUm91dGVyU3RhdGljLlRva2VuQW1vdW50XCIsXG4gICAgICAgICAgICBuYW1lOiBcInB0QmFsYW5jZVwiLFxuICAgICAgICAgICAgdHlwZTogXCJ0dXBsZVwiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgY29tcG9uZW50czogW1xuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgICAgICBuYW1lOiBcInRva2VuXCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICAgIG5hbWU6IFwiYW1vdW50XCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInN0cnVjdCBSb3V0ZXJTdGF0aWMuVG9rZW5BbW91bnRcIixcbiAgICAgICAgICAgIG5hbWU6IFwic3lCYWxhbmNlXCIsXG4gICAgICAgICAgICB0eXBlOiBcInR1cGxlXCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBjb21wb25lbnRzOiBbXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiZW51bSBJU3RhbmRhcmRpemVkWWllbGQuQXNzZXRUeXBlXCIsXG4gICAgICAgICAgICAgICAgbmFtZTogXCJhc3NldFR5cGVcIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcInVpbnQ4XCIsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgICAgIG5hbWU6IFwiYXNzZXRBZGRyZXNzXCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICAgIG5hbWU6IFwiYW1vdW50XCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInN0cnVjdCBSb3V0ZXJTdGF0aWMuQXNzZXRBbW91bnRcIixcbiAgICAgICAgICAgIG5hbWU6IFwiYXNzZXRCYWxhbmNlXCIsXG4gICAgICAgICAgICB0eXBlOiBcInR1cGxlXCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInN0cnVjdCBSb3V0ZXJTdGF0aWMuVXNlck1hcmtldEluZm9bXVwiLFxuICAgICAgICBuYW1lOiBcInVzZXJNYXJrZXRQb3NpdGlvbnNcIixcbiAgICAgICAgdHlwZTogXCJ0dXBsZVtdXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcInZpZXdcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJweVwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwidXNlclwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcImdldFVzZXJQWUluZm9cIixcbiAgICBvdXRwdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGNvbXBvbmVudHM6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgbmFtZTogXCJ5dFwiLFxuICAgICAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgbmFtZTogXCJwdFwiLFxuICAgICAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgbmFtZTogXCJ5dEJhbGFuY2VcIixcbiAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgIG5hbWU6IFwicHRCYWxhbmNlXCIsXG4gICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGNvbXBvbmVudHM6IFtcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICAgICAgbmFtZTogXCJ0b2tlblwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgICBuYW1lOiBcImFtb3VudFwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJzdHJ1Y3QgUm91dGVyU3RhdGljLlRva2VuQW1vdW50XCIsXG4gICAgICAgICAgICBuYW1lOiBcInVuY2xhaW1lZEludGVyZXN0XCIsXG4gICAgICAgICAgICB0eXBlOiBcInR1cGxlXCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBjb21wb25lbnRzOiBbXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgICAgIG5hbWU6IFwidG9rZW5cIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgICAgbmFtZTogXCJhbW91bnRcIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwic3RydWN0IFJvdXRlclN0YXRpYy5Ub2tlbkFtb3VudFtdXCIsXG4gICAgICAgICAgICBuYW1lOiBcInVuY2xhaW1lZFJld2FyZHNcIixcbiAgICAgICAgICAgIHR5cGU6IFwidHVwbGVbXVwiLFxuICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIGludGVybmFsVHlwZTogXCJzdHJ1Y3QgUm91dGVyU3RhdGljLlVzZXJQWUluZm9cIixcbiAgICAgICAgbmFtZTogXCJ1c2VyUFlJbmZvXCIsXG4gICAgICAgIHR5cGU6IFwidHVwbGVcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwidmlld1wiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcInVzZXJcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1tdXCIsXG4gICAgICAgIG5hbWU6IFwicHlzXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1tdXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJnZXRVc2VyUFlQb3NpdGlvbnNCeVBZc1wiLFxuICAgIG91dHB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgY29tcG9uZW50czogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICBuYW1lOiBcInl0XCIsXG4gICAgICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICBuYW1lOiBcInB0XCIsXG4gICAgICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICBuYW1lOiBcInl0QmFsYW5jZVwiLFxuICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgbmFtZTogXCJwdEJhbGFuY2VcIixcbiAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgY29tcG9uZW50czogW1xuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgICAgICBuYW1lOiBcInRva2VuXCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICAgIG5hbWU6IFwiYW1vdW50XCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInN0cnVjdCBSb3V0ZXJTdGF0aWMuVG9rZW5BbW91bnRcIixcbiAgICAgICAgICAgIG5hbWU6IFwidW5jbGFpbWVkSW50ZXJlc3RcIixcbiAgICAgICAgICAgIHR5cGU6IFwidHVwbGVcIixcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGNvbXBvbmVudHM6IFtcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICAgICAgbmFtZTogXCJ0b2tlblwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgICBuYW1lOiBcImFtb3VudFwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJzdHJ1Y3QgUm91dGVyU3RhdGljLlRva2VuQW1vdW50W11cIixcbiAgICAgICAgICAgIG5hbWU6IFwidW5jbGFpbWVkUmV3YXJkc1wiLFxuICAgICAgICAgICAgdHlwZTogXCJ0dXBsZVtdXCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInN0cnVjdCBSb3V0ZXJTdGF0aWMuVXNlclBZSW5mb1tdXCIsXG4gICAgICAgIG5hbWU6IFwidXNlclBZUG9zaXRpb25zXCIsXG4gICAgICAgIHR5cGU6IFwidHVwbGVbXVwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJ2aWV3XCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwic3lcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcInVzZXJcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJnZXRVc2VyU1lJbmZvXCIsXG4gICAgb3V0cHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcImJhbGFuY2VcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBjb21wb25lbnRzOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgIG5hbWU6IFwidG9rZW5cIixcbiAgICAgICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgIG5hbWU6IFwiYW1vdW50XCIsXG4gICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwic3RydWN0IFJvdXRlclN0YXRpYy5Ub2tlbkFtb3VudFtdXCIsXG4gICAgICAgIG5hbWU6IFwicmV3YXJkc1wiLFxuICAgICAgICB0eXBlOiBcInR1cGxlW11cIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwidmlld1wiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBjb21wb25lbnRzOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgIG5hbWU6IFwieXRcIixcbiAgICAgICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgIG5hbWU6IFwicHRcIixcbiAgICAgICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgIG5hbWU6IFwieXRCYWxhbmNlXCIsXG4gICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICBuYW1lOiBcInB0QmFsYW5jZVwiLFxuICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBjb21wb25lbnRzOiBbXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgICAgIG5hbWU6IFwidG9rZW5cIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgICAgbmFtZTogXCJhbW91bnRcIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwic3RydWN0IFJvdXRlclN0YXRpYy5Ub2tlbkFtb3VudFwiLFxuICAgICAgICAgICAgbmFtZTogXCJ1bmNsYWltZWRJbnRlcmVzdFwiLFxuICAgICAgICAgICAgdHlwZTogXCJ0dXBsZVwiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgY29tcG9uZW50czogW1xuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgICAgICBuYW1lOiBcInRva2VuXCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICAgIG5hbWU6IFwiYW1vdW50XCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInN0cnVjdCBSb3V0ZXJTdGF0aWMuVG9rZW5BbW91bnRbXVwiLFxuICAgICAgICAgICAgbmFtZTogXCJ1bmNsYWltZWRSZXdhcmRzXCIsXG4gICAgICAgICAgICB0eXBlOiBcInR1cGxlW11cIixcbiAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwic3RydWN0IFJvdXRlclN0YXRpYy5Vc2VyUFlJbmZvXCIsXG4gICAgICAgIG5hbWU6IFwidXNlclBZSW5mb1wiLFxuICAgICAgICB0eXBlOiBcInR1cGxlXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJoYXNQWVBvc2l0aW9uXCIsXG4gICAgb3V0cHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYm9vbFwiLFxuICAgICAgICBuYW1lOiBcImhhc1Bvc2l0aW9uXCIsXG4gICAgICAgIHR5cGU6IFwiYm9vbFwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJwdXJlXCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwidXNlclwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MTI4XCIsXG4gICAgICAgIG5hbWU6IFwiYWRkaXRpb25hbEFtb3VudFRvTG9ja1wiLFxuICAgICAgICB0eXBlOiBcInVpbnQxMjhcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MTI4XCIsXG4gICAgICAgIG5hbWU6IFwibmV3RXhwaXJ5XCIsXG4gICAgICAgIHR5cGU6IFwidWludDEyOFwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG5hbWU6IFwiaW5jcmVhc2VMb2NrUG9zaXRpb25TdGF0aWNcIixcbiAgICBvdXRwdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MTI4XCIsXG4gICAgICAgIG5hbWU6IFwibmV3VmVCYWxhbmNlXCIsXG4gICAgICAgIHR5cGU6IFwidWludDEyOFwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJ2aWV3XCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXSxcbiAgICBuYW1lOiBcImluaXRpYWxpemVcIixcbiAgICBvdXRwdXRzOiBbXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwibm9ucGF5YWJsZVwiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcIllUXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJiYXNlVG9rZW5cIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcImFtb3VudEJhc2VUb2tlblwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwiYnVsa1wiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcIm1pbnRQWUZyb21CYXNlU3RhdGljXCIsXG4gICAgb3V0cHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcImFtb3VudFBZXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJub25wYXlhYmxlXCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwiWVRcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcImFtb3VudFN5VG9NaW50XCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG5hbWU6IFwibWludFBZRnJvbVN5U3RhdGljXCIsXG4gICAgb3V0cHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcImFtb3VudFBZXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJub25wYXlhYmxlXCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXSxcbiAgICBuYW1lOiBcIm93bmVyXCIsXG4gICAgb3V0cHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcIlwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwidmlld1wiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW10sXG4gICAgbmFtZTogXCJwZW5kaW5nT3duZXJcIixcbiAgICBvdXRwdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwiXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJ2aWV3XCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJjb250cmFjdCBJU3RhbmRhcmRpemVkWWllbGRcIixcbiAgICAgICAgbmFtZTogXCJTWVwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwiYmFzZVRva2VuXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJhbW91bnRUb2tlblwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwiYnVsa1wiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcInByZXZpZXdEZXBvc2l0U3RhdGljXCIsXG4gICAgb3V0cHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcImFtb3VudFN5XCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJ2aWV3XCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJjb250cmFjdCBJU3RhbmRhcmRpemVkWWllbGRcIixcbiAgICAgICAgbmFtZTogXCJTWVwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwiYmFzZVRva2VuXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJhbW91bnRTeVwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwiYnVsa1wiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcInByZXZpZXdSZWRlZW1TdGF0aWNcIixcbiAgICBvdXRwdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwiYW1vdW50QmFzZVRva2VuXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJ2aWV3XCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXSxcbiAgICBuYW1lOiBcInByb3hpYWJsZVVVSURcIixcbiAgICBvdXRwdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJieXRlczMyXCIsXG4gICAgICAgIG5hbWU6IFwiXCIsXG4gICAgICAgIHR5cGU6IFwiYnl0ZXMzMlwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJ2aWV3XCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwibWFya2V0XCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG5hbWU6IFwicHlJbmRleFwiLFxuICAgIG91dHB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcIlBZSW5kZXhcIixcbiAgICAgICAgbmFtZTogXCJpbmRleFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwibm9ucGF5YWJsZVwiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcIllUXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJhbW91bnRQWVRvUmVkZWVtXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJiYXNlVG9rZW5cIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcImJ1bGtcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJyZWRlZW1QWVRvQmFzZVN0YXRpY1wiLFxuICAgIG91dHB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJhbW91bnRCYXNlVG9rZW5cIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcIm5vbnBheWFibGVcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJZVFwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwiYW1vdW50UFlUb1JlZGVlbVwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcInJlZGVlbVBZVG9TeVN0YXRpY1wiLFxuICAgIG91dHB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJhbW91bnRQWVwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwibm9ucGF5YWJsZVwiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcIm1hcmtldFwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwibmV0THBUb1JlbW92ZVwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcInJlbW92ZUxpcXVpZGl0eUR1YWxTeUFuZFB0U3RhdGljXCIsXG4gICAgb3V0cHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIm5ldFN5T3V0XCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJuZXRQdE91dFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwidmlld1wiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcIm1hcmtldFwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwibmV0THBUb1JlbW92ZVwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwidG9rZW5PdXRcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcImJ1bGtcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJyZW1vdmVMaXF1aWRpdHlEdWFsVG9rZW5BbmRQdFN0YXRpY1wiLFxuICAgIG91dHB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJuZXRUb2tlbk91dFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwibmV0UHRPdXRcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcInZpZXdcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJtYXJrZXRcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIm5ldExwVG9SZW1vdmVcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcImJhc2VUb2tlblwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwiYnVsa1wiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcInJlbW92ZUxpcXVpZGl0eVNpbmdsZUJhc2VUb2tlblN0YXRpY1wiLFxuICAgIG91dHB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJuZXRCYXNlVG9rZW5PdXRcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIm5ldFN5RmVlXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJwcmljZUltcGFjdFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwibm9ucGF5YWJsZVwiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcIm1hcmtldFwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwibmV0THBUb1JlbW92ZVwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcInJlbW92ZUxpcXVpZGl0eVNpbmdsZVB0U3RhdGljXCIsXG4gICAgb3V0cHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIm5ldFB0T3V0XCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJuZXRQdEZyb21Td2FwXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJuZXRTeUZlZVwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwicHJpY2VJbXBhY3RcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcIm5vbnBheWFibGVcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJtYXJrZXRcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIm5ldExwVG9SZW1vdmVcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJyZW1vdmVMaXF1aWRpdHlTaW5nbGVTeVN0YXRpY1wiLFxuICAgIG91dHB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJuZXRTeU91dFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwibmV0U3lGZWVcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcInByaWNlSW1wYWN0XCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJub25wYXlhYmxlXCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwibWFya2V0XCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJiYXNlVG9rZW5cIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcImFtb3VudEJhc2VUb2tlblwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwiYnVsa1wiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcInN3YXBFeGFjdEJhc2VUb2tlbkZvclB0U3RhdGljXCIsXG4gICAgb3V0cHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIm5ldFB0T3V0XCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJuZXRTeUZlZVwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwicHJpY2VJbXBhY3RcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcIm5vbnBheWFibGVcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJtYXJrZXRcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcImJhc2VUb2tlblwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwiYW1vdW50QmFzZVRva2VuXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJidWxrXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG5hbWU6IFwic3dhcEV4YWN0QmFzZVRva2VuRm9yWXRTdGF0aWNcIixcbiAgICBvdXRwdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwibmV0WXRPdXRcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIm5ldFN5RmVlXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJwcmljZUltcGFjdFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwibm9ucGF5YWJsZVwiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcIm1hcmtldFwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwiZXhhY3RQdEluXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJiYXNlVG9rZW5cIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcImJ1bGtcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJzd2FwRXhhY3RQdEZvckJhc2VUb2tlblN0YXRpY1wiLFxuICAgIG91dHB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJuZXRCYXNlVG9rZW5PdXRcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIm5ldFN5RmVlXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJwcmljZUltcGFjdFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwibm9ucGF5YWJsZVwiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcIm1hcmtldFwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwiZXhhY3RQdEluXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG5hbWU6IFwic3dhcEV4YWN0UHRGb3JTeVN0YXRpY1wiLFxuICAgIG91dHB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJuZXRTeU91dFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwibmV0U3lGZWVcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcInByaWNlSW1wYWN0XCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJub25wYXlhYmxlXCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwibWFya2V0XCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJleGFjdFB0SW5cIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJzd2FwRXhhY3RQdEZvcll0U3RhdGljXCIsXG4gICAgb3V0cHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIm5ldFl0T3V0XCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJ0b3RhbFB0VG9Td2FwXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJuZXRTeUZlZVwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwicHJpY2VJbXBhY3RcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcIm5vbnBheWFibGVcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJtYXJrZXRcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcImV4YWN0U3lJblwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcInN3YXBFeGFjdFN5Rm9yUHRTdGF0aWNcIixcbiAgICBvdXRwdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwibmV0UHRPdXRcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIm5ldFN5RmVlXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJwcmljZUltcGFjdFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwibm9ucGF5YWJsZVwiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcIm1hcmtldFwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwiZXhhY3RTeUluXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG5hbWU6IFwic3dhcEV4YWN0U3lGb3JZdFN0YXRpY1wiLFxuICAgIG91dHB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJuZXRZdE91dFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwibmV0U3lGZWVcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcInByaWNlSW1wYWN0XCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJub25wYXlhYmxlXCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwibWFya2V0XCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJleGFjdFl0SW5cIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcImJhc2VUb2tlblwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwiYnVsa1wiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcInN3YXBFeGFjdFl0Rm9yQmFzZVRva2VuU3RhdGljXCIsXG4gICAgb3V0cHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIm5ldEJhc2VUb2tlbk91dFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwibmV0U3lGZWVcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcInByaWNlSW1wYWN0XCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJub25wYXlhYmxlXCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwibWFya2V0XCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJleGFjdFl0SW5cIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJzd2FwRXhhY3RZdEZvclB0U3RhdGljXCIsXG4gICAgb3V0cHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIm5ldFB0T3V0XCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJ0b3RhbFB0U3dhcHBlZFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwibmV0U3lGZWVcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcInByaWNlSW1wYWN0XCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJub25wYXlhYmxlXCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwibWFya2V0XCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJleGFjdFl0SW5cIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJzd2FwRXhhY3RZdEZvclN5U3RhdGljXCIsXG4gICAgb3V0cHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIm5ldFN5T3V0XCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJuZXRTeUZlZVwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwicHJpY2VJbXBhY3RcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcIm5vbnBheWFibGVcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJtYXJrZXRcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcImV4YWN0U3lPdXRcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJzd2FwUHRGb3JFeGFjdFN5U3RhdGljXCIsXG4gICAgb3V0cHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIm5ldFB0SW5cIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIm5ldFN5RmVlXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJwcmljZUltcGFjdFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwibm9ucGF5YWJsZVwiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcIm1hcmtldFwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwiZXhhY3RQdE91dFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcInN3YXBTeUZvckV4YWN0UHRTdGF0aWNcIixcbiAgICBvdXRwdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwibmV0U3lJblwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwibmV0U3lGZWVcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcInByaWNlSW1wYWN0XCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJub25wYXlhYmxlXCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwibWFya2V0XCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJleGFjdFl0T3V0XCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG5hbWU6IFwic3dhcFN5Rm9yRXhhY3RZdFN0YXRpY1wiLFxuICAgIG91dHB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJuZXRTeUluXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJuZXRTeUZlZVwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwicHJpY2VJbXBhY3RcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcIm5vbnBheWFibGVcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJtYXJrZXRcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcImV4YWN0U3lPdXRcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJzd2FwWXRGb3JFeGFjdFN5U3RhdGljXCIsXG4gICAgb3V0cHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIm5ldFl0SW5cIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIm5ldFN5RmVlXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJwcmljZUltcGFjdFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwibm9ucGF5YWJsZVwiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcIm5ld093bmVyXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImJvb2xcIixcbiAgICAgICAgbmFtZTogXCJkaXJlY3RcIixcbiAgICAgICAgdHlwZTogXCJib29sXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYm9vbFwiLFxuICAgICAgICBuYW1lOiBcInJlbm91bmNlXCIsXG4gICAgICAgIHR5cGU6IFwiYm9vbFwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG5hbWU6IFwidHJhbnNmZXJPd25lcnNoaXBcIixcbiAgICBvdXRwdXRzOiBbXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwibm9ucGF5YWJsZVwiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcIm5ld0ltcGxlbWVudGF0aW9uXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG5hbWU6IFwidXBncmFkZVRvXCIsXG4gICAgb3V0cHV0czogW10sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcIm5vbnBheWFibGVcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJuZXdJbXBsZW1lbnRhdGlvblwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJieXRlc1wiLFxuICAgICAgICBuYW1lOiBcImRhdGFcIixcbiAgICAgICAgdHlwZTogXCJieXRlc1wiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG5hbWU6IFwidXBncmFkZVRvQW5kQ2FsbFwiLFxuICAgIG91dHB1dHM6IFtdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJwYXlhYmxlXCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuXSBhcyBjb25zdDtcblxuZXhwb3J0IGNsYXNzIFBlbmRsZVJvdXRlclN0YXRpY19fZmFjdG9yeSB7XG4gIHN0YXRpYyByZWFkb25seSBhYmkgPSBfYWJpO1xuICBzdGF0aWMgY3JlYXRlSW50ZXJmYWNlKCk6IFBlbmRsZVJvdXRlclN0YXRpY0ludGVyZmFjZSB7XG4gICAgcmV0dXJuIG5ld0ludGVyZmFjZShfYWJpKSBhcyBQZW5kbGVSb3V0ZXJTdGF0aWNJbnRlcmZhY2U7XG4gIH1cbiAgc3RhdGljIGNvbm5lY3QoXG4gICAgYWRkcmVzczogc3RyaW5nLFxuICAgIHNpZ25lck9yUHJvdmlkZXI6IFNpZ25lciB8IFByb3ZpZGVyLFxuICApOiBQZW5kbGVSb3V0ZXJTdGF0aWMge1xuICAgIHJldHVybiBuZXdDb250cmFjdChhZGRyZXNzLCBfYWJpLCBzaWduZXJPclByb3ZpZGVyKSBhcyBQZW5kbGVSb3V0ZXJTdGF0aWM7XG4gIH1cbn1cbiIsICIvKiBBdXRvZ2VuZXJhdGVkIGZpbGUuIERvIG5vdCBlZGl0IG1hbnVhbGx5LiAqL1xuLyogdHNsaW50OmRpc2FibGUgKi9cbi8qIGVzbGludC1kaXNhYmxlICovXG4vLyBAdHMtbm9jaGVja1xuaW1wb3J0IHsgbmV3Q29udHJhY3QsIG5ld0ludGVyZmFjZSB9IGZyb20gXCJAc2VudGlvL3Nkay9ldGhcIjtcblxuaW1wb3J0IHsgQ29udHJhY3QsIFNpZ25lciwgUHJvdmlkZXIsIEludGVyZmFjZSB9IGZyb20gXCJldGhlcnNcIjtcbmltcG9ydCB0eXBlIHtcbiAgUGVuZGxlUm91dGVyVjMsXG4gIFBlbmRsZVJvdXRlclYzSW50ZXJmYWNlLFxufSBmcm9tIFwiLi4vUGVuZGxlUm91dGVyVjMuanNcIjtcblxuY29uc3QgX2FiaSA9IFtcbiAge1xuICAgIGFub255bW91czogZmFsc2UsXG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IHRydWUsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwiY2FsbGVyXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogdHJ1ZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJtYXJrZXRcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbmRleGVkOiB0cnVlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcInJlY2VpdmVyXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogZmFsc2UsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwibmV0U3lVc2VkXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogZmFsc2UsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwibmV0UHRVc2VkXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogZmFsc2UsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwibmV0THBPdXRcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJBZGRMaXF1aWRpdHlEdWFsU3lBbmRQdFwiLFxuICAgIHR5cGU6IFwiZXZlbnRcIixcbiAgfSxcbiAge1xuICAgIGFub255bW91czogZmFsc2UsXG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IHRydWUsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwiY2FsbGVyXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogdHJ1ZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJtYXJrZXRcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbmRleGVkOiB0cnVlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcInRva2VuSW5cIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbmRleGVkOiBmYWxzZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJyZWNlaXZlclwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IGZhbHNlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIm5ldFRva2VuVXNlZFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IGZhbHNlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIm5ldFB0VXNlZFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IGZhbHNlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIm5ldExwT3V0XCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogZmFsc2UsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwibmV0U3lJbnRlcm1cIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJBZGRMaXF1aWRpdHlEdWFsVG9rZW5BbmRQdFwiLFxuICAgIHR5cGU6IFwiZXZlbnRcIixcbiAgfSxcbiAge1xuICAgIGFub255bW91czogZmFsc2UsXG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IHRydWUsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwiY2FsbGVyXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogdHJ1ZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJtYXJrZXRcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbmRleGVkOiB0cnVlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcInJlY2VpdmVyXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogZmFsc2UsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwibmV0UHRJblwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IGZhbHNlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIm5ldExwT3V0XCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG5hbWU6IFwiQWRkTGlxdWlkaXR5U2luZ2xlUHRcIixcbiAgICB0eXBlOiBcImV2ZW50XCIsXG4gIH0sXG4gIHtcbiAgICBhbm9ueW1vdXM6IGZhbHNlLFxuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbmRleGVkOiB0cnVlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcImNhbGxlclwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IHRydWUsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwibWFya2V0XCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogdHJ1ZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJyZWNlaXZlclwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IGZhbHNlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIm5ldFN5SW5cIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbmRleGVkOiBmYWxzZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJuZXRMcE91dFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcIkFkZExpcXVpZGl0eVNpbmdsZVN5XCIsXG4gICAgdHlwZTogXCJldmVudFwiLFxuICB9LFxuICB7XG4gICAgYW5vbnltb3VzOiBmYWxzZSxcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogdHJ1ZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJjYWxsZXJcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbmRleGVkOiB0cnVlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcIm1hcmtldFwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IHRydWUsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwicmVjZWl2ZXJcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbmRleGVkOiBmYWxzZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJuZXRTeUluXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogZmFsc2UsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwibmV0U3lNaW50UHlcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbmRleGVkOiBmYWxzZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJuZXRMcE91dFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IGZhbHNlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIm5ldFl0T3V0XCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG5hbWU6IFwiQWRkTGlxdWlkaXR5U2luZ2xlU3lLZWVwWXRcIixcbiAgICB0eXBlOiBcImV2ZW50XCIsXG4gIH0sXG4gIHtcbiAgICBhbm9ueW1vdXM6IGZhbHNlLFxuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbmRleGVkOiB0cnVlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcImNhbGxlclwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IHRydWUsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwibWFya2V0XCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogdHJ1ZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJ0b2tlblwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IGZhbHNlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcInJlY2VpdmVyXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogZmFsc2UsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwibmV0VG9rZW5JblwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IGZhbHNlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIm5ldExwT3V0XCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogZmFsc2UsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwibmV0U3lJbnRlcm1cIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJBZGRMaXF1aWRpdHlTaW5nbGVUb2tlblwiLFxuICAgIHR5cGU6IFwiZXZlbnRcIixcbiAgfSxcbiAge1xuICAgIGFub255bW91czogZmFsc2UsXG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IHRydWUsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwiY2FsbGVyXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogdHJ1ZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJtYXJrZXRcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbmRleGVkOiB0cnVlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcInRva2VuXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogZmFsc2UsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwicmVjZWl2ZXJcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbmRleGVkOiBmYWxzZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJuZXRUb2tlbkluXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogZmFsc2UsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwibmV0THBPdXRcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbmRleGVkOiBmYWxzZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJuZXRZdE91dFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IGZhbHNlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIm5ldFN5TWludFB5XCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogZmFsc2UsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwibmV0U3lJbnRlcm1cIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJBZGRMaXF1aWRpdHlTaW5nbGVUb2tlbktlZXBZdFwiLFxuICAgIHR5cGU6IFwiZXZlbnRcIixcbiAgfSxcbiAge1xuICAgIGFub255bW91czogZmFsc2UsXG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IHRydWUsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwiY2FsbGVyXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogdHJ1ZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJtYXJrZXRcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbmRleGVkOiB0cnVlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcInJlY2VpdmVyXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogZmFsc2UsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwibmV0THBJblwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGNvbXBvbmVudHM6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgbmFtZTogXCJuZXRQdEZyb21SZW1vdmVcIixcbiAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgIG5hbWU6IFwibmV0U3lGcm9tUmVtb3ZlXCIsXG4gICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICBuYW1lOiBcIm5ldFB0UmVkZWVtXCIsXG4gICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICBuYW1lOiBcIm5ldFN5RnJvbVJlZGVlbVwiLFxuICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgbmFtZTogXCJ0b3RhbFN5T3V0XCIsXG4gICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBpbmRleGVkOiBmYWxzZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInN0cnVjdCBJUEFjdGlvbk1pc2NWMy5FeGl0UG9zdEV4cFJldHVyblBhcmFtc1wiLFxuICAgICAgICBuYW1lOiBcInBhcmFtc1wiLFxuICAgICAgICB0eXBlOiBcInR1cGxlXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJFeGl0UG9zdEV4cFRvU3lcIixcbiAgICB0eXBlOiBcImV2ZW50XCIsXG4gIH0sXG4gIHtcbiAgICBhbm9ueW1vdXM6IGZhbHNlLFxuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbmRleGVkOiB0cnVlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcImNhbGxlclwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IHRydWUsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwibWFya2V0XCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogdHJ1ZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJ0b2tlblwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IGZhbHNlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcInJlY2VpdmVyXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogZmFsc2UsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwibmV0THBJblwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IGZhbHNlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcInRvdGFsVG9rZW5PdXRcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBjb21wb25lbnRzOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgIG5hbWU6IFwibmV0UHRGcm9tUmVtb3ZlXCIsXG4gICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICBuYW1lOiBcIm5ldFN5RnJvbVJlbW92ZVwiLFxuICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgbmFtZTogXCJuZXRQdFJlZGVlbVwiLFxuICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgbmFtZTogXCJuZXRTeUZyb21SZWRlZW1cIixcbiAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgIG5hbWU6IFwidG90YWxTeU91dFwiLFxuICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgaW5kZXhlZDogZmFsc2UsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJzdHJ1Y3QgSVBBY3Rpb25NaXNjVjMuRXhpdFBvc3RFeHBSZXR1cm5QYXJhbXNcIixcbiAgICAgICAgbmFtZTogXCJwYXJhbXNcIixcbiAgICAgICAgdHlwZTogXCJ0dXBsZVwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG5hbWU6IFwiRXhpdFBvc3RFeHBUb1Rva2VuXCIsXG4gICAgdHlwZTogXCJldmVudFwiLFxuICB9LFxuICB7XG4gICAgYW5vbnltb3VzOiBmYWxzZSxcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogdHJ1ZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJjYWxsZXJcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbmRleGVkOiB0cnVlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcIm1hcmtldFwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IHRydWUsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwicmVjZWl2ZXJcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbmRleGVkOiBmYWxzZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJuZXRMcFRvUmVtb3ZlXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgY29tcG9uZW50czogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICBuYW1lOiBcIm5ldFB0RnJvbVJlbW92ZVwiLFxuICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgbmFtZTogXCJuZXRTeUZyb21SZW1vdmVcIixcbiAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgIG5hbWU6IFwibmV0UHlSZWRlZW1cIixcbiAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgIG5hbWU6IFwibmV0U3lGcm9tUmVkZWVtXCIsXG4gICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICBuYW1lOiBcIm5ldFB0U3dhcFwiLFxuICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgbmFtZTogXCJuZXRZdFN3YXBcIixcbiAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgIG5hbWU6IFwibmV0U3lGcm9tU3dhcFwiLFxuICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgbmFtZTogXCJuZXRTeUZlZVwiLFxuICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgbmFtZTogXCJ0b3RhbFN5T3V0XCIsXG4gICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBpbmRleGVkOiBmYWxzZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInN0cnVjdCBJUEFjdGlvbk1pc2NWMy5FeGl0UHJlRXhwUmV0dXJuUGFyYW1zXCIsXG4gICAgICAgIG5hbWU6IFwicGFyYW1zXCIsXG4gICAgICAgIHR5cGU6IFwidHVwbGVcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcIkV4aXRQcmVFeHBUb1N5XCIsXG4gICAgdHlwZTogXCJldmVudFwiLFxuICB9LFxuICB7XG4gICAgYW5vbnltb3VzOiBmYWxzZSxcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogdHJ1ZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJjYWxsZXJcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbmRleGVkOiB0cnVlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcIm1hcmtldFwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IHRydWUsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwidG9rZW5cIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbmRleGVkOiBmYWxzZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJyZWNlaXZlclwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IGZhbHNlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIm5ldExwVG9SZW1vdmVcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbmRleGVkOiBmYWxzZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJ0b3RhbFRva2VuT3V0XCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgY29tcG9uZW50czogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICBuYW1lOiBcIm5ldFB0RnJvbVJlbW92ZVwiLFxuICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgbmFtZTogXCJuZXRTeUZyb21SZW1vdmVcIixcbiAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgIG5hbWU6IFwibmV0UHlSZWRlZW1cIixcbiAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgIG5hbWU6IFwibmV0U3lGcm9tUmVkZWVtXCIsXG4gICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICBuYW1lOiBcIm5ldFB0U3dhcFwiLFxuICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgbmFtZTogXCJuZXRZdFN3YXBcIixcbiAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgIG5hbWU6IFwibmV0U3lGcm9tU3dhcFwiLFxuICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgbmFtZTogXCJuZXRTeUZlZVwiLFxuICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgbmFtZTogXCJ0b3RhbFN5T3V0XCIsXG4gICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBpbmRleGVkOiBmYWxzZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInN0cnVjdCBJUEFjdGlvbk1pc2NWMy5FeGl0UHJlRXhwUmV0dXJuUGFyYW1zXCIsXG4gICAgICAgIG5hbWU6IFwicGFyYW1zXCIsXG4gICAgICAgIHR5cGU6IFwidHVwbGVcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcIkV4aXRQcmVFeHBUb1Rva2VuXCIsXG4gICAgdHlwZTogXCJldmVudFwiLFxuICB9LFxuICB7XG4gICAgYW5vbnltb3VzOiBmYWxzZSxcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogdHJ1ZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJjYWxsZXJcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbmRleGVkOiB0cnVlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcInJlY2VpdmVyXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogdHJ1ZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJZVFwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IGZhbHNlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIm5ldFN5SW5cIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbmRleGVkOiBmYWxzZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJuZXRQeU91dFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcIk1pbnRQeUZyb21TeVwiLFxuICAgIHR5cGU6IFwiZXZlbnRcIixcbiAgfSxcbiAge1xuICAgIGFub255bW91czogZmFsc2UsXG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IHRydWUsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwiY2FsbGVyXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogdHJ1ZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJ0b2tlbkluXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogdHJ1ZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJZVFwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IGZhbHNlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcInJlY2VpdmVyXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogZmFsc2UsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwibmV0VG9rZW5JblwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IGZhbHNlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIm5ldFB5T3V0XCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogZmFsc2UsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwibmV0U3lJbnRlcm1cIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJNaW50UHlGcm9tVG9rZW5cIixcbiAgICB0eXBlOiBcImV2ZW50XCIsXG4gIH0sXG4gIHtcbiAgICBhbm9ueW1vdXM6IGZhbHNlLFxuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbmRleGVkOiB0cnVlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcImNhbGxlclwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IHRydWUsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwidG9rZW5JblwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IHRydWUsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwiU1lcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbmRleGVkOiBmYWxzZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJyZWNlaXZlclwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IGZhbHNlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIm5ldFRva2VuSW5cIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbmRleGVkOiBmYWxzZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJuZXRTeU91dFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcIk1pbnRTeUZyb21Ub2tlblwiLFxuICAgIHR5cGU6IFwiZXZlbnRcIixcbiAgfSxcbiAge1xuICAgIGFub255bW91czogZmFsc2UsXG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IHRydWUsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwicHJldmlvdXNPd25lclwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IHRydWUsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwibmV3T3duZXJcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJPd25lcnNoaXBUcmFuc2ZlcnJlZFwiLFxuICAgIHR5cGU6IFwiZXZlbnRcIixcbiAgfSxcbiAge1xuICAgIGFub255bW91czogZmFsc2UsXG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IHRydWUsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwiY2FsbGVyXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogdHJ1ZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJyZWNlaXZlclwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IHRydWUsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwiWVRcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbmRleGVkOiBmYWxzZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJuZXRQeUluXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogZmFsc2UsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwibmV0U3lPdXRcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJSZWRlZW1QeVRvU3lcIixcbiAgICB0eXBlOiBcImV2ZW50XCIsXG4gIH0sXG4gIHtcbiAgICBhbm9ueW1vdXM6IGZhbHNlLFxuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbmRleGVkOiB0cnVlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcImNhbGxlclwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IHRydWUsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwidG9rZW5PdXRcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbmRleGVkOiB0cnVlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcIllUXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogZmFsc2UsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwicmVjZWl2ZXJcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbmRleGVkOiBmYWxzZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJuZXRQeUluXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogZmFsc2UsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwibmV0VG9rZW5PdXRcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbmRleGVkOiBmYWxzZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJuZXRTeUludGVybVwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcIlJlZGVlbVB5VG9Ub2tlblwiLFxuICAgIHR5cGU6IFwiZXZlbnRcIixcbiAgfSxcbiAge1xuICAgIGFub255bW91czogZmFsc2UsXG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IHRydWUsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwiY2FsbGVyXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogdHJ1ZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJ0b2tlbk91dFwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IHRydWUsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwiU1lcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbmRleGVkOiBmYWxzZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJyZWNlaXZlclwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IGZhbHNlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIm5ldFN5SW5cIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbmRleGVkOiBmYWxzZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJuZXRUb2tlbk91dFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcIlJlZGVlbVN5VG9Ub2tlblwiLFxuICAgIHR5cGU6IFwiZXZlbnRcIixcbiAgfSxcbiAge1xuICAgIGFub255bW91czogZmFsc2UsXG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IHRydWUsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwiY2FsbGVyXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogdHJ1ZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJtYXJrZXRcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbmRleGVkOiB0cnVlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcInJlY2VpdmVyXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogZmFsc2UsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwibmV0THBUb1JlbW92ZVwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IGZhbHNlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIm5ldFB0T3V0XCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogZmFsc2UsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwibmV0U3lPdXRcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJSZW1vdmVMaXF1aWRpdHlEdWFsU3lBbmRQdFwiLFxuICAgIHR5cGU6IFwiZXZlbnRcIixcbiAgfSxcbiAge1xuICAgIGFub255bW91czogZmFsc2UsXG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IHRydWUsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwiY2FsbGVyXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogdHJ1ZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJtYXJrZXRcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbmRleGVkOiB0cnVlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcInRva2VuT3V0XCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogZmFsc2UsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwicmVjZWl2ZXJcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbmRleGVkOiBmYWxzZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJuZXRMcFRvUmVtb3ZlXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogZmFsc2UsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwibmV0UHRPdXRcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbmRleGVkOiBmYWxzZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJuZXRUb2tlbk91dFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IGZhbHNlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIm5ldFN5SW50ZXJtXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG5hbWU6IFwiUmVtb3ZlTGlxdWlkaXR5RHVhbFRva2VuQW5kUHRcIixcbiAgICB0eXBlOiBcImV2ZW50XCIsXG4gIH0sXG4gIHtcbiAgICBhbm9ueW1vdXM6IGZhbHNlLFxuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbmRleGVkOiB0cnVlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcImNhbGxlclwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IHRydWUsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwibWFya2V0XCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogdHJ1ZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJyZWNlaXZlclwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IGZhbHNlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIm5ldExwVG9SZW1vdmVcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbmRleGVkOiBmYWxzZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJuZXRQdE91dFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcIlJlbW92ZUxpcXVpZGl0eVNpbmdsZVB0XCIsXG4gICAgdHlwZTogXCJldmVudFwiLFxuICB9LFxuICB7XG4gICAgYW5vbnltb3VzOiBmYWxzZSxcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogdHJ1ZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJjYWxsZXJcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbmRleGVkOiB0cnVlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcIm1hcmtldFwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IHRydWUsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwicmVjZWl2ZXJcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbmRleGVkOiBmYWxzZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJuZXRMcFRvUmVtb3ZlXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogZmFsc2UsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwibmV0U3lPdXRcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJSZW1vdmVMaXF1aWRpdHlTaW5nbGVTeVwiLFxuICAgIHR5cGU6IFwiZXZlbnRcIixcbiAgfSxcbiAge1xuICAgIGFub255bW91czogZmFsc2UsXG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IHRydWUsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwiY2FsbGVyXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogdHJ1ZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJtYXJrZXRcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbmRleGVkOiB0cnVlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcInRva2VuXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogZmFsc2UsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwicmVjZWl2ZXJcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbmRleGVkOiBmYWxzZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJuZXRMcFRvUmVtb3ZlXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogZmFsc2UsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwibmV0VG9rZW5PdXRcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbmRleGVkOiBmYWxzZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJuZXRTeUludGVybVwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcIlJlbW92ZUxpcXVpZGl0eVNpbmdsZVRva2VuXCIsXG4gICAgdHlwZTogXCJldmVudFwiLFxuICB9LFxuICB7XG4gICAgYW5vbnltb3VzOiBmYWxzZSxcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogdHJ1ZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImJ5dGVzNFwiLFxuICAgICAgICBuYW1lOiBcInNlbGVjdG9yXCIsXG4gICAgICAgIHR5cGU6IFwiYnl0ZXM0XCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbmRleGVkOiB0cnVlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcImZhY2V0XCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG5hbWU6IFwiU2VsZWN0b3JUb0ZhY2V0U2V0XCIsXG4gICAgdHlwZTogXCJldmVudFwiLFxuICB9LFxuICB7XG4gICAgYW5vbnltb3VzOiBmYWxzZSxcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogdHJ1ZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJjYWxsZXJcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbmRleGVkOiB0cnVlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcIm1hcmtldFwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IHRydWUsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwicmVjZWl2ZXJcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbmRleGVkOiBmYWxzZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIm5ldFB0VG9BY2NvdW50XCIsXG4gICAgICAgIHR5cGU6IFwiaW50MjU2XCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbmRleGVkOiBmYWxzZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIm5ldFN5VG9BY2NvdW50XCIsXG4gICAgICAgIHR5cGU6IFwiaW50MjU2XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJTd2FwUHRBbmRTeVwiLFxuICAgIHR5cGU6IFwiZXZlbnRcIixcbiAgfSxcbiAge1xuICAgIGFub255bW91czogZmFsc2UsXG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IHRydWUsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwiY2FsbGVyXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogdHJ1ZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJtYXJrZXRcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbmRleGVkOiB0cnVlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcInRva2VuXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogZmFsc2UsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwicmVjZWl2ZXJcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbmRleGVkOiBmYWxzZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIm5ldFB0VG9BY2NvdW50XCIsXG4gICAgICAgIHR5cGU6IFwiaW50MjU2XCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbmRleGVkOiBmYWxzZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIm5ldFRva2VuVG9BY2NvdW50XCIsXG4gICAgICAgIHR5cGU6IFwiaW50MjU2XCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbmRleGVkOiBmYWxzZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJuZXRTeUludGVybVwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcIlN3YXBQdEFuZFRva2VuXCIsXG4gICAgdHlwZTogXCJldmVudFwiLFxuICB9LFxuICB7XG4gICAgYW5vbnltb3VzOiBmYWxzZSxcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogdHJ1ZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJjYWxsZXJcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbmRleGVkOiB0cnVlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcIm1hcmtldFwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IHRydWUsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwicmVjZWl2ZXJcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbmRleGVkOiBmYWxzZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIm5ldFB0VG9BY2NvdW50XCIsXG4gICAgICAgIHR5cGU6IFwiaW50MjU2XCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbmRleGVkOiBmYWxzZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIm5ldFl0VG9BY2NvdW50XCIsXG4gICAgICAgIHR5cGU6IFwiaW50MjU2XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJTd2FwUHRBbmRZdFwiLFxuICAgIHR5cGU6IFwiZXZlbnRcIixcbiAgfSxcbiAge1xuICAgIGFub255bW91czogZmFsc2UsXG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IHRydWUsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwiY2FsbGVyXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogdHJ1ZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJtYXJrZXRcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbmRleGVkOiB0cnVlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcInJlY2VpdmVyXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogZmFsc2UsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJuZXRZdFRvQWNjb3VudFwiLFxuICAgICAgICB0eXBlOiBcImludDI1NlwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogZmFsc2UsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJuZXRTeVRvQWNjb3VudFwiLFxuICAgICAgICB0eXBlOiBcImludDI1NlwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG5hbWU6IFwiU3dhcFl0QW5kU3lcIixcbiAgICB0eXBlOiBcImV2ZW50XCIsXG4gIH0sXG4gIHtcbiAgICBhbm9ueW1vdXM6IGZhbHNlLFxuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbmRleGVkOiB0cnVlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcImNhbGxlclwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IHRydWUsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwibWFya2V0XCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogdHJ1ZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJ0b2tlblwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IGZhbHNlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcInJlY2VpdmVyXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogZmFsc2UsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJuZXRZdFRvQWNjb3VudFwiLFxuICAgICAgICB0eXBlOiBcImludDI1NlwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogZmFsc2UsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJuZXRUb2tlblRvQWNjb3VudFwiLFxuICAgICAgICB0eXBlOiBcImludDI1NlwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogZmFsc2UsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwibmV0U3lJbnRlcm1cIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJTd2FwWXRBbmRUb2tlblwiLFxuICAgIHR5cGU6IFwiZXZlbnRcIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcInJlY2VpdmVyXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJtYXJrZXRcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIm5ldFN5RGVzaXJlZFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwibmV0UHREZXNpcmVkXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJtaW5McE91dFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcImFkZExpcXVpZGl0eUR1YWxTeUFuZFB0XCIsXG4gICAgb3V0cHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIm5ldExwT3V0XCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJuZXRTeVVzZWRcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIm5ldFB0VXNlZFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwibm9ucGF5YWJsZVwiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcInJlY2VpdmVyXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJtYXJrZXRcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBjb21wb25lbnRzOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgIG5hbWU6IFwidG9rZW5JblwiLFxuICAgICAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgbmFtZTogXCJuZXRUb2tlbkluXCIsXG4gICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICBuYW1lOiBcInRva2VuTWludFN5XCIsXG4gICAgICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICBuYW1lOiBcInBlbmRsZVN3YXBcIixcbiAgICAgICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgY29tcG9uZW50czogW1xuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImVudW0gU3dhcFR5cGVcIixcbiAgICAgICAgICAgICAgICBuYW1lOiBcInN3YXBUeXBlXCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJ1aW50OFwiLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgICAgICBuYW1lOiBcImV4dFJvdXRlclwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImJ5dGVzXCIsXG4gICAgICAgICAgICAgICAgbmFtZTogXCJleHRDYWxsZGF0YVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwiYnl0ZXNcIixcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJib29sXCIsXG4gICAgICAgICAgICAgICAgbmFtZTogXCJuZWVkU2NhbGVcIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcImJvb2xcIixcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwic3RydWN0IFN3YXBEYXRhXCIsXG4gICAgICAgICAgICBuYW1lOiBcInN3YXBEYXRhXCIsXG4gICAgICAgICAgICB0eXBlOiBcInR1cGxlXCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInN0cnVjdCBUb2tlbklucHV0XCIsXG4gICAgICAgIG5hbWU6IFwiaW5wdXRcIixcbiAgICAgICAgdHlwZTogXCJ0dXBsZVwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJuZXRQdERlc2lyZWRcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIm1pbkxwT3V0XCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG5hbWU6IFwiYWRkTGlxdWlkaXR5RHVhbFRva2VuQW5kUHRcIixcbiAgICBvdXRwdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwibmV0THBPdXRcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIm5ldFB0VXNlZFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwibmV0U3lJbnRlcm1cIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcInBheWFibGVcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJyZWNlaXZlclwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwibWFya2V0XCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJuZXRQdEluXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJtaW5McE91dFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGNvbXBvbmVudHM6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgbmFtZTogXCJndWVzc01pblwiLFxuICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgbmFtZTogXCJndWVzc01heFwiLFxuICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgbmFtZTogXCJndWVzc09mZmNoYWluXCIsXG4gICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICBuYW1lOiBcIm1heEl0ZXJhdGlvblwiLFxuICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgbmFtZTogXCJlcHNcIixcbiAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIGludGVybmFsVHlwZTogXCJzdHJ1Y3QgQXBwcm94UGFyYW1zXCIsXG4gICAgICAgIG5hbWU6IFwiZ3Vlc3NQdFN3YXBUb1N5XCIsXG4gICAgICAgIHR5cGU6IFwidHVwbGVcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGNvbXBvbmVudHM6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgbmFtZTogXCJsaW1pdFJvdXRlclwiLFxuICAgICAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgbmFtZTogXCJlcHNTa2lwTWFya2V0XCIsXG4gICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGNvbXBvbmVudHM6IFtcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGNvbXBvbmVudHM6IFtcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJzYWx0XCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJleHBpcnlcIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIm5vbmNlXCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImVudW0gSVBMaW1pdE9yZGVyVHlwZS5PcmRlclR5cGVcIixcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJvcmRlclR5cGVcIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJ1aW50OFwiLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJ0b2tlblwiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiWVRcIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIm1ha2VyXCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJyZWNlaXZlclwiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwibWFraW5nQW1vdW50XCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJsbkltcGxpZWRSYXRlXCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJmYWlsU2FmZVJhdGVcIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYnl0ZXNcIixcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJwZXJtaXRcIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJieXRlc1wiLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJzdHJ1Y3QgT3JkZXJcIixcbiAgICAgICAgICAgICAgICBuYW1lOiBcIm9yZGVyXCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJ0dXBsZVwiLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImJ5dGVzXCIsXG4gICAgICAgICAgICAgICAgbmFtZTogXCJzaWduYXR1cmVcIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcImJ5dGVzXCIsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICAgIG5hbWU6IFwibWFraW5nQW1vdW50XCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInN0cnVjdCBGaWxsT3JkZXJQYXJhbXNbXVwiLFxuICAgICAgICAgICAgbmFtZTogXCJub3JtYWxGaWxsc1wiLFxuICAgICAgICAgICAgdHlwZTogXCJ0dXBsZVtdXCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBjb21wb25lbnRzOiBbXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBjb21wb25lbnRzOiBbXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwic2FsdFwiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiZXhwaXJ5XCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJub25jZVwiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJlbnVtIElQTGltaXRPcmRlclR5cGUuT3JkZXJUeXBlXCIsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwib3JkZXJUeXBlXCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwidWludDhcIixcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwidG9rZW5cIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIllUXCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJtYWtlclwiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwicmVjZWl2ZXJcIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIm1ha2luZ0Ftb3VudFwiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwibG5JbXBsaWVkUmF0ZVwiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiZmFpbFNhZmVSYXRlXCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImJ5dGVzXCIsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwicGVybWl0XCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiYnl0ZXNcIixcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwic3RydWN0IE9yZGVyXCIsXG4gICAgICAgICAgICAgICAgbmFtZTogXCJvcmRlclwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwidHVwbGVcIixcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJieXRlc1wiLFxuICAgICAgICAgICAgICAgIG5hbWU6IFwic2lnbmF0dXJlXCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJieXRlc1wiLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgICBuYW1lOiBcIm1ha2luZ0Ftb3VudFwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJzdHJ1Y3QgRmlsbE9yZGVyUGFyYW1zW11cIixcbiAgICAgICAgICAgIG5hbWU6IFwiZmxhc2hGaWxsc1wiLFxuICAgICAgICAgICAgdHlwZTogXCJ0dXBsZVtdXCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYnl0ZXNcIixcbiAgICAgICAgICAgIG5hbWU6IFwib3B0RGF0YVwiLFxuICAgICAgICAgICAgdHlwZTogXCJieXRlc1wiLFxuICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIGludGVybmFsVHlwZTogXCJzdHJ1Y3QgTGltaXRPcmRlckRhdGFcIixcbiAgICAgICAgbmFtZTogXCJsaW1pdFwiLFxuICAgICAgICB0eXBlOiBcInR1cGxlXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJhZGRMaXF1aWRpdHlTaW5nbGVQdFwiLFxuICAgIG91dHB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJuZXRMcE91dFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwibmV0U3lGZWVcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcIm5vbnBheWFibGVcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJyZWNlaXZlclwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwibWFya2V0XCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJuZXRTeUluXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJtaW5McE91dFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGNvbXBvbmVudHM6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgbmFtZTogXCJndWVzc01pblwiLFxuICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgbmFtZTogXCJndWVzc01heFwiLFxuICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgbmFtZTogXCJndWVzc09mZmNoYWluXCIsXG4gICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICBuYW1lOiBcIm1heEl0ZXJhdGlvblwiLFxuICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgbmFtZTogXCJlcHNcIixcbiAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIGludGVybmFsVHlwZTogXCJzdHJ1Y3QgQXBwcm94UGFyYW1zXCIsXG4gICAgICAgIG5hbWU6IFwiZ3Vlc3NQdFJlY2VpdmVkRnJvbVN5XCIsXG4gICAgICAgIHR5cGU6IFwidHVwbGVcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGNvbXBvbmVudHM6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgbmFtZTogXCJsaW1pdFJvdXRlclwiLFxuICAgICAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgbmFtZTogXCJlcHNTa2lwTWFya2V0XCIsXG4gICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGNvbXBvbmVudHM6IFtcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGNvbXBvbmVudHM6IFtcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJzYWx0XCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJleHBpcnlcIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIm5vbmNlXCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImVudW0gSVBMaW1pdE9yZGVyVHlwZS5PcmRlclR5cGVcIixcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJvcmRlclR5cGVcIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJ1aW50OFwiLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJ0b2tlblwiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiWVRcIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIm1ha2VyXCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJyZWNlaXZlclwiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwibWFraW5nQW1vdW50XCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJsbkltcGxpZWRSYXRlXCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJmYWlsU2FmZVJhdGVcIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYnl0ZXNcIixcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJwZXJtaXRcIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJieXRlc1wiLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJzdHJ1Y3QgT3JkZXJcIixcbiAgICAgICAgICAgICAgICBuYW1lOiBcIm9yZGVyXCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJ0dXBsZVwiLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImJ5dGVzXCIsXG4gICAgICAgICAgICAgICAgbmFtZTogXCJzaWduYXR1cmVcIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcImJ5dGVzXCIsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICAgIG5hbWU6IFwibWFraW5nQW1vdW50XCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInN0cnVjdCBGaWxsT3JkZXJQYXJhbXNbXVwiLFxuICAgICAgICAgICAgbmFtZTogXCJub3JtYWxGaWxsc1wiLFxuICAgICAgICAgICAgdHlwZTogXCJ0dXBsZVtdXCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBjb21wb25lbnRzOiBbXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBjb21wb25lbnRzOiBbXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwic2FsdFwiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiZXhwaXJ5XCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJub25jZVwiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJlbnVtIElQTGltaXRPcmRlclR5cGUuT3JkZXJUeXBlXCIsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwib3JkZXJUeXBlXCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwidWludDhcIixcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwidG9rZW5cIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIllUXCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJtYWtlclwiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwicmVjZWl2ZXJcIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIm1ha2luZ0Ftb3VudFwiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwibG5JbXBsaWVkUmF0ZVwiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiZmFpbFNhZmVSYXRlXCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImJ5dGVzXCIsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwicGVybWl0XCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiYnl0ZXNcIixcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwic3RydWN0IE9yZGVyXCIsXG4gICAgICAgICAgICAgICAgbmFtZTogXCJvcmRlclwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwidHVwbGVcIixcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJieXRlc1wiLFxuICAgICAgICAgICAgICAgIG5hbWU6IFwic2lnbmF0dXJlXCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJieXRlc1wiLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgICBuYW1lOiBcIm1ha2luZ0Ftb3VudFwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJzdHJ1Y3QgRmlsbE9yZGVyUGFyYW1zW11cIixcbiAgICAgICAgICAgIG5hbWU6IFwiZmxhc2hGaWxsc1wiLFxuICAgICAgICAgICAgdHlwZTogXCJ0dXBsZVtdXCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYnl0ZXNcIixcbiAgICAgICAgICAgIG5hbWU6IFwib3B0RGF0YVwiLFxuICAgICAgICAgICAgdHlwZTogXCJieXRlc1wiLFxuICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIGludGVybmFsVHlwZTogXCJzdHJ1Y3QgTGltaXRPcmRlckRhdGFcIixcbiAgICAgICAgbmFtZTogXCJsaW1pdFwiLFxuICAgICAgICB0eXBlOiBcInR1cGxlXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJhZGRMaXF1aWRpdHlTaW5nbGVTeVwiLFxuICAgIG91dHB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJuZXRMcE91dFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwibmV0U3lGZWVcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcIm5vbnBheWFibGVcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJyZWNlaXZlclwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwibWFya2V0XCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJuZXRTeUluXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJtaW5McE91dFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwibWluWXRPdXRcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJhZGRMaXF1aWRpdHlTaW5nbGVTeUtlZXBZdFwiLFxuICAgIG91dHB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJuZXRMcE91dFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwibmV0WXRPdXRcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIm5ldFN5TWludFB5XCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJub25wYXlhYmxlXCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwicmVjZWl2ZXJcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcIm1hcmtldFwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwibWluTHBPdXRcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBjb21wb25lbnRzOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgIG5hbWU6IFwiZ3Vlc3NNaW5cIixcbiAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgIG5hbWU6IFwiZ3Vlc3NNYXhcIixcbiAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgIG5hbWU6IFwiZ3Vlc3NPZmZjaGFpblwiLFxuICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgbmFtZTogXCJtYXhJdGVyYXRpb25cIixcbiAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgIG5hbWU6IFwiZXBzXCIsXG4gICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwic3RydWN0IEFwcHJveFBhcmFtc1wiLFxuICAgICAgICBuYW1lOiBcImd1ZXNzUHRSZWNlaXZlZEZyb21TeVwiLFxuICAgICAgICB0eXBlOiBcInR1cGxlXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBjb21wb25lbnRzOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgIG5hbWU6IFwidG9rZW5JblwiLFxuICAgICAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgbmFtZTogXCJuZXRUb2tlbkluXCIsXG4gICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICBuYW1lOiBcInRva2VuTWludFN5XCIsXG4gICAgICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICBuYW1lOiBcInBlbmRsZVN3YXBcIixcbiAgICAgICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgY29tcG9uZW50czogW1xuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImVudW0gU3dhcFR5cGVcIixcbiAgICAgICAgICAgICAgICBuYW1lOiBcInN3YXBUeXBlXCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJ1aW50OFwiLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgICAgICBuYW1lOiBcImV4dFJvdXRlclwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImJ5dGVzXCIsXG4gICAgICAgICAgICAgICAgbmFtZTogXCJleHRDYWxsZGF0YVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwiYnl0ZXNcIixcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJib29sXCIsXG4gICAgICAgICAgICAgICAgbmFtZTogXCJuZWVkU2NhbGVcIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcImJvb2xcIixcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwic3RydWN0IFN3YXBEYXRhXCIsXG4gICAgICAgICAgICBuYW1lOiBcInN3YXBEYXRhXCIsXG4gICAgICAgICAgICB0eXBlOiBcInR1cGxlXCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInN0cnVjdCBUb2tlbklucHV0XCIsXG4gICAgICAgIG5hbWU6IFwiaW5wdXRcIixcbiAgICAgICAgdHlwZTogXCJ0dXBsZVwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgY29tcG9uZW50czogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICBuYW1lOiBcImxpbWl0Um91dGVyXCIsXG4gICAgICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICBuYW1lOiBcImVwc1NraXBNYXJrZXRcIixcbiAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgY29tcG9uZW50czogW1xuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgY29tcG9uZW50czogW1xuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcInNhbHRcIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcImV4cGlyeVwiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwibm9uY2VcIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiZW51bSBJUExpbWl0T3JkZXJUeXBlLk9yZGVyVHlwZVwiLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIm9yZGVyVHlwZVwiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcInVpbnQ4XCIsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcInRva2VuXCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJZVFwiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwibWFrZXJcIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcInJlY2VpdmVyXCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJtYWtpbmdBbW91bnRcIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcImxuSW1wbGllZFJhdGVcIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcImZhaWxTYWZlUmF0ZVwiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJieXRlc1wiLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcInBlcm1pdFwiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImJ5dGVzXCIsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInN0cnVjdCBPcmRlclwiLFxuICAgICAgICAgICAgICAgIG5hbWU6IFwib3JkZXJcIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcInR1cGxlXCIsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYnl0ZXNcIixcbiAgICAgICAgICAgICAgICBuYW1lOiBcInNpZ25hdHVyZVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwiYnl0ZXNcIixcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgICAgbmFtZTogXCJtYWtpbmdBbW91bnRcIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwic3RydWN0IEZpbGxPcmRlclBhcmFtc1tdXCIsXG4gICAgICAgICAgICBuYW1lOiBcIm5vcm1hbEZpbGxzXCIsXG4gICAgICAgICAgICB0eXBlOiBcInR1cGxlW11cIixcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGNvbXBvbmVudHM6IFtcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGNvbXBvbmVudHM6IFtcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJzYWx0XCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJleHBpcnlcIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIm5vbmNlXCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImVudW0gSVBMaW1pdE9yZGVyVHlwZS5PcmRlclR5cGVcIixcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJvcmRlclR5cGVcIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJ1aW50OFwiLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJ0b2tlblwiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiWVRcIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIm1ha2VyXCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJyZWNlaXZlclwiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwibWFraW5nQW1vdW50XCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJsbkltcGxpZWRSYXRlXCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJmYWlsU2FmZVJhdGVcIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYnl0ZXNcIixcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJwZXJtaXRcIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJieXRlc1wiLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJzdHJ1Y3QgT3JkZXJcIixcbiAgICAgICAgICAgICAgICBuYW1lOiBcIm9yZGVyXCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJ0dXBsZVwiLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImJ5dGVzXCIsXG4gICAgICAgICAgICAgICAgbmFtZTogXCJzaWduYXR1cmVcIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcImJ5dGVzXCIsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICAgIG5hbWU6IFwibWFraW5nQW1vdW50XCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInN0cnVjdCBGaWxsT3JkZXJQYXJhbXNbXVwiLFxuICAgICAgICAgICAgbmFtZTogXCJmbGFzaEZpbGxzXCIsXG4gICAgICAgICAgICB0eXBlOiBcInR1cGxlW11cIixcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJieXRlc1wiLFxuICAgICAgICAgICAgbmFtZTogXCJvcHREYXRhXCIsXG4gICAgICAgICAgICB0eXBlOiBcImJ5dGVzXCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInN0cnVjdCBMaW1pdE9yZGVyRGF0YVwiLFxuICAgICAgICBuYW1lOiBcImxpbWl0XCIsXG4gICAgICAgIHR5cGU6IFwidHVwbGVcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcImFkZExpcXVpZGl0eVNpbmdsZVRva2VuXCIsXG4gICAgb3V0cHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIm5ldExwT3V0XCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJuZXRTeUZlZVwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwibmV0U3lJbnRlcm1cIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcInBheWFibGVcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJyZWNlaXZlclwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwibWFya2V0XCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJtaW5McE91dFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwibWluWXRPdXRcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBjb21wb25lbnRzOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgIG5hbWU6IFwidG9rZW5JblwiLFxuICAgICAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgbmFtZTogXCJuZXRUb2tlbkluXCIsXG4gICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICBuYW1lOiBcInRva2VuTWludFN5XCIsXG4gICAgICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICBuYW1lOiBcInBlbmRsZVN3YXBcIixcbiAgICAgICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgY29tcG9uZW50czogW1xuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImVudW0gU3dhcFR5cGVcIixcbiAgICAgICAgICAgICAgICBuYW1lOiBcInN3YXBUeXBlXCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJ1aW50OFwiLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgICAgICBuYW1lOiBcImV4dFJvdXRlclwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImJ5dGVzXCIsXG4gICAgICAgICAgICAgICAgbmFtZTogXCJleHRDYWxsZGF0YVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwiYnl0ZXNcIixcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJib29sXCIsXG4gICAgICAgICAgICAgICAgbmFtZTogXCJuZWVkU2NhbGVcIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcImJvb2xcIixcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwic3RydWN0IFN3YXBEYXRhXCIsXG4gICAgICAgICAgICBuYW1lOiBcInN3YXBEYXRhXCIsXG4gICAgICAgICAgICB0eXBlOiBcInR1cGxlXCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInN0cnVjdCBUb2tlbklucHV0XCIsXG4gICAgICAgIG5hbWU6IFwiaW5wdXRcIixcbiAgICAgICAgdHlwZTogXCJ0dXBsZVwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG5hbWU6IFwiYWRkTGlxdWlkaXR5U2luZ2xlVG9rZW5LZWVwWXRcIixcbiAgICBvdXRwdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwibmV0THBPdXRcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIm5ldFl0T3V0XCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJuZXRTeU1pbnRQeVwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwibmV0U3lJbnRlcm1cIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcInBheWFibGVcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NbXVwiLFxuICAgICAgICBuYW1lOiBcIm1hcmtldHNcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzW11cIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcImJvb3N0TWFya2V0c1wiLFxuICAgIG91dHB1dHM6IFtdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJub25wYXlhYmxlXCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXSxcbiAgICBuYW1lOiBcImNsYWltT3duZXJzaGlwXCIsXG4gICAgb3V0cHV0czogW10sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcIm5vbnBheWFibGVcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJyZWNlaXZlclwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwibWFya2V0XCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJuZXRQdEluXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJuZXRMcEluXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJtaW5TeU91dFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcImV4aXRQb3N0RXhwVG9TeVwiLFxuICAgIG91dHB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgY29tcG9uZW50czogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICBuYW1lOiBcIm5ldFB0RnJvbVJlbW92ZVwiLFxuICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgbmFtZTogXCJuZXRTeUZyb21SZW1vdmVcIixcbiAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgIG5hbWU6IFwibmV0UHRSZWRlZW1cIixcbiAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgIG5hbWU6IFwibmV0U3lGcm9tUmVkZWVtXCIsXG4gICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICBuYW1lOiBcInRvdGFsU3lPdXRcIixcbiAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIGludGVybmFsVHlwZTogXCJzdHJ1Y3QgSVBBY3Rpb25NaXNjVjMuRXhpdFBvc3RFeHBSZXR1cm5QYXJhbXNcIixcbiAgICAgICAgbmFtZTogXCJwYXJhbXNcIixcbiAgICAgICAgdHlwZTogXCJ0dXBsZVwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJub25wYXlhYmxlXCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwicmVjZWl2ZXJcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcIm1hcmtldFwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwibmV0UHRJblwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwibmV0THBJblwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGNvbXBvbmVudHM6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgbmFtZTogXCJ0b2tlbk91dFwiLFxuICAgICAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgbmFtZTogXCJtaW5Ub2tlbk91dFwiLFxuICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgbmFtZTogXCJ0b2tlblJlZGVlbVN5XCIsXG4gICAgICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICBuYW1lOiBcInBlbmRsZVN3YXBcIixcbiAgICAgICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgY29tcG9uZW50czogW1xuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImVudW0gU3dhcFR5cGVcIixcbiAgICAgICAgICAgICAgICBuYW1lOiBcInN3YXBUeXBlXCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJ1aW50OFwiLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgICAgICBuYW1lOiBcImV4dFJvdXRlclwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImJ5dGVzXCIsXG4gICAgICAgICAgICAgICAgbmFtZTogXCJleHRDYWxsZGF0YVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwiYnl0ZXNcIixcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJib29sXCIsXG4gICAgICAgICAgICAgICAgbmFtZTogXCJuZWVkU2NhbGVcIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcImJvb2xcIixcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwic3RydWN0IFN3YXBEYXRhXCIsXG4gICAgICAgICAgICBuYW1lOiBcInN3YXBEYXRhXCIsXG4gICAgICAgICAgICB0eXBlOiBcInR1cGxlXCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInN0cnVjdCBUb2tlbk91dHB1dFwiLFxuICAgICAgICBuYW1lOiBcIm91dHB1dFwiLFxuICAgICAgICB0eXBlOiBcInR1cGxlXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJleGl0UG9zdEV4cFRvVG9rZW5cIixcbiAgICBvdXRwdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwibmV0VG9rZW5PdXRcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBjb21wb25lbnRzOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgIG5hbWU6IFwibmV0UHRGcm9tUmVtb3ZlXCIsXG4gICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICBuYW1lOiBcIm5ldFN5RnJvbVJlbW92ZVwiLFxuICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgbmFtZTogXCJuZXRQdFJlZGVlbVwiLFxuICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgbmFtZTogXCJuZXRTeUZyb21SZWRlZW1cIixcbiAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgIG5hbWU6IFwidG90YWxTeU91dFwiLFxuICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInN0cnVjdCBJUEFjdGlvbk1pc2NWMy5FeGl0UG9zdEV4cFJldHVyblBhcmFtc1wiLFxuICAgICAgICBuYW1lOiBcInBhcmFtc1wiLFxuICAgICAgICB0eXBlOiBcInR1cGxlXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcIm5vbnBheWFibGVcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJyZWNlaXZlclwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwibWFya2V0XCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJuZXRQdEluXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJuZXRZdEluXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJuZXRMcEluXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJtaW5TeU91dFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGNvbXBvbmVudHM6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgbmFtZTogXCJsaW1pdFJvdXRlclwiLFxuICAgICAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgbmFtZTogXCJlcHNTa2lwTWFya2V0XCIsXG4gICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGNvbXBvbmVudHM6IFtcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGNvbXBvbmVudHM6IFtcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJzYWx0XCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJleHBpcnlcIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIm5vbmNlXCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImVudW0gSVBMaW1pdE9yZGVyVHlwZS5PcmRlclR5cGVcIixcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJvcmRlclR5cGVcIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJ1aW50OFwiLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJ0b2tlblwiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiWVRcIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIm1ha2VyXCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJyZWNlaXZlclwiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwibWFraW5nQW1vdW50XCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJsbkltcGxpZWRSYXRlXCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJmYWlsU2FmZVJhdGVcIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYnl0ZXNcIixcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJwZXJtaXRcIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJieXRlc1wiLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJzdHJ1Y3QgT3JkZXJcIixcbiAgICAgICAgICAgICAgICBuYW1lOiBcIm9yZGVyXCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJ0dXBsZVwiLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImJ5dGVzXCIsXG4gICAgICAgICAgICAgICAgbmFtZTogXCJzaWduYXR1cmVcIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcImJ5dGVzXCIsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICAgIG5hbWU6IFwibWFraW5nQW1vdW50XCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInN0cnVjdCBGaWxsT3JkZXJQYXJhbXNbXVwiLFxuICAgICAgICAgICAgbmFtZTogXCJub3JtYWxGaWxsc1wiLFxuICAgICAgICAgICAgdHlwZTogXCJ0dXBsZVtdXCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBjb21wb25lbnRzOiBbXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBjb21wb25lbnRzOiBbXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwic2FsdFwiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiZXhwaXJ5XCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJub25jZVwiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJlbnVtIElQTGltaXRPcmRlclR5cGUuT3JkZXJUeXBlXCIsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwib3JkZXJUeXBlXCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwidWludDhcIixcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwidG9rZW5cIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIllUXCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJtYWtlclwiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwicmVjZWl2ZXJcIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIm1ha2luZ0Ftb3VudFwiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwibG5JbXBsaWVkUmF0ZVwiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiZmFpbFNhZmVSYXRlXCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImJ5dGVzXCIsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwicGVybWl0XCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiYnl0ZXNcIixcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwic3RydWN0IE9yZGVyXCIsXG4gICAgICAgICAgICAgICAgbmFtZTogXCJvcmRlclwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwidHVwbGVcIixcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJieXRlc1wiLFxuICAgICAgICAgICAgICAgIG5hbWU6IFwic2lnbmF0dXJlXCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJieXRlc1wiLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgICBuYW1lOiBcIm1ha2luZ0Ftb3VudFwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJzdHJ1Y3QgRmlsbE9yZGVyUGFyYW1zW11cIixcbiAgICAgICAgICAgIG5hbWU6IFwiZmxhc2hGaWxsc1wiLFxuICAgICAgICAgICAgdHlwZTogXCJ0dXBsZVtdXCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYnl0ZXNcIixcbiAgICAgICAgICAgIG5hbWU6IFwib3B0RGF0YVwiLFxuICAgICAgICAgICAgdHlwZTogXCJieXRlc1wiLFxuICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIGludGVybmFsVHlwZTogXCJzdHJ1Y3QgTGltaXRPcmRlckRhdGFcIixcbiAgICAgICAgbmFtZTogXCJsaW1pdFwiLFxuICAgICAgICB0eXBlOiBcInR1cGxlXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJleGl0UHJlRXhwVG9TeVwiLFxuICAgIG91dHB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgY29tcG9uZW50czogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICBuYW1lOiBcIm5ldFB0RnJvbVJlbW92ZVwiLFxuICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgbmFtZTogXCJuZXRTeUZyb21SZW1vdmVcIixcbiAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgIG5hbWU6IFwibmV0UHlSZWRlZW1cIixcbiAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgIG5hbWU6IFwibmV0U3lGcm9tUmVkZWVtXCIsXG4gICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICBuYW1lOiBcIm5ldFB0U3dhcFwiLFxuICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgbmFtZTogXCJuZXRZdFN3YXBcIixcbiAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgIG5hbWU6IFwibmV0U3lGcm9tU3dhcFwiLFxuICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgbmFtZTogXCJuZXRTeUZlZVwiLFxuICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgbmFtZTogXCJ0b3RhbFN5T3V0XCIsXG4gICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwic3RydWN0IElQQWN0aW9uTWlzY1YzLkV4aXRQcmVFeHBSZXR1cm5QYXJhbXNcIixcbiAgICAgICAgbmFtZTogXCJwYXJhbXNcIixcbiAgICAgICAgdHlwZTogXCJ0dXBsZVwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJub25wYXlhYmxlXCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwicmVjZWl2ZXJcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcIm1hcmtldFwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwibmV0UHRJblwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwibmV0WXRJblwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwibmV0THBJblwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGNvbXBvbmVudHM6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgbmFtZTogXCJ0b2tlbk91dFwiLFxuICAgICAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgbmFtZTogXCJtaW5Ub2tlbk91dFwiLFxuICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgbmFtZTogXCJ0b2tlblJlZGVlbVN5XCIsXG4gICAgICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICBuYW1lOiBcInBlbmRsZVN3YXBcIixcbiAgICAgICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgY29tcG9uZW50czogW1xuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImVudW0gU3dhcFR5cGVcIixcbiAgICAgICAgICAgICAgICBuYW1lOiBcInN3YXBUeXBlXCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJ1aW50OFwiLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgICAgICBuYW1lOiBcImV4dFJvdXRlclwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImJ5dGVzXCIsXG4gICAgICAgICAgICAgICAgbmFtZTogXCJleHRDYWxsZGF0YVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwiYnl0ZXNcIixcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJib29sXCIsXG4gICAgICAgICAgICAgICAgbmFtZTogXCJuZWVkU2NhbGVcIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcImJvb2xcIixcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwic3RydWN0IFN3YXBEYXRhXCIsXG4gICAgICAgICAgICBuYW1lOiBcInN3YXBEYXRhXCIsXG4gICAgICAgICAgICB0eXBlOiBcInR1cGxlXCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInN0cnVjdCBUb2tlbk91dHB1dFwiLFxuICAgICAgICBuYW1lOiBcIm91dHB1dFwiLFxuICAgICAgICB0eXBlOiBcInR1cGxlXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBjb21wb25lbnRzOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgIG5hbWU6IFwibGltaXRSb3V0ZXJcIixcbiAgICAgICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgIG5hbWU6IFwiZXBzU2tpcE1hcmtldFwiLFxuICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBjb21wb25lbnRzOiBbXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBjb21wb25lbnRzOiBbXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwic2FsdFwiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiZXhwaXJ5XCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJub25jZVwiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJlbnVtIElQTGltaXRPcmRlclR5cGUuT3JkZXJUeXBlXCIsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwib3JkZXJUeXBlXCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwidWludDhcIixcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwidG9rZW5cIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIllUXCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJtYWtlclwiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwicmVjZWl2ZXJcIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIm1ha2luZ0Ftb3VudFwiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwibG5JbXBsaWVkUmF0ZVwiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiZmFpbFNhZmVSYXRlXCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImJ5dGVzXCIsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwicGVybWl0XCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiYnl0ZXNcIixcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwic3RydWN0IE9yZGVyXCIsXG4gICAgICAgICAgICAgICAgbmFtZTogXCJvcmRlclwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwidHVwbGVcIixcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJieXRlc1wiLFxuICAgICAgICAgICAgICAgIG5hbWU6IFwic2lnbmF0dXJlXCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJieXRlc1wiLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgICBuYW1lOiBcIm1ha2luZ0Ftb3VudFwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJzdHJ1Y3QgRmlsbE9yZGVyUGFyYW1zW11cIixcbiAgICAgICAgICAgIG5hbWU6IFwibm9ybWFsRmlsbHNcIixcbiAgICAgICAgICAgIHR5cGU6IFwidHVwbGVbXVwiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgY29tcG9uZW50czogW1xuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgY29tcG9uZW50czogW1xuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcInNhbHRcIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcImV4cGlyeVwiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwibm9uY2VcIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiZW51bSBJUExpbWl0T3JkZXJUeXBlLk9yZGVyVHlwZVwiLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIm9yZGVyVHlwZVwiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcInVpbnQ4XCIsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcInRva2VuXCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJZVFwiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwibWFrZXJcIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcInJlY2VpdmVyXCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJtYWtpbmdBbW91bnRcIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcImxuSW1wbGllZFJhdGVcIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcImZhaWxTYWZlUmF0ZVwiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJieXRlc1wiLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcInBlcm1pdFwiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImJ5dGVzXCIsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInN0cnVjdCBPcmRlclwiLFxuICAgICAgICAgICAgICAgIG5hbWU6IFwib3JkZXJcIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcInR1cGxlXCIsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYnl0ZXNcIixcbiAgICAgICAgICAgICAgICBuYW1lOiBcInNpZ25hdHVyZVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwiYnl0ZXNcIixcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgICAgbmFtZTogXCJtYWtpbmdBbW91bnRcIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwic3RydWN0IEZpbGxPcmRlclBhcmFtc1tdXCIsXG4gICAgICAgICAgICBuYW1lOiBcImZsYXNoRmlsbHNcIixcbiAgICAgICAgICAgIHR5cGU6IFwidHVwbGVbXVwiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImJ5dGVzXCIsXG4gICAgICAgICAgICBuYW1lOiBcIm9wdERhdGFcIixcbiAgICAgICAgICAgIHR5cGU6IFwiYnl0ZXNcIixcbiAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwic3RydWN0IExpbWl0T3JkZXJEYXRhXCIsXG4gICAgICAgIG5hbWU6IFwibGltaXRcIixcbiAgICAgICAgdHlwZTogXCJ0dXBsZVwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG5hbWU6IFwiZXhpdFByZUV4cFRvVG9rZW5cIixcbiAgICBvdXRwdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwibmV0VG9rZW5PdXRcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBjb21wb25lbnRzOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgIG5hbWU6IFwibmV0UHRGcm9tUmVtb3ZlXCIsXG4gICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICBuYW1lOiBcIm5ldFN5RnJvbVJlbW92ZVwiLFxuICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgbmFtZTogXCJuZXRQeVJlZGVlbVwiLFxuICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgbmFtZTogXCJuZXRTeUZyb21SZWRlZW1cIixcbiAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgIG5hbWU6IFwibmV0UHRTd2FwXCIsXG4gICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICBuYW1lOiBcIm5ldFl0U3dhcFwiLFxuICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgbmFtZTogXCJuZXRTeUZyb21Td2FwXCIsXG4gICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICBuYW1lOiBcIm5ldFN5RmVlXCIsXG4gICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICBuYW1lOiBcInRvdGFsU3lPdXRcIixcbiAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIGludGVybmFsVHlwZTogXCJzdHJ1Y3QgSVBBY3Rpb25NaXNjVjMuRXhpdFByZUV4cFJldHVyblBhcmFtc1wiLFxuICAgICAgICBuYW1lOiBcInBhcmFtc1wiLFxuICAgICAgICB0eXBlOiBcInR1cGxlXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcIm5vbnBheWFibGVcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJhY3R1YWxNYWtpbmdcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcImFjdHVhbFRha2luZ1wiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwidG90YWxGZWVcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYnl0ZXNcIixcbiAgICAgICAgbmFtZTogXCJkYXRhXCIsXG4gICAgICAgIHR5cGU6IFwiYnl0ZXNcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcImxpbWl0Um91dGVyQ2FsbGJhY2tcIixcbiAgICBvdXRwdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJieXRlc1wiLFxuICAgICAgICBuYW1lOiBcIlwiLFxuICAgICAgICB0eXBlOiBcImJ5dGVzXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcIm5vbnBheWFibGVcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJyZWNlaXZlclwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwiWVRcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIm5ldFN5SW5cIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIm1pblB5T3V0XCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG5hbWU6IFwibWludFB5RnJvbVN5XCIsXG4gICAgb3V0cHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIm5ldFB5T3V0XCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJub25wYXlhYmxlXCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwicmVjZWl2ZXJcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcIllUXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJtaW5QeU91dFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGNvbXBvbmVudHM6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgbmFtZTogXCJ0b2tlbkluXCIsXG4gICAgICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICBuYW1lOiBcIm5ldFRva2VuSW5cIixcbiAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgIG5hbWU6IFwidG9rZW5NaW50U3lcIixcbiAgICAgICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgIG5hbWU6IFwicGVuZGxlU3dhcFwiLFxuICAgICAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBjb21wb25lbnRzOiBbXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiZW51bSBTd2FwVHlwZVwiLFxuICAgICAgICAgICAgICAgIG5hbWU6IFwic3dhcFR5cGVcIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcInVpbnQ4XCIsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgICAgIG5hbWU6IFwiZXh0Um91dGVyXCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYnl0ZXNcIixcbiAgICAgICAgICAgICAgICBuYW1lOiBcImV4dENhbGxkYXRhXCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJieXRlc1wiLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImJvb2xcIixcbiAgICAgICAgICAgICAgICBuYW1lOiBcIm5lZWRTY2FsZVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwiYm9vbFwiLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJzdHJ1Y3QgU3dhcERhdGFcIixcbiAgICAgICAgICAgIG5hbWU6IFwic3dhcERhdGFcIixcbiAgICAgICAgICAgIHR5cGU6IFwidHVwbGVcIixcbiAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwic3RydWN0IFRva2VuSW5wdXRcIixcbiAgICAgICAgbmFtZTogXCJpbnB1dFwiLFxuICAgICAgICB0eXBlOiBcInR1cGxlXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJtaW50UHlGcm9tVG9rZW5cIixcbiAgICBvdXRwdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwibmV0UHlPdXRcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIm5ldFN5SW50ZXJtXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJwYXlhYmxlXCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwicmVjZWl2ZXJcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcIlNZXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJtaW5TeU91dFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGNvbXBvbmVudHM6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgbmFtZTogXCJ0b2tlbkluXCIsXG4gICAgICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICBuYW1lOiBcIm5ldFRva2VuSW5cIixcbiAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgIG5hbWU6IFwidG9rZW5NaW50U3lcIixcbiAgICAgICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgIG5hbWU6IFwicGVuZGxlU3dhcFwiLFxuICAgICAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBjb21wb25lbnRzOiBbXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiZW51bSBTd2FwVHlwZVwiLFxuICAgICAgICAgICAgICAgIG5hbWU6IFwic3dhcFR5cGVcIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcInVpbnQ4XCIsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgICAgIG5hbWU6IFwiZXh0Um91dGVyXCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYnl0ZXNcIixcbiAgICAgICAgICAgICAgICBuYW1lOiBcImV4dENhbGxkYXRhXCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJieXRlc1wiLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImJvb2xcIixcbiAgICAgICAgICAgICAgICBuYW1lOiBcIm5lZWRTY2FsZVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwiYm9vbFwiLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJzdHJ1Y3QgU3dhcERhdGFcIixcbiAgICAgICAgICAgIG5hbWU6IFwic3dhcERhdGFcIixcbiAgICAgICAgICAgIHR5cGU6IFwidHVwbGVcIixcbiAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwic3RydWN0IFRva2VuSW5wdXRcIixcbiAgICAgICAgbmFtZTogXCJpbnB1dFwiLFxuICAgICAgICB0eXBlOiBcInR1cGxlXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJtaW50U3lGcm9tVG9rZW5cIixcbiAgICBvdXRwdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwibmV0U3lPdXRcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcInBheWFibGVcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgY29tcG9uZW50czogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJib29sXCIsXG4gICAgICAgICAgICBuYW1lOiBcImFsbG93RmFpbHVyZVwiLFxuICAgICAgICAgICAgdHlwZTogXCJib29sXCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYnl0ZXNcIixcbiAgICAgICAgICAgIG5hbWU6IFwiY2FsbERhdGFcIixcbiAgICAgICAgICAgIHR5cGU6IFwiYnl0ZXNcIixcbiAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwic3RydWN0IElQQWN0aW9uTWlzY1YzLkNhbGwzW11cIixcbiAgICAgICAgbmFtZTogXCJjYWxsc1wiLFxuICAgICAgICB0eXBlOiBcInR1cGxlW11cIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcIm11bHRpY2FsbFwiLFxuICAgIG91dHB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgY29tcG9uZW50czogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJib29sXCIsXG4gICAgICAgICAgICBuYW1lOiBcInN1Y2Nlc3NcIixcbiAgICAgICAgICAgIHR5cGU6IFwiYm9vbFwiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImJ5dGVzXCIsXG4gICAgICAgICAgICBuYW1lOiBcInJldHVybkRhdGFcIixcbiAgICAgICAgICAgIHR5cGU6IFwiYnl0ZXNcIixcbiAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwic3RydWN0IElQQWN0aW9uTWlzY1YzLlJlc3VsdFtdXCIsXG4gICAgICAgIG5hbWU6IFwicmVzXCIsXG4gICAgICAgIHR5cGU6IFwidHVwbGVbXVwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJwYXlhYmxlXCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXSxcbiAgICBuYW1lOiBcIm93bmVyXCIsXG4gICAgb3V0cHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcIlwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwidmlld1wiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW10sXG4gICAgbmFtZTogXCJwZW5kaW5nT3duZXJcIixcbiAgICBvdXRwdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwiXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJ2aWV3XCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwidXNlclwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzW11cIixcbiAgICAgICAgbmFtZTogXCJzeXNcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzW11cIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzW11cIixcbiAgICAgICAgbmFtZTogXCJ5dHNcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzW11cIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzW11cIixcbiAgICAgICAgbmFtZTogXCJtYXJrZXRzXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1tdXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJyZWRlZW1EdWVJbnRlcmVzdEFuZFJld2FyZHNcIixcbiAgICBvdXRwdXRzOiBbXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwibm9ucGF5YWJsZVwiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcInJlY2VpdmVyXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJZVFwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwibmV0UHlJblwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwibWluU3lPdXRcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJyZWRlZW1QeVRvU3lcIixcbiAgICBvdXRwdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwibmV0U3lPdXRcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcIm5vbnBheWFibGVcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJyZWNlaXZlclwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwiWVRcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIm5ldFB5SW5cIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBjb21wb25lbnRzOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgIG5hbWU6IFwidG9rZW5PdXRcIixcbiAgICAgICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgIG5hbWU6IFwibWluVG9rZW5PdXRcIixcbiAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgIG5hbWU6IFwidG9rZW5SZWRlZW1TeVwiLFxuICAgICAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgbmFtZTogXCJwZW5kbGVTd2FwXCIsXG4gICAgICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGNvbXBvbmVudHM6IFtcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJlbnVtIFN3YXBUeXBlXCIsXG4gICAgICAgICAgICAgICAgbmFtZTogXCJzd2FwVHlwZVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwidWludDhcIixcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICAgICAgbmFtZTogXCJleHRSb3V0ZXJcIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJieXRlc1wiLFxuICAgICAgICAgICAgICAgIG5hbWU6IFwiZXh0Q2FsbGRhdGFcIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcImJ5dGVzXCIsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYm9vbFwiLFxuICAgICAgICAgICAgICAgIG5hbWU6IFwibmVlZFNjYWxlXCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJib29sXCIsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInN0cnVjdCBTd2FwRGF0YVwiLFxuICAgICAgICAgICAgbmFtZTogXCJzd2FwRGF0YVwiLFxuICAgICAgICAgICAgdHlwZTogXCJ0dXBsZVwiLFxuICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIGludGVybmFsVHlwZTogXCJzdHJ1Y3QgVG9rZW5PdXRwdXRcIixcbiAgICAgICAgbmFtZTogXCJvdXRwdXRcIixcbiAgICAgICAgdHlwZTogXCJ0dXBsZVwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG5hbWU6IFwicmVkZWVtUHlUb1Rva2VuXCIsXG4gICAgb3V0cHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIm5ldFRva2VuT3V0XCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJuZXRTeUludGVybVwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwibm9ucGF5YWJsZVwiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcInJlY2VpdmVyXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJTWVwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwibmV0U3lJblwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGNvbXBvbmVudHM6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgbmFtZTogXCJ0b2tlbk91dFwiLFxuICAgICAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgbmFtZTogXCJtaW5Ub2tlbk91dFwiLFxuICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgbmFtZTogXCJ0b2tlblJlZGVlbVN5XCIsXG4gICAgICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICBuYW1lOiBcInBlbmRsZVN3YXBcIixcbiAgICAgICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgY29tcG9uZW50czogW1xuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImVudW0gU3dhcFR5cGVcIixcbiAgICAgICAgICAgICAgICBuYW1lOiBcInN3YXBUeXBlXCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJ1aW50OFwiLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgICAgICBuYW1lOiBcImV4dFJvdXRlclwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImJ5dGVzXCIsXG4gICAgICAgICAgICAgICAgbmFtZTogXCJleHRDYWxsZGF0YVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwiYnl0ZXNcIixcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJib29sXCIsXG4gICAgICAgICAgICAgICAgbmFtZTogXCJuZWVkU2NhbGVcIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcImJvb2xcIixcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwic3RydWN0IFN3YXBEYXRhXCIsXG4gICAgICAgICAgICBuYW1lOiBcInN3YXBEYXRhXCIsXG4gICAgICAgICAgICB0eXBlOiBcInR1cGxlXCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInN0cnVjdCBUb2tlbk91dHB1dFwiLFxuICAgICAgICBuYW1lOiBcIm91dHB1dFwiLFxuICAgICAgICB0eXBlOiBcInR1cGxlXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJyZWRlZW1TeVRvVG9rZW5cIixcbiAgICBvdXRwdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwibmV0VG9rZW5PdXRcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcIm5vbnBheWFibGVcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJyZWNlaXZlclwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwibWFya2V0XCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJuZXRMcFRvUmVtb3ZlXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJtaW5TeU91dFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwibWluUHRPdXRcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJyZW1vdmVMaXF1aWRpdHlEdWFsU3lBbmRQdFwiLFxuICAgIG91dHB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJuZXRTeU91dFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwibmV0UHRPdXRcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcIm5vbnBheWFibGVcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJyZWNlaXZlclwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwibWFya2V0XCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJuZXRMcFRvUmVtb3ZlXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgY29tcG9uZW50czogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICBuYW1lOiBcInRva2VuT3V0XCIsXG4gICAgICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICBuYW1lOiBcIm1pblRva2VuT3V0XCIsXG4gICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICBuYW1lOiBcInRva2VuUmVkZWVtU3lcIixcbiAgICAgICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgIG5hbWU6IFwicGVuZGxlU3dhcFwiLFxuICAgICAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBjb21wb25lbnRzOiBbXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiZW51bSBTd2FwVHlwZVwiLFxuICAgICAgICAgICAgICAgIG5hbWU6IFwic3dhcFR5cGVcIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcInVpbnQ4XCIsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgICAgIG5hbWU6IFwiZXh0Um91dGVyXCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYnl0ZXNcIixcbiAgICAgICAgICAgICAgICBuYW1lOiBcImV4dENhbGxkYXRhXCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJieXRlc1wiLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImJvb2xcIixcbiAgICAgICAgICAgICAgICBuYW1lOiBcIm5lZWRTY2FsZVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwiYm9vbFwiLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJzdHJ1Y3QgU3dhcERhdGFcIixcbiAgICAgICAgICAgIG5hbWU6IFwic3dhcERhdGFcIixcbiAgICAgICAgICAgIHR5cGU6IFwidHVwbGVcIixcbiAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwic3RydWN0IFRva2VuT3V0cHV0XCIsXG4gICAgICAgIG5hbWU6IFwib3V0cHV0XCIsXG4gICAgICAgIHR5cGU6IFwidHVwbGVcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwibWluUHRPdXRcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJyZW1vdmVMaXF1aWRpdHlEdWFsVG9rZW5BbmRQdFwiLFxuICAgIG91dHB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJuZXRUb2tlbk91dFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwibmV0UHRPdXRcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIm5ldFN5SW50ZXJtXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJub25wYXlhYmxlXCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwicmVjZWl2ZXJcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcIm1hcmtldFwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwibmV0THBUb1JlbW92ZVwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwibWluUHRPdXRcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBjb21wb25lbnRzOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgIG5hbWU6IFwiZ3Vlc3NNaW5cIixcbiAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgIG5hbWU6IFwiZ3Vlc3NNYXhcIixcbiAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgIG5hbWU6IFwiZ3Vlc3NPZmZjaGFpblwiLFxuICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgbmFtZTogXCJtYXhJdGVyYXRpb25cIixcbiAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgIG5hbWU6IFwiZXBzXCIsXG4gICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwic3RydWN0IEFwcHJveFBhcmFtc1wiLFxuICAgICAgICBuYW1lOiBcImd1ZXNzUHRSZWNlaXZlZEZyb21TeVwiLFxuICAgICAgICB0eXBlOiBcInR1cGxlXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBjb21wb25lbnRzOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgIG5hbWU6IFwibGltaXRSb3V0ZXJcIixcbiAgICAgICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgIG5hbWU6IFwiZXBzU2tpcE1hcmtldFwiLFxuICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBjb21wb25lbnRzOiBbXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBjb21wb25lbnRzOiBbXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwic2FsdFwiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiZXhwaXJ5XCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJub25jZVwiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJlbnVtIElQTGltaXRPcmRlclR5cGUuT3JkZXJUeXBlXCIsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwib3JkZXJUeXBlXCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwidWludDhcIixcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwidG9rZW5cIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIllUXCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJtYWtlclwiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwicmVjZWl2ZXJcIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIm1ha2luZ0Ftb3VudFwiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwibG5JbXBsaWVkUmF0ZVwiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiZmFpbFNhZmVSYXRlXCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImJ5dGVzXCIsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwicGVybWl0XCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiYnl0ZXNcIixcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwic3RydWN0IE9yZGVyXCIsXG4gICAgICAgICAgICAgICAgbmFtZTogXCJvcmRlclwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwidHVwbGVcIixcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJieXRlc1wiLFxuICAgICAgICAgICAgICAgIG5hbWU6IFwic2lnbmF0dXJlXCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJieXRlc1wiLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgICBuYW1lOiBcIm1ha2luZ0Ftb3VudFwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJzdHJ1Y3QgRmlsbE9yZGVyUGFyYW1zW11cIixcbiAgICAgICAgICAgIG5hbWU6IFwibm9ybWFsRmlsbHNcIixcbiAgICAgICAgICAgIHR5cGU6IFwidHVwbGVbXVwiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgY29tcG9uZW50czogW1xuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgY29tcG9uZW50czogW1xuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcInNhbHRcIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcImV4cGlyeVwiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwibm9uY2VcIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiZW51bSBJUExpbWl0T3JkZXJUeXBlLk9yZGVyVHlwZVwiLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIm9yZGVyVHlwZVwiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcInVpbnQ4XCIsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcInRva2VuXCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJZVFwiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwibWFrZXJcIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcInJlY2VpdmVyXCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJtYWtpbmdBbW91bnRcIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcImxuSW1wbGllZFJhdGVcIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcImZhaWxTYWZlUmF0ZVwiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJieXRlc1wiLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcInBlcm1pdFwiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImJ5dGVzXCIsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInN0cnVjdCBPcmRlclwiLFxuICAgICAgICAgICAgICAgIG5hbWU6IFwib3JkZXJcIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcInR1cGxlXCIsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYnl0ZXNcIixcbiAgICAgICAgICAgICAgICBuYW1lOiBcInNpZ25hdHVyZVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwiYnl0ZXNcIixcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgICAgbmFtZTogXCJtYWtpbmdBbW91bnRcIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwic3RydWN0IEZpbGxPcmRlclBhcmFtc1tdXCIsXG4gICAgICAgICAgICBuYW1lOiBcImZsYXNoRmlsbHNcIixcbiAgICAgICAgICAgIHR5cGU6IFwidHVwbGVbXVwiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImJ5dGVzXCIsXG4gICAgICAgICAgICBuYW1lOiBcIm9wdERhdGFcIixcbiAgICAgICAgICAgIHR5cGU6IFwiYnl0ZXNcIixcbiAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwic3RydWN0IExpbWl0T3JkZXJEYXRhXCIsXG4gICAgICAgIG5hbWU6IFwibGltaXRcIixcbiAgICAgICAgdHlwZTogXCJ0dXBsZVwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG5hbWU6IFwicmVtb3ZlTGlxdWlkaXR5U2luZ2xlUHRcIixcbiAgICBvdXRwdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwibmV0UHRPdXRcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIm5ldFN5RmVlXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJub25wYXlhYmxlXCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwicmVjZWl2ZXJcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcIm1hcmtldFwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwibmV0THBUb1JlbW92ZVwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwibWluU3lPdXRcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBjb21wb25lbnRzOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgIG5hbWU6IFwibGltaXRSb3V0ZXJcIixcbiAgICAgICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgIG5hbWU6IFwiZXBzU2tpcE1hcmtldFwiLFxuICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBjb21wb25lbnRzOiBbXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBjb21wb25lbnRzOiBbXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwic2FsdFwiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiZXhwaXJ5XCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJub25jZVwiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJlbnVtIElQTGltaXRPcmRlclR5cGUuT3JkZXJUeXBlXCIsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwib3JkZXJUeXBlXCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwidWludDhcIixcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwidG9rZW5cIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIllUXCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJtYWtlclwiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwicmVjZWl2ZXJcIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIm1ha2luZ0Ftb3VudFwiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwibG5JbXBsaWVkUmF0ZVwiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiZmFpbFNhZmVSYXRlXCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImJ5dGVzXCIsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwicGVybWl0XCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiYnl0ZXNcIixcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwic3RydWN0IE9yZGVyXCIsXG4gICAgICAgICAgICAgICAgbmFtZTogXCJvcmRlclwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwidHVwbGVcIixcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJieXRlc1wiLFxuICAgICAgICAgICAgICAgIG5hbWU6IFwic2lnbmF0dXJlXCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJieXRlc1wiLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgICBuYW1lOiBcIm1ha2luZ0Ftb3VudFwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJzdHJ1Y3QgRmlsbE9yZGVyUGFyYW1zW11cIixcbiAgICAgICAgICAgIG5hbWU6IFwibm9ybWFsRmlsbHNcIixcbiAgICAgICAgICAgIHR5cGU6IFwidHVwbGVbXVwiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgY29tcG9uZW50czogW1xuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgY29tcG9uZW50czogW1xuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcInNhbHRcIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcImV4cGlyeVwiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwibm9uY2VcIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiZW51bSBJUExpbWl0T3JkZXJUeXBlLk9yZGVyVHlwZVwiLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIm9yZGVyVHlwZVwiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcInVpbnQ4XCIsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcInRva2VuXCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJZVFwiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwibWFrZXJcIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcInJlY2VpdmVyXCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJtYWtpbmdBbW91bnRcIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcImxuSW1wbGllZFJhdGVcIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcImZhaWxTYWZlUmF0ZVwiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJieXRlc1wiLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcInBlcm1pdFwiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImJ5dGVzXCIsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInN0cnVjdCBPcmRlclwiLFxuICAgICAgICAgICAgICAgIG5hbWU6IFwib3JkZXJcIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcInR1cGxlXCIsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYnl0ZXNcIixcbiAgICAgICAgICAgICAgICBuYW1lOiBcInNpZ25hdHVyZVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwiYnl0ZXNcIixcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgICAgbmFtZTogXCJtYWtpbmdBbW91bnRcIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwic3RydWN0IEZpbGxPcmRlclBhcmFtc1tdXCIsXG4gICAgICAgICAgICBuYW1lOiBcImZsYXNoRmlsbHNcIixcbiAgICAgICAgICAgIHR5cGU6IFwidHVwbGVbXVwiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImJ5dGVzXCIsXG4gICAgICAgICAgICBuYW1lOiBcIm9wdERhdGFcIixcbiAgICAgICAgICAgIHR5cGU6IFwiYnl0ZXNcIixcbiAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwic3RydWN0IExpbWl0T3JkZXJEYXRhXCIsXG4gICAgICAgIG5hbWU6IFwibGltaXRcIixcbiAgICAgICAgdHlwZTogXCJ0dXBsZVwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG5hbWU6IFwicmVtb3ZlTGlxdWlkaXR5U2luZ2xlU3lcIixcbiAgICBvdXRwdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwibmV0U3lPdXRcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIm5ldFN5RmVlXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJub25wYXlhYmxlXCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwicmVjZWl2ZXJcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcIm1hcmtldFwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwibmV0THBUb1JlbW92ZVwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGNvbXBvbmVudHM6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgbmFtZTogXCJ0b2tlbk91dFwiLFxuICAgICAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgbmFtZTogXCJtaW5Ub2tlbk91dFwiLFxuICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgbmFtZTogXCJ0b2tlblJlZGVlbVN5XCIsXG4gICAgICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICBuYW1lOiBcInBlbmRsZVN3YXBcIixcbiAgICAgICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgY29tcG9uZW50czogW1xuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImVudW0gU3dhcFR5cGVcIixcbiAgICAgICAgICAgICAgICBuYW1lOiBcInN3YXBUeXBlXCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJ1aW50OFwiLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgICAgICBuYW1lOiBcImV4dFJvdXRlclwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImJ5dGVzXCIsXG4gICAgICAgICAgICAgICAgbmFtZTogXCJleHRDYWxsZGF0YVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwiYnl0ZXNcIixcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJib29sXCIsXG4gICAgICAgICAgICAgICAgbmFtZTogXCJuZWVkU2NhbGVcIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcImJvb2xcIixcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwic3RydWN0IFN3YXBEYXRhXCIsXG4gICAgICAgICAgICBuYW1lOiBcInN3YXBEYXRhXCIsXG4gICAgICAgICAgICB0eXBlOiBcInR1cGxlXCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInN0cnVjdCBUb2tlbk91dHB1dFwiLFxuICAgICAgICBuYW1lOiBcIm91dHB1dFwiLFxuICAgICAgICB0eXBlOiBcInR1cGxlXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBjb21wb25lbnRzOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgIG5hbWU6IFwibGltaXRSb3V0ZXJcIixcbiAgICAgICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgIG5hbWU6IFwiZXBzU2tpcE1hcmtldFwiLFxuICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBjb21wb25lbnRzOiBbXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBjb21wb25lbnRzOiBbXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwic2FsdFwiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiZXhwaXJ5XCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJub25jZVwiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJlbnVtIElQTGltaXRPcmRlclR5cGUuT3JkZXJUeXBlXCIsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwib3JkZXJUeXBlXCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwidWludDhcIixcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwidG9rZW5cIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIllUXCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJtYWtlclwiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwicmVjZWl2ZXJcIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIm1ha2luZ0Ftb3VudFwiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwibG5JbXBsaWVkUmF0ZVwiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiZmFpbFNhZmVSYXRlXCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImJ5dGVzXCIsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwicGVybWl0XCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiYnl0ZXNcIixcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwic3RydWN0IE9yZGVyXCIsXG4gICAgICAgICAgICAgICAgbmFtZTogXCJvcmRlclwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwidHVwbGVcIixcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJieXRlc1wiLFxuICAgICAgICAgICAgICAgIG5hbWU6IFwic2lnbmF0dXJlXCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJieXRlc1wiLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgICBuYW1lOiBcIm1ha2luZ0Ftb3VudFwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJzdHJ1Y3QgRmlsbE9yZGVyUGFyYW1zW11cIixcbiAgICAgICAgICAgIG5hbWU6IFwibm9ybWFsRmlsbHNcIixcbiAgICAgICAgICAgIHR5cGU6IFwidHVwbGVbXVwiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgY29tcG9uZW50czogW1xuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgY29tcG9uZW50czogW1xuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcInNhbHRcIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcImV4cGlyeVwiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwibm9uY2VcIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiZW51bSBJUExpbWl0T3JkZXJUeXBlLk9yZGVyVHlwZVwiLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIm9yZGVyVHlwZVwiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcInVpbnQ4XCIsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcInRva2VuXCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJZVFwiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwibWFrZXJcIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcInJlY2VpdmVyXCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJtYWtpbmdBbW91bnRcIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcImxuSW1wbGllZFJhdGVcIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcImZhaWxTYWZlUmF0ZVwiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJieXRlc1wiLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcInBlcm1pdFwiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImJ5dGVzXCIsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInN0cnVjdCBPcmRlclwiLFxuICAgICAgICAgICAgICAgIG5hbWU6IFwib3JkZXJcIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcInR1cGxlXCIsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYnl0ZXNcIixcbiAgICAgICAgICAgICAgICBuYW1lOiBcInNpZ25hdHVyZVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwiYnl0ZXNcIixcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgICAgbmFtZTogXCJtYWtpbmdBbW91bnRcIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwic3RydWN0IEZpbGxPcmRlclBhcmFtc1tdXCIsXG4gICAgICAgICAgICBuYW1lOiBcImZsYXNoRmlsbHNcIixcbiAgICAgICAgICAgIHR5cGU6IFwidHVwbGVbXVwiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImJ5dGVzXCIsXG4gICAgICAgICAgICBuYW1lOiBcIm9wdERhdGFcIixcbiAgICAgICAgICAgIHR5cGU6IFwiYnl0ZXNcIixcbiAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwic3RydWN0IExpbWl0T3JkZXJEYXRhXCIsXG4gICAgICAgIG5hbWU6IFwibGltaXRcIixcbiAgICAgICAgdHlwZTogXCJ0dXBsZVwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG5hbWU6IFwicmVtb3ZlTGlxdWlkaXR5U2luZ2xlVG9rZW5cIixcbiAgICBvdXRwdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwibmV0VG9rZW5PdXRcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIm5ldFN5RmVlXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJuZXRTeUludGVybVwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwibm9ucGF5YWJsZVwiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYnl0ZXM0XCIsXG4gICAgICAgIG5hbWU6IFwic2VsZWN0b3JcIixcbiAgICAgICAgdHlwZTogXCJieXRlczRcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcInNlbGVjdG9yVG9GYWNldFwiLFxuICAgIG91dHB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcInZpZXdcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgY29tcG9uZW50czogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICBuYW1lOiBcImZhY2V0XCIsXG4gICAgICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJieXRlczRbXVwiLFxuICAgICAgICAgICAgbmFtZTogXCJzZWxlY3RvcnNcIixcbiAgICAgICAgICAgIHR5cGU6IFwiYnl0ZXM0W11cIixcbiAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwic3RydWN0IElQQWN0aW9uU3RvcmFnZVY0LlNlbGVjdG9yc1RvRmFjZXRbXVwiLFxuICAgICAgICBuYW1lOiBcImFyclwiLFxuICAgICAgICB0eXBlOiBcInR1cGxlW11cIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcInNldFNlbGVjdG9yVG9GYWNldHNcIixcbiAgICBvdXRwdXRzOiBbXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwibm9ucGF5YWJsZVwiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcInRhcmdldFwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJieXRlc1wiLFxuICAgICAgICBuYW1lOiBcImRhdGFcIixcbiAgICAgICAgdHlwZTogXCJieXRlc1wiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG5hbWU6IFwic2ltdWxhdGVcIixcbiAgICBvdXRwdXRzOiBbXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwicGF5YWJsZVwiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiaW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwicHRUb0FjY291bnRcIixcbiAgICAgICAgdHlwZTogXCJpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJzeVRvQWNjb3VudFwiLFxuICAgICAgICB0eXBlOiBcImludDI1NlwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImJ5dGVzXCIsXG4gICAgICAgIG5hbWU6IFwiZGF0YVwiLFxuICAgICAgICB0eXBlOiBcImJ5dGVzXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJzd2FwQ2FsbGJhY2tcIixcbiAgICBvdXRwdXRzOiBbXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwibm9ucGF5YWJsZVwiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcInJlY2VpdmVyXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJtYXJrZXRcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcImV4YWN0UHRJblwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwibWluU3lPdXRcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBjb21wb25lbnRzOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgIG5hbWU6IFwibGltaXRSb3V0ZXJcIixcbiAgICAgICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgIG5hbWU6IFwiZXBzU2tpcE1hcmtldFwiLFxuICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBjb21wb25lbnRzOiBbXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBjb21wb25lbnRzOiBbXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwic2FsdFwiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiZXhwaXJ5XCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJub25jZVwiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJlbnVtIElQTGltaXRPcmRlclR5cGUuT3JkZXJUeXBlXCIsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwib3JkZXJUeXBlXCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwidWludDhcIixcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwidG9rZW5cIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIllUXCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJtYWtlclwiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwicmVjZWl2ZXJcIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIm1ha2luZ0Ftb3VudFwiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwibG5JbXBsaWVkUmF0ZVwiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiZmFpbFNhZmVSYXRlXCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImJ5dGVzXCIsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwicGVybWl0XCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiYnl0ZXNcIixcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwic3RydWN0IE9yZGVyXCIsXG4gICAgICAgICAgICAgICAgbmFtZTogXCJvcmRlclwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwidHVwbGVcIixcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJieXRlc1wiLFxuICAgICAgICAgICAgICAgIG5hbWU6IFwic2lnbmF0dXJlXCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJieXRlc1wiLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgICBuYW1lOiBcIm1ha2luZ0Ftb3VudFwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJzdHJ1Y3QgRmlsbE9yZGVyUGFyYW1zW11cIixcbiAgICAgICAgICAgIG5hbWU6IFwibm9ybWFsRmlsbHNcIixcbiAgICAgICAgICAgIHR5cGU6IFwidHVwbGVbXVwiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgY29tcG9uZW50czogW1xuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgY29tcG9uZW50czogW1xuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcInNhbHRcIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcImV4cGlyeVwiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwibm9uY2VcIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiZW51bSBJUExpbWl0T3JkZXJUeXBlLk9yZGVyVHlwZVwiLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIm9yZGVyVHlwZVwiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcInVpbnQ4XCIsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcInRva2VuXCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJZVFwiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwibWFrZXJcIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcInJlY2VpdmVyXCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJtYWtpbmdBbW91bnRcIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcImxuSW1wbGllZFJhdGVcIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcImZhaWxTYWZlUmF0ZVwiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJieXRlc1wiLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcInBlcm1pdFwiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImJ5dGVzXCIsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInN0cnVjdCBPcmRlclwiLFxuICAgICAgICAgICAgICAgIG5hbWU6IFwib3JkZXJcIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcInR1cGxlXCIsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYnl0ZXNcIixcbiAgICAgICAgICAgICAgICBuYW1lOiBcInNpZ25hdHVyZVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwiYnl0ZXNcIixcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgICAgbmFtZTogXCJtYWtpbmdBbW91bnRcIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwic3RydWN0IEZpbGxPcmRlclBhcmFtc1tdXCIsXG4gICAgICAgICAgICBuYW1lOiBcImZsYXNoRmlsbHNcIixcbiAgICAgICAgICAgIHR5cGU6IFwidHVwbGVbXVwiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImJ5dGVzXCIsXG4gICAgICAgICAgICBuYW1lOiBcIm9wdERhdGFcIixcbiAgICAgICAgICAgIHR5cGU6IFwiYnl0ZXNcIixcbiAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwic3RydWN0IExpbWl0T3JkZXJEYXRhXCIsXG4gICAgICAgIG5hbWU6IFwibGltaXRcIixcbiAgICAgICAgdHlwZTogXCJ0dXBsZVwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG5hbWU6IFwic3dhcEV4YWN0UHRGb3JTeVwiLFxuICAgIG91dHB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJuZXRTeU91dFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwibmV0U3lGZWVcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcIm5vbnBheWFibGVcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJyZWNlaXZlclwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwibWFya2V0XCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJleGFjdFB0SW5cIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBjb21wb25lbnRzOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgIG5hbWU6IFwidG9rZW5PdXRcIixcbiAgICAgICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgIG5hbWU6IFwibWluVG9rZW5PdXRcIixcbiAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgIG5hbWU6IFwidG9rZW5SZWRlZW1TeVwiLFxuICAgICAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgbmFtZTogXCJwZW5kbGVTd2FwXCIsXG4gICAgICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGNvbXBvbmVudHM6IFtcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJlbnVtIFN3YXBUeXBlXCIsXG4gICAgICAgICAgICAgICAgbmFtZTogXCJzd2FwVHlwZVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwidWludDhcIixcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICAgICAgbmFtZTogXCJleHRSb3V0ZXJcIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJieXRlc1wiLFxuICAgICAgICAgICAgICAgIG5hbWU6IFwiZXh0Q2FsbGRhdGFcIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcImJ5dGVzXCIsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYm9vbFwiLFxuICAgICAgICAgICAgICAgIG5hbWU6IFwibmVlZFNjYWxlXCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJib29sXCIsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInN0cnVjdCBTd2FwRGF0YVwiLFxuICAgICAgICAgICAgbmFtZTogXCJzd2FwRGF0YVwiLFxuICAgICAgICAgICAgdHlwZTogXCJ0dXBsZVwiLFxuICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIGludGVybmFsVHlwZTogXCJzdHJ1Y3QgVG9rZW5PdXRwdXRcIixcbiAgICAgICAgbmFtZTogXCJvdXRwdXRcIixcbiAgICAgICAgdHlwZTogXCJ0dXBsZVwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgY29tcG9uZW50czogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICBuYW1lOiBcImxpbWl0Um91dGVyXCIsXG4gICAgICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICBuYW1lOiBcImVwc1NraXBNYXJrZXRcIixcbiAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgY29tcG9uZW50czogW1xuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgY29tcG9uZW50czogW1xuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcInNhbHRcIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcImV4cGlyeVwiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwibm9uY2VcIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiZW51bSBJUExpbWl0T3JkZXJUeXBlLk9yZGVyVHlwZVwiLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIm9yZGVyVHlwZVwiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcInVpbnQ4XCIsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcInRva2VuXCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJZVFwiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwibWFrZXJcIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcInJlY2VpdmVyXCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJtYWtpbmdBbW91bnRcIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcImxuSW1wbGllZFJhdGVcIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcImZhaWxTYWZlUmF0ZVwiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJieXRlc1wiLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcInBlcm1pdFwiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImJ5dGVzXCIsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInN0cnVjdCBPcmRlclwiLFxuICAgICAgICAgICAgICAgIG5hbWU6IFwib3JkZXJcIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcInR1cGxlXCIsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYnl0ZXNcIixcbiAgICAgICAgICAgICAgICBuYW1lOiBcInNpZ25hdHVyZVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwiYnl0ZXNcIixcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgICAgbmFtZTogXCJtYWtpbmdBbW91bnRcIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwic3RydWN0IEZpbGxPcmRlclBhcmFtc1tdXCIsXG4gICAgICAgICAgICBuYW1lOiBcIm5vcm1hbEZpbGxzXCIsXG4gICAgICAgICAgICB0eXBlOiBcInR1cGxlW11cIixcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGNvbXBvbmVudHM6IFtcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGNvbXBvbmVudHM6IFtcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJzYWx0XCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJleHBpcnlcIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIm5vbmNlXCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImVudW0gSVBMaW1pdE9yZGVyVHlwZS5PcmRlclR5cGVcIixcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJvcmRlclR5cGVcIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJ1aW50OFwiLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJ0b2tlblwiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiWVRcIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIm1ha2VyXCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJyZWNlaXZlclwiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwibWFraW5nQW1vdW50XCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJsbkltcGxpZWRSYXRlXCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJmYWlsU2FmZVJhdGVcIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYnl0ZXNcIixcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJwZXJtaXRcIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJieXRlc1wiLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJzdHJ1Y3QgT3JkZXJcIixcbiAgICAgICAgICAgICAgICBuYW1lOiBcIm9yZGVyXCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJ0dXBsZVwiLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImJ5dGVzXCIsXG4gICAgICAgICAgICAgICAgbmFtZTogXCJzaWduYXR1cmVcIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcImJ5dGVzXCIsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICAgIG5hbWU6IFwibWFraW5nQW1vdW50XCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInN0cnVjdCBGaWxsT3JkZXJQYXJhbXNbXVwiLFxuICAgICAgICAgICAgbmFtZTogXCJmbGFzaEZpbGxzXCIsXG4gICAgICAgICAgICB0eXBlOiBcInR1cGxlW11cIixcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJieXRlc1wiLFxuICAgICAgICAgICAgbmFtZTogXCJvcHREYXRhXCIsXG4gICAgICAgICAgICB0eXBlOiBcImJ5dGVzXCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInN0cnVjdCBMaW1pdE9yZGVyRGF0YVwiLFxuICAgICAgICBuYW1lOiBcImxpbWl0XCIsXG4gICAgICAgIHR5cGU6IFwidHVwbGVcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcInN3YXBFeGFjdFB0Rm9yVG9rZW5cIixcbiAgICBvdXRwdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwibmV0VG9rZW5PdXRcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIm5ldFN5RmVlXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJuZXRTeUludGVybVwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwibm9ucGF5YWJsZVwiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcInJlY2VpdmVyXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJtYXJrZXRcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcImV4YWN0UHRJblwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwibWluWXRPdXRcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBjb21wb25lbnRzOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgIG5hbWU6IFwiZ3Vlc3NNaW5cIixcbiAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgIG5hbWU6IFwiZ3Vlc3NNYXhcIixcbiAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgIG5hbWU6IFwiZ3Vlc3NPZmZjaGFpblwiLFxuICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgbmFtZTogXCJtYXhJdGVyYXRpb25cIixcbiAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgIG5hbWU6IFwiZXBzXCIsXG4gICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwic3RydWN0IEFwcHJveFBhcmFtc1wiLFxuICAgICAgICBuYW1lOiBcImd1ZXNzVG90YWxQdFRvU3dhcFwiLFxuICAgICAgICB0eXBlOiBcInR1cGxlXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJzd2FwRXhhY3RQdEZvcll0XCIsXG4gICAgb3V0cHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIm5ldFl0T3V0XCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJuZXRTeUZlZVwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwibm9ucGF5YWJsZVwiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcInJlY2VpdmVyXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJtYXJrZXRcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcImV4YWN0U3lJblwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwibWluUHRPdXRcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBjb21wb25lbnRzOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgIG5hbWU6IFwiZ3Vlc3NNaW5cIixcbiAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgIG5hbWU6IFwiZ3Vlc3NNYXhcIixcbiAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgIG5hbWU6IFwiZ3Vlc3NPZmZjaGFpblwiLFxuICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgbmFtZTogXCJtYXhJdGVyYXRpb25cIixcbiAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgIG5hbWU6IFwiZXBzXCIsXG4gICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwic3RydWN0IEFwcHJveFBhcmFtc1wiLFxuICAgICAgICBuYW1lOiBcImd1ZXNzUHRPdXRcIixcbiAgICAgICAgdHlwZTogXCJ0dXBsZVwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgY29tcG9uZW50czogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICBuYW1lOiBcImxpbWl0Um91dGVyXCIsXG4gICAgICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICBuYW1lOiBcImVwc1NraXBNYXJrZXRcIixcbiAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgY29tcG9uZW50czogW1xuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgY29tcG9uZW50czogW1xuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcInNhbHRcIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcImV4cGlyeVwiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwibm9uY2VcIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiZW51bSBJUExpbWl0T3JkZXJUeXBlLk9yZGVyVHlwZVwiLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIm9yZGVyVHlwZVwiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcInVpbnQ4XCIsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcInRva2VuXCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJZVFwiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwibWFrZXJcIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcInJlY2VpdmVyXCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJtYWtpbmdBbW91bnRcIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcImxuSW1wbGllZFJhdGVcIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcImZhaWxTYWZlUmF0ZVwiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJieXRlc1wiLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcInBlcm1pdFwiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImJ5dGVzXCIsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInN0cnVjdCBPcmRlclwiLFxuICAgICAgICAgICAgICAgIG5hbWU6IFwib3JkZXJcIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcInR1cGxlXCIsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYnl0ZXNcIixcbiAgICAgICAgICAgICAgICBuYW1lOiBcInNpZ25hdHVyZVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwiYnl0ZXNcIixcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgICAgbmFtZTogXCJtYWtpbmdBbW91bnRcIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwic3RydWN0IEZpbGxPcmRlclBhcmFtc1tdXCIsXG4gICAgICAgICAgICBuYW1lOiBcIm5vcm1hbEZpbGxzXCIsXG4gICAgICAgICAgICB0eXBlOiBcInR1cGxlW11cIixcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGNvbXBvbmVudHM6IFtcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGNvbXBvbmVudHM6IFtcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJzYWx0XCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJleHBpcnlcIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIm5vbmNlXCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImVudW0gSVBMaW1pdE9yZGVyVHlwZS5PcmRlclR5cGVcIixcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJvcmRlclR5cGVcIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJ1aW50OFwiLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJ0b2tlblwiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiWVRcIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIm1ha2VyXCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJyZWNlaXZlclwiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwibWFraW5nQW1vdW50XCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJsbkltcGxpZWRSYXRlXCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJmYWlsU2FmZVJhdGVcIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYnl0ZXNcIixcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJwZXJtaXRcIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJieXRlc1wiLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJzdHJ1Y3QgT3JkZXJcIixcbiAgICAgICAgICAgICAgICBuYW1lOiBcIm9yZGVyXCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJ0dXBsZVwiLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImJ5dGVzXCIsXG4gICAgICAgICAgICAgICAgbmFtZTogXCJzaWduYXR1cmVcIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcImJ5dGVzXCIsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICAgIG5hbWU6IFwibWFraW5nQW1vdW50XCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInN0cnVjdCBGaWxsT3JkZXJQYXJhbXNbXVwiLFxuICAgICAgICAgICAgbmFtZTogXCJmbGFzaEZpbGxzXCIsXG4gICAgICAgICAgICB0eXBlOiBcInR1cGxlW11cIixcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJieXRlc1wiLFxuICAgICAgICAgICAgbmFtZTogXCJvcHREYXRhXCIsXG4gICAgICAgICAgICB0eXBlOiBcImJ5dGVzXCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInN0cnVjdCBMaW1pdE9yZGVyRGF0YVwiLFxuICAgICAgICBuYW1lOiBcImxpbWl0XCIsXG4gICAgICAgIHR5cGU6IFwidHVwbGVcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcInN3YXBFeGFjdFN5Rm9yUHRcIixcbiAgICBvdXRwdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwibmV0UHRPdXRcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIm5ldFN5RmVlXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJub25wYXlhYmxlXCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwicmVjZWl2ZXJcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcIm1hcmtldFwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwiZXhhY3RTeUluXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJtaW5ZdE91dFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGNvbXBvbmVudHM6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgbmFtZTogXCJndWVzc01pblwiLFxuICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgbmFtZTogXCJndWVzc01heFwiLFxuICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgbmFtZTogXCJndWVzc09mZmNoYWluXCIsXG4gICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICBuYW1lOiBcIm1heEl0ZXJhdGlvblwiLFxuICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgbmFtZTogXCJlcHNcIixcbiAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIGludGVybmFsVHlwZTogXCJzdHJ1Y3QgQXBwcm94UGFyYW1zXCIsXG4gICAgICAgIG5hbWU6IFwiZ3Vlc3NZdE91dFwiLFxuICAgICAgICB0eXBlOiBcInR1cGxlXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBjb21wb25lbnRzOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgIG5hbWU6IFwibGltaXRSb3V0ZXJcIixcbiAgICAgICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgIG5hbWU6IFwiZXBzU2tpcE1hcmtldFwiLFxuICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBjb21wb25lbnRzOiBbXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBjb21wb25lbnRzOiBbXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwic2FsdFwiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiZXhwaXJ5XCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJub25jZVwiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJlbnVtIElQTGltaXRPcmRlclR5cGUuT3JkZXJUeXBlXCIsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwib3JkZXJUeXBlXCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwidWludDhcIixcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwidG9rZW5cIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIllUXCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJtYWtlclwiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwicmVjZWl2ZXJcIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIm1ha2luZ0Ftb3VudFwiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwibG5JbXBsaWVkUmF0ZVwiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiZmFpbFNhZmVSYXRlXCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImJ5dGVzXCIsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwicGVybWl0XCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiYnl0ZXNcIixcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwic3RydWN0IE9yZGVyXCIsXG4gICAgICAgICAgICAgICAgbmFtZTogXCJvcmRlclwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwidHVwbGVcIixcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJieXRlc1wiLFxuICAgICAgICAgICAgICAgIG5hbWU6IFwic2lnbmF0dXJlXCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJieXRlc1wiLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgICBuYW1lOiBcIm1ha2luZ0Ftb3VudFwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJzdHJ1Y3QgRmlsbE9yZGVyUGFyYW1zW11cIixcbiAgICAgICAgICAgIG5hbWU6IFwibm9ybWFsRmlsbHNcIixcbiAgICAgICAgICAgIHR5cGU6IFwidHVwbGVbXVwiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgY29tcG9uZW50czogW1xuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgY29tcG9uZW50czogW1xuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcInNhbHRcIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcImV4cGlyeVwiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwibm9uY2VcIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiZW51bSBJUExpbWl0T3JkZXJUeXBlLk9yZGVyVHlwZVwiLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIm9yZGVyVHlwZVwiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcInVpbnQ4XCIsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcInRva2VuXCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJZVFwiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwibWFrZXJcIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcInJlY2VpdmVyXCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJtYWtpbmdBbW91bnRcIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcImxuSW1wbGllZFJhdGVcIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcImZhaWxTYWZlUmF0ZVwiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJieXRlc1wiLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcInBlcm1pdFwiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImJ5dGVzXCIsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInN0cnVjdCBPcmRlclwiLFxuICAgICAgICAgICAgICAgIG5hbWU6IFwib3JkZXJcIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcInR1cGxlXCIsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYnl0ZXNcIixcbiAgICAgICAgICAgICAgICBuYW1lOiBcInNpZ25hdHVyZVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwiYnl0ZXNcIixcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgICAgbmFtZTogXCJtYWtpbmdBbW91bnRcIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwic3RydWN0IEZpbGxPcmRlclBhcmFtc1tdXCIsXG4gICAgICAgICAgICBuYW1lOiBcImZsYXNoRmlsbHNcIixcbiAgICAgICAgICAgIHR5cGU6IFwidHVwbGVbXVwiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImJ5dGVzXCIsXG4gICAgICAgICAgICBuYW1lOiBcIm9wdERhdGFcIixcbiAgICAgICAgICAgIHR5cGU6IFwiYnl0ZXNcIixcbiAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwic3RydWN0IExpbWl0T3JkZXJEYXRhXCIsXG4gICAgICAgIG5hbWU6IFwibGltaXRcIixcbiAgICAgICAgdHlwZTogXCJ0dXBsZVwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG5hbWU6IFwic3dhcEV4YWN0U3lGb3JZdFwiLFxuICAgIG91dHB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJuZXRZdE91dFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwibmV0U3lGZWVcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcIm5vbnBheWFibGVcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJyZWNlaXZlclwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwibWFya2V0XCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJtaW5QdE91dFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGNvbXBvbmVudHM6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgbmFtZTogXCJndWVzc01pblwiLFxuICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgbmFtZTogXCJndWVzc01heFwiLFxuICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgbmFtZTogXCJndWVzc09mZmNoYWluXCIsXG4gICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICBuYW1lOiBcIm1heEl0ZXJhdGlvblwiLFxuICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgbmFtZTogXCJlcHNcIixcbiAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIGludGVybmFsVHlwZTogXCJzdHJ1Y3QgQXBwcm94UGFyYW1zXCIsXG4gICAgICAgIG5hbWU6IFwiZ3Vlc3NQdE91dFwiLFxuICAgICAgICB0eXBlOiBcInR1cGxlXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBjb21wb25lbnRzOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgIG5hbWU6IFwidG9rZW5JblwiLFxuICAgICAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgbmFtZTogXCJuZXRUb2tlbkluXCIsXG4gICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICBuYW1lOiBcInRva2VuTWludFN5XCIsXG4gICAgICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICBuYW1lOiBcInBlbmRsZVN3YXBcIixcbiAgICAgICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgY29tcG9uZW50czogW1xuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImVudW0gU3dhcFR5cGVcIixcbiAgICAgICAgICAgICAgICBuYW1lOiBcInN3YXBUeXBlXCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJ1aW50OFwiLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgICAgICBuYW1lOiBcImV4dFJvdXRlclwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImJ5dGVzXCIsXG4gICAgICAgICAgICAgICAgbmFtZTogXCJleHRDYWxsZGF0YVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwiYnl0ZXNcIixcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJib29sXCIsXG4gICAgICAgICAgICAgICAgbmFtZTogXCJuZWVkU2NhbGVcIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcImJvb2xcIixcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwic3RydWN0IFN3YXBEYXRhXCIsXG4gICAgICAgICAgICBuYW1lOiBcInN3YXBEYXRhXCIsXG4gICAgICAgICAgICB0eXBlOiBcInR1cGxlXCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInN0cnVjdCBUb2tlbklucHV0XCIsXG4gICAgICAgIG5hbWU6IFwiaW5wdXRcIixcbiAgICAgICAgdHlwZTogXCJ0dXBsZVwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgY29tcG9uZW50czogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICBuYW1lOiBcImxpbWl0Um91dGVyXCIsXG4gICAgICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICBuYW1lOiBcImVwc1NraXBNYXJrZXRcIixcbiAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgY29tcG9uZW50czogW1xuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgY29tcG9uZW50czogW1xuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcInNhbHRcIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcImV4cGlyeVwiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwibm9uY2VcIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiZW51bSBJUExpbWl0T3JkZXJUeXBlLk9yZGVyVHlwZVwiLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIm9yZGVyVHlwZVwiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcInVpbnQ4XCIsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcInRva2VuXCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJZVFwiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwibWFrZXJcIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcInJlY2VpdmVyXCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJtYWtpbmdBbW91bnRcIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcImxuSW1wbGllZFJhdGVcIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcImZhaWxTYWZlUmF0ZVwiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJieXRlc1wiLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcInBlcm1pdFwiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImJ5dGVzXCIsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInN0cnVjdCBPcmRlclwiLFxuICAgICAgICAgICAgICAgIG5hbWU6IFwib3JkZXJcIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcInR1cGxlXCIsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYnl0ZXNcIixcbiAgICAgICAgICAgICAgICBuYW1lOiBcInNpZ25hdHVyZVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwiYnl0ZXNcIixcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgICAgbmFtZTogXCJtYWtpbmdBbW91bnRcIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwic3RydWN0IEZpbGxPcmRlclBhcmFtc1tdXCIsXG4gICAgICAgICAgICBuYW1lOiBcIm5vcm1hbEZpbGxzXCIsXG4gICAgICAgICAgICB0eXBlOiBcInR1cGxlW11cIixcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGNvbXBvbmVudHM6IFtcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGNvbXBvbmVudHM6IFtcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJzYWx0XCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJleHBpcnlcIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIm5vbmNlXCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImVudW0gSVBMaW1pdE9yZGVyVHlwZS5PcmRlclR5cGVcIixcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJvcmRlclR5cGVcIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJ1aW50OFwiLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJ0b2tlblwiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiWVRcIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIm1ha2VyXCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJyZWNlaXZlclwiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwibWFraW5nQW1vdW50XCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJsbkltcGxpZWRSYXRlXCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJmYWlsU2FmZVJhdGVcIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYnl0ZXNcIixcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJwZXJtaXRcIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJieXRlc1wiLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJzdHJ1Y3QgT3JkZXJcIixcbiAgICAgICAgICAgICAgICBuYW1lOiBcIm9yZGVyXCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJ0dXBsZVwiLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImJ5dGVzXCIsXG4gICAgICAgICAgICAgICAgbmFtZTogXCJzaWduYXR1cmVcIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcImJ5dGVzXCIsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICAgIG5hbWU6IFwibWFraW5nQW1vdW50XCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInN0cnVjdCBGaWxsT3JkZXJQYXJhbXNbXVwiLFxuICAgICAgICAgICAgbmFtZTogXCJmbGFzaEZpbGxzXCIsXG4gICAgICAgICAgICB0eXBlOiBcInR1cGxlW11cIixcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJieXRlc1wiLFxuICAgICAgICAgICAgbmFtZTogXCJvcHREYXRhXCIsXG4gICAgICAgICAgICB0eXBlOiBcImJ5dGVzXCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInN0cnVjdCBMaW1pdE9yZGVyRGF0YVwiLFxuICAgICAgICBuYW1lOiBcImxpbWl0XCIsXG4gICAgICAgIHR5cGU6IFwidHVwbGVcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcInN3YXBFeGFjdFRva2VuRm9yUHRcIixcbiAgICBvdXRwdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwibmV0UHRPdXRcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIm5ldFN5RmVlXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJuZXRTeUludGVybVwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwicGF5YWJsZVwiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcInJlY2VpdmVyXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJtYXJrZXRcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIm1pbll0T3V0XCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgY29tcG9uZW50czogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICBuYW1lOiBcImd1ZXNzTWluXCIsXG4gICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICBuYW1lOiBcImd1ZXNzTWF4XCIsXG4gICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICBuYW1lOiBcImd1ZXNzT2ZmY2hhaW5cIixcbiAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgIG5hbWU6IFwibWF4SXRlcmF0aW9uXCIsXG4gICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICBuYW1lOiBcImVwc1wiLFxuICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInN0cnVjdCBBcHByb3hQYXJhbXNcIixcbiAgICAgICAgbmFtZTogXCJndWVzc1l0T3V0XCIsXG4gICAgICAgIHR5cGU6IFwidHVwbGVcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGNvbXBvbmVudHM6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgbmFtZTogXCJ0b2tlbkluXCIsXG4gICAgICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICBuYW1lOiBcIm5ldFRva2VuSW5cIixcbiAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgIG5hbWU6IFwidG9rZW5NaW50U3lcIixcbiAgICAgICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgIG5hbWU6IFwicGVuZGxlU3dhcFwiLFxuICAgICAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBjb21wb25lbnRzOiBbXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiZW51bSBTd2FwVHlwZVwiLFxuICAgICAgICAgICAgICAgIG5hbWU6IFwic3dhcFR5cGVcIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcInVpbnQ4XCIsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgICAgIG5hbWU6IFwiZXh0Um91dGVyXCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYnl0ZXNcIixcbiAgICAgICAgICAgICAgICBuYW1lOiBcImV4dENhbGxkYXRhXCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJieXRlc1wiLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImJvb2xcIixcbiAgICAgICAgICAgICAgICBuYW1lOiBcIm5lZWRTY2FsZVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwiYm9vbFwiLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJzdHJ1Y3QgU3dhcERhdGFcIixcbiAgICAgICAgICAgIG5hbWU6IFwic3dhcERhdGFcIixcbiAgICAgICAgICAgIHR5cGU6IFwidHVwbGVcIixcbiAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwic3RydWN0IFRva2VuSW5wdXRcIixcbiAgICAgICAgbmFtZTogXCJpbnB1dFwiLFxuICAgICAgICB0eXBlOiBcInR1cGxlXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBjb21wb25lbnRzOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgIG5hbWU6IFwibGltaXRSb3V0ZXJcIixcbiAgICAgICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgIG5hbWU6IFwiZXBzU2tpcE1hcmtldFwiLFxuICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBjb21wb25lbnRzOiBbXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBjb21wb25lbnRzOiBbXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwic2FsdFwiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiZXhwaXJ5XCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJub25jZVwiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJlbnVtIElQTGltaXRPcmRlclR5cGUuT3JkZXJUeXBlXCIsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwib3JkZXJUeXBlXCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwidWludDhcIixcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwidG9rZW5cIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIllUXCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJtYWtlclwiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwicmVjZWl2ZXJcIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIm1ha2luZ0Ftb3VudFwiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwibG5JbXBsaWVkUmF0ZVwiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiZmFpbFNhZmVSYXRlXCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImJ5dGVzXCIsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwicGVybWl0XCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiYnl0ZXNcIixcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwic3RydWN0IE9yZGVyXCIsXG4gICAgICAgICAgICAgICAgbmFtZTogXCJvcmRlclwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwidHVwbGVcIixcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJieXRlc1wiLFxuICAgICAgICAgICAgICAgIG5hbWU6IFwic2lnbmF0dXJlXCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJieXRlc1wiLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgICBuYW1lOiBcIm1ha2luZ0Ftb3VudFwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJzdHJ1Y3QgRmlsbE9yZGVyUGFyYW1zW11cIixcbiAgICAgICAgICAgIG5hbWU6IFwibm9ybWFsRmlsbHNcIixcbiAgICAgICAgICAgIHR5cGU6IFwidHVwbGVbXVwiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgY29tcG9uZW50czogW1xuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgY29tcG9uZW50czogW1xuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcInNhbHRcIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcImV4cGlyeVwiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwibm9uY2VcIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiZW51bSBJUExpbWl0T3JkZXJUeXBlLk9yZGVyVHlwZVwiLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIm9yZGVyVHlwZVwiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcInVpbnQ4XCIsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcInRva2VuXCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJZVFwiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwibWFrZXJcIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcInJlY2VpdmVyXCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJtYWtpbmdBbW91bnRcIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcImxuSW1wbGllZFJhdGVcIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcImZhaWxTYWZlUmF0ZVwiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJieXRlc1wiLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcInBlcm1pdFwiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImJ5dGVzXCIsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInN0cnVjdCBPcmRlclwiLFxuICAgICAgICAgICAgICAgIG5hbWU6IFwib3JkZXJcIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcInR1cGxlXCIsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYnl0ZXNcIixcbiAgICAgICAgICAgICAgICBuYW1lOiBcInNpZ25hdHVyZVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwiYnl0ZXNcIixcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgICAgbmFtZTogXCJtYWtpbmdBbW91bnRcIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwic3RydWN0IEZpbGxPcmRlclBhcmFtc1tdXCIsXG4gICAgICAgICAgICBuYW1lOiBcImZsYXNoRmlsbHNcIixcbiAgICAgICAgICAgIHR5cGU6IFwidHVwbGVbXVwiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImJ5dGVzXCIsXG4gICAgICAgICAgICBuYW1lOiBcIm9wdERhdGFcIixcbiAgICAgICAgICAgIHR5cGU6IFwiYnl0ZXNcIixcbiAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwic3RydWN0IExpbWl0T3JkZXJEYXRhXCIsXG4gICAgICAgIG5hbWU6IFwibGltaXRcIixcbiAgICAgICAgdHlwZTogXCJ0dXBsZVwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG5hbWU6IFwic3dhcEV4YWN0VG9rZW5Gb3JZdFwiLFxuICAgIG91dHB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJuZXRZdE91dFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwibmV0U3lGZWVcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIm5ldFN5SW50ZXJtXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJwYXlhYmxlXCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwicmVjZWl2ZXJcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcIm1hcmtldFwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwiZXhhY3RZdEluXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJtaW5QdE91dFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGNvbXBvbmVudHM6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgbmFtZTogXCJndWVzc01pblwiLFxuICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgbmFtZTogXCJndWVzc01heFwiLFxuICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgbmFtZTogXCJndWVzc09mZmNoYWluXCIsXG4gICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICBuYW1lOiBcIm1heEl0ZXJhdGlvblwiLFxuICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgbmFtZTogXCJlcHNcIixcbiAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIGludGVybmFsVHlwZTogXCJzdHJ1Y3QgQXBwcm94UGFyYW1zXCIsXG4gICAgICAgIG5hbWU6IFwiZ3Vlc3NUb3RhbFB0RnJvbVN3YXBcIixcbiAgICAgICAgdHlwZTogXCJ0dXBsZVwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG5hbWU6IFwic3dhcEV4YWN0WXRGb3JQdFwiLFxuICAgIG91dHB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJuZXRQdE91dFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwibmV0U3lGZWVcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcIm5vbnBheWFibGVcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJyZWNlaXZlclwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwibWFya2V0XCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJleGFjdFl0SW5cIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIm1pblN5T3V0XCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgY29tcG9uZW50czogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICBuYW1lOiBcImxpbWl0Um91dGVyXCIsXG4gICAgICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICBuYW1lOiBcImVwc1NraXBNYXJrZXRcIixcbiAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgY29tcG9uZW50czogW1xuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgY29tcG9uZW50czogW1xuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcInNhbHRcIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcImV4cGlyeVwiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwibm9uY2VcIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiZW51bSBJUExpbWl0T3JkZXJUeXBlLk9yZGVyVHlwZVwiLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIm9yZGVyVHlwZVwiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcInVpbnQ4XCIsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcInRva2VuXCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJZVFwiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwibWFrZXJcIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcInJlY2VpdmVyXCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJtYWtpbmdBbW91bnRcIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcImxuSW1wbGllZFJhdGVcIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcImZhaWxTYWZlUmF0ZVwiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJieXRlc1wiLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcInBlcm1pdFwiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImJ5dGVzXCIsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInN0cnVjdCBPcmRlclwiLFxuICAgICAgICAgICAgICAgIG5hbWU6IFwib3JkZXJcIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcInR1cGxlXCIsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYnl0ZXNcIixcbiAgICAgICAgICAgICAgICBuYW1lOiBcInNpZ25hdHVyZVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwiYnl0ZXNcIixcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgICAgbmFtZTogXCJtYWtpbmdBbW91bnRcIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwic3RydWN0IEZpbGxPcmRlclBhcmFtc1tdXCIsXG4gICAgICAgICAgICBuYW1lOiBcIm5vcm1hbEZpbGxzXCIsXG4gICAgICAgICAgICB0eXBlOiBcInR1cGxlW11cIixcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGNvbXBvbmVudHM6IFtcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGNvbXBvbmVudHM6IFtcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJzYWx0XCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJleHBpcnlcIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIm5vbmNlXCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImVudW0gSVBMaW1pdE9yZGVyVHlwZS5PcmRlclR5cGVcIixcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJvcmRlclR5cGVcIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJ1aW50OFwiLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJ0b2tlblwiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiWVRcIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIm1ha2VyXCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJyZWNlaXZlclwiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwibWFraW5nQW1vdW50XCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJsbkltcGxpZWRSYXRlXCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJmYWlsU2FmZVJhdGVcIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYnl0ZXNcIixcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJwZXJtaXRcIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJieXRlc1wiLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJzdHJ1Y3QgT3JkZXJcIixcbiAgICAgICAgICAgICAgICBuYW1lOiBcIm9yZGVyXCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJ0dXBsZVwiLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImJ5dGVzXCIsXG4gICAgICAgICAgICAgICAgbmFtZTogXCJzaWduYXR1cmVcIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcImJ5dGVzXCIsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICAgIG5hbWU6IFwibWFraW5nQW1vdW50XCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInN0cnVjdCBGaWxsT3JkZXJQYXJhbXNbXVwiLFxuICAgICAgICAgICAgbmFtZTogXCJmbGFzaEZpbGxzXCIsXG4gICAgICAgICAgICB0eXBlOiBcInR1cGxlW11cIixcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJieXRlc1wiLFxuICAgICAgICAgICAgbmFtZTogXCJvcHREYXRhXCIsXG4gICAgICAgICAgICB0eXBlOiBcImJ5dGVzXCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInN0cnVjdCBMaW1pdE9yZGVyRGF0YVwiLFxuICAgICAgICBuYW1lOiBcImxpbWl0XCIsXG4gICAgICAgIHR5cGU6IFwidHVwbGVcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcInN3YXBFeGFjdFl0Rm9yU3lcIixcbiAgICBvdXRwdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwibmV0U3lPdXRcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIm5ldFN5RmVlXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJub25wYXlhYmxlXCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwicmVjZWl2ZXJcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcIm1hcmtldFwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwiZXhhY3RZdEluXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgY29tcG9uZW50czogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICBuYW1lOiBcInRva2VuT3V0XCIsXG4gICAgICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICBuYW1lOiBcIm1pblRva2VuT3V0XCIsXG4gICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICBuYW1lOiBcInRva2VuUmVkZWVtU3lcIixcbiAgICAgICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgIG5hbWU6IFwicGVuZGxlU3dhcFwiLFxuICAgICAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBjb21wb25lbnRzOiBbXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiZW51bSBTd2FwVHlwZVwiLFxuICAgICAgICAgICAgICAgIG5hbWU6IFwic3dhcFR5cGVcIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcInVpbnQ4XCIsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgICAgIG5hbWU6IFwiZXh0Um91dGVyXCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYnl0ZXNcIixcbiAgICAgICAgICAgICAgICBuYW1lOiBcImV4dENhbGxkYXRhXCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJieXRlc1wiLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImJvb2xcIixcbiAgICAgICAgICAgICAgICBuYW1lOiBcIm5lZWRTY2FsZVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwiYm9vbFwiLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJzdHJ1Y3QgU3dhcERhdGFcIixcbiAgICAgICAgICAgIG5hbWU6IFwic3dhcERhdGFcIixcbiAgICAgICAgICAgIHR5cGU6IFwidHVwbGVcIixcbiAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwic3RydWN0IFRva2VuT3V0cHV0XCIsXG4gICAgICAgIG5hbWU6IFwib3V0cHV0XCIsXG4gICAgICAgIHR5cGU6IFwidHVwbGVcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGNvbXBvbmVudHM6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgbmFtZTogXCJsaW1pdFJvdXRlclwiLFxuICAgICAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgbmFtZTogXCJlcHNTa2lwTWFya2V0XCIsXG4gICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGNvbXBvbmVudHM6IFtcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGNvbXBvbmVudHM6IFtcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJzYWx0XCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJleHBpcnlcIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIm5vbmNlXCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImVudW0gSVBMaW1pdE9yZGVyVHlwZS5PcmRlclR5cGVcIixcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJvcmRlclR5cGVcIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJ1aW50OFwiLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJ0b2tlblwiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiWVRcIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIm1ha2VyXCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJyZWNlaXZlclwiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwibWFraW5nQW1vdW50XCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJsbkltcGxpZWRSYXRlXCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJmYWlsU2FmZVJhdGVcIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYnl0ZXNcIixcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJwZXJtaXRcIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJieXRlc1wiLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJzdHJ1Y3QgT3JkZXJcIixcbiAgICAgICAgICAgICAgICBuYW1lOiBcIm9yZGVyXCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJ0dXBsZVwiLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImJ5dGVzXCIsXG4gICAgICAgICAgICAgICAgbmFtZTogXCJzaWduYXR1cmVcIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcImJ5dGVzXCIsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICAgIG5hbWU6IFwibWFraW5nQW1vdW50XCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInN0cnVjdCBGaWxsT3JkZXJQYXJhbXNbXVwiLFxuICAgICAgICAgICAgbmFtZTogXCJub3JtYWxGaWxsc1wiLFxuICAgICAgICAgICAgdHlwZTogXCJ0dXBsZVtdXCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBjb21wb25lbnRzOiBbXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBjb21wb25lbnRzOiBbXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwic2FsdFwiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiZXhwaXJ5XCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJub25jZVwiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJlbnVtIElQTGltaXRPcmRlclR5cGUuT3JkZXJUeXBlXCIsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwib3JkZXJUeXBlXCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwidWludDhcIixcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwidG9rZW5cIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIllUXCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJtYWtlclwiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwicmVjZWl2ZXJcIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIm1ha2luZ0Ftb3VudFwiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwibG5JbXBsaWVkUmF0ZVwiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiZmFpbFNhZmVSYXRlXCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImJ5dGVzXCIsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwicGVybWl0XCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiYnl0ZXNcIixcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwic3RydWN0IE9yZGVyXCIsXG4gICAgICAgICAgICAgICAgbmFtZTogXCJvcmRlclwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwidHVwbGVcIixcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJieXRlc1wiLFxuICAgICAgICAgICAgICAgIG5hbWU6IFwic2lnbmF0dXJlXCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJieXRlc1wiLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICAgICAgICBuYW1lOiBcIm1ha2luZ0Ftb3VudFwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJzdHJ1Y3QgRmlsbE9yZGVyUGFyYW1zW11cIixcbiAgICAgICAgICAgIG5hbWU6IFwiZmxhc2hGaWxsc1wiLFxuICAgICAgICAgICAgdHlwZTogXCJ0dXBsZVtdXCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYnl0ZXNcIixcbiAgICAgICAgICAgIG5hbWU6IFwib3B0RGF0YVwiLFxuICAgICAgICAgICAgdHlwZTogXCJieXRlc1wiLFxuICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIGludGVybmFsVHlwZTogXCJzdHJ1Y3QgTGltaXRPcmRlckRhdGFcIixcbiAgICAgICAgbmFtZTogXCJsaW1pdFwiLFxuICAgICAgICB0eXBlOiBcInR1cGxlXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJzd2FwRXhhY3RZdEZvclRva2VuXCIsXG4gICAgb3V0cHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIm5ldFRva2VuT3V0XCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJuZXRTeUZlZVwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwibmV0U3lJbnRlcm1cIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcIm5vbnBheWFibGVcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJyZWNlaXZlclwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwibWluVG9rZW5PdXRcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBjb21wb25lbnRzOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgIG5hbWU6IFwidG9rZW5JblwiLFxuICAgICAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgbmFtZTogXCJuZXRUb2tlbkluXCIsXG4gICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICBuYW1lOiBcInRva2VuTWludFN5XCIsXG4gICAgICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICBuYW1lOiBcInBlbmRsZVN3YXBcIixcbiAgICAgICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgY29tcG9uZW50czogW1xuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImVudW0gU3dhcFR5cGVcIixcbiAgICAgICAgICAgICAgICBuYW1lOiBcInN3YXBUeXBlXCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJ1aW50OFwiLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgICAgICBuYW1lOiBcImV4dFJvdXRlclwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImJ5dGVzXCIsXG4gICAgICAgICAgICAgICAgbmFtZTogXCJleHRDYWxsZGF0YVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwiYnl0ZXNcIixcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJib29sXCIsXG4gICAgICAgICAgICAgICAgbmFtZTogXCJuZWVkU2NhbGVcIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcImJvb2xcIixcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwic3RydWN0IFN3YXBEYXRhXCIsXG4gICAgICAgICAgICBuYW1lOiBcInN3YXBEYXRhXCIsXG4gICAgICAgICAgICB0eXBlOiBcInR1cGxlXCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInN0cnVjdCBUb2tlbklucHV0XCIsXG4gICAgICAgIG5hbWU6IFwiaW5wXCIsXG4gICAgICAgIHR5cGU6IFwidHVwbGVcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcInN3YXBUb2tlblRvVG9rZW5cIixcbiAgICBvdXRwdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwibmV0VG9rZW5PdXRcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcInBheWFibGVcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJyZWNlaXZlclwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwiU1lcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBjb21wb25lbnRzOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgIG5hbWU6IFwidG9rZW5JblwiLFxuICAgICAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICAgICAgbmFtZTogXCJuZXRUb2tlbkluXCIsXG4gICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICBuYW1lOiBcInRva2VuTWludFN5XCIsXG4gICAgICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICBuYW1lOiBcInBlbmRsZVN3YXBcIixcbiAgICAgICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgY29tcG9uZW50czogW1xuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImVudW0gU3dhcFR5cGVcIixcbiAgICAgICAgICAgICAgICBuYW1lOiBcInN3YXBUeXBlXCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJ1aW50OFwiLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgICAgICBuYW1lOiBcImV4dFJvdXRlclwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImJ5dGVzXCIsXG4gICAgICAgICAgICAgICAgbmFtZTogXCJleHRDYWxsZGF0YVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwiYnl0ZXNcIixcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJib29sXCIsXG4gICAgICAgICAgICAgICAgbmFtZTogXCJuZWVkU2NhbGVcIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcImJvb2xcIixcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwic3RydWN0IFN3YXBEYXRhXCIsXG4gICAgICAgICAgICBuYW1lOiBcInN3YXBEYXRhXCIsXG4gICAgICAgICAgICB0eXBlOiBcInR1cGxlXCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInN0cnVjdCBUb2tlbklucHV0XCIsXG4gICAgICAgIG5hbWU6IFwiaW5wdXRcIixcbiAgICAgICAgdHlwZTogXCJ0dXBsZVwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJ0b2tlblJlZGVlbVN5XCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJtaW5Ub2tlbk91dFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcInN3YXBUb2tlblRvVG9rZW5WaWFTeVwiLFxuICAgIG91dHB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJuZXRUb2tlbk91dFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwibmV0U3lJbnRlcm1cIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcInBheWFibGVcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJuZXdPd25lclwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJib29sXCIsXG4gICAgICAgIG5hbWU6IFwiZGlyZWN0XCIsXG4gICAgICAgIHR5cGU6IFwiYm9vbFwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImJvb2xcIixcbiAgICAgICAgbmFtZTogXCJyZW5vdW5jZVwiLFxuICAgICAgICB0eXBlOiBcImJvb2xcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcInRyYW5zZmVyT3duZXJzaGlwXCIsXG4gICAgb3V0cHV0czogW10sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcIm5vbnBheWFibGVcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG5dIGFzIGNvbnN0O1xuXG5leHBvcnQgY2xhc3MgUGVuZGxlUm91dGVyVjNfX2ZhY3Rvcnkge1xuICBzdGF0aWMgcmVhZG9ubHkgYWJpID0gX2FiaTtcbiAgc3RhdGljIGNyZWF0ZUludGVyZmFjZSgpOiBQZW5kbGVSb3V0ZXJWM0ludGVyZmFjZSB7XG4gICAgcmV0dXJuIG5ld0ludGVyZmFjZShfYWJpKSBhcyBQZW5kbGVSb3V0ZXJWM0ludGVyZmFjZTtcbiAgfVxuICBzdGF0aWMgY29ubmVjdChcbiAgICBhZGRyZXNzOiBzdHJpbmcsXG4gICAgc2lnbmVyT3JQcm92aWRlcjogU2lnbmVyIHwgUHJvdmlkZXIsXG4gICk6IFBlbmRsZVJvdXRlclYzIHtcbiAgICByZXR1cm4gbmV3Q29udHJhY3QoYWRkcmVzcywgX2FiaSwgc2lnbmVyT3JQcm92aWRlcikgYXMgUGVuZGxlUm91dGVyVjM7XG4gIH1cbn1cbiIsICIvKiBBdXRvZ2VuZXJhdGVkIGZpbGUuIERvIG5vdCBlZGl0IG1hbnVhbGx5LiAqL1xuLyogdHNsaW50OmRpc2FibGUgKi9cbi8qIGVzbGludC1kaXNhYmxlICovXG4vLyBAdHMtbm9jaGVja1xuaW1wb3J0IHsgbmV3Q29udHJhY3QsIG5ld0ludGVyZmFjZSB9IGZyb20gXCJAc2VudGlvL3Nkay9ldGhcIjtcblxuaW1wb3J0IHsgQ29udHJhY3QsIFNpZ25lciwgUHJvdmlkZXIsIEludGVyZmFjZSB9IGZyb20gXCJldGhlcnNcIjtcbmltcG9ydCB0eXBlIHsgUGVuZGxlU3dhcCwgUGVuZGxlU3dhcEludGVyZmFjZSB9IGZyb20gXCIuLi9QZW5kbGVTd2FwLmpzXCI7XG5cbmNvbnN0IF9hYmkgPSBbXG4gIHtcbiAgICBhbm9ueW1vdXM6IGZhbHNlLFxuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbmRleGVkOiB0cnVlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiZW51bSBTd2FwVHlwZVwiLFxuICAgICAgICBuYW1lOiBcInN3YXBUeXBlXCIsXG4gICAgICAgIHR5cGU6IFwidWludDhcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IHRydWUsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwidG9rZW5JblwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IGZhbHNlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcImFtb3VudEluXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG5hbWU6IFwiU3dhcFNpbmdsZVwiLFxuICAgIHR5cGU6IFwiZXZlbnRcIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW10sXG4gICAgbmFtZTogXCJLWUJFUl9TQ0FMSU5HX0hFTFBFUlwiLFxuICAgIG91dHB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcInZpZXdcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJ0b2tlbkluXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJhbW91bnRJblwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGNvbXBvbmVudHM6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiZW51bSBTd2FwVHlwZVwiLFxuICAgICAgICAgICAgbmFtZTogXCJzd2FwVHlwZVwiLFxuICAgICAgICAgICAgdHlwZTogXCJ1aW50OFwiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICAgIG5hbWU6IFwiZXh0Um91dGVyXCIsXG4gICAgICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJieXRlc1wiLFxuICAgICAgICAgICAgbmFtZTogXCJleHRDYWxsZGF0YVwiLFxuICAgICAgICAgICAgdHlwZTogXCJieXRlc1wiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImJvb2xcIixcbiAgICAgICAgICAgIG5hbWU6IFwibmVlZFNjYWxlXCIsXG4gICAgICAgICAgICB0eXBlOiBcImJvb2xcIixcbiAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwic3RydWN0IFN3YXBEYXRhXCIsXG4gICAgICAgIG5hbWU6IFwiZGF0YVwiLFxuICAgICAgICB0eXBlOiBcInR1cGxlXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJzd2FwXCIsXG4gICAgb3V0cHV0czogW10sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcInBheWFibGVcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NbXVwiLFxuICAgICAgICBuYW1lOiBcInRva2Vuc0luXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1tdXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBjb21wb25lbnRzOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcImVudW0gU3dhcFR5cGVcIixcbiAgICAgICAgICAgIG5hbWU6IFwic3dhcFR5cGVcIixcbiAgICAgICAgICAgIHR5cGU6IFwidWludDhcIixcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgICBuYW1lOiBcImV4dFJvdXRlclwiLFxuICAgICAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYnl0ZXNcIixcbiAgICAgICAgICAgIG5hbWU6IFwiZXh0Q2FsbGRhdGFcIixcbiAgICAgICAgICAgIHR5cGU6IFwiYnl0ZXNcIixcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJib29sXCIsXG4gICAgICAgICAgICBuYW1lOiBcIm5lZWRTY2FsZVwiLFxuICAgICAgICAgICAgdHlwZTogXCJib29sXCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInN0cnVjdCBTd2FwRGF0YVwiLFxuICAgICAgICBuYW1lOiBcImRhdGFcIixcbiAgICAgICAgdHlwZTogXCJ0dXBsZVwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG5hbWU6IFwic3dhcE11bHRpT2Rvc1wiLFxuICAgIG91dHB1dHM6IFtdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJwYXlhYmxlXCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcInBheWFibGVcIixcbiAgICB0eXBlOiBcInJlY2VpdmVcIixcbiAgfSxcbl0gYXMgY29uc3Q7XG5cbmV4cG9ydCBjbGFzcyBQZW5kbGVTd2FwX19mYWN0b3J5IHtcbiAgc3RhdGljIHJlYWRvbmx5IGFiaSA9IF9hYmk7XG4gIHN0YXRpYyBjcmVhdGVJbnRlcmZhY2UoKTogUGVuZGxlU3dhcEludGVyZmFjZSB7XG4gICAgcmV0dXJuIG5ld0ludGVyZmFjZShfYWJpKSBhcyBQZW5kbGVTd2FwSW50ZXJmYWNlO1xuICB9XG4gIHN0YXRpYyBjb25uZWN0KFxuICAgIGFkZHJlc3M6IHN0cmluZyxcbiAgICBzaWduZXJPclByb3ZpZGVyOiBTaWduZXIgfCBQcm92aWRlcixcbiAgKTogUGVuZGxlU3dhcCB7XG4gICAgcmV0dXJuIG5ld0NvbnRyYWN0KGFkZHJlc3MsIF9hYmksIHNpZ25lck9yUHJvdmlkZXIpIGFzIFBlbmRsZVN3YXA7XG4gIH1cbn1cbiIsICIvKiBBdXRvZ2VuZXJhdGVkIGZpbGUuIERvIG5vdCBlZGl0IG1hbnVhbGx5LiAqL1xuLyogdHNsaW50OmRpc2FibGUgKi9cbi8qIGVzbGludC1kaXNhYmxlICovXG4vLyBAdHMtbm9jaGVja1xuaW1wb3J0IHsgbmV3Q29udHJhY3QsIG5ld0ludGVyZmFjZSB9IGZyb20gXCJAc2VudGlvL3Nkay9ldGhcIjtcblxuaW1wb3J0IHsgQ29udHJhY3QsIFNpZ25lciwgUHJvdmlkZXIsIEludGVyZmFjZSB9IGZyb20gXCJldGhlcnNcIjtcbmltcG9ydCB0eXBlIHtcbiAgUGVuZGxlVmVUb2tlbixcbiAgUGVuZGxlVmVUb2tlbkludGVyZmFjZSxcbn0gZnJvbSBcIi4uL1BlbmRsZVZlVG9rZW4uanNcIjtcblxuY29uc3QgX2FiaSA9IFtcbiAge1xuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcInVzZXJcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJiYWxhbmNlT2ZcIixcbiAgICBvdXRwdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MTI4XCIsXG4gICAgICAgIG5hbWU6IFwiXCIsXG4gICAgICAgIHR5cGU6IFwidWludDEyOFwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJ2aWV3XCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwidXNlclwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcInBvc2l0aW9uRGF0YVwiLFxuICAgIG91dHB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQxMjhcIixcbiAgICAgICAgbmFtZTogXCJhbW91bnRcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MTI4XCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDEyOFwiLFxuICAgICAgICBuYW1lOiBcImV4cGlyeVwiLFxuICAgICAgICB0eXBlOiBcInVpbnQxMjhcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwidmlld1wiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcInVzZXJcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJ0b3RhbFN1cHBseUFuZEJhbGFuY2VDdXJyZW50XCIsXG4gICAgb3V0cHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDEyOFwiLFxuICAgICAgICBuYW1lOiBcIlwiLFxuICAgICAgICB0eXBlOiBcInVpbnQxMjhcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MTI4XCIsXG4gICAgICAgIG5hbWU6IFwiXCIsXG4gICAgICAgIHR5cGU6IFwidWludDEyOFwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJub25wYXlhYmxlXCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXSxcbiAgICBuYW1lOiBcInRvdGFsU3VwcGx5Q3VycmVudFwiLFxuICAgIG91dHB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQxMjhcIixcbiAgICAgICAgbmFtZTogXCJcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MTI4XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcIm5vbnBheWFibGVcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtdLFxuICAgIG5hbWU6IFwidG90YWxTdXBwbHlTdG9yZWRcIixcbiAgICBvdXRwdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MTI4XCIsXG4gICAgICAgIG5hbWU6IFwiXCIsXG4gICAgICAgIHR5cGU6IFwidWludDEyOFwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJ2aWV3XCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuXSBhcyBjb25zdDtcblxuZXhwb3J0IGNsYXNzIFBlbmRsZVZlVG9rZW5fX2ZhY3Rvcnkge1xuICBzdGF0aWMgcmVhZG9ubHkgYWJpID0gX2FiaTtcbiAgc3RhdGljIGNyZWF0ZUludGVyZmFjZSgpOiBQZW5kbGVWZVRva2VuSW50ZXJmYWNlIHtcbiAgICByZXR1cm4gbmV3SW50ZXJmYWNlKF9hYmkpIGFzIFBlbmRsZVZlVG9rZW5JbnRlcmZhY2U7XG4gIH1cbiAgc3RhdGljIGNvbm5lY3QoXG4gICAgYWRkcmVzczogc3RyaW5nLFxuICAgIHNpZ25lck9yUHJvdmlkZXI6IFNpZ25lciB8IFByb3ZpZGVyLFxuICApOiBQZW5kbGVWZVRva2VuIHtcbiAgICByZXR1cm4gbmV3Q29udHJhY3QoYWRkcmVzcywgX2FiaSwgc2lnbmVyT3JQcm92aWRlcikgYXMgUGVuZGxlVmVUb2tlbjtcbiAgfVxufVxuIiwgIi8qIEF1dG9nZW5lcmF0ZWQgZmlsZS4gRG8gbm90IGVkaXQgbWFudWFsbHkuICovXG4vKiB0c2xpbnQ6ZGlzYWJsZSAqL1xuLyogZXNsaW50LWRpc2FibGUgKi9cbi8vIEB0cy1ub2NoZWNrXG5pbXBvcnQgeyBuZXdDb250cmFjdCwgbmV3SW50ZXJmYWNlIH0gZnJvbSBcIkBzZW50aW8vc2RrL2V0aFwiO1xuXG5pbXBvcnQgeyBDb250cmFjdCwgU2lnbmVyLCBQcm92aWRlciwgSW50ZXJmYWNlIH0gZnJvbSBcImV0aGVyc1wiO1xuaW1wb3J0IHR5cGUge1xuICBQZW5kbGVWb3RpbmdDb250cm9sbGVyLFxuICBQZW5kbGVWb3RpbmdDb250cm9sbGVySW50ZXJmYWNlLFxufSBmcm9tIFwiLi4vUGVuZGxlVm90aW5nQ29udHJvbGxlci5qc1wiO1xuXG5jb25zdCBfYWJpID0gW1xuICB7XG4gICAgaW5wdXRzOiBbXSxcbiAgICBuYW1lOiBcIkFycmF5T3V0T2ZCb3VuZHNcIixcbiAgICB0eXBlOiBcImVycm9yXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJ3VGltZVwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcIkludmFsaWRXVGltZVwiLFxuICAgIHR5cGU6IFwiZXJyb3JcIixcbiAgfSxcbiAge1xuICAgIGFub255bW91czogZmFsc2UsXG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IHRydWUsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50NjRcIixcbiAgICAgICAgbmFtZTogXCJjaGFpbklkXCIsXG4gICAgICAgIHR5cGU6IFwidWludDY0XCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbmRleGVkOiB0cnVlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcInBvb2xcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJBZGRQb29sXCIsXG4gICAgdHlwZTogXCJldmVudFwiLFxuICB9LFxuICB7XG4gICAgYW5vbnltb3VzOiBmYWxzZSxcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogdHJ1ZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQ2NFwiLFxuICAgICAgICBuYW1lOiBcImNoYWluSWRcIixcbiAgICAgICAgdHlwZTogXCJ1aW50NjRcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IHRydWUsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MTI4XCIsXG4gICAgICAgIG5hbWU6IFwid1RpbWVcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MTI4XCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbmRleGVkOiBmYWxzZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQxMjhcIixcbiAgICAgICAgbmFtZTogXCJ0b3RhbFBlbmRsZVBlclNlY1wiLFxuICAgICAgICB0eXBlOiBcInVpbnQxMjhcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcIkJyb2FkY2FzdFJlc3VsdHNcIixcbiAgICB0eXBlOiBcImV2ZW50XCIsXG4gIH0sXG4gIHtcbiAgICBhbm9ueW1vdXM6IGZhbHNlLFxuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbmRleGVkOiB0cnVlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcInBvb2xcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBjb21wb25lbnRzOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQxMjhcIixcbiAgICAgICAgICAgIG5hbWU6IFwiYmlhc1wiLFxuICAgICAgICAgICAgdHlwZTogXCJ1aW50MTI4XCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDEyOFwiLFxuICAgICAgICAgICAgbmFtZTogXCJzbG9wZVwiLFxuICAgICAgICAgICAgdHlwZTogXCJ1aW50MTI4XCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgaW5kZXhlZDogZmFsc2UsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJzdHJ1Y3QgVmVCYWxhbmNlXCIsXG4gICAgICAgIG5hbWU6IFwidm90ZVwiLFxuICAgICAgICB0eXBlOiBcInR1cGxlXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJQb29sVm90ZUNoYW5nZVwiLFxuICAgIHR5cGU6IFwiZXZlbnRcIixcbiAgfSxcbiAge1xuICAgIGFub255bW91czogZmFsc2UsXG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IHRydWUsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50NjRcIixcbiAgICAgICAgbmFtZTogXCJjaGFpbklkXCIsXG4gICAgICAgIHR5cGU6IFwidWludDY0XCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbmRleGVkOiB0cnVlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcInBvb2xcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJSZW1vdmVQb29sXCIsXG4gICAgdHlwZTogXCJldmVudFwiLFxuICB9LFxuICB7XG4gICAgYW5vbnltb3VzOiBmYWxzZSxcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogZmFsc2UsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwibmV3UGVuZGxlUGVyU2VjXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG5hbWU6IFwiU2V0UGVuZGxlUGVyU2VjXCIsXG4gICAgdHlwZTogXCJldmVudFwiLFxuICB9LFxuICB7XG4gICAgYW5vbnltb3VzOiBmYWxzZSxcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogdHJ1ZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJ1c2VyXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogdHJ1ZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJwb29sXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogZmFsc2UsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50NjRcIixcbiAgICAgICAgbmFtZTogXCJ3ZWlnaHRcIixcbiAgICAgICAgdHlwZTogXCJ1aW50NjRcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGNvbXBvbmVudHM6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDEyOFwiLFxuICAgICAgICAgICAgbmFtZTogXCJiaWFzXCIsXG4gICAgICAgICAgICB0eXBlOiBcInVpbnQxMjhcIixcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MTI4XCIsXG4gICAgICAgICAgICBuYW1lOiBcInNsb3BlXCIsXG4gICAgICAgICAgICB0eXBlOiBcInVpbnQxMjhcIixcbiAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBpbmRleGVkOiBmYWxzZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInN0cnVjdCBWZUJhbGFuY2VcIixcbiAgICAgICAgbmFtZTogXCJ2b3RlXCIsXG4gICAgICAgIHR5cGU6IFwidHVwbGVcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcIlZvdGVcIixcbiAgICB0eXBlOiBcImV2ZW50XCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtdLFxuICAgIG5hbWU6IFwiR09WRVJOQU5DRV9QRU5ETEVfVk9URVwiLFxuICAgIG91dHB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQxMjhcIixcbiAgICAgICAgbmFtZTogXCJcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MTI4XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcInZpZXdcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtdLFxuICAgIG5hbWU6IFwiTUFYX0xPQ0tfVElNRVwiLFxuICAgIG91dHB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQxMjhcIixcbiAgICAgICAgbmFtZTogXCJcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MTI4XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcInZpZXdcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtdLFxuICAgIG5hbWU6IFwiV0VFS1wiLFxuICAgIG91dHB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQxMjhcIixcbiAgICAgICAgbmFtZTogXCJcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MTI4XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcInZpZXdcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJwb29sXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG5hbWU6IFwiYXBwbHlQb29sU2xvcGVDaGFuZ2VzXCIsXG4gICAgb3V0cHV0czogW10sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcIm5vbnBheWFibGVcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtdLFxuICAgIG5hbWU6IFwiZGVwbG95ZWRXVGltZVwiLFxuICAgIG91dHB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQxMjhcIixcbiAgICAgICAgbmFtZTogXCJcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MTI4XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcInZpZXdcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQ2NFwiLFxuICAgICAgICBuYW1lOiBcImNoYWluSWRcIixcbiAgICAgICAgdHlwZTogXCJ1aW50NjRcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcImdldEFjdGl2ZUNoYWluUG9vbHNcIixcbiAgICBvdXRwdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzW11cIixcbiAgICAgICAgbmFtZTogXCJcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzW11cIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwidmlld1wiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW10sXG4gICAgbmFtZTogXCJnZXRBbGxBY3RpdmVQb29sc1wiLFxuICAgIG91dHB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NbXVwiLFxuICAgICAgICBuYW1lOiBcIlwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NbXVwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJ2aWV3XCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwic3RhcnRcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcImVuZFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcImdldEFsbFJlbW92ZWRQb29sc1wiLFxuICAgIG91dHB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJsZW5ndGhPZlJlbW92ZWRQb29sc1wiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzW11cIixcbiAgICAgICAgbmFtZTogXCJhcnJcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzW11cIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwidmlld1wiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcInBvb2xcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDEyOFtdXCIsXG4gICAgICAgIG5hbWU6IFwid1RpbWVzXCIsXG4gICAgICAgIHR5cGU6IFwidWludDEyOFtdXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJnZXRQb29sRGF0YVwiLFxuICAgIG91dHB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQ2NFwiLFxuICAgICAgICBuYW1lOiBcImNoYWluSWRcIixcbiAgICAgICAgdHlwZTogXCJ1aW50NjRcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MTI4XCIsXG4gICAgICAgIG5hbWU6IFwibGFzdFNsb3BlQ2hhbmdlQXBwbGllZEF0XCIsXG4gICAgICAgIHR5cGU6IFwidWludDEyOFwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgY29tcG9uZW50czogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MTI4XCIsXG4gICAgICAgICAgICBuYW1lOiBcImJpYXNcIixcbiAgICAgICAgICAgIHR5cGU6IFwidWludDEyOFwiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQxMjhcIixcbiAgICAgICAgICAgIG5hbWU6IFwic2xvcGVcIixcbiAgICAgICAgICAgIHR5cGU6IFwidWludDEyOFwiLFxuICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIGludGVybmFsVHlwZTogXCJzdHJ1Y3QgVmVCYWxhbmNlXCIsXG4gICAgICAgIG5hbWU6IFwidG90YWxWb3RlXCIsXG4gICAgICAgIHR5cGU6IFwidHVwbGVcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MTI4W11cIixcbiAgICAgICAgbmFtZTogXCJzbG9wZUNoYW5nZXNcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MTI4W11cIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwidmlld1wiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcInBvb2xcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDEyOFwiLFxuICAgICAgICBuYW1lOiBcIndUaW1lXCIsXG4gICAgICAgIHR5cGU6IFwidWludDEyOFwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG5hbWU6IFwiZ2V0UG9vbFRvdGFsVm90ZUF0XCIsXG4gICAgb3V0cHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDEyOFwiLFxuICAgICAgICBuYW1lOiBcIlwiLFxuICAgICAgICB0eXBlOiBcInVpbnQxMjhcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwidmlld1wiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcInVzZXJcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1tdXCIsXG4gICAgICAgIG5hbWU6IFwicG9vbHNcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzW11cIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcImdldFVzZXJEYXRhXCIsXG4gICAgb3V0cHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDY0XCIsXG4gICAgICAgIG5hbWU6IFwidG90YWxWb3RlZFdlaWdodFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQ2NFwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgY29tcG9uZW50czogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50NjRcIixcbiAgICAgICAgICAgIG5hbWU6IFwid2VpZ2h0XCIsXG4gICAgICAgICAgICB0eXBlOiBcInVpbnQ2NFwiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgY29tcG9uZW50czogW1xuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQxMjhcIixcbiAgICAgICAgICAgICAgICBuYW1lOiBcImJpYXNcIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcInVpbnQxMjhcIixcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MTI4XCIsXG4gICAgICAgICAgICAgICAgbmFtZTogXCJzbG9wZVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwidWludDEyOFwiLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJzdHJ1Y3QgVmVCYWxhbmNlXCIsXG4gICAgICAgICAgICBuYW1lOiBcInZvdGVcIixcbiAgICAgICAgICAgIHR5cGU6IFwidHVwbGVcIixcbiAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwic3RydWN0IFZvdGluZ0NvbnRyb2xsZXJTdG9yYWdlVXBnLlVzZXJQb29sRGF0YVtdXCIsXG4gICAgICAgIG5hbWU6IFwidm90ZUZvclBvb2xzXCIsXG4gICAgICAgIHR5cGU6IFwidHVwbGVbXVwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJ2aWV3XCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwidXNlclwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwicG9vbFwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwiaW5kZXhcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJnZXRVc2VyUG9vbEhpc3RvcnlBdFwiLFxuICAgIG91dHB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgY29tcG9uZW50czogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MTI4XCIsXG4gICAgICAgICAgICBuYW1lOiBcInRpbWVzdGFtcFwiLFxuICAgICAgICAgICAgdHlwZTogXCJ1aW50MTI4XCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBjb21wb25lbnRzOiBbXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDEyOFwiLFxuICAgICAgICAgICAgICAgIG5hbWU6IFwiYmlhc1wiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwidWludDEyOFwiLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQxMjhcIixcbiAgICAgICAgICAgICAgICBuYW1lOiBcInNsb3BlXCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJ1aW50MTI4XCIsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInN0cnVjdCBWZUJhbGFuY2VcIixcbiAgICAgICAgICAgIG5hbWU6IFwidmFsdWVcIixcbiAgICAgICAgICAgIHR5cGU6IFwidHVwbGVcIixcbiAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwic3RydWN0IENoZWNrcG9pbnRcIixcbiAgICAgICAgbmFtZTogXCJcIixcbiAgICAgICAgdHlwZTogXCJ0dXBsZVwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJ2aWV3XCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwidXNlclwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwicG9vbFwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcImdldFVzZXJQb29sSGlzdG9yeUxlbmd0aFwiLFxuICAgIG91dHB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcInZpZXdcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJ1c2VyXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJwb29sXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG5hbWU6IFwiZ2V0VXNlclBvb2xWb3RlXCIsXG4gICAgb3V0cHV0czogW1xuICAgICAge1xuICAgICAgICBjb21wb25lbnRzOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQ2NFwiLFxuICAgICAgICAgICAgbmFtZTogXCJ3ZWlnaHRcIixcbiAgICAgICAgICAgIHR5cGU6IFwidWludDY0XCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBjb21wb25lbnRzOiBbXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDEyOFwiLFxuICAgICAgICAgICAgICAgIG5hbWU6IFwiYmlhc1wiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwidWludDEyOFwiLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQxMjhcIixcbiAgICAgICAgICAgICAgICBuYW1lOiBcInNsb3BlXCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJ1aW50MTI4XCIsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInN0cnVjdCBWZUJhbGFuY2VcIixcbiAgICAgICAgICAgIG5hbWU6IFwidm90ZVwiLFxuICAgICAgICAgICAgdHlwZTogXCJ0dXBsZVwiLFxuICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIGludGVybmFsVHlwZTogXCJzdHJ1Y3QgVm90aW5nQ29udHJvbGxlclN0b3JhZ2VVcGcuVXNlclBvb2xEYXRhXCIsXG4gICAgICAgIG5hbWU6IFwiXCIsXG4gICAgICAgIHR5cGU6IFwidHVwbGVcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwidmlld1wiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDEyOFwiLFxuICAgICAgICBuYW1lOiBcIndUaW1lXCIsXG4gICAgICAgIHR5cGU6IFwidWludDEyOFwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NbXVwiLFxuICAgICAgICBuYW1lOiBcInBvb2xzXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1tdXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJnZXRXZWVrRGF0YVwiLFxuICAgIG91dHB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImJvb2xcIixcbiAgICAgICAgbmFtZTogXCJpc0Vwb2NoRmluYWxpemVkXCIsXG4gICAgICAgIHR5cGU6IFwiYm9vbFwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQxMjhcIixcbiAgICAgICAgbmFtZTogXCJ0b3RhbFZvdGVzXCIsXG4gICAgICAgIHR5cGU6IFwidWludDEyOFwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQxMjhbXVwiLFxuICAgICAgICBuYW1lOiBcInBvb2xWb3Rlc1wiLFxuICAgICAgICB0eXBlOiBcInVpbnQxMjhbXVwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJ2aWV3XCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXSxcbiAgICBuYW1lOiBcInBlbmRsZVBlclNlY1wiLFxuICAgIG91dHB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQxMjhcIixcbiAgICAgICAgbmFtZTogXCJcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MTI4XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcInZpZXdcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtdLFxuICAgIG5hbWU6IFwidmVQZW5kbGVcIixcbiAgICBvdXRwdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJjb250cmFjdCBJUFZlVG9rZW5cIixcbiAgICAgICAgbmFtZTogXCJcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcInZpZXdcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG5dIGFzIGNvbnN0O1xuXG5leHBvcnQgY2xhc3MgUGVuZGxlVm90aW5nQ29udHJvbGxlcl9fZmFjdG9yeSB7XG4gIHN0YXRpYyByZWFkb25seSBhYmkgPSBfYWJpO1xuICBzdGF0aWMgY3JlYXRlSW50ZXJmYWNlKCk6IFBlbmRsZVZvdGluZ0NvbnRyb2xsZXJJbnRlcmZhY2Uge1xuICAgIHJldHVybiBuZXdJbnRlcmZhY2UoX2FiaSkgYXMgUGVuZGxlVm90aW5nQ29udHJvbGxlckludGVyZmFjZTtcbiAgfVxuICBzdGF0aWMgY29ubmVjdChcbiAgICBhZGRyZXNzOiBzdHJpbmcsXG4gICAgc2lnbmVyT3JQcm92aWRlcjogU2lnbmVyIHwgUHJvdmlkZXIsXG4gICk6IFBlbmRsZVZvdGluZ0NvbnRyb2xsZXIge1xuICAgIHJldHVybiBuZXdDb250cmFjdChcbiAgICAgIGFkZHJlc3MsXG4gICAgICBfYWJpLFxuICAgICAgc2lnbmVyT3JQcm92aWRlcixcbiAgICApIGFzIFBlbmRsZVZvdGluZ0NvbnRyb2xsZXI7XG4gIH1cbn1cbiIsICIvKiBBdXRvZ2VuZXJhdGVkIGZpbGUuIERvIG5vdCBlZGl0IG1hbnVhbGx5LiAqL1xuLyogdHNsaW50OmRpc2FibGUgKi9cbi8qIGVzbGludC1kaXNhYmxlICovXG4vLyBAdHMtbm9jaGVja1xuaW1wb3J0IHsgbmV3Q29udHJhY3QsIG5ld0ludGVyZmFjZSB9IGZyb20gXCJAc2VudGlvL3Nkay9ldGhcIjtcblxuaW1wb3J0IHsgQ29udHJhY3QsIFNpZ25lciwgUHJvdmlkZXIsIEludGVyZmFjZSB9IGZyb20gXCJldGhlcnNcIjtcbmltcG9ydCB0eXBlIHtcbiAgUGVuZGxlVm90aW5nRXNjcm93LFxuICBQZW5kbGVWb3RpbmdFc2Nyb3dJbnRlcmZhY2UsXG59IGZyb20gXCIuLi9QZW5kbGVWb3RpbmdFc2Nyb3cuanNcIjtcblxuY29uc3QgX2FiaSA9IFtcbiAge1xuICAgIGFub255bW91czogZmFsc2UsXG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGNvbXBvbmVudHM6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDEyOFwiLFxuICAgICAgICAgICAgbmFtZTogXCJiaWFzXCIsXG4gICAgICAgICAgICB0eXBlOiBcInVpbnQxMjhcIixcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MTI4XCIsXG4gICAgICAgICAgICBuYW1lOiBcInNsb3BlXCIsXG4gICAgICAgICAgICB0eXBlOiBcInVpbnQxMjhcIixcbiAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBpbmRleGVkOiBmYWxzZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInN0cnVjdCBWZUJhbGFuY2VcIixcbiAgICAgICAgbmFtZTogXCJuZXdUb3RhbFN1cHBseVwiLFxuICAgICAgICB0eXBlOiBcInR1cGxlXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbmRleGVkOiBmYWxzZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZbXVwiLFxuICAgICAgICBuYW1lOiBcImNoYWluSWRzXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NltdXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJCcm9hZGNhc3RUb3RhbFN1cHBseVwiLFxuICAgIHR5cGU6IFwiZXZlbnRcIixcbiAgfSxcbiAge1xuICAgIGFub255bW91czogZmFsc2UsXG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IHRydWUsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwidXNlclwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IGZhbHNlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NltdXCIsXG4gICAgICAgIG5hbWU6IFwiY2hhaW5JZHNcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2W11cIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcIkJyb2FkY2FzdFVzZXJQb3NpdGlvblwiLFxuICAgIHR5cGU6IFwiZXZlbnRcIixcbiAgfSxcbiAge1xuICAgIGFub255bW91czogZmFsc2UsXG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IHRydWUsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwidXNlclwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IGZhbHNlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDEyOFwiLFxuICAgICAgICBuYW1lOiBcImFtb3VudFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQxMjhcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IGZhbHNlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDEyOFwiLFxuICAgICAgICBuYW1lOiBcImV4cGlyeVwiLFxuICAgICAgICB0eXBlOiBcInVpbnQxMjhcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcIk5ld0xvY2tQb3NpdGlvblwiLFxuICAgIHR5cGU6IFwiZXZlbnRcIixcbiAgfSxcbiAge1xuICAgIGFub255bW91czogZmFsc2UsXG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IHRydWUsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwidXNlclwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IGZhbHNlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDEyOFwiLFxuICAgICAgICBuYW1lOiBcImFtb3VudFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQxMjhcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcIldpdGhkcmF3XCIsXG4gICAgdHlwZTogXCJldmVudFwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwidXNlclwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcImJhbGFuY2VPZlwiLFxuICAgIG91dHB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQxMjhcIixcbiAgICAgICAgbmFtZTogXCJcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MTI4XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcInZpZXdcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJ1c2VyXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJpbmRleFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcImdldFVzZXJIaXN0b3J5QXRcIixcbiAgICBvdXRwdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGNvbXBvbmVudHM6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDEyOFwiLFxuICAgICAgICAgICAgbmFtZTogXCJ0aW1lc3RhbXBcIixcbiAgICAgICAgICAgIHR5cGU6IFwidWludDEyOFwiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgY29tcG9uZW50czogW1xuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQxMjhcIixcbiAgICAgICAgICAgICAgICBuYW1lOiBcImJpYXNcIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcInVpbnQxMjhcIixcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MTI4XCIsXG4gICAgICAgICAgICAgICAgbmFtZTogXCJzbG9wZVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwidWludDEyOFwiLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIGludGVybmFsVHlwZTogXCJzdHJ1Y3QgVmVCYWxhbmNlXCIsXG4gICAgICAgICAgICBuYW1lOiBcInZhbHVlXCIsXG4gICAgICAgICAgICB0eXBlOiBcInR1cGxlXCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInN0cnVjdCBDaGVja3BvaW50XCIsXG4gICAgICAgIG5hbWU6IFwiXCIsXG4gICAgICAgIHR5cGU6IFwidHVwbGVcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwidmlld1wiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcInVzZXJcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJnZXRVc2VySGlzdG9yeUxlbmd0aFwiLFxuICAgIG91dHB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcInZpZXdcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQxMjhcIixcbiAgICAgICAgbmFtZTogXCJhZGRpdGlvbmFsQW1vdW50VG9Mb2NrXCIsXG4gICAgICAgIHR5cGU6IFwidWludDEyOFwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQxMjhcIixcbiAgICAgICAgbmFtZTogXCJleHBpcnlcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MTI4XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJpbmNyZWFzZUxvY2tQb3NpdGlvblwiLFxuICAgIG91dHB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQxMjhcIixcbiAgICAgICAgbmFtZTogXCJcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MTI4XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcIm5vbnBheWFibGVcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQxMjhcIixcbiAgICAgICAgbmFtZTogXCJhZGRpdGlvbmFsQW1vdW50VG9Mb2NrXCIsXG4gICAgICAgIHR5cGU6IFwidWludDEyOFwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQxMjhcIixcbiAgICAgICAgbmFtZTogXCJuZXdFeHBpcnlcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MTI4XCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NltdXCIsXG4gICAgICAgIG5hbWU6IFwiY2hhaW5JZHNcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2W11cIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcImluY3JlYXNlTG9ja1Bvc2l0aW9uQW5kQnJvYWRjYXN0XCIsXG4gICAgb3V0cHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDEyOFwiLFxuICAgICAgICBuYW1lOiBcIm5ld1ZlQmFsYW5jZVwiLFxuICAgICAgICB0eXBlOiBcInVpbnQxMjhcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwicGF5YWJsZVwiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcInVzZXJcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJwb3NpdGlvbkRhdGFcIixcbiAgICBvdXRwdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MTI4XCIsXG4gICAgICAgIG5hbWU6IFwiYW1vdW50XCIsXG4gICAgICAgIHR5cGU6IFwidWludDEyOFwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQxMjhcIixcbiAgICAgICAgbmFtZTogXCJleHBpcnlcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MTI4XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcInZpZXdcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJ1c2VyXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG5hbWU6IFwidG90YWxTdXBwbHlBbmRCYWxhbmNlQ3VycmVudFwiLFxuICAgIG91dHB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQxMjhcIixcbiAgICAgICAgbmFtZTogXCJcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MTI4XCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDEyOFwiLFxuICAgICAgICBuYW1lOiBcIlwiLFxuICAgICAgICB0eXBlOiBcInVpbnQxMjhcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwibm9ucGF5YWJsZVwiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDEyOFwiLFxuICAgICAgICBuYW1lOiBcInRpbWVzdGFtcFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQxMjhcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcInRvdGFsU3VwcGx5QXRcIixcbiAgICBvdXRwdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MTI4XCIsXG4gICAgICAgIG5hbWU6IFwiXCIsXG4gICAgICAgIHR5cGU6IFwidWludDEyOFwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJ2aWV3XCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXSxcbiAgICBuYW1lOiBcInRvdGFsU3VwcGx5Q3VycmVudFwiLFxuICAgIG91dHB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQxMjhcIixcbiAgICAgICAgbmFtZTogXCJcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MTI4XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcIm5vbnBheWFibGVcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtdLFxuICAgIG5hbWU6IFwidG90YWxTdXBwbHlTdG9yZWRcIixcbiAgICBvdXRwdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MTI4XCIsXG4gICAgICAgIG5hbWU6IFwiXCIsXG4gICAgICAgIHR5cGU6IFwidWludDEyOFwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJ2aWV3XCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXSxcbiAgICBuYW1lOiBcIndpdGhkcmF3XCIsXG4gICAgb3V0cHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDEyOFwiLFxuICAgICAgICBuYW1lOiBcIlwiLFxuICAgICAgICB0eXBlOiBcInVpbnQxMjhcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwibm9ucGF5YWJsZVwiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbl0gYXMgY29uc3Q7XG5cbmV4cG9ydCBjbGFzcyBQZW5kbGVWb3RpbmdFc2Nyb3dfX2ZhY3Rvcnkge1xuICBzdGF0aWMgcmVhZG9ubHkgYWJpID0gX2FiaTtcbiAgc3RhdGljIGNyZWF0ZUludGVyZmFjZSgpOiBQZW5kbGVWb3RpbmdFc2Nyb3dJbnRlcmZhY2Uge1xuICAgIHJldHVybiBuZXdJbnRlcmZhY2UoX2FiaSkgYXMgUGVuZGxlVm90aW5nRXNjcm93SW50ZXJmYWNlO1xuICB9XG4gIHN0YXRpYyBjb25uZWN0KFxuICAgIGFkZHJlc3M6IHN0cmluZyxcbiAgICBzaWduZXJPclByb3ZpZGVyOiBTaWduZXIgfCBQcm92aWRlcixcbiAgKTogUGVuZGxlVm90aW5nRXNjcm93IHtcbiAgICByZXR1cm4gbmV3Q29udHJhY3QoYWRkcmVzcywgX2FiaSwgc2lnbmVyT3JQcm92aWRlcikgYXMgUGVuZGxlVm90aW5nRXNjcm93O1xuICB9XG59XG4iLCAiLyogQXV0b2dlbmVyYXRlZCBmaWxlLiBEbyBub3QgZWRpdCBtYW51YWxseS4gKi9cbi8qIHRzbGludDpkaXNhYmxlICovXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xuLy8gQHRzLW5vY2hlY2tcbmltcG9ydCB7IG5ld0NvbnRyYWN0LCBuZXdJbnRlcmZhY2UgfSBmcm9tIFwiQHNlbnRpby9zZGsvZXRoXCI7XG5cbmltcG9ydCB7IENvbnRyYWN0LCBTaWduZXIsIFByb3ZpZGVyLCBJbnRlcmZhY2UgfSBmcm9tIFwiZXRoZXJzXCI7XG5pbXBvcnQgdHlwZSB7XG4gIFBlbmRsZVlpZWxkQ29udHJhY3RGYWN0b3J5LFxuICBQZW5kbGVZaWVsZENvbnRyYWN0RmFjdG9yeUludGVyZmFjZSxcbn0gZnJvbSBcIi4uL1BlbmRsZVlpZWxkQ29udHJhY3RGYWN0b3J5LmpzXCI7XG5cbmNvbnN0IF9hYmkgPSBbXG4gIHtcbiAgICBhbm9ueW1vdXM6IGZhbHNlLFxuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbmRleGVkOiB0cnVlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcIlNZXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogdHJ1ZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJleHBpcnlcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbmRleGVkOiBmYWxzZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJQVFwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IGZhbHNlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcIllUXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG5hbWU6IFwiQ3JlYXRlWWllbGRDb250cmFjdFwiLFxuICAgIHR5cGU6IFwiZXZlbnRcIixcbiAgfSxcbiAge1xuICAgIGFub255bW91czogZmFsc2UsXG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IGZhbHNlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIm5ld0V4cGlyeURpdmlzb3JcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJTZXRFeHBpcnlEaXZpc29yXCIsXG4gICAgdHlwZTogXCJldmVudFwiLFxuICB9LFxuICB7XG4gICAgYW5vbnltb3VzOiBmYWxzZSxcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogZmFsc2UsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwibmV3SW50ZXJlc3RGZWVSYXRlXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG5hbWU6IFwiU2V0SW50ZXJlc3RGZWVSYXRlXCIsXG4gICAgdHlwZTogXCJldmVudFwiLFxuICB9LFxuICB7XG4gICAgYW5vbnltb3VzOiBmYWxzZSxcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogZmFsc2UsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwibmV3UmV3YXJkRmVlUmF0ZVwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcIlNldFJld2FyZEZlZVJhdGVcIixcbiAgICB0eXBlOiBcImV2ZW50XCIsXG4gIH0sXG4gIHtcbiAgICBhbm9ueW1vdXM6IGZhbHNlLFxuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbmRleGVkOiB0cnVlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcInRyZWFzdXJ5XCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG5hbWU6IFwiU2V0VHJlYXN1cnlcIixcbiAgICB0eXBlOiBcImV2ZW50XCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtdLFxuICAgIG5hbWU6IFwiZXhwaXJ5RGl2aXNvclwiLFxuICAgIG91dHB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQ5NlwiLFxuICAgICAgICBuYW1lOiBcIlwiLFxuICAgICAgICB0eXBlOiBcInVpbnQ5NlwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJ2aWV3XCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwiU1lcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcImV4cGlyeVwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcImdldFBUXCIsXG4gICAgb3V0cHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcIlwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwidmlld1wiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcIlNZXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJleHBpcnlcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJnZXRZVFwiLFxuICAgIG91dHB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcInZpZXdcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtdLFxuICAgIG5hbWU6IFwiaW50ZXJlc3RGZWVSYXRlXCIsXG4gICAgb3V0cHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDEyOFwiLFxuICAgICAgICBuYW1lOiBcIlwiLFxuICAgICAgICB0eXBlOiBcInVpbnQxMjhcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwidmlld1wiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcIlwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcImlzUFRcIixcbiAgICBvdXRwdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJib29sXCIsXG4gICAgICAgIG5hbWU6IFwiXCIsXG4gICAgICAgIHR5cGU6IFwiYm9vbFwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJ2aWV3XCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwiXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG5hbWU6IFwiaXNZVFwiLFxuICAgIG91dHB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImJvb2xcIixcbiAgICAgICAgbmFtZTogXCJcIixcbiAgICAgICAgdHlwZTogXCJib29sXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcInZpZXdcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtdLFxuICAgIG5hbWU6IFwicmV3YXJkRmVlUmF0ZVwiLFxuICAgIG91dHB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQxMjhcIixcbiAgICAgICAgbmFtZTogXCJcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MTI4XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcInZpZXdcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtdLFxuICAgIG5hbWU6IFwidHJlYXN1cnlcIixcbiAgICBvdXRwdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwiXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJ2aWV3XCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuXSBhcyBjb25zdDtcblxuZXhwb3J0IGNsYXNzIFBlbmRsZVlpZWxkQ29udHJhY3RGYWN0b3J5X19mYWN0b3J5IHtcbiAgc3RhdGljIHJlYWRvbmx5IGFiaSA9IF9hYmk7XG4gIHN0YXRpYyBjcmVhdGVJbnRlcmZhY2UoKTogUGVuZGxlWWllbGRDb250cmFjdEZhY3RvcnlJbnRlcmZhY2Uge1xuICAgIHJldHVybiBuZXdJbnRlcmZhY2UoX2FiaSkgYXMgUGVuZGxlWWllbGRDb250cmFjdEZhY3RvcnlJbnRlcmZhY2U7XG4gIH1cbiAgc3RhdGljIGNvbm5lY3QoXG4gICAgYWRkcmVzczogc3RyaW5nLFxuICAgIHNpZ25lck9yUHJvdmlkZXI6IFNpZ25lciB8IFByb3ZpZGVyLFxuICApOiBQZW5kbGVZaWVsZENvbnRyYWN0RmFjdG9yeSB7XG4gICAgcmV0dXJuIG5ld0NvbnRyYWN0KFxuICAgICAgYWRkcmVzcyxcbiAgICAgIF9hYmksXG4gICAgICBzaWduZXJPclByb3ZpZGVyLFxuICAgICkgYXMgUGVuZGxlWWllbGRDb250cmFjdEZhY3Rvcnk7XG4gIH1cbn1cbiIsICIvKiBBdXRvZ2VuZXJhdGVkIGZpbGUuIERvIG5vdCBlZGl0IG1hbnVhbGx5LiAqL1xuLyogdHNsaW50OmRpc2FibGUgKi9cbi8qIGVzbGludC1kaXNhYmxlICovXG4vLyBAdHMtbm9jaGVja1xuaW1wb3J0IHsgbmV3Q29udHJhY3QsIG5ld0ludGVyZmFjZSB9IGZyb20gXCJAc2VudGlvL3Nkay9ldGhcIjtcblxuaW1wb3J0IHsgQ29udHJhY3QsIFNpZ25lciwgUHJvdmlkZXIsIEludGVyZmFjZSB9IGZyb20gXCJldGhlcnNcIjtcbmltcG9ydCB0eXBlIHtcbiAgUGVuZGxlWWllbGRUb2tlbixcbiAgUGVuZGxlWWllbGRUb2tlbkludGVyZmFjZSxcbn0gZnJvbSBcIi4uL1BlbmRsZVlpZWxkVG9rZW4uanNcIjtcblxuY29uc3QgX2FiaSA9IFtcbiAge1xuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcIl9TWVwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwiX1BUXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInN0cmluZ1wiLFxuICAgICAgICBuYW1lOiBcIl9uYW1lXCIsXG4gICAgICAgIHR5cGU6IFwic3RyaW5nXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwic3RyaW5nXCIsXG4gICAgICAgIG5hbWU6IFwiX3N5bWJvbFwiLFxuICAgICAgICB0eXBlOiBcInN0cmluZ1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQ4XCIsXG4gICAgICAgIG5hbWU6IFwiX19kZWNpbWFsc1wiLFxuICAgICAgICB0eXBlOiBcInVpbnQ4XCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIl9leHBpcnlcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYm9vbFwiLFxuICAgICAgICBuYW1lOiBcIl9kb0NhY2hlSW5kZXhTYW1lQmxvY2tcIixcbiAgICAgICAgdHlwZTogXCJib29sXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcIm5vbnBheWFibGVcIixcbiAgICB0eXBlOiBcImNvbnN0cnVjdG9yXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtdLFxuICAgIG5hbWU6IFwiQXJyYXlFbXB0eVwiLFxuICAgIHR5cGU6IFwiZXJyb3JcIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW10sXG4gICAgbmFtZTogXCJBcnJheUxlbmd0aE1pc21hdGNoXCIsXG4gICAgdHlwZTogXCJlcnJvclwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXSxcbiAgICBuYW1lOiBcIllDRXhwaXJlZFwiLFxuICAgIHR5cGU6IFwiZXJyb3JcIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW10sXG4gICAgbmFtZTogXCJZQ05vRmxvYXRpbmdTeVwiLFxuICAgIHR5cGU6IFwiZXJyb3JcIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW10sXG4gICAgbmFtZTogXCJZQ05vdEV4cGlyZWRcIixcbiAgICB0eXBlOiBcImVycm9yXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtdLFxuICAgIG5hbWU6IFwiWUNOb3RoaW5nVG9SZWRlZW1cIixcbiAgICB0eXBlOiBcImVycm9yXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtdLFxuICAgIG5hbWU6IFwiWUNQb3N0RXhwaXJ5RGF0YU5vdFNldFwiLFxuICAgIHR5cGU6IFwiZXJyb3JcIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcImFjdHVhbFN5XCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJyZXF1aXJlZFN5XCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG5hbWU6IFwiWWllbGRDb250cmFjdEluc3VmZmljaWVudFN5XCIsXG4gICAgdHlwZTogXCJlcnJvclwiLFxuICB9LFxuICB7XG4gICAgYW5vbnltb3VzOiBmYWxzZSxcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogdHJ1ZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJvd25lclwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IHRydWUsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwic3BlbmRlclwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IGZhbHNlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcInZhbHVlXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG5hbWU6IFwiQXBwcm92YWxcIixcbiAgICB0eXBlOiBcImV2ZW50XCIsXG4gIH0sXG4gIHtcbiAgICBhbm9ueW1vdXM6IGZhbHNlLFxuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbmRleGVkOiB0cnVlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcImNhbGxlclwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IHRydWUsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwicmVjZWl2ZXJcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbmRleGVkOiBmYWxzZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJhbW91bnRQWVRvUmVkZWVtXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogZmFsc2UsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwiYW1vdW50U3lPdXRcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJCdXJuXCIsXG4gICAgdHlwZTogXCJldmVudFwiLFxuICB9LFxuICB7XG4gICAgYW5vbnltb3VzOiBmYWxzZSxcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogZmFsc2UsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwiYW1vdW50SW50ZXJlc3RGZWVcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJDb2xsZWN0SW50ZXJlc3RGZWVcIixcbiAgICB0eXBlOiBcImV2ZW50XCIsXG4gIH0sXG4gIHtcbiAgICBhbm9ueW1vdXM6IGZhbHNlLFxuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbmRleGVkOiB0cnVlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcInJld2FyZFRva2VuXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogZmFsc2UsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwiYW1vdW50UmV3YXJkRmVlXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG5hbWU6IFwiQ29sbGVjdFJld2FyZEZlZVwiLFxuICAgIHR5cGU6IFwiZXZlbnRcIixcbiAgfSxcbiAge1xuICAgIGFub255bW91czogZmFsc2UsXG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IHRydWUsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwiY2FsbGVyXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogdHJ1ZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJyZWNlaXZlclBUXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogdHJ1ZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJyZWNlaXZlcllUXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogZmFsc2UsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwiYW1vdW50U3lUb01pbnRcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbmRleGVkOiBmYWxzZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJhbW91bnRQWU91dFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcIk1pbnRcIixcbiAgICB0eXBlOiBcImV2ZW50XCIsXG4gIH0sXG4gIHtcbiAgICBhbm9ueW1vdXM6IGZhbHNlLFxuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbmRleGVkOiB0cnVlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIm5ld0luZGV4XCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG5hbWU6IFwiTmV3SW50ZXJlc3RJbmRleFwiLFxuICAgIHR5cGU6IFwiZXZlbnRcIixcbiAgfSxcbiAge1xuICAgIGFub255bW91czogZmFsc2UsXG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IHRydWUsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwidXNlclwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IGZhbHNlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcImludGVyZXN0T3V0XCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG5hbWU6IFwiUmVkZWVtSW50ZXJlc3RcIixcbiAgICB0eXBlOiBcImV2ZW50XCIsXG4gIH0sXG4gIHtcbiAgICBhbm9ueW1vdXM6IGZhbHNlLFxuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbmRleGVkOiB0cnVlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcInVzZXJcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbmRleGVkOiBmYWxzZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZbXVwiLFxuICAgICAgICBuYW1lOiBcImFtb3VudFJld2FyZHNPdXRcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2W11cIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcIlJlZGVlbVJld2FyZHNcIixcbiAgICB0eXBlOiBcImV2ZW50XCIsXG4gIH0sXG4gIHtcbiAgICBhbm9ueW1vdXM6IGZhbHNlLFxuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbmRleGVkOiB0cnVlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcImZyb21cIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbmRleGVkOiB0cnVlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcInRvXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogZmFsc2UsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwidmFsdWVcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJUcmFuc2ZlclwiLFxuICAgIHR5cGU6IFwiZXZlbnRcIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW10sXG4gICAgbmFtZTogXCJQVFwiLFxuICAgIG91dHB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcInZpZXdcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtdLFxuICAgIG5hbWU6IFwiU1lcIixcbiAgICBvdXRwdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwiXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJ2aWV3XCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwib3duZXJcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcInNwZW5kZXJcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJhbGxvd2FuY2VcIixcbiAgICBvdXRwdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwiXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJ2aWV3XCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwic3BlbmRlclwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwiYW1vdW50XCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG5hbWU6IFwiYXBwcm92ZVwiLFxuICAgIG91dHB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImJvb2xcIixcbiAgICAgICAgbmFtZTogXCJcIixcbiAgICAgICAgdHlwZTogXCJib29sXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcIm5vbnBheWFibGVcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJhY2NvdW50XCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG5hbWU6IFwiYmFsYW5jZU9mXCIsXG4gICAgb3V0cHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIlwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwidmlld1wiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW10sXG4gICAgbmFtZTogXCJkZWNpbWFsc1wiLFxuICAgIG91dHB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQ4XCIsXG4gICAgICAgIG5hbWU6IFwiXCIsXG4gICAgICAgIHR5cGU6IFwidWludDhcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwidmlld1wiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW10sXG4gICAgbmFtZTogXCJkb0NhY2hlSW5kZXhTYW1lQmxvY2tcIixcbiAgICBvdXRwdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJib29sXCIsXG4gICAgICAgIG5hbWU6IFwiXCIsXG4gICAgICAgIHR5cGU6IFwiYm9vbFwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJ2aWV3XCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXSxcbiAgICBuYW1lOiBcImV4cGlyeVwiLFxuICAgIG91dHB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcInZpZXdcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtdLFxuICAgIG5hbWU6IFwiZmFjdG9yeVwiLFxuICAgIG91dHB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcInZpZXdcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtdLFxuICAgIG5hbWU6IFwiZ2V0UG9zdEV4cGlyeURhdGFcIixcbiAgICBvdXRwdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwiZmlyc3RQWUluZGV4XCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJ0b3RhbFN5SW50ZXJlc3RGb3JUcmVhc3VyeVwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2W11cIixcbiAgICAgICAgbmFtZTogXCJmaXJzdFJld2FyZEluZGV4ZXNcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2W11cIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2W11cIixcbiAgICAgICAgbmFtZTogXCJ1c2VyUmV3YXJkT3dlZFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZbXVwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJ2aWV3XCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXSxcbiAgICBuYW1lOiBcImdldFJld2FyZFRva2Vuc1wiLFxuICAgIG91dHB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NbXVwiLFxuICAgICAgICBuYW1lOiBcIlwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NbXVwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJ2aWV3XCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXSxcbiAgICBuYW1lOiBcImlzRXhwaXJlZFwiLFxuICAgIG91dHB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImJvb2xcIixcbiAgICAgICAgbmFtZTogXCJcIixcbiAgICAgICAgdHlwZTogXCJib29sXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcInZpZXdcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJyZWNlaXZlclBUXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJyZWNlaXZlcllUXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG5hbWU6IFwibWludFBZXCIsXG4gICAgb3V0cHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcImFtb3VudFBZT3V0XCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJub25wYXlhYmxlXCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzW11cIixcbiAgICAgICAgbmFtZTogXCJyZWNlaXZlclBUc1wiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NbXVwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NbXVwiLFxuICAgICAgICBuYW1lOiBcInJlY2VpdmVyWVRzXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1tdXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NltdXCIsXG4gICAgICAgIG5hbWU6IFwiYW1vdW50U3lUb01pbnRzXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NltdXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJtaW50UFlNdWx0aVwiLFxuICAgIG91dHB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZbXVwiLFxuICAgICAgICBuYW1lOiBcImFtb3VudFBZT3V0c1wiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZbXVwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJub25wYXlhYmxlXCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXSxcbiAgICBuYW1lOiBcIm5hbWVcIixcbiAgICBvdXRwdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJzdHJpbmdcIixcbiAgICAgICAgbmFtZTogXCJcIixcbiAgICAgICAgdHlwZTogXCJzdHJpbmdcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwidmlld1wiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW10sXG4gICAgbmFtZTogXCJwb3N0RXhwaXJ5XCIsXG4gICAgb3V0cHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDEyOFwiLFxuICAgICAgICBuYW1lOiBcImZpcnN0UFlJbmRleFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQxMjhcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MTI4XCIsXG4gICAgICAgIG5hbWU6IFwidG90YWxTeUludGVyZXN0Rm9yVHJlYXN1cnlcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MTI4XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcInZpZXdcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtdLFxuICAgIG5hbWU6IFwicHlJbmRleEN1cnJlbnRcIixcbiAgICBvdXRwdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwiY3VycmVudEluZGV4XCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJub25wYXlhYmxlXCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXSxcbiAgICBuYW1lOiBcInB5SW5kZXhMYXN0VXBkYXRlZEJsb2NrXCIsXG4gICAgb3V0cHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDEyOFwiLFxuICAgICAgICBuYW1lOiBcIlwiLFxuICAgICAgICB0eXBlOiBcInVpbnQxMjhcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwidmlld1wiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW10sXG4gICAgbmFtZTogXCJweUluZGV4U3RvcmVkXCIsXG4gICAgb3V0cHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIlwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwidmlld1wiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcInVzZXJcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYm9vbFwiLFxuICAgICAgICBuYW1lOiBcInJlZGVlbUludGVyZXN0XCIsXG4gICAgICAgIHR5cGU6IFwiYm9vbFwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImJvb2xcIixcbiAgICAgICAgbmFtZTogXCJyZWRlZW1SZXdhcmRzXCIsXG4gICAgICAgIHR5cGU6IFwiYm9vbFwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG5hbWU6IFwicmVkZWVtRHVlSW50ZXJlc3RBbmRSZXdhcmRzXCIsXG4gICAgb3V0cHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcImludGVyZXN0T3V0XCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZbXVwiLFxuICAgICAgICBuYW1lOiBcInJld2FyZHNPdXRcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2W11cIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwibm9ucGF5YWJsZVwiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW10sXG4gICAgbmFtZTogXCJyZWRlZW1JbnRlcmVzdEFuZFJld2FyZHNQb3N0RXhwaXJ5Rm9yVHJlYXN1cnlcIixcbiAgICBvdXRwdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwiaW50ZXJlc3RPdXRcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NltdXCIsXG4gICAgICAgIG5hbWU6IFwicmV3YXJkc091dFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZbXVwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJub25wYXlhYmxlXCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwicmVjZWl2ZXJcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJyZWRlZW1QWVwiLFxuICAgIG91dHB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJhbW91bnRTeU91dFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwibm9ucGF5YWJsZVwiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1tdXCIsXG4gICAgICAgIG5hbWU6IFwicmVjZWl2ZXJzXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1tdXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NltdXCIsXG4gICAgICAgIG5hbWU6IFwiYW1vdW50UFlUb1JlZGVlbXNcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2W11cIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcInJlZGVlbVBZTXVsdGlcIixcbiAgICBvdXRwdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2W11cIixcbiAgICAgICAgbmFtZTogXCJhbW91bnRTeU91dHNcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2W11cIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwibm9ucGF5YWJsZVwiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW10sXG4gICAgbmFtZTogXCJyZXdhcmRJbmRleGVzQ3VycmVudFwiLFxuICAgIG91dHB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZbXVwiLFxuICAgICAgICBuYW1lOiBcIlwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZbXVwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJub25wYXlhYmxlXCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXSxcbiAgICBuYW1lOiBcInNldFBvc3RFeHBpcnlEYXRhXCIsXG4gICAgb3V0cHV0czogW10sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcIm5vbnBheWFibGVcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtdLFxuICAgIG5hbWU6IFwic3lSZXNlcnZlXCIsXG4gICAgb3V0cHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIlwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwidmlld1wiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW10sXG4gICAgbmFtZTogXCJzeW1ib2xcIixcbiAgICBvdXRwdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJzdHJpbmdcIixcbiAgICAgICAgbmFtZTogXCJcIixcbiAgICAgICAgdHlwZTogXCJzdHJpbmdcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwidmlld1wiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW10sXG4gICAgbmFtZTogXCJ0b3RhbFN1cHBseVwiLFxuICAgIG91dHB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcInZpZXdcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJ0b1wiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwiYW1vdW50XCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG5hbWU6IFwidHJhbnNmZXJcIixcbiAgICBvdXRwdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJib29sXCIsXG4gICAgICAgIG5hbWU6IFwiXCIsXG4gICAgICAgIHR5cGU6IFwiYm9vbFwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJub25wYXlhYmxlXCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwiZnJvbVwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwidG9cIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcImFtb3VudFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcInRyYW5zZmVyRnJvbVwiLFxuICAgIG91dHB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImJvb2xcIixcbiAgICAgICAgbmFtZTogXCJcIixcbiAgICAgICAgdHlwZTogXCJib29sXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcIm5vbnBheWFibGVcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJ1c2VySW50ZXJlc3RcIixcbiAgICBvdXRwdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MTI4XCIsXG4gICAgICAgIG5hbWU6IFwiaW5kZXhcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MTI4XCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDEyOFwiLFxuICAgICAgICBuYW1lOiBcImFjY3J1ZWRcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MTI4XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcInZpZXdcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcIlwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcInVzZXJSZXdhcmRcIixcbiAgICBvdXRwdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MTI4XCIsXG4gICAgICAgIG5hbWU6IFwiaW5kZXhcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MTI4XCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDEyOFwiLFxuICAgICAgICBuYW1lOiBcImFjY3J1ZWRcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MTI4XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcInZpZXdcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG5dIGFzIGNvbnN0O1xuXG5leHBvcnQgY2xhc3MgUGVuZGxlWWllbGRUb2tlbl9fZmFjdG9yeSB7XG4gIHN0YXRpYyByZWFkb25seSBhYmkgPSBfYWJpO1xuICBzdGF0aWMgY3JlYXRlSW50ZXJmYWNlKCk6IFBlbmRsZVlpZWxkVG9rZW5JbnRlcmZhY2Uge1xuICAgIHJldHVybiBuZXdJbnRlcmZhY2UoX2FiaSkgYXMgUGVuZGxlWWllbGRUb2tlbkludGVyZmFjZTtcbiAgfVxuICBzdGF0aWMgY29ubmVjdChcbiAgICBhZGRyZXNzOiBzdHJpbmcsXG4gICAgc2lnbmVyT3JQcm92aWRlcjogU2lnbmVyIHwgUHJvdmlkZXIsXG4gICk6IFBlbmRsZVlpZWxkVG9rZW4ge1xuICAgIHJldHVybiBuZXdDb250cmFjdChhZGRyZXNzLCBfYWJpLCBzaWduZXJPclByb3ZpZGVyKSBhcyBQZW5kbGVZaWVsZFRva2VuO1xuICB9XG59XG4iLCAiLyogQXV0b2dlbmVyYXRlZCBmaWxlLiBEbyBub3QgZWRpdCBtYW51YWxseS4gKi9cbi8qIHRzbGludDpkaXNhYmxlICovXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xuLy8gQHRzLW5vY2hlY2tcbmltcG9ydCB7IG5ld0NvbnRyYWN0LCBuZXdJbnRlcmZhY2UgfSBmcm9tIFwiQHNlbnRpby9zZGsvZXRoXCI7XG5cbmltcG9ydCB7IENvbnRyYWN0LCBTaWduZXIsIFByb3ZpZGVyLCBJbnRlcmZhY2UgfSBmcm9tIFwiZXRoZXJzXCI7XG5pbXBvcnQgdHlwZSB7XG4gIFBlbnBpZVJlY2VpcHRUb2tlbixcbiAgUGVucGllUmVjZWlwdFRva2VuSW50ZXJmYWNlLFxufSBmcm9tIFwiLi4vUGVucGllUmVjZWlwdFRva2VuLmpzXCI7XG5cbmNvbnN0IF9hYmkgPSBbXG4gIHtcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJfdW5kZXJseWluZ1wiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwiX21hc3RlclBlbnBpZVwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJzdHJpbmdcIixcbiAgICAgICAgbmFtZTogXCJuYW1lXCIsXG4gICAgICAgIHR5cGU6IFwic3RyaW5nXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwic3RyaW5nXCIsXG4gICAgICAgIG5hbWU6IFwic3ltYm9sXCIsXG4gICAgICAgIHR5cGU6IFwic3RyaW5nXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcIm5vbnBheWFibGVcIixcbiAgICB0eXBlOiBcImNvbnN0cnVjdG9yXCIsXG4gIH0sXG4gIHtcbiAgICBhbm9ueW1vdXM6IGZhbHNlLFxuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbmRleGVkOiB0cnVlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcIm93bmVyXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogdHJ1ZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJzcGVuZGVyXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogZmFsc2UsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwidmFsdWVcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJBcHByb3ZhbFwiLFxuICAgIHR5cGU6IFwiZXZlbnRcIixcbiAgfSxcbiAge1xuICAgIGFub255bW91czogZmFsc2UsXG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IHRydWUsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwicHJldmlvdXNPd25lclwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IHRydWUsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwibmV3T3duZXJcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJPd25lcnNoaXBUcmFuc2ZlcnJlZFwiLFxuICAgIHR5cGU6IFwiZXZlbnRcIixcbiAgfSxcbiAge1xuICAgIGFub255bW91czogZmFsc2UsXG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IHRydWUsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwiZnJvbVwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IHRydWUsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwidG9cIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbmRleGVkOiBmYWxzZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJ2YWx1ZVwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcIlRyYW5zZmVyXCIsXG4gICAgdHlwZTogXCJldmVudFwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwib3duZXJcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcInNwZW5kZXJcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJhbGxvd2FuY2VcIixcbiAgICBvdXRwdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwiXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJ2aWV3XCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwic3BlbmRlclwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwiYW1vdW50XCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG5hbWU6IFwiYXBwcm92ZVwiLFxuICAgIG91dHB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImJvb2xcIixcbiAgICAgICAgbmFtZTogXCJcIixcbiAgICAgICAgdHlwZTogXCJib29sXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcIm5vbnBheWFibGVcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJhY2NvdW50XCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG5hbWU6IFwiYmFsYW5jZU9mXCIsXG4gICAgb3V0cHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIlwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwidmlld1wiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcImFjY291bnRcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcImFtb3VudFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcImJ1cm5cIixcbiAgICBvdXRwdXRzOiBbXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwibm9ucGF5YWJsZVwiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW10sXG4gICAgbmFtZTogXCJkZWNpbWFsc1wiLFxuICAgIG91dHB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQ4XCIsXG4gICAgICAgIG5hbWU6IFwiXCIsXG4gICAgICAgIHR5cGU6IFwidWludDhcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwidmlld1wiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcInNwZW5kZXJcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcInN1YnRyYWN0ZWRWYWx1ZVwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcImRlY3JlYXNlQWxsb3dhbmNlXCIsXG4gICAgb3V0cHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYm9vbFwiLFxuICAgICAgICBuYW1lOiBcIlwiLFxuICAgICAgICB0eXBlOiBcImJvb2xcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwibm9ucGF5YWJsZVwiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcInNwZW5kZXJcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcImFkZGVkVmFsdWVcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJpbmNyZWFzZUFsbG93YW5jZVwiLFxuICAgIG91dHB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImJvb2xcIixcbiAgICAgICAgbmFtZTogXCJcIixcbiAgICAgICAgdHlwZTogXCJib29sXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcIm5vbnBheWFibGVcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtdLFxuICAgIG5hbWU6IFwibWFzdGVyUGVucGllXCIsXG4gICAgb3V0cHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcIlwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwidmlld1wiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcImFjY291bnRcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcImFtb3VudFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcIm1pbnRcIixcbiAgICBvdXRwdXRzOiBbXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwibm9ucGF5YWJsZVwiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW10sXG4gICAgbmFtZTogXCJuYW1lXCIsXG4gICAgb3V0cHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwic3RyaW5nXCIsXG4gICAgICAgIG5hbWU6IFwiXCIsXG4gICAgICAgIHR5cGU6IFwic3RyaW5nXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcInZpZXdcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtdLFxuICAgIG5hbWU6IFwib3duZXJcIixcbiAgICBvdXRwdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwiXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJ2aWV3XCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXSxcbiAgICBuYW1lOiBcInJlbm91bmNlT3duZXJzaGlwXCIsXG4gICAgb3V0cHV0czogW10sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcIm5vbnBheWFibGVcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtdLFxuICAgIG5hbWU6IFwic3ltYm9sXCIsXG4gICAgb3V0cHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwic3RyaW5nXCIsXG4gICAgICAgIG5hbWU6IFwiXCIsXG4gICAgICAgIHR5cGU6IFwic3RyaW5nXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcInZpZXdcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtdLFxuICAgIG5hbWU6IFwidG90YWxTdXBwbHlcIixcbiAgICBvdXRwdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwiXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJ2aWV3XCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwidG9cIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcImFtb3VudFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcInRyYW5zZmVyXCIsXG4gICAgb3V0cHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYm9vbFwiLFxuICAgICAgICBuYW1lOiBcIlwiLFxuICAgICAgICB0eXBlOiBcImJvb2xcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwibm9ucGF5YWJsZVwiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcImZyb21cIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcInRvXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJhbW91bnRcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJ0cmFuc2ZlckZyb21cIixcbiAgICBvdXRwdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJib29sXCIsXG4gICAgICAgIG5hbWU6IFwiXCIsXG4gICAgICAgIHR5cGU6IFwiYm9vbFwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJub25wYXlhYmxlXCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwibmV3T3duZXJcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJ0cmFuc2Zlck93bmVyc2hpcFwiLFxuICAgIG91dHB1dHM6IFtdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJub25wYXlhYmxlXCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXSxcbiAgICBuYW1lOiBcInVuZGVybHlpbmdcIixcbiAgICBvdXRwdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwiXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJ2aWV3XCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuXSBhcyBjb25zdDtcblxuZXhwb3J0IGNsYXNzIFBlbnBpZVJlY2VpcHRUb2tlbl9fZmFjdG9yeSB7XG4gIHN0YXRpYyByZWFkb25seSBhYmkgPSBfYWJpO1xuICBzdGF0aWMgY3JlYXRlSW50ZXJmYWNlKCk6IFBlbnBpZVJlY2VpcHRUb2tlbkludGVyZmFjZSB7XG4gICAgcmV0dXJuIG5ld0ludGVyZmFjZShfYWJpKSBhcyBQZW5waWVSZWNlaXB0VG9rZW5JbnRlcmZhY2U7XG4gIH1cbiAgc3RhdGljIGNvbm5lY3QoXG4gICAgYWRkcmVzczogc3RyaW5nLFxuICAgIHNpZ25lck9yUHJvdmlkZXI6IFNpZ25lciB8IFByb3ZpZGVyLFxuICApOiBQZW5waWVSZWNlaXB0VG9rZW4ge1xuICAgIHJldHVybiBuZXdDb250cmFjdChhZGRyZXNzLCBfYWJpLCBzaWduZXJPclByb3ZpZGVyKSBhcyBQZW5waWVSZWNlaXB0VG9rZW47XG4gIH1cbn1cbiIsICIvKiBBdXRvZ2VuZXJhdGVkIGZpbGUuIERvIG5vdCBlZGl0IG1hbnVhbGx5LiAqL1xuLyogdHNsaW50OmRpc2FibGUgKi9cbi8qIGVzbGludC1kaXNhYmxlICovXG4vLyBAdHMtbm9jaGVja1xuaW1wb3J0IHsgbmV3Q29udHJhY3QsIG5ld0ludGVyZmFjZSB9IGZyb20gXCJAc2VudGlvL3Nkay9ldGhcIjtcblxuaW1wb3J0IHsgQ29udHJhY3QsIFNpZ25lciwgUHJvdmlkZXIsIEludGVyZmFjZSB9IGZyb20gXCJldGhlcnNcIjtcbmltcG9ydCB0eXBlIHtcbiAgUGVucGllU3Rha2luZyxcbiAgUGVucGllU3Rha2luZ0ludGVyZmFjZSxcbn0gZnJvbSBcIi4uL1BlbnBpZVN0YWtpbmcuanNcIjtcblxuY29uc3QgX2FiaSA9IFtcbiAge1xuICAgIGlucHV0czogW10sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcIm5vbnBheWFibGVcIixcbiAgICB0eXBlOiBcImNvbnN0cnVjdG9yXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtdLFxuICAgIG5hbWU6IFwiSW52YWxpZEFkZHJlc3NcIixcbiAgICB0eXBlOiBcImVycm9yXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtdLFxuICAgIG5hbWU6IFwiSW52YWxpZEZlZVwiLFxuICAgIHR5cGU6IFwiZXJyb3JcIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW10sXG4gICAgbmFtZTogXCJJbnZhbGlkRmVlRGVzdGluYXRpb25cIixcbiAgICB0eXBlOiBcImVycm9yXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtdLFxuICAgIG5hbWU6IFwiTGVuZ3RoTWlzbWF0Y2hcIixcbiAgICB0eXBlOiBcImVycm9yXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtdLFxuICAgIG5hbWU6IFwiTm9WZVBlbmRsZVJld2FyZFwiLFxuICAgIHR5cGU6IFwiZXJyb3JcIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW10sXG4gICAgbmFtZTogXCJPbmx5QWN0aXZlUG9vbFwiLFxuICAgIHR5cGU6IFwiZXJyb3JcIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW10sXG4gICAgbmFtZTogXCJPbmx5UG9vbEhlbHBlclwiLFxuICAgIHR5cGU6IFwiZXJyb3JcIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW10sXG4gICAgbmFtZTogXCJPbmx5Vm90ZU1hbmFnZXJcIixcbiAgICB0eXBlOiBcImVycm9yXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtdLFxuICAgIG5hbWU6IFwiUG9vbE9jY3VwaWVkXCIsXG4gICAgdHlwZTogXCJlcnJvclwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXSxcbiAgICBuYW1lOiBcIlRpbWVHYXBUb29NdWNoXCIsXG4gICAgdHlwZTogXCJlcnJvclwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXSxcbiAgICBuYW1lOiBcIlplcm9Ob3RBbGxvd2VkXCIsXG4gICAgdHlwZTogXCJlcnJvclwiLFxuICB9LFxuICB7XG4gICAgYW5vbnltb3VzOiBmYWxzZSxcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogZmFsc2UsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwiX3RvXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogZmFsc2UsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwiX3ZhbHVlXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogZmFsc2UsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJib29sXCIsXG4gICAgICAgIG5hbWU6IFwiX2lzTVBFTkRMRVwiLFxuICAgICAgICB0eXBlOiBcImJvb2xcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IGZhbHNlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYm9vbFwiLFxuICAgICAgICBuYW1lOiBcIl9pc0FkZHJlc3NcIixcbiAgICAgICAgdHlwZTogXCJib29sXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJBZGRQZW5kbGVGZWVcIixcbiAgICB0eXBlOiBcImV2ZW50XCIsXG4gIH0sXG4gIHtcbiAgICBhbm9ueW1vdXM6IGZhbHNlLFxuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbmRleGVkOiBmYWxzZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJfb2xkQnJpYmVNYW5hZ2VyRU9BXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogZmFsc2UsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwiX2JyaWJlTWFuYWdlckVPQVwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcIkJyaWJlTWFuYWdlckVPQVVwZGF0ZWRcIixcbiAgICB0eXBlOiBcImV2ZW50XCIsXG4gIH0sXG4gIHtcbiAgICBhbm9ueW1vdXM6IGZhbHNlLFxuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbmRleGVkOiBmYWxzZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJfb2xkQnJpYmVNYW5hZ2VyXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogZmFsc2UsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwiX2JyaWJlTWFuYWdlclwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcIkJyaWJlTWFuYWdlclVwZGF0ZWRcIixcbiAgICB0eXBlOiBcImV2ZW50XCIsXG4gIH0sXG4gIHtcbiAgICBhbm9ueW1vdXM6IGZhbHNlLFxuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbmRleGVkOiBmYWxzZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQ4XCIsXG4gICAgICAgIG5hbWU6IFwidmVyc2lvblwiLFxuICAgICAgICB0eXBlOiBcInVpbnQ4XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJJbml0aWFsaXplZFwiLFxuICAgIHR5cGU6IFwiZXZlbnRcIixcbiAgfSxcbiAge1xuICAgIGFub255bW91czogZmFsc2UsXG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IHRydWUsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwiX3VzZXJcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbmRleGVkOiB0cnVlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcIl9tYXJrZXRcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbmRleGVkOiBmYWxzZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJfbHBBbW91bnRcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbmRleGVkOiB0cnVlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcIl9yZWNlcHRUb2tlblwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IGZhbHNlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIl9yZWNlcHRBbW91bnRcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJOZXdNYXJrZXREZXBvc2l0XCIsXG4gICAgdHlwZTogXCJldmVudFwiLFxuICB9LFxuICB7XG4gICAgYW5vbnltb3VzOiBmYWxzZSxcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogdHJ1ZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJfdXNlclwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IHRydWUsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwiX21hcmtldFwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IGZhbHNlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIl9scEFtb3VudFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IHRydWUsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwiX3JlY2VwdFRva2VuXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogZmFsc2UsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwiX3JlY2VwdEFtb3VudFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcIk5ld01hcmtldFdpdGhkcmF3XCIsXG4gICAgdHlwZTogXCJldmVudFwiLFxuICB9LFxuICB7XG4gICAgYW5vbnltb3VzOiBmYWxzZSxcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogdHJ1ZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJwcmV2aW91c093bmVyXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogdHJ1ZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJuZXdPd25lclwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcIk93bmVyc2hpcFRyYW5zZmVycmVkXCIsXG4gICAgdHlwZTogXCJldmVudFwiLFxuICB9LFxuICB7XG4gICAgYW5vbnltb3VzOiBmYWxzZSxcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogZmFsc2UsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwiYWNjb3VudFwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcIlBhdXNlZFwiLFxuICAgIHR5cGU6IFwiZXZlbnRcIixcbiAgfSxcbiAge1xuICAgIGFub255bW91czogZmFsc2UsXG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IGZhbHNlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIl9hbW91bnRcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbmRleGVkOiBmYWxzZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJfbG9ja0RheXNcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbmRleGVkOiBmYWxzZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJfdmVQZW5kbGVBY2N1bXVsYXRlZFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcIlBlbmRsZUxvY2tlZFwiLFxuICAgIHR5cGU6IFwiZXZlbnRcIixcbiAgfSxcbiAge1xuICAgIGFub255bW91czogZmFsc2UsXG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IGZhbHNlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcIl9tYXJrZXRcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbmRleGVkOiBmYWxzZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJfcmV3YXJkZXJcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbmRleGVkOiBmYWxzZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJfcmVjZWlwdFRva2VuXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG5hbWU6IFwiUG9vbEFkZGVkXCIsXG4gICAgdHlwZTogXCJldmVudFwiLFxuICB9LFxuICB7XG4gICAgYW5vbnltb3VzOiBmYWxzZSxcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogZmFsc2UsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwiX21hcmtldFwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcIlBvb2xIZWxwZXJVcGRhdGVkXCIsXG4gICAgdHlwZTogXCJldmVudFwiLFxuICB9LFxuICB7XG4gICAgYW5vbnltb3VzOiBmYWxzZSxcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogZmFsc2UsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwiX3BpZFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IGZhbHNlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcIl9scFRva2VuXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG5hbWU6IFwiUG9vbFJlbW92ZWRcIixcbiAgICB0eXBlOiBcImV2ZW50XCIsXG4gIH0sXG4gIHtcbiAgICBhbm9ueW1vdXM6IGZhbHNlLFxuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbmRleGVkOiBmYWxzZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJ2YWx1ZVwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IGZhbHNlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcInRvXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogZmFsc2UsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJib29sXCIsXG4gICAgICAgIG5hbWU6IFwiX2lzTVBFTkRMRVwiLFxuICAgICAgICB0eXBlOiBcImJvb2xcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IGZhbHNlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYm9vbFwiLFxuICAgICAgICBuYW1lOiBcIl9pc0FkZHJlc3NcIixcbiAgICAgICAgdHlwZTogXCJib29sXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJSZW1vdmVQZW5kbGVGZWVcIixcbiAgICB0eXBlOiBcImV2ZW50XCIsXG4gIH0sXG4gIHtcbiAgICBhbm9ueW1vdXM6IGZhbHNlLFxuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbmRleGVkOiBmYWxzZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJfbWFya2V0XCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogZmFsc2UsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwiX3RvXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogZmFsc2UsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwiX3Jld2FyZFRva2VuXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogZmFsc2UsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwiX2ZlZUFtb3VudFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcIlJld2FyZFBhaWRUb1wiLFxuICAgIHR5cGU6IFwiZXZlbnRcIixcbiAgfSxcbiAge1xuICAgIGFub255bW91czogZmFsc2UsXG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IGZhbHNlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIl9vbGRMb2NrRGF5c1wiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IGZhbHNlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIl9uZXdMb2NrRGF5c1wiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcIlNldExvY2tEYXlzXCIsXG4gICAgdHlwZTogXCJldmVudFwiLFxuICB9LFxuICB7XG4gICAgYW5vbnltb3VzOiBmYWxzZSxcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogZmFsc2UsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwiX29sZG1QZW5kbGVDb252ZXJ0b3JcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbmRleGVkOiBmYWxzZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJfbmV3bVBlbmRsZUNvbnZlcnRvclwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcIlNldE1QZW5kbGVDb252ZXJ0b3JcIixcbiAgICB0eXBlOiBcImV2ZW50XCIsXG4gIH0sXG4gIHtcbiAgICBhbm9ueW1vdXM6IGZhbHNlLFxuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbmRleGVkOiBmYWxzZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJfdG9cIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbmRleGVkOiBmYWxzZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJfdmFsdWVcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJTZXRQZW5kbGVGZWVcIixcbiAgICB0eXBlOiBcImV2ZW50XCIsXG4gIH0sXG4gIHtcbiAgICBhbm9ueW1vdXM6IGZhbHNlLFxuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbmRleGVkOiBmYWxzZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJfT2xkU21hcnRQZW5kbGVDb252ZXJ0XCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogZmFsc2UsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwiX3NtYXJ0UGVuZGxlQ29udmVydFwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcIlNtYXJ0UGVuZGxlQ29udmVydFVwZGF0ZWRcIixcbiAgICB0eXBlOiBcImV2ZW50XCIsXG4gIH0sXG4gIHtcbiAgICBhbm9ueW1vdXM6IGZhbHNlLFxuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbmRleGVkOiBmYWxzZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJhY2NvdW50XCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG5hbWU6IFwiVW5wYXVzZWRcIixcbiAgICB0eXBlOiBcImV2ZW50XCIsXG4gIH0sXG4gIHtcbiAgICBhbm9ueW1vdXM6IGZhbHNlLFxuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbmRleGVkOiBmYWxzZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJfdG90YWxcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbmRleGVkOiBmYWxzZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NbXVwiLFxuICAgICAgICBuYW1lOiBcIl9wb29sXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1tdXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbmRleGVkOiBmYWxzZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZbXVwiLFxuICAgICAgICBuYW1lOiBcIl90b3RhbEFtb3VudHNcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2W11cIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IGZhbHNlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIl9wcm90b2NvbEZlZVwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IGZhbHNlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIl9jYWxsZXJGZWVcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbmRleGVkOiBmYWxzZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJfcmVzdFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcIlZlUGVuZGxlSGFydmVzdGVkXCIsXG4gICAgdHlwZTogXCJldmVudFwiLFxuICB9LFxuICB7XG4gICAgYW5vbnltb3VzOiBmYWxzZSxcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogZmFsc2UsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwiX29sZFZvdGVNYW5hZ2VyXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogZmFsc2UsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwiX3ZvdGVNYW5hZ2VyXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG5hbWU6IFwiVm90ZU1hbmFnZXJVcGRhdGVkXCIsXG4gICAgdHlwZTogXCJldmVudFwiLFxuICB9LFxuICB7XG4gICAgYW5vbnltb3VzOiBmYWxzZSxcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogZmFsc2UsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwiX3ZvdGVyXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogZmFsc2UsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwiX3ZlUGVuZGxlSGFydmVzdENhbGxlckZlZVwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IGZhbHNlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIl9oYXJ2ZXN0Q2FsbGVyUGVuZGxlRmVlXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogZmFsc2UsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwiX3ZvdGVQcm90b2NvbEZlZVwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IGZhbHNlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcIl92b3RlRmVlQ29sbGVjdG9yXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG5hbWU6IFwiVm90ZVNldFwiLFxuICAgIHR5cGU6IFwiZXZlbnRcIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW10sXG4gICAgbmFtZTogXCJFVEhaYXBwZXJcIixcbiAgICBvdXRwdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwiXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJ2aWV3XCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXSxcbiAgICBuYW1lOiBcIlBFTkRMRVwiLFxuICAgIG91dHB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcInZpZXdcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtdLFxuICAgIG5hbWU6IFwiV0VUSFwiLFxuICAgIG91dHB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcInZpZXdcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJfcGVuZGxlXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJfV0VUSFwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwiX3ZlUGVuZGxlXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJfZGlzdHJpYnV0b3JFVEhcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcIl9wZW5kbGVSb3V0ZXJcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcIl9tYXN0ZXJQZW5waWVcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJfX1BlbmRsZVN0YWtpbmdCYXNlVXBnX2luaXRcIixcbiAgICBvdXRwdXRzOiBbXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwibm9ucGF5YWJsZVwiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcIl9wZW5kbGVcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcIl9XRVRIXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJfdmVQZW5kbGVcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcIl9kaXN0cmlidXRvckVUSFwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwiX3BlbmRsZVJvdXRlclwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwiX21hc3RlclBlbnBpZVwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcIl9fUGVuZGxlU3Rha2luZ19pbml0XCIsXG4gICAgb3V0cHV0czogW10sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcIm5vbnBheWFibGVcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtdLFxuICAgIG5hbWU6IFwiYWNjdW11bGF0ZWRWZVBlbmRsZVwiLFxuICAgIG91dHB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcInZpZXdcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJfdmFsdWVcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcIl90b1wiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJib29sXCIsXG4gICAgICAgIG5hbWU6IFwiX2lzTVBFTkRMRVwiLFxuICAgICAgICB0eXBlOiBcImJvb2xcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJib29sXCIsXG4gICAgICAgIG5hbWU6IFwiX2lzQWRkcmVzc1wiLFxuICAgICAgICB0eXBlOiBcImJvb2xcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcImFkZFBlbmRsZUZlZVwiLFxuICAgIG91dHB1dHM6IFtdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJub25wYXlhYmxlXCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXSxcbiAgICBuYW1lOiBcImF1dG9CcmliZUZlZVwiLFxuICAgIG91dHB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcInZpZXdcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NbXVwiLFxuICAgICAgICBuYW1lOiBcIl9tYXJrZXRzXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1tdXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIm1pbkV0aFRvUmVjaWV2ZVwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcImJhdGNoSGFydmVzdE1hcmtldFJld2FyZHNcIixcbiAgICBvdXRwdXRzOiBbXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwibm9ucGF5YWJsZVwiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NltdXCIsXG4gICAgICAgIG5hbWU6IFwiY2hhaW5JZFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZbXVwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG5hbWU6IFwiYm9vdHN0cmFwVmVQZW5kbGVcIixcbiAgICBvdXRwdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwiXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJwYXlhYmxlXCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXSxcbiAgICBuYW1lOiBcImJyaWJlTWFuYWdlclwiLFxuICAgIG91dHB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcInZpZXdcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtdLFxuICAgIG5hbWU6IFwiYnJpYmVNYW5hZ2VyRU9BXCIsXG4gICAgb3V0cHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcIlwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwidmlld1wiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIl9hbW91bnRcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NltdXCIsXG4gICAgICAgIG5hbWU6IFwiY2hhaW5JZFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZbXVwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG5hbWU6IFwiY29udmVydFBlbmRsZVwiLFxuICAgIG91dHB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcInBheWFibGVcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJfbWFya2V0XCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJfZm9yXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJfZnJvbVwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwiX2Ftb3VudFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcImRlcG9zaXRNYXJrZXRcIixcbiAgICBvdXRwdXRzOiBbXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwibm9ucGF5YWJsZVwiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW10sXG4gICAgbmFtZTogXCJkaXN0cmlidXRvckVUSFwiLFxuICAgIG91dHB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImNvbnRyYWN0IElQRmVlRGlzdHJpYnV0b3JWMlwiLFxuICAgICAgICBuYW1lOiBcIlwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwidmlld1wiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW10sXG4gICAgbmFtZTogXCJmZWVDb2xsZWN0b3JcIixcbiAgICBvdXRwdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwiXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJ2aWV3XCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXSxcbiAgICBuYW1lOiBcImdldFBvb2xMZW5ndGhcIixcbiAgICBvdXRwdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwiXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJ2aWV3XCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXSxcbiAgICBuYW1lOiBcImhhcnZlc3RDYWxsZXJQZW5kbGVGZWVcIixcbiAgICBvdXRwdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwiXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJ2aWV3XCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwiX21hcmtldFwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwiX2NhbGxlclwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwiX21pbkV0aFJlY2l2ZVwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcImhhcnZlc3RNYXJrZXRSZXdhcmRcIixcbiAgICBvdXRwdXRzOiBbXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwibm9ucGF5YWJsZVwiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW10sXG4gICAgbmFtZTogXCJoYXJ2ZXN0VGltZUdhcFwiLFxuICAgIG91dHB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcInZpZXdcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NbXVwiLFxuICAgICAgICBuYW1lOiBcIl9wb29sc1wiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NbXVwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG5hbWU6IFwiaGFydmVzdFZlUGVuZGxlUmV3YXJkXCIsXG4gICAgb3V0cHV0czogW10sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcIm5vbnBheWFibGVcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJfdW5sb2NrVGltZVwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcImluY3JlYXNlTG9ja1RpbWVcIixcbiAgICBvdXRwdXRzOiBbXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwibm9ucGF5YWJsZVwiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW10sXG4gICAgbmFtZTogXCJsb2NrUGVyaW9kXCIsXG4gICAgb3V0cHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIlwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwidmlld1wiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW10sXG4gICAgbmFtZTogXCJtUGVuZGxlQ29udmVydG9yXCIsXG4gICAgb3V0cHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcIlwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwidmlld1wiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW10sXG4gICAgbmFtZTogXCJtUGVuZGxlT0ZUXCIsXG4gICAgb3V0cHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcIlwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwidmlld1wiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW10sXG4gICAgbmFtZTogXCJtYXJrZXREZXBvc2l0SGVscGVyXCIsXG4gICAgb3V0cHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcIlwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwidmlld1wiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW10sXG4gICAgbmFtZTogXCJtYXN0ZXJQZW5waWVcIixcbiAgICBvdXRwdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwiXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJ2aWV3XCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXSxcbiAgICBuYW1lOiBcIm93bmVyXCIsXG4gICAgb3V0cHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcIlwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwidmlld1wiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW10sXG4gICAgbmFtZTogXCJwYXVzZVwiLFxuICAgIG91dHB1dHM6IFtdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJub25wYXlhYmxlXCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXSxcbiAgICBuYW1lOiBcInBhdXNlZFwiLFxuICAgIG91dHB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImJvb2xcIixcbiAgICAgICAgbmFtZTogXCJcIixcbiAgICAgICAgdHlwZTogXCJib29sXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcInZpZXdcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJwZW5kbGVGZWVJbmZvc1wiLFxuICAgIG91dHB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJ2YWx1ZVwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwidG9cIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYm9vbFwiLFxuICAgICAgICBuYW1lOiBcImlzTVBFTkRMRVwiLFxuICAgICAgICB0eXBlOiBcImJvb2xcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJib29sXCIsXG4gICAgICAgIG5hbWU6IFwiaXNBZGRyZXNzXCIsXG4gICAgICAgIHR5cGU6IFwiYm9vbFwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImJvb2xcIixcbiAgICAgICAgbmFtZTogXCJpc0FjdGl2ZVwiLFxuICAgICAgICB0eXBlOiBcImJvb2xcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwidmlld1wiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW10sXG4gICAgbmFtZTogXCJwZW5kbGVSb3V0ZXJcIixcbiAgICBvdXRwdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJjb250cmFjdCBJUGVuZGxlUm91dGVyXCIsXG4gICAgICAgIG5hbWU6IFwiXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJ2aWV3XCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXSxcbiAgICBuYW1lOiBcInBlbmRsZVZvdGVcIixcbiAgICBvdXRwdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJjb250cmFjdCBJUFZvdGVDb250cm9sbGVyXCIsXG4gICAgICAgIG5hbWU6IFwiXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJ2aWV3XCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwiXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG5hbWU6IFwicG9vbFRva2VuTGlzdFwiLFxuICAgIG91dHB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcInZpZXdcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJwb29sc1wiLFxuICAgIG91dHB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJtYXJrZXRcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcInJld2FyZGVyXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJoZWxwZXJcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcInJlY2VpcHRUb2tlblwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwibGFzdEhhcnZlc3RUaW1lXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImJvb2xcIixcbiAgICAgICAgbmFtZTogXCJpc0FjdGl2ZVwiLFxuICAgICAgICB0eXBlOiBcImJvb2xcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwidmlld1wiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW10sXG4gICAgbmFtZTogXCJwcm90b2NvbEZlZVwiLFxuICAgIG91dHB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcInZpZXdcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJfbWFya2V0XCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJfYWxsb2NQb2ludHNcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwic3RyaW5nXCIsXG4gICAgICAgIG5hbWU6IFwibmFtZVwiLFxuICAgICAgICB0eXBlOiBcInN0cmluZ1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInN0cmluZ1wiLFxuICAgICAgICBuYW1lOiBcInN5bWJvbFwiLFxuICAgICAgICB0eXBlOiBcInN0cmluZ1wiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG5hbWU6IFwicmVnaXN0ZXJQb29sXCIsXG4gICAgb3V0cHV0czogW10sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcIm5vbnBheWFibGVcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJfaW5kZXhcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJyZW1vdmVQZW5kbGVGZWVcIixcbiAgICBvdXRwdXRzOiBbXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwibm9ucGF5YWJsZVwiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW10sXG4gICAgbmFtZTogXCJyZW5vdW5jZU93bmVyc2hpcFwiLFxuICAgIG91dHB1dHM6IFtdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJub25wYXlhYmxlXCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwiX2F1dG9CcmliZUZlZVwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcInNldEF1dG9CcmliZUZlZVwiLFxuICAgIG91dHB1dHM6IFtdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJub25wYXlhYmxlXCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwiX2JyaWJlTWFuYWdlclwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwiX2JyaWJlTWFuYWdlckVPQVwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcInNldEJyaWJlTWFuYWdlclwiLFxuICAgIG91dHB1dHM6IFtdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJub25wYXlhYmxlXCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwiX0VUSFphcHBlclwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcInNldEVUSFphcHBlclwiLFxuICAgIG91dHB1dHM6IFtdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJub25wYXlhYmxlXCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwiX3BlcmlvZFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcInNldEhhcnZlc3RUaW1lR2FwXCIsXG4gICAgb3V0cHV0czogW10sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcIm5vbnBheWFibGVcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJfbmV3TG9ja1BlcmlvZFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcInNldExvY2tEYXlzXCIsXG4gICAgb3V0cHV0czogW10sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcIm5vbnBheWFibGVcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJfbVBlbmRsZUNvbnZlcnRvclwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcInNldE1QZW5kbGVDb252ZXJ0b3JcIixcbiAgICBvdXRwdXRzOiBbXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwibm9ucGF5YWJsZVwiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcIl9zZXRNUGVuZGxlT0ZUXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG5hbWU6IFwic2V0TVBlbmRsZU9GVFwiLFxuICAgIG91dHB1dHM6IFtdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJub25wYXlhYmxlXCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwiX2hlbHBlclwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcInNldE1hcmtldERlcG9zaXRIZWxwZXJcIixcbiAgICBvdXRwdXRzOiBbXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwibm9ucGF5YWJsZVwiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIl9pbmRleFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwiX3ZhbHVlXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJfdG9cIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYm9vbFwiLFxuICAgICAgICBuYW1lOiBcIl9pc01QRU5ETEVcIixcbiAgICAgICAgdHlwZTogXCJib29sXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYm9vbFwiLFxuICAgICAgICBuYW1lOiBcIl9pc0FkZHJlc3NcIixcbiAgICAgICAgdHlwZTogXCJib29sXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYm9vbFwiLFxuICAgICAgICBuYW1lOiBcIl9pc0FjdGl2ZVwiLFxuICAgICAgICB0eXBlOiBcImJvb2xcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcInNldFBlbmRsZUZlZVwiLFxuICAgIG91dHB1dHM6IFtdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJub25wYXlhYmxlXCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwiX3NtYXJ0UGVuZGxlQ29udmVydFwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcInNldFNtYXJ0Q29udmVydFwiLFxuICAgIG91dHB1dHM6IFtdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJub25wYXlhYmxlXCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwiX3BlbmRsZVZvdGVcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIl92ZVBlbmRsZUhhcnZlc3RDYWxsZXJGZWVcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIl9oYXJ2ZXN0Q2FsbGVyUGVuZGxlRmVlXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJfcHJvdG9jb2xGZWVcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcIl9mZWVDb2xsZWN0b3JcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJzZXRWb3RlXCIsXG4gICAgb3V0cHV0czogW10sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcIm5vbnBheWFibGVcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJfdm90ZU1hbmFnZXJcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJzZXRWb3RlTWFuYWdlclwiLFxuICAgIG91dHB1dHM6IFtdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJub25wYXlhYmxlXCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwiX21hc3RlclBlbnBpZVwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcInNldG1hc3RlclBlbnBpZVwiLFxuICAgIG91dHB1dHM6IFtdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJub25wYXlhYmxlXCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXSxcbiAgICBuYW1lOiBcInNtYXJ0UGVuZGxlQ29udmVydFwiLFxuICAgIG91dHB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcInZpZXdcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtdLFxuICAgIG5hbWU6IFwidG90YWxQZW5kbGVGZWVcIixcbiAgICBvdXRwdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwiXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJ2aWV3XCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXSxcbiAgICBuYW1lOiBcInRvdGFsVW5jbGFpbWVkRVRIXCIsXG4gICAgb3V0cHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIlwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwidmlld1wiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcIm5ld093bmVyXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG5hbWU6IFwidHJhbnNmZXJPd25lcnNoaXBcIixcbiAgICBvdXRwdXRzOiBbXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwibm9ucGF5YWJsZVwiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW10sXG4gICAgbmFtZTogXCJ1bnBhdXNlXCIsXG4gICAgb3V0cHV0czogW10sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcIm5vbnBheWFibGVcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJfbWFya2V0XCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZbXVwiLFxuICAgICAgICBuYW1lOiBcImFtb3VudHNcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2W11cIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcInVwZGF0ZU1hcmtldFJld2FyZHNcIixcbiAgICBvdXRwdXRzOiBbXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwibm9ucGF5YWJsZVwiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcIl9tYXJrZXRcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcIl9oZWxwZXJcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJ1cGRhdGVQb29sSGVscGVyXCIsXG4gICAgb3V0cHV0czogW10sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcIm5vbnBheWFibGVcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtdLFxuICAgIG5hbWU6IFwidmVQZW5kbGVcIixcbiAgICBvdXRwdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJjb250cmFjdCBJUFZvdGluZ0VzY3Jvd01haW5jaGFpblwiLFxuICAgICAgICBuYW1lOiBcIlwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwidmlld1wiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW10sXG4gICAgbmFtZTogXCJ2ZVBlbmRsZUhhcnZlc3RDYWxsZXJGZWVcIixcbiAgICBvdXRwdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwiXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJ2aWV3XCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzW11cIixcbiAgICAgICAgbmFtZTogXCJfcG9vbHNcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzW11cIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50NjRbXVwiLFxuICAgICAgICBuYW1lOiBcIl93ZWlnaHRzXCIsXG4gICAgICAgIHR5cGU6IFwidWludDY0W11cIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcInZvdGVcIixcbiAgICBvdXRwdXRzOiBbXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwibm9ucGF5YWJsZVwiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW10sXG4gICAgbmFtZTogXCJ2b3RlTWFuYWdlclwiLFxuICAgIG91dHB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcInZpZXdcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJfbWFya2V0XCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJfZm9yXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJfYW1vdW50XCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG5hbWU6IFwid2l0aGRyYXdNYXJrZXRcIixcbiAgICBvdXRwdXRzOiBbXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwibm9ucGF5YWJsZVwiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJwYXlhYmxlXCIsXG4gICAgdHlwZTogXCJyZWNlaXZlXCIsXG4gIH0sXG5dIGFzIGNvbnN0O1xuXG5leHBvcnQgY2xhc3MgUGVucGllU3Rha2luZ19fZmFjdG9yeSB7XG4gIHN0YXRpYyByZWFkb25seSBhYmkgPSBfYWJpO1xuICBzdGF0aWMgY3JlYXRlSW50ZXJmYWNlKCk6IFBlbnBpZVN0YWtpbmdJbnRlcmZhY2Uge1xuICAgIHJldHVybiBuZXdJbnRlcmZhY2UoX2FiaSkgYXMgUGVucGllU3Rha2luZ0ludGVyZmFjZTtcbiAgfVxuICBzdGF0aWMgY29ubmVjdChcbiAgICBhZGRyZXNzOiBzdHJpbmcsXG4gICAgc2lnbmVyT3JQcm92aWRlcjogU2lnbmVyIHwgUHJvdmlkZXIsXG4gICk6IFBlbnBpZVN0YWtpbmcge1xuICAgIHJldHVybiBuZXdDb250cmFjdChhZGRyZXNzLCBfYWJpLCBzaWduZXJPclByb3ZpZGVyKSBhcyBQZW5waWVTdGFraW5nO1xuICB9XG59XG4iLCAiLyogQXV0b2dlbmVyYXRlZCBmaWxlLiBEbyBub3QgZWRpdCBtYW51YWxseS4gKi9cbi8qIHRzbGludDpkaXNhYmxlICovXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xuLy8gQHRzLW5vY2hlY2tcbmltcG9ydCB7IG5ld0NvbnRyYWN0LCBuZXdJbnRlcmZhY2UgfSBmcm9tIFwiQHNlbnRpby9zZGsvZXRoXCI7XG5cbmltcG9ydCB7IENvbnRyYWN0LCBTaWduZXIsIFByb3ZpZGVyLCBJbnRlcmZhY2UgfSBmcm9tIFwiZXRoZXJzXCI7XG5pbXBvcnQgdHlwZSB7XG4gIFN0YW5kYXJkaXplZFlpZWxkLFxuICBTdGFuZGFyZGl6ZWRZaWVsZEludGVyZmFjZSxcbn0gZnJvbSBcIi4uL1N0YW5kYXJkaXplZFlpZWxkLmpzXCI7XG5cbmNvbnN0IF9hYmkgPSBbXG4gIHtcbiAgICBhbm9ueW1vdXM6IGZhbHNlLFxuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbmRleGVkOiB0cnVlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcIm93bmVyXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogdHJ1ZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJzcGVuZGVyXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogZmFsc2UsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwidmFsdWVcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJBcHByb3ZhbFwiLFxuICAgIHR5cGU6IFwiZXZlbnRcIixcbiAgfSxcbiAge1xuICAgIGFub255bW91czogZmFsc2UsXG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IHRydWUsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwidXNlclwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IGZhbHNlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1tdXCIsXG4gICAgICAgIG5hbWU6IFwicmV3YXJkVG9rZW5zXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1tdXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbmRleGVkOiBmYWxzZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZbXVwiLFxuICAgICAgICBuYW1lOiBcInJld2FyZEFtb3VudHNcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2W11cIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcIkNsYWltUmV3YXJkc1wiLFxuICAgIHR5cGU6IFwiZXZlbnRcIixcbiAgfSxcbiAge1xuICAgIGFub255bW91czogZmFsc2UsXG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IHRydWUsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwiY2FsbGVyXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogdHJ1ZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJyZWNlaXZlclwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IHRydWUsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwidG9rZW5JblwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IGZhbHNlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcImFtb3VudERlcG9zaXRlZFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IGZhbHNlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcImFtb3VudFN5T3V0XCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG5hbWU6IFwiRGVwb3NpdFwiLFxuICAgIHR5cGU6IFwiZXZlbnRcIixcbiAgfSxcbiAge1xuICAgIGFub255bW91czogZmFsc2UsXG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IHRydWUsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwiY2FsbGVyXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogdHJ1ZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJyZWNlaXZlclwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGluZGV4ZWQ6IHRydWUsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwidG9rZW5PdXRcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbmRleGVkOiBmYWxzZSxcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJhbW91bnRTeVRvUmVkZWVtXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogZmFsc2UsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwiYW1vdW50VG9rZW5PdXRcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJSZWRlZW1cIixcbiAgICB0eXBlOiBcImV2ZW50XCIsXG4gIH0sXG4gIHtcbiAgICBhbm9ueW1vdXM6IGZhbHNlLFxuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbmRleGVkOiB0cnVlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcImZyb21cIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbmRleGVkOiB0cnVlLFxuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcInRvXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW5kZXhlZDogZmFsc2UsXG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwidmFsdWVcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJUcmFuc2ZlclwiLFxuICAgIHR5cGU6IFwiZXZlbnRcIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcInVzZXJcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJhY2NydWVkUmV3YXJkc1wiLFxuICAgIG91dHB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZbXVwiLFxuICAgICAgICBuYW1lOiBcInJld2FyZEFtb3VudHNcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2W11cIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwidmlld1wiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcIm93bmVyXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJzcGVuZGVyXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG5hbWU6IFwiYWxsb3dhbmNlXCIsXG4gICAgb3V0cHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcIlwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwidmlld1wiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcInNwZW5kZXJcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcImFtb3VudFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcImFwcHJvdmVcIixcbiAgICBvdXRwdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJib29sXCIsXG4gICAgICAgIG5hbWU6IFwiXCIsXG4gICAgICAgIHR5cGU6IFwiYm9vbFwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJub25wYXlhYmxlXCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXSxcbiAgICBuYW1lOiBcImFzc2V0SW5mb1wiLFxuICAgIG91dHB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImVudW0gSVN0YW5kYXJkaXplZFlpZWxkLkFzc2V0VHlwZVwiLFxuICAgICAgICBuYW1lOiBcImFzc2V0VHlwZVwiLFxuICAgICAgICB0eXBlOiBcInVpbnQ4XCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcImFzc2V0QWRkcmVzc1wiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50OFwiLFxuICAgICAgICBuYW1lOiBcImFzc2V0RGVjaW1hbHNcIixcbiAgICAgICAgdHlwZTogXCJ1aW50OFwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJ2aWV3XCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwiYWNjb3VudFwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcImJhbGFuY2VPZlwiLFxuICAgIG91dHB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcInZpZXdcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJ1c2VyXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG5hbWU6IFwiY2xhaW1SZXdhcmRzXCIsXG4gICAgb3V0cHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NltdXCIsXG4gICAgICAgIG5hbWU6IFwicmV3YXJkQW1vdW50c1wiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZbXVwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJub25wYXlhYmxlXCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXSxcbiAgICBuYW1lOiBcImRlY2ltYWxzXCIsXG4gICAgb3V0cHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDhcIixcbiAgICAgICAgbmFtZTogXCJcIixcbiAgICAgICAgdHlwZTogXCJ1aW50OFwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJ2aWV3XCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwicmVjZWl2ZXJcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcInRva2VuSW5cIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcImFtb3VudFRva2VuVG9EZXBvc2l0XCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJtaW5TaGFyZXNPdXRcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJkZXBvc2l0XCIsXG4gICAgb3V0cHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcImFtb3VudFNoYXJlc091dFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwicGF5YWJsZVwiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW10sXG4gICAgbmFtZTogXCJleGNoYW5nZVJhdGVcIixcbiAgICBvdXRwdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwicmVzXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJ2aWV3XCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXSxcbiAgICBuYW1lOiBcImdldFJld2FyZFRva2Vuc1wiLFxuICAgIG91dHB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NbXVwiLFxuICAgICAgICBuYW1lOiBcIlwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NbXVwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJ2aWV3XCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXSxcbiAgICBuYW1lOiBcImdldFRva2Vuc0luXCIsXG4gICAgb3V0cHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1tdXCIsXG4gICAgICAgIG5hbWU6IFwicmVzXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1tdXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcInZpZXdcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtdLFxuICAgIG5hbWU6IFwiZ2V0VG9rZW5zT3V0XCIsXG4gICAgb3V0cHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1tdXCIsXG4gICAgICAgIG5hbWU6IFwicmVzXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1tdXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcInZpZXdcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJ0b2tlblwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcImlzVmFsaWRUb2tlbkluXCIsXG4gICAgb3V0cHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYm9vbFwiLFxuICAgICAgICBuYW1lOiBcIlwiLFxuICAgICAgICB0eXBlOiBcImJvb2xcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwidmlld1wiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcInRva2VuXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG5hbWU6IFwiaXNWYWxpZFRva2VuT3V0XCIsXG4gICAgb3V0cHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYm9vbFwiLFxuICAgICAgICBuYW1lOiBcIlwiLFxuICAgICAgICB0eXBlOiBcImJvb2xcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwidmlld1wiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW10sXG4gICAgbmFtZTogXCJuYW1lXCIsXG4gICAgb3V0cHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwic3RyaW5nXCIsXG4gICAgICAgIG5hbWU6IFwiXCIsXG4gICAgICAgIHR5cGU6IFwic3RyaW5nXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcInZpZXdcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJ0b2tlbkluXCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJhbW91bnRUb2tlblRvRGVwb3NpdFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcInByZXZpZXdEZXBvc2l0XCIsXG4gICAgb3V0cHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcImFtb3VudFNoYXJlc091dFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwidmlld1wiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW1xuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcInRva2VuT3V0XCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJhbW91bnRTaGFyZXNUb1JlZGVlbVwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcInByZXZpZXdSZWRlZW1cIixcbiAgICBvdXRwdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwiYW1vdW50VG9rZW5PdXRcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcInZpZXdcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJyZWNlaXZlclwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwiYW1vdW50U2hhcmVzVG9SZWRlZW1cIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgICBuYW1lOiBcInRva2VuT3V0XCIsXG4gICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJtaW5Ub2tlbk91dFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJib29sXCIsXG4gICAgICAgIG5hbWU6IFwiYnVybkZyb21JbnRlcm5hbEJhbGFuY2VcIixcbiAgICAgICAgdHlwZTogXCJib29sXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgbmFtZTogXCJyZWRlZW1cIixcbiAgICBvdXRwdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwiYW1vdW50VG9rZW5PdXRcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcIm5vbnBheWFibGVcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtdLFxuICAgIG5hbWU6IFwicmV3YXJkSW5kZXhlc0N1cnJlbnRcIixcbiAgICBvdXRwdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2W11cIixcbiAgICAgICAgbmFtZTogXCJpbmRleGVzXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NltdXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcIm5vbnBheWFibGVcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtdLFxuICAgIG5hbWU6IFwicmV3YXJkSW5kZXhlc1N0b3JlZFwiLFxuICAgIG91dHB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZbXVwiLFxuICAgICAgICBuYW1lOiBcImluZGV4ZXNcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2W11cIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwidmlld1wiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW10sXG4gICAgbmFtZTogXCJzeW1ib2xcIixcbiAgICBvdXRwdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJzdHJpbmdcIixcbiAgICAgICAgbmFtZTogXCJcIixcbiAgICAgICAgdHlwZTogXCJzdHJpbmdcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6IFwidmlld1wiLFxuICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgfSxcbiAge1xuICAgIGlucHV0czogW10sXG4gICAgbmFtZTogXCJ0b3RhbFN1cHBseVwiLFxuICAgIG91dHB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcInVpbnQyNTZcIixcbiAgICAgICAgbmFtZTogXCJcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcInZpZXdcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJ0b1wiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJ1aW50MjU2XCIsXG4gICAgICAgIG5hbWU6IFwiYW1vdW50XCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIG5hbWU6IFwidHJhbnNmZXJcIixcbiAgICBvdXRwdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJib29sXCIsXG4gICAgICAgIG5hbWU6IFwiXCIsXG4gICAgICAgIHR5cGU6IFwiYm9vbFwiLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogXCJub25wYXlhYmxlXCIsXG4gICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICB9LFxuICB7XG4gICAgaW5wdXRzOiBbXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwiZnJvbVwiLFxuICAgICAgICB0eXBlOiBcImFkZHJlc3NcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGludGVybmFsVHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICAgIG5hbWU6IFwidG9cIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnRlcm5hbFR5cGU6IFwidWludDI1NlwiLFxuICAgICAgICBuYW1lOiBcImFtb3VudFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgICBuYW1lOiBcInRyYW5zZmVyRnJvbVwiLFxuICAgIG91dHB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImJvb2xcIixcbiAgICAgICAgbmFtZTogXCJcIixcbiAgICAgICAgdHlwZTogXCJib29sXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcIm5vbnBheWFibGVcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG4gIHtcbiAgICBpbnB1dHM6IFtdLFxuICAgIG5hbWU6IFwieWllbGRUb2tlblwiLFxuICAgIG91dHB1dHM6IFtcbiAgICAgIHtcbiAgICAgICAgaW50ZXJuYWxUeXBlOiBcImFkZHJlc3NcIixcbiAgICAgICAgbmFtZTogXCJcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgICB9LFxuICAgIF0sXG4gICAgc3RhdGVNdXRhYmlsaXR5OiBcInZpZXdcIixcbiAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gIH0sXG5dIGFzIGNvbnN0O1xuXG5leHBvcnQgY2xhc3MgU3RhbmRhcmRpemVkWWllbGRfX2ZhY3Rvcnkge1xuICBzdGF0aWMgcmVhZG9ubHkgYWJpID0gX2FiaTtcbiAgc3RhdGljIGNyZWF0ZUludGVyZmFjZSgpOiBTdGFuZGFyZGl6ZWRZaWVsZEludGVyZmFjZSB7XG4gICAgcmV0dXJuIG5ld0ludGVyZmFjZShfYWJpKSBhcyBTdGFuZGFyZGl6ZWRZaWVsZEludGVyZmFjZTtcbiAgfVxuICBzdGF0aWMgY29ubmVjdChcbiAgICBhZGRyZXNzOiBzdHJpbmcsXG4gICAgc2lnbmVyT3JQcm92aWRlcjogU2lnbmVyIHwgUHJvdmlkZXIsXG4gICk6IFN0YW5kYXJkaXplZFlpZWxkIHtcbiAgICByZXR1cm4gbmV3Q29udHJhY3QoYWRkcmVzcywgX2FiaSwgc2lnbmVyT3JQcm92aWRlcikgYXMgU3RhbmRhcmRpemVkWWllbGQ7XG4gIH1cbn1cbiIsICIvKiBBdXRvZ2VuZXJhdGVkIGZpbGUuIERvIG5vdCBlZGl0IG1hbnVhbGx5LiAqL1xuLyogdHNsaW50OmRpc2FibGUgKi9cbi8qIGVzbGludC1kaXNhYmxlICovXG5pbXBvcnQgeyBMb2dQYXJhbXMgfSBmcm9tIFwiZXRoZXJzL3Byb3ZpZGVyc1wiO1xuaW1wb3J0IHsgRXRoQ2hhaW5JZCB9IGZyb20gXCJAc2VudGlvL3Nkay9ldGhcIjtcbmltcG9ydCB7XG4gIEFwcHJvdmFsRXZlbnRPYmplY3QsXG4gIE93bmVyc2hpcFRyYW5zZmVycmVkRXZlbnRPYmplY3QsXG4gIFRyYW5zZmVyRXZlbnRPYmplY3QsXG59IGZyb20gXCIuL1BlbnBpZVJlY2VpcHRUb2tlbi5qc1wiO1xuaW1wb3J0IHsgZ2V0UGVucGllUmVjZWlwdFRva2VuQ29udHJhY3QgfSBmcm9tIFwiLi9wZW5waWVyZWNlaXB0dG9rZW4tcHJvY2Vzc29yLmpzXCI7XG5jb25zdCBtb2NrRmllbGQgPSB7XG4gIGJsb2NrSGFzaDpcbiAgICBcIjB4MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMFwiLFxuICBibG9ja051bWJlcjogMCxcbiAgbG9nSW5kZXg6IDAsXG4gIHJlbW92ZWQ6IGZhbHNlLFxuICB0cmFuc2FjdGlvbkhhc2g6XG4gICAgXCIweDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDBcIixcbiAgdHJhbnNhY3Rpb25JbmRleDogMCxcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBtb2NrQXBwcm92YWxMb2coXG4gIGNvbnRyYWN0QWRkcmVzczogc3RyaW5nLFxuICBldmVudDogQXBwcm92YWxFdmVudE9iamVjdCxcbik6IExvZ1BhcmFtcyB7XG4gIGNvbnN0IGNvbnRyYWN0ID0gZ2V0UGVucGllUmVjZWlwdFRva2VuQ29udHJhY3QoXG4gICAgRXRoQ2hhaW5JZC5FVEhFUkVVTSxcbiAgICBjb250cmFjdEFkZHJlc3MsXG4gICk7XG4gIGNvbnN0IGVuY29kZWRMb2cgPSBjb250cmFjdC5yYXdDb250cmFjdC5pbnRlcmZhY2UuZW5jb2RlRXZlbnRMb2coXG4gICAgXCJBcHByb3ZhbChhZGRyZXNzLGFkZHJlc3MsdWludDI1NilcIixcbiAgICBbZXZlbnQub3duZXIsIGV2ZW50LnNwZW5kZXIsIGV2ZW50LnZhbHVlXSxcbiAgKTtcbiAgcmV0dXJuIHtcbiAgICAuLi5tb2NrRmllbGQsXG4gICAgaW5kZXg6IDAsXG4gICAgYWRkcmVzczogY29udHJhY3RBZGRyZXNzLFxuICAgIGRhdGE6IGVuY29kZWRMb2cuZGF0YSxcbiAgICB0b3BpY3M6IGVuY29kZWRMb2cudG9waWNzLFxuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbW9ja093bmVyc2hpcFRyYW5zZmVycmVkTG9nKFxuICBjb250cmFjdEFkZHJlc3M6IHN0cmluZyxcbiAgZXZlbnQ6IE93bmVyc2hpcFRyYW5zZmVycmVkRXZlbnRPYmplY3QsXG4pOiBMb2dQYXJhbXMge1xuICBjb25zdCBjb250cmFjdCA9IGdldFBlbnBpZVJlY2VpcHRUb2tlbkNvbnRyYWN0KFxuICAgIEV0aENoYWluSWQuRVRIRVJFVU0sXG4gICAgY29udHJhY3RBZGRyZXNzLFxuICApO1xuICBjb25zdCBlbmNvZGVkTG9nID0gY29udHJhY3QucmF3Q29udHJhY3QuaW50ZXJmYWNlLmVuY29kZUV2ZW50TG9nKFxuICAgIFwiT3duZXJzaGlwVHJhbnNmZXJyZWQoYWRkcmVzcyxhZGRyZXNzKVwiLFxuICAgIFtldmVudC5wcmV2aW91c093bmVyLCBldmVudC5uZXdPd25lcl0sXG4gICk7XG4gIHJldHVybiB7XG4gICAgLi4ubW9ja0ZpZWxkLFxuICAgIGluZGV4OiAwLFxuICAgIGFkZHJlc3M6IGNvbnRyYWN0QWRkcmVzcyxcbiAgICBkYXRhOiBlbmNvZGVkTG9nLmRhdGEsXG4gICAgdG9waWNzOiBlbmNvZGVkTG9nLnRvcGljcyxcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1vY2tUcmFuc2ZlckxvZyhcbiAgY29udHJhY3RBZGRyZXNzOiBzdHJpbmcsXG4gIGV2ZW50OiBUcmFuc2ZlckV2ZW50T2JqZWN0LFxuKTogTG9nUGFyYW1zIHtcbiAgY29uc3QgY29udHJhY3QgPSBnZXRQZW5waWVSZWNlaXB0VG9rZW5Db250cmFjdChcbiAgICBFdGhDaGFpbklkLkVUSEVSRVVNLFxuICAgIGNvbnRyYWN0QWRkcmVzcyxcbiAgKTtcbiAgY29uc3QgZW5jb2RlZExvZyA9IGNvbnRyYWN0LnJhd0NvbnRyYWN0LmludGVyZmFjZS5lbmNvZGVFdmVudExvZyhcbiAgICBcIlRyYW5zZmVyKGFkZHJlc3MsYWRkcmVzcyx1aW50MjU2KVwiLFxuICAgIFtldmVudC5mcm9tLCBldmVudC50bywgZXZlbnQudmFsdWVdLFxuICApO1xuICByZXR1cm4ge1xuICAgIC4uLm1vY2tGaWVsZCxcbiAgICBpbmRleDogMCxcbiAgICBhZGRyZXNzOiBjb250cmFjdEFkZHJlc3MsXG4gICAgZGF0YTogZW5jb2RlZExvZy5kYXRhLFxuICAgIHRvcGljczogZW5jb2RlZExvZy50b3BpY3MsXG4gIH07XG59XG4iLCAiLyogQXV0b2dlbmVyYXRlZCBmaWxlLiBEbyBub3QgZWRpdCBtYW51YWxseS4gKi9cbi8qIHRzbGludDpkaXNhYmxlICovXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xuaW1wb3J0IHsgQmlnTnVtYmVyaXNoLCBPdmVycmlkZXMgfSBmcm9tIFwiZXRoZXJzXCI7XG5pbXBvcnQge1xuICBhZGRDb250cmFjdEJ5QUJJLFxuICBnZXRDb250cmFjdEJ5QUJJLFxuICBhZGRQcm9jZXNzb3IsXG4gIGdldFByb2Nlc3NvcixcbiAgZ2V0UHJvdmlkZXIsXG4gIHRyYW5zZm9ybUV0aGVyRXJyb3IsXG4gIEJpbmRPcHRpb25zLFxuICBCYXNlUHJvY2Vzc29yLFxuICBCYXNlUHJvY2Vzc29yVGVtcGxhdGUsXG4gIEJvdW5kQ29udHJhY3RWaWV3LFxuICBDb250cmFjdENvbnRleHQsXG4gIENvbnRyYWN0VmlldyxcbiAgRHVtbXlQcm92aWRlcixcbiAgRXRoQ2hhaW5JZCxcbiAgVHlwZWRDYWxsVHJhY2UsXG4gIEV0aENvbnRleHQsXG4gIEV0aEZldGNoQ29uZmlnLFxuICBQcmVwcm9jZXNzUmVzdWx0LFxuICBlbmNvZGVDYWxsRGF0YSxcbn0gZnJvbSBcIkBzZW50aW8vc2RrL2V0aFwiO1xuaW1wb3J0IHsgRXRoQ2FsbFBhcmFtLCBFdGhDYWxsQ29udGV4dCwgUHJlcGFyZWREYXRhIH0gZnJvbSBcIkBzZW50aW8vcHJvdG9zXCI7XG5cbmltcG9ydCB7IFBlbnBpZVN0YWtpbmdfX2ZhY3RvcnkgfSBmcm9tIFwiLi9pbmRleC5qc1wiO1xuaW1wb3J0IHtcbiAgUGVucGllU3Rha2luZyxcbiAgQWRkUGVuZGxlRmVlRXZlbnQsXG4gIEFkZFBlbmRsZUZlZUV2ZW50RmlsdGVyLFxuICBCcmliZU1hbmFnZXJFT0FVcGRhdGVkRXZlbnQsXG4gIEJyaWJlTWFuYWdlckVPQVVwZGF0ZWRFdmVudEZpbHRlcixcbiAgQnJpYmVNYW5hZ2VyVXBkYXRlZEV2ZW50LFxuICBCcmliZU1hbmFnZXJVcGRhdGVkRXZlbnRGaWx0ZXIsXG4gIEluaXRpYWxpemVkRXZlbnQsXG4gIEluaXRpYWxpemVkRXZlbnRGaWx0ZXIsXG4gIE5ld01hcmtldERlcG9zaXRFdmVudCxcbiAgTmV3TWFya2V0RGVwb3NpdEV2ZW50RmlsdGVyLFxuICBOZXdNYXJrZXRXaXRoZHJhd0V2ZW50LFxuICBOZXdNYXJrZXRXaXRoZHJhd0V2ZW50RmlsdGVyLFxuICBPd25lcnNoaXBUcmFuc2ZlcnJlZEV2ZW50LFxuICBPd25lcnNoaXBUcmFuc2ZlcnJlZEV2ZW50RmlsdGVyLFxuICBQYXVzZWRFdmVudCxcbiAgUGF1c2VkRXZlbnRGaWx0ZXIsXG4gIFBlbmRsZUxvY2tlZEV2ZW50LFxuICBQZW5kbGVMb2NrZWRFdmVudEZpbHRlcixcbiAgUG9vbEFkZGVkRXZlbnQsXG4gIFBvb2xBZGRlZEV2ZW50RmlsdGVyLFxuICBQb29sSGVscGVyVXBkYXRlZEV2ZW50LFxuICBQb29sSGVscGVyVXBkYXRlZEV2ZW50RmlsdGVyLFxuICBQb29sUmVtb3ZlZEV2ZW50LFxuICBQb29sUmVtb3ZlZEV2ZW50RmlsdGVyLFxuICBSZW1vdmVQZW5kbGVGZWVFdmVudCxcbiAgUmVtb3ZlUGVuZGxlRmVlRXZlbnRGaWx0ZXIsXG4gIFJld2FyZFBhaWRUb0V2ZW50LFxuICBSZXdhcmRQYWlkVG9FdmVudEZpbHRlcixcbiAgU2V0TG9ja0RheXNFdmVudCxcbiAgU2V0TG9ja0RheXNFdmVudEZpbHRlcixcbiAgU2V0TVBlbmRsZUNvbnZlcnRvckV2ZW50LFxuICBTZXRNUGVuZGxlQ29udmVydG9yRXZlbnRGaWx0ZXIsXG4gIFNldFBlbmRsZUZlZUV2ZW50LFxuICBTZXRQZW5kbGVGZWVFdmVudEZpbHRlcixcbiAgU21hcnRQZW5kbGVDb252ZXJ0VXBkYXRlZEV2ZW50LFxuICBTbWFydFBlbmRsZUNvbnZlcnRVcGRhdGVkRXZlbnRGaWx0ZXIsXG4gIFVucGF1c2VkRXZlbnQsXG4gIFVucGF1c2VkRXZlbnRGaWx0ZXIsXG4gIFZlUGVuZGxlSGFydmVzdGVkRXZlbnQsXG4gIFZlUGVuZGxlSGFydmVzdGVkRXZlbnRGaWx0ZXIsXG4gIFZvdGVNYW5hZ2VyVXBkYXRlZEV2ZW50LFxuICBWb3RlTWFuYWdlclVwZGF0ZWRFdmVudEZpbHRlcixcbiAgVm90ZVNldEV2ZW50LFxuICBWb3RlU2V0RXZlbnRGaWx0ZXIsXG59IGZyb20gXCIuL1BlbnBpZVN0YWtpbmcuanNcIjtcblxuZXhwb3J0IGludGVyZmFjZSBFVEhaYXBwZXJDYWxsT2JqZWN0IHt9XG5cbmV4cG9ydCB0eXBlIEVUSFphcHBlckNhbGxUcmFjZSA9IFR5cGVkQ2FsbFRyYWNlPFtdLCBFVEhaYXBwZXJDYWxsT2JqZWN0PjtcblxuZXhwb3J0IGludGVyZmFjZSBQRU5ETEVDYWxsT2JqZWN0IHt9XG5cbmV4cG9ydCB0eXBlIFBFTkRMRUNhbGxUcmFjZSA9IFR5cGVkQ2FsbFRyYWNlPFtdLCBQRU5ETEVDYWxsT2JqZWN0PjtcblxuZXhwb3J0IGludGVyZmFjZSBXRVRIQ2FsbE9iamVjdCB7fVxuXG5leHBvcnQgdHlwZSBXRVRIQ2FsbFRyYWNlID0gVHlwZWRDYWxsVHJhY2U8W10sIFdFVEhDYWxsT2JqZWN0PjtcblxuZXhwb3J0IGludGVyZmFjZSBfX1BlbmRsZVN0YWtpbmdCYXNlVXBnX2luaXRDYWxsT2JqZWN0IHtcbiAgX3BlbmRsZTogc3RyaW5nO1xuICBfV0VUSDogc3RyaW5nO1xuICBfdmVQZW5kbGU6IHN0cmluZztcbiAgX2Rpc3RyaWJ1dG9yRVRIOiBzdHJpbmc7XG4gIF9wZW5kbGVSb3V0ZXI6IHN0cmluZztcbiAgX21hc3RlclBlbnBpZTogc3RyaW5nO1xufVxuXG5leHBvcnQgdHlwZSBfX1BlbmRsZVN0YWtpbmdCYXNlVXBnX2luaXRDYWxsVHJhY2UgPSBUeXBlZENhbGxUcmFjZTxcbiAgW3N0cmluZywgc3RyaW5nLCBzdHJpbmcsIHN0cmluZywgc3RyaW5nLCBzdHJpbmddLFxuICBfX1BlbmRsZVN0YWtpbmdCYXNlVXBnX2luaXRDYWxsT2JqZWN0XG4+O1xuXG5leHBvcnQgaW50ZXJmYWNlIF9fUGVuZGxlU3Rha2luZ19pbml0Q2FsbE9iamVjdCB7XG4gIF9wZW5kbGU6IHN0cmluZztcbiAgX1dFVEg6IHN0cmluZztcbiAgX3ZlUGVuZGxlOiBzdHJpbmc7XG4gIF9kaXN0cmlidXRvckVUSDogc3RyaW5nO1xuICBfcGVuZGxlUm91dGVyOiBzdHJpbmc7XG4gIF9tYXN0ZXJQZW5waWU6IHN0cmluZztcbn1cblxuZXhwb3J0IHR5cGUgX19QZW5kbGVTdGFraW5nX2luaXRDYWxsVHJhY2UgPSBUeXBlZENhbGxUcmFjZTxcbiAgW3N0cmluZywgc3RyaW5nLCBzdHJpbmcsIHN0cmluZywgc3RyaW5nLCBzdHJpbmddLFxuICBfX1BlbmRsZVN0YWtpbmdfaW5pdENhbGxPYmplY3Rcbj47XG5cbmV4cG9ydCBpbnRlcmZhY2UgQWNjdW11bGF0ZWRWZVBlbmRsZUNhbGxPYmplY3Qge31cblxuZXhwb3J0IHR5cGUgQWNjdW11bGF0ZWRWZVBlbmRsZUNhbGxUcmFjZSA9IFR5cGVkQ2FsbFRyYWNlPFxuICBbXSxcbiAgQWNjdW11bGF0ZWRWZVBlbmRsZUNhbGxPYmplY3Rcbj47XG5cbmV4cG9ydCBpbnRlcmZhY2UgQWRkUGVuZGxlRmVlQ2FsbE9iamVjdCB7XG4gIF92YWx1ZTogYmlnaW50O1xuICBfdG86IHN0cmluZztcbiAgX2lzTVBFTkRMRTogYm9vbGVhbjtcbiAgX2lzQWRkcmVzczogYm9vbGVhbjtcbn1cblxuZXhwb3J0IHR5cGUgQWRkUGVuZGxlRmVlQ2FsbFRyYWNlID0gVHlwZWRDYWxsVHJhY2U8XG4gIFtiaWdpbnQsIHN0cmluZywgYm9vbGVhbiwgYm9vbGVhbl0sXG4gIEFkZFBlbmRsZUZlZUNhbGxPYmplY3Rcbj47XG5cbmV4cG9ydCBpbnRlcmZhY2UgQXV0b0JyaWJlRmVlQ2FsbE9iamVjdCB7fVxuXG5leHBvcnQgdHlwZSBBdXRvQnJpYmVGZWVDYWxsVHJhY2UgPSBUeXBlZENhbGxUcmFjZTxbXSwgQXV0b0JyaWJlRmVlQ2FsbE9iamVjdD47XG5cbmV4cG9ydCBpbnRlcmZhY2UgQmF0Y2hIYXJ2ZXN0TWFya2V0UmV3YXJkc0NhbGxPYmplY3Qge1xuICBfbWFya2V0czogc3RyaW5nW107XG4gIG1pbkV0aFRvUmVjaWV2ZTogYmlnaW50O1xufVxuXG5leHBvcnQgdHlwZSBCYXRjaEhhcnZlc3RNYXJrZXRSZXdhcmRzQ2FsbFRyYWNlID0gVHlwZWRDYWxsVHJhY2U8XG4gIFtzdHJpbmdbXSwgYmlnaW50XSxcbiAgQmF0Y2hIYXJ2ZXN0TWFya2V0UmV3YXJkc0NhbGxPYmplY3Rcbj47XG5cbmV4cG9ydCBpbnRlcmZhY2UgQm9vdHN0cmFwVmVQZW5kbGVDYWxsT2JqZWN0IHtcbiAgY2hhaW5JZDogYmlnaW50W107XG59XG5cbmV4cG9ydCB0eXBlIEJvb3RzdHJhcFZlUGVuZGxlQ2FsbFRyYWNlID0gVHlwZWRDYWxsVHJhY2U8XG4gIFtiaWdpbnRbXV0sXG4gIEJvb3RzdHJhcFZlUGVuZGxlQ2FsbE9iamVjdFxuPjtcblxuZXhwb3J0IGludGVyZmFjZSBCcmliZU1hbmFnZXJDYWxsT2JqZWN0IHt9XG5cbmV4cG9ydCB0eXBlIEJyaWJlTWFuYWdlckNhbGxUcmFjZSA9IFR5cGVkQ2FsbFRyYWNlPFtdLCBCcmliZU1hbmFnZXJDYWxsT2JqZWN0PjtcblxuZXhwb3J0IGludGVyZmFjZSBCcmliZU1hbmFnZXJFT0FDYWxsT2JqZWN0IHt9XG5cbmV4cG9ydCB0eXBlIEJyaWJlTWFuYWdlckVPQUNhbGxUcmFjZSA9IFR5cGVkQ2FsbFRyYWNlPFxuICBbXSxcbiAgQnJpYmVNYW5hZ2VyRU9BQ2FsbE9iamVjdFxuPjtcblxuZXhwb3J0IGludGVyZmFjZSBDb252ZXJ0UGVuZGxlQ2FsbE9iamVjdCB7XG4gIF9hbW91bnQ6IGJpZ2ludDtcbiAgY2hhaW5JZDogYmlnaW50W107XG59XG5cbmV4cG9ydCB0eXBlIENvbnZlcnRQZW5kbGVDYWxsVHJhY2UgPSBUeXBlZENhbGxUcmFjZTxcbiAgW2JpZ2ludCwgYmlnaW50W11dLFxuICBDb252ZXJ0UGVuZGxlQ2FsbE9iamVjdFxuPjtcblxuZXhwb3J0IGludGVyZmFjZSBEZXBvc2l0TWFya2V0Q2FsbE9iamVjdCB7XG4gIF9tYXJrZXQ6IHN0cmluZztcbiAgX2Zvcjogc3RyaW5nO1xuICBfZnJvbTogc3RyaW5nO1xuICBfYW1vdW50OiBiaWdpbnQ7XG59XG5cbmV4cG9ydCB0eXBlIERlcG9zaXRNYXJrZXRDYWxsVHJhY2UgPSBUeXBlZENhbGxUcmFjZTxcbiAgW3N0cmluZywgc3RyaW5nLCBzdHJpbmcsIGJpZ2ludF0sXG4gIERlcG9zaXRNYXJrZXRDYWxsT2JqZWN0XG4+O1xuXG5leHBvcnQgaW50ZXJmYWNlIERpc3RyaWJ1dG9yRVRIQ2FsbE9iamVjdCB7fVxuXG5leHBvcnQgdHlwZSBEaXN0cmlidXRvckVUSENhbGxUcmFjZSA9IFR5cGVkQ2FsbFRyYWNlPFxuICBbXSxcbiAgRGlzdHJpYnV0b3JFVEhDYWxsT2JqZWN0XG4+O1xuXG5leHBvcnQgaW50ZXJmYWNlIEZlZUNvbGxlY3RvckNhbGxPYmplY3Qge31cblxuZXhwb3J0IHR5cGUgRmVlQ29sbGVjdG9yQ2FsbFRyYWNlID0gVHlwZWRDYWxsVHJhY2U8W10sIEZlZUNvbGxlY3RvckNhbGxPYmplY3Q+O1xuXG5leHBvcnQgaW50ZXJmYWNlIEdldFBvb2xMZW5ndGhDYWxsT2JqZWN0IHt9XG5cbmV4cG9ydCB0eXBlIEdldFBvb2xMZW5ndGhDYWxsVHJhY2UgPSBUeXBlZENhbGxUcmFjZTxcbiAgW10sXG4gIEdldFBvb2xMZW5ndGhDYWxsT2JqZWN0XG4+O1xuXG5leHBvcnQgaW50ZXJmYWNlIEhhcnZlc3RDYWxsZXJQZW5kbGVGZWVDYWxsT2JqZWN0IHt9XG5cbmV4cG9ydCB0eXBlIEhhcnZlc3RDYWxsZXJQZW5kbGVGZWVDYWxsVHJhY2UgPSBUeXBlZENhbGxUcmFjZTxcbiAgW10sXG4gIEhhcnZlc3RDYWxsZXJQZW5kbGVGZWVDYWxsT2JqZWN0XG4+O1xuXG5leHBvcnQgaW50ZXJmYWNlIEhhcnZlc3RNYXJrZXRSZXdhcmRDYWxsT2JqZWN0IHtcbiAgX21hcmtldDogc3RyaW5nO1xuICBfY2FsbGVyOiBzdHJpbmc7XG4gIF9taW5FdGhSZWNpdmU6IGJpZ2ludDtcbn1cblxuZXhwb3J0IHR5cGUgSGFydmVzdE1hcmtldFJld2FyZENhbGxUcmFjZSA9IFR5cGVkQ2FsbFRyYWNlPFxuICBbc3RyaW5nLCBzdHJpbmcsIGJpZ2ludF0sXG4gIEhhcnZlc3RNYXJrZXRSZXdhcmRDYWxsT2JqZWN0XG4+O1xuXG5leHBvcnQgaW50ZXJmYWNlIEhhcnZlc3RUaW1lR2FwQ2FsbE9iamVjdCB7fVxuXG5leHBvcnQgdHlwZSBIYXJ2ZXN0VGltZUdhcENhbGxUcmFjZSA9IFR5cGVkQ2FsbFRyYWNlPFxuICBbXSxcbiAgSGFydmVzdFRpbWVHYXBDYWxsT2JqZWN0XG4+O1xuXG5leHBvcnQgaW50ZXJmYWNlIEhhcnZlc3RWZVBlbmRsZVJld2FyZENhbGxPYmplY3Qge1xuICBfcG9vbHM6IHN0cmluZ1tdO1xufVxuXG5leHBvcnQgdHlwZSBIYXJ2ZXN0VmVQZW5kbGVSZXdhcmRDYWxsVHJhY2UgPSBUeXBlZENhbGxUcmFjZTxcbiAgW3N0cmluZ1tdXSxcbiAgSGFydmVzdFZlUGVuZGxlUmV3YXJkQ2FsbE9iamVjdFxuPjtcblxuZXhwb3J0IGludGVyZmFjZSBJbmNyZWFzZUxvY2tUaW1lQ2FsbE9iamVjdCB7XG4gIF91bmxvY2tUaW1lOiBiaWdpbnQ7XG59XG5cbmV4cG9ydCB0eXBlIEluY3JlYXNlTG9ja1RpbWVDYWxsVHJhY2UgPSBUeXBlZENhbGxUcmFjZTxcbiAgW2JpZ2ludF0sXG4gIEluY3JlYXNlTG9ja1RpbWVDYWxsT2JqZWN0XG4+O1xuXG5leHBvcnQgaW50ZXJmYWNlIExvY2tQZXJpb2RDYWxsT2JqZWN0IHt9XG5cbmV4cG9ydCB0eXBlIExvY2tQZXJpb2RDYWxsVHJhY2UgPSBUeXBlZENhbGxUcmFjZTxbXSwgTG9ja1BlcmlvZENhbGxPYmplY3Q+O1xuXG5leHBvcnQgaW50ZXJmYWNlIE1QZW5kbGVDb252ZXJ0b3JDYWxsT2JqZWN0IHt9XG5cbmV4cG9ydCB0eXBlIE1QZW5kbGVDb252ZXJ0b3JDYWxsVHJhY2UgPSBUeXBlZENhbGxUcmFjZTxcbiAgW10sXG4gIE1QZW5kbGVDb252ZXJ0b3JDYWxsT2JqZWN0XG4+O1xuXG5leHBvcnQgaW50ZXJmYWNlIE1QZW5kbGVPRlRDYWxsT2JqZWN0IHt9XG5cbmV4cG9ydCB0eXBlIE1QZW5kbGVPRlRDYWxsVHJhY2UgPSBUeXBlZENhbGxUcmFjZTxbXSwgTVBlbmRsZU9GVENhbGxPYmplY3Q+O1xuXG5leHBvcnQgaW50ZXJmYWNlIE1hcmtldERlcG9zaXRIZWxwZXJDYWxsT2JqZWN0IHt9XG5cbmV4cG9ydCB0eXBlIE1hcmtldERlcG9zaXRIZWxwZXJDYWxsVHJhY2UgPSBUeXBlZENhbGxUcmFjZTxcbiAgW10sXG4gIE1hcmtldERlcG9zaXRIZWxwZXJDYWxsT2JqZWN0XG4+O1xuXG5leHBvcnQgaW50ZXJmYWNlIE1hc3RlclBlbnBpZUNhbGxPYmplY3Qge31cblxuZXhwb3J0IHR5cGUgTWFzdGVyUGVucGllQ2FsbFRyYWNlID0gVHlwZWRDYWxsVHJhY2U8W10sIE1hc3RlclBlbnBpZUNhbGxPYmplY3Q+O1xuXG5leHBvcnQgaW50ZXJmYWNlIE93bmVyQ2FsbE9iamVjdCB7fVxuXG5leHBvcnQgdHlwZSBPd25lckNhbGxUcmFjZSA9IFR5cGVkQ2FsbFRyYWNlPFtdLCBPd25lckNhbGxPYmplY3Q+O1xuXG5leHBvcnQgaW50ZXJmYWNlIFBhdXNlQ2FsbE9iamVjdCB7fVxuXG5leHBvcnQgdHlwZSBQYXVzZUNhbGxUcmFjZSA9IFR5cGVkQ2FsbFRyYWNlPFtdLCBQYXVzZUNhbGxPYmplY3Q+O1xuXG5leHBvcnQgaW50ZXJmYWNlIFBhdXNlZENhbGxPYmplY3Qge31cblxuZXhwb3J0IHR5cGUgUGF1c2VkQ2FsbFRyYWNlID0gVHlwZWRDYWxsVHJhY2U8W10sIFBhdXNlZENhbGxPYmplY3Q+O1xuXG5leHBvcnQgaW50ZXJmYWNlIFBlbmRsZUZlZUluZm9zQ2FsbE9iamVjdCB7fVxuXG5leHBvcnQgdHlwZSBQZW5kbGVGZWVJbmZvc0NhbGxUcmFjZSA9IFR5cGVkQ2FsbFRyYWNlPFxuICBbYmlnaW50XSxcbiAgUGVuZGxlRmVlSW5mb3NDYWxsT2JqZWN0XG4+O1xuXG5leHBvcnQgaW50ZXJmYWNlIFBlbmRsZVJvdXRlckNhbGxPYmplY3Qge31cblxuZXhwb3J0IHR5cGUgUGVuZGxlUm91dGVyQ2FsbFRyYWNlID0gVHlwZWRDYWxsVHJhY2U8W10sIFBlbmRsZVJvdXRlckNhbGxPYmplY3Q+O1xuXG5leHBvcnQgaW50ZXJmYWNlIFBlbmRsZVZvdGVDYWxsT2JqZWN0IHt9XG5cbmV4cG9ydCB0eXBlIFBlbmRsZVZvdGVDYWxsVHJhY2UgPSBUeXBlZENhbGxUcmFjZTxbXSwgUGVuZGxlVm90ZUNhbGxPYmplY3Q+O1xuXG5leHBvcnQgaW50ZXJmYWNlIFBvb2xUb2tlbkxpc3RDYWxsT2JqZWN0IHt9XG5cbmV4cG9ydCB0eXBlIFBvb2xUb2tlbkxpc3RDYWxsVHJhY2UgPSBUeXBlZENhbGxUcmFjZTxcbiAgW2JpZ2ludF0sXG4gIFBvb2xUb2tlbkxpc3RDYWxsT2JqZWN0XG4+O1xuXG5leHBvcnQgaW50ZXJmYWNlIFBvb2xzQ2FsbE9iamVjdCB7fVxuXG5leHBvcnQgdHlwZSBQb29sc0NhbGxUcmFjZSA9IFR5cGVkQ2FsbFRyYWNlPFtzdHJpbmddLCBQb29sc0NhbGxPYmplY3Q+O1xuXG5leHBvcnQgaW50ZXJmYWNlIFByb3RvY29sRmVlQ2FsbE9iamVjdCB7fVxuXG5leHBvcnQgdHlwZSBQcm90b2NvbEZlZUNhbGxUcmFjZSA9IFR5cGVkQ2FsbFRyYWNlPFtdLCBQcm90b2NvbEZlZUNhbGxPYmplY3Q+O1xuXG5leHBvcnQgaW50ZXJmYWNlIFJlZ2lzdGVyUG9vbENhbGxPYmplY3Qge1xuICBfbWFya2V0OiBzdHJpbmc7XG4gIF9hbGxvY1BvaW50czogYmlnaW50O1xuICBuYW1lOiBzdHJpbmc7XG4gIHN5bWJvbDogc3RyaW5nO1xufVxuXG5leHBvcnQgdHlwZSBSZWdpc3RlclBvb2xDYWxsVHJhY2UgPSBUeXBlZENhbGxUcmFjZTxcbiAgW3N0cmluZywgYmlnaW50LCBzdHJpbmcsIHN0cmluZ10sXG4gIFJlZ2lzdGVyUG9vbENhbGxPYmplY3Rcbj47XG5cbmV4cG9ydCBpbnRlcmZhY2UgUmVtb3ZlUGVuZGxlRmVlQ2FsbE9iamVjdCB7XG4gIF9pbmRleDogYmlnaW50O1xufVxuXG5leHBvcnQgdHlwZSBSZW1vdmVQZW5kbGVGZWVDYWxsVHJhY2UgPSBUeXBlZENhbGxUcmFjZTxcbiAgW2JpZ2ludF0sXG4gIFJlbW92ZVBlbmRsZUZlZUNhbGxPYmplY3Rcbj47XG5cbmV4cG9ydCBpbnRlcmZhY2UgUmVub3VuY2VPd25lcnNoaXBDYWxsT2JqZWN0IHt9XG5cbmV4cG9ydCB0eXBlIFJlbm91bmNlT3duZXJzaGlwQ2FsbFRyYWNlID0gVHlwZWRDYWxsVHJhY2U8XG4gIFtdLFxuICBSZW5vdW5jZU93bmVyc2hpcENhbGxPYmplY3Rcbj47XG5cbmV4cG9ydCBpbnRlcmZhY2UgU2V0QXV0b0JyaWJlRmVlQ2FsbE9iamVjdCB7XG4gIF9hdXRvQnJpYmVGZWU6IGJpZ2ludDtcbn1cblxuZXhwb3J0IHR5cGUgU2V0QXV0b0JyaWJlRmVlQ2FsbFRyYWNlID0gVHlwZWRDYWxsVHJhY2U8XG4gIFtiaWdpbnRdLFxuICBTZXRBdXRvQnJpYmVGZWVDYWxsT2JqZWN0XG4+O1xuXG5leHBvcnQgaW50ZXJmYWNlIFNldEJyaWJlTWFuYWdlckNhbGxPYmplY3Qge1xuICBfYnJpYmVNYW5hZ2VyOiBzdHJpbmc7XG4gIF9icmliZU1hbmFnZXJFT0E6IHN0cmluZztcbn1cblxuZXhwb3J0IHR5cGUgU2V0QnJpYmVNYW5hZ2VyQ2FsbFRyYWNlID0gVHlwZWRDYWxsVHJhY2U8XG4gIFtzdHJpbmcsIHN0cmluZ10sXG4gIFNldEJyaWJlTWFuYWdlckNhbGxPYmplY3Rcbj47XG5cbmV4cG9ydCBpbnRlcmZhY2UgU2V0RVRIWmFwcGVyQ2FsbE9iamVjdCB7XG4gIF9FVEhaYXBwZXI6IHN0cmluZztcbn1cblxuZXhwb3J0IHR5cGUgU2V0RVRIWmFwcGVyQ2FsbFRyYWNlID0gVHlwZWRDYWxsVHJhY2U8XG4gIFtzdHJpbmddLFxuICBTZXRFVEhaYXBwZXJDYWxsT2JqZWN0XG4+O1xuXG5leHBvcnQgaW50ZXJmYWNlIFNldEhhcnZlc3RUaW1lR2FwQ2FsbE9iamVjdCB7XG4gIF9wZXJpb2Q6IGJpZ2ludDtcbn1cblxuZXhwb3J0IHR5cGUgU2V0SGFydmVzdFRpbWVHYXBDYWxsVHJhY2UgPSBUeXBlZENhbGxUcmFjZTxcbiAgW2JpZ2ludF0sXG4gIFNldEhhcnZlc3RUaW1lR2FwQ2FsbE9iamVjdFxuPjtcblxuZXhwb3J0IGludGVyZmFjZSBTZXRMb2NrRGF5c0NhbGxPYmplY3Qge1xuICBfbmV3TG9ja1BlcmlvZDogYmlnaW50O1xufVxuXG5leHBvcnQgdHlwZSBTZXRMb2NrRGF5c0NhbGxUcmFjZSA9IFR5cGVkQ2FsbFRyYWNlPFxuICBbYmlnaW50XSxcbiAgU2V0TG9ja0RheXNDYWxsT2JqZWN0XG4+O1xuXG5leHBvcnQgaW50ZXJmYWNlIFNldE1QZW5kbGVDb252ZXJ0b3JDYWxsT2JqZWN0IHtcbiAgX21QZW5kbGVDb252ZXJ0b3I6IHN0cmluZztcbn1cblxuZXhwb3J0IHR5cGUgU2V0TVBlbmRsZUNvbnZlcnRvckNhbGxUcmFjZSA9IFR5cGVkQ2FsbFRyYWNlPFxuICBbc3RyaW5nXSxcbiAgU2V0TVBlbmRsZUNvbnZlcnRvckNhbGxPYmplY3Rcbj47XG5cbmV4cG9ydCBpbnRlcmZhY2UgU2V0TVBlbmRsZU9GVENhbGxPYmplY3Qge1xuICBfc2V0TVBlbmRsZU9GVDogc3RyaW5nO1xufVxuXG5leHBvcnQgdHlwZSBTZXRNUGVuZGxlT0ZUQ2FsbFRyYWNlID0gVHlwZWRDYWxsVHJhY2U8XG4gIFtzdHJpbmddLFxuICBTZXRNUGVuZGxlT0ZUQ2FsbE9iamVjdFxuPjtcblxuZXhwb3J0IGludGVyZmFjZSBTZXRNYXJrZXREZXBvc2l0SGVscGVyQ2FsbE9iamVjdCB7XG4gIF9oZWxwZXI6IHN0cmluZztcbn1cblxuZXhwb3J0IHR5cGUgU2V0TWFya2V0RGVwb3NpdEhlbHBlckNhbGxUcmFjZSA9IFR5cGVkQ2FsbFRyYWNlPFxuICBbc3RyaW5nXSxcbiAgU2V0TWFya2V0RGVwb3NpdEhlbHBlckNhbGxPYmplY3Rcbj47XG5cbmV4cG9ydCBpbnRlcmZhY2UgU2V0UGVuZGxlRmVlQ2FsbE9iamVjdCB7XG4gIF9pbmRleDogYmlnaW50O1xuICBfdmFsdWU6IGJpZ2ludDtcbiAgX3RvOiBzdHJpbmc7XG4gIF9pc01QRU5ETEU6IGJvb2xlYW47XG4gIF9pc0FkZHJlc3M6IGJvb2xlYW47XG4gIF9pc0FjdGl2ZTogYm9vbGVhbjtcbn1cblxuZXhwb3J0IHR5cGUgU2V0UGVuZGxlRmVlQ2FsbFRyYWNlID0gVHlwZWRDYWxsVHJhY2U8XG4gIFtiaWdpbnQsIGJpZ2ludCwgc3RyaW5nLCBib29sZWFuLCBib29sZWFuLCBib29sZWFuXSxcbiAgU2V0UGVuZGxlRmVlQ2FsbE9iamVjdFxuPjtcblxuZXhwb3J0IGludGVyZmFjZSBTZXRTbWFydENvbnZlcnRDYWxsT2JqZWN0IHtcbiAgX3NtYXJ0UGVuZGxlQ29udmVydDogc3RyaW5nO1xufVxuXG5leHBvcnQgdHlwZSBTZXRTbWFydENvbnZlcnRDYWxsVHJhY2UgPSBUeXBlZENhbGxUcmFjZTxcbiAgW3N0cmluZ10sXG4gIFNldFNtYXJ0Q29udmVydENhbGxPYmplY3Rcbj47XG5cbmV4cG9ydCBpbnRlcmZhY2UgU2V0Vm90ZUNhbGxPYmplY3Qge1xuICBfcGVuZGxlVm90ZTogc3RyaW5nO1xuICBfdmVQZW5kbGVIYXJ2ZXN0Q2FsbGVyRmVlOiBiaWdpbnQ7XG4gIF9oYXJ2ZXN0Q2FsbGVyUGVuZGxlRmVlOiBiaWdpbnQ7XG4gIF9wcm90b2NvbEZlZTogYmlnaW50O1xuICBfZmVlQ29sbGVjdG9yOiBzdHJpbmc7XG59XG5cbmV4cG9ydCB0eXBlIFNldFZvdGVDYWxsVHJhY2UgPSBUeXBlZENhbGxUcmFjZTxcbiAgW3N0cmluZywgYmlnaW50LCBiaWdpbnQsIGJpZ2ludCwgc3RyaW5nXSxcbiAgU2V0Vm90ZUNhbGxPYmplY3Rcbj47XG5cbmV4cG9ydCBpbnRlcmZhY2UgU2V0Vm90ZU1hbmFnZXJDYWxsT2JqZWN0IHtcbiAgX3ZvdGVNYW5hZ2VyOiBzdHJpbmc7XG59XG5cbmV4cG9ydCB0eXBlIFNldFZvdGVNYW5hZ2VyQ2FsbFRyYWNlID0gVHlwZWRDYWxsVHJhY2U8XG4gIFtzdHJpbmddLFxuICBTZXRWb3RlTWFuYWdlckNhbGxPYmplY3Rcbj47XG5cbmV4cG9ydCBpbnRlcmZhY2UgU2V0bWFzdGVyUGVucGllQ2FsbE9iamVjdCB7XG4gIF9tYXN0ZXJQZW5waWU6IHN0cmluZztcbn1cblxuZXhwb3J0IHR5cGUgU2V0bWFzdGVyUGVucGllQ2FsbFRyYWNlID0gVHlwZWRDYWxsVHJhY2U8XG4gIFtzdHJpbmddLFxuICBTZXRtYXN0ZXJQZW5waWVDYWxsT2JqZWN0XG4+O1xuXG5leHBvcnQgaW50ZXJmYWNlIFNtYXJ0UGVuZGxlQ29udmVydENhbGxPYmplY3Qge31cblxuZXhwb3J0IHR5cGUgU21hcnRQZW5kbGVDb252ZXJ0Q2FsbFRyYWNlID0gVHlwZWRDYWxsVHJhY2U8XG4gIFtdLFxuICBTbWFydFBlbmRsZUNvbnZlcnRDYWxsT2JqZWN0XG4+O1xuXG5leHBvcnQgaW50ZXJmYWNlIFRvdGFsUGVuZGxlRmVlQ2FsbE9iamVjdCB7fVxuXG5leHBvcnQgdHlwZSBUb3RhbFBlbmRsZUZlZUNhbGxUcmFjZSA9IFR5cGVkQ2FsbFRyYWNlPFxuICBbXSxcbiAgVG90YWxQZW5kbGVGZWVDYWxsT2JqZWN0XG4+O1xuXG5leHBvcnQgaW50ZXJmYWNlIFRvdGFsVW5jbGFpbWVkRVRIQ2FsbE9iamVjdCB7fVxuXG5leHBvcnQgdHlwZSBUb3RhbFVuY2xhaW1lZEVUSENhbGxUcmFjZSA9IFR5cGVkQ2FsbFRyYWNlPFxuICBbXSxcbiAgVG90YWxVbmNsYWltZWRFVEhDYWxsT2JqZWN0XG4+O1xuXG5leHBvcnQgaW50ZXJmYWNlIFRyYW5zZmVyT3duZXJzaGlwQ2FsbE9iamVjdCB7XG4gIG5ld093bmVyOiBzdHJpbmc7XG59XG5cbmV4cG9ydCB0eXBlIFRyYW5zZmVyT3duZXJzaGlwQ2FsbFRyYWNlID0gVHlwZWRDYWxsVHJhY2U8XG4gIFtzdHJpbmddLFxuICBUcmFuc2Zlck93bmVyc2hpcENhbGxPYmplY3Rcbj47XG5cbmV4cG9ydCBpbnRlcmZhY2UgVW5wYXVzZUNhbGxPYmplY3Qge31cblxuZXhwb3J0IHR5cGUgVW5wYXVzZUNhbGxUcmFjZSA9IFR5cGVkQ2FsbFRyYWNlPFtdLCBVbnBhdXNlQ2FsbE9iamVjdD47XG5cbmV4cG9ydCBpbnRlcmZhY2UgVXBkYXRlTWFya2V0UmV3YXJkc0NhbGxPYmplY3Qge1xuICBfbWFya2V0OiBzdHJpbmc7XG4gIGFtb3VudHM6IGJpZ2ludFtdO1xufVxuXG5leHBvcnQgdHlwZSBVcGRhdGVNYXJrZXRSZXdhcmRzQ2FsbFRyYWNlID0gVHlwZWRDYWxsVHJhY2U8XG4gIFtzdHJpbmcsIGJpZ2ludFtdXSxcbiAgVXBkYXRlTWFya2V0UmV3YXJkc0NhbGxPYmplY3Rcbj47XG5cbmV4cG9ydCBpbnRlcmZhY2UgVXBkYXRlUG9vbEhlbHBlckNhbGxPYmplY3Qge1xuICBfbWFya2V0OiBzdHJpbmc7XG4gIF9oZWxwZXI6IHN0cmluZztcbn1cblxuZXhwb3J0IHR5cGUgVXBkYXRlUG9vbEhlbHBlckNhbGxUcmFjZSA9IFR5cGVkQ2FsbFRyYWNlPFxuICBbc3RyaW5nLCBzdHJpbmddLFxuICBVcGRhdGVQb29sSGVscGVyQ2FsbE9iamVjdFxuPjtcblxuZXhwb3J0IGludGVyZmFjZSBWZVBlbmRsZUNhbGxPYmplY3Qge31cblxuZXhwb3J0IHR5cGUgVmVQZW5kbGVDYWxsVHJhY2UgPSBUeXBlZENhbGxUcmFjZTxbXSwgVmVQZW5kbGVDYWxsT2JqZWN0PjtcblxuZXhwb3J0IGludGVyZmFjZSBWZVBlbmRsZUhhcnZlc3RDYWxsZXJGZWVDYWxsT2JqZWN0IHt9XG5cbmV4cG9ydCB0eXBlIFZlUGVuZGxlSGFydmVzdENhbGxlckZlZUNhbGxUcmFjZSA9IFR5cGVkQ2FsbFRyYWNlPFxuICBbXSxcbiAgVmVQZW5kbGVIYXJ2ZXN0Q2FsbGVyRmVlQ2FsbE9iamVjdFxuPjtcblxuZXhwb3J0IGludGVyZmFjZSBWb3RlQ2FsbE9iamVjdCB7XG4gIF9wb29sczogc3RyaW5nW107XG4gIF93ZWlnaHRzOiBiaWdpbnRbXTtcbn1cblxuZXhwb3J0IHR5cGUgVm90ZUNhbGxUcmFjZSA9IFR5cGVkQ2FsbFRyYWNlPFxuICBbc3RyaW5nW10sIGJpZ2ludFtdXSxcbiAgVm90ZUNhbGxPYmplY3Rcbj47XG5cbmV4cG9ydCBpbnRlcmZhY2UgVm90ZU1hbmFnZXJDYWxsT2JqZWN0IHt9XG5cbmV4cG9ydCB0eXBlIFZvdGVNYW5hZ2VyQ2FsbFRyYWNlID0gVHlwZWRDYWxsVHJhY2U8W10sIFZvdGVNYW5hZ2VyQ2FsbE9iamVjdD47XG5cbmV4cG9ydCBpbnRlcmZhY2UgV2l0aGRyYXdNYXJrZXRDYWxsT2JqZWN0IHtcbiAgX21hcmtldDogc3RyaW5nO1xuICBfZm9yOiBzdHJpbmc7XG4gIF9hbW91bnQ6IGJpZ2ludDtcbn1cblxuZXhwb3J0IHR5cGUgV2l0aGRyYXdNYXJrZXRDYWxsVHJhY2UgPSBUeXBlZENhbGxUcmFjZTxcbiAgW3N0cmluZywgc3RyaW5nLCBiaWdpbnRdLFxuICBXaXRoZHJhd01hcmtldENhbGxPYmplY3Rcbj47XG5cbmNvbnN0IHRlbXBsYXRlQ29udHJhY3QgPSBQZW5waWVTdGFraW5nX19mYWN0b3J5LmNvbm5lY3QoXCIweDBcIiwgRHVtbXlQcm92aWRlcik7XG5cbmV4cG9ydCBjbGFzcyBQZW5waWVTdGFraW5nQ29udHJhY3RWaWV3IGV4dGVuZHMgQ29udHJhY3RWaWV3PFBlbnBpZVN0YWtpbmc+IHtcbiAgY29uc3RydWN0b3IoY29udHJhY3Q6IFBlbnBpZVN0YWtpbmcpIHtcbiAgICBzdXBlcihjb250cmFjdCk7XG4gICAgdGhpcy5jYWxsU3RhdGljLmNvbnRyYWN0ID0gY29udHJhY3Q7XG4gIH1cblxuICBhc3luYyBFVEhaYXBwZXIoXG4gICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzLFxuICAgIHByZXBhcmVkRGF0YT86IFByZXBhcmVkRGF0YSxcbiAgICBldGhDYWxsQ29udGV4dD86IEV0aENhbGxDb250ZXh0LFxuICApOiBQcm9taXNlPHN0cmluZz4ge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gYXdhaXQgdGhpcy5jb250cmFjdC5nZXRGdW5jdGlvbihcIkVUSFphcHBlcigpXCIpKG92ZXJyaWRlcyB8fCB7fSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgY29uc3Qgc3RhY2sgPSBuZXcgRXJyb3IoKS5zdGFjaztcbiAgICAgIHRocm93IHRyYW5zZm9ybUV0aGVyRXJyb3IoZSwgdW5kZWZpbmVkLCBzdGFjayk7XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgUEVORExFKFxuICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlcyxcbiAgICBwcmVwYXJlZERhdGE/OiBQcmVwYXJlZERhdGEsXG4gICAgZXRoQ2FsbENvbnRleHQ/OiBFdGhDYWxsQ29udGV4dCxcbiAgKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuY29udHJhY3QuZ2V0RnVuY3Rpb24oXCJQRU5ETEUoKVwiKShvdmVycmlkZXMgfHwge30pO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGNvbnN0IHN0YWNrID0gbmV3IEVycm9yKCkuc3RhY2s7XG4gICAgICB0aHJvdyB0cmFuc2Zvcm1FdGhlckVycm9yKGUsIHVuZGVmaW5lZCwgc3RhY2spO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIFdFVEgoXG4gICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzLFxuICAgIHByZXBhcmVkRGF0YT86IFByZXBhcmVkRGF0YSxcbiAgICBldGhDYWxsQ29udGV4dD86IEV0aENhbGxDb250ZXh0LFxuICApOiBQcm9taXNlPHN0cmluZz4ge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gYXdhaXQgdGhpcy5jb250cmFjdC5nZXRGdW5jdGlvbihcIldFVEgoKVwiKShvdmVycmlkZXMgfHwge30pO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGNvbnN0IHN0YWNrID0gbmV3IEVycm9yKCkuc3RhY2s7XG4gICAgICB0aHJvdyB0cmFuc2Zvcm1FdGhlckVycm9yKGUsIHVuZGVmaW5lZCwgc3RhY2spO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIGFjY3VtdWxhdGVkVmVQZW5kbGUoXG4gICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzLFxuICAgIHByZXBhcmVkRGF0YT86IFByZXBhcmVkRGF0YSxcbiAgICBldGhDYWxsQ29udGV4dD86IEV0aENhbGxDb250ZXh0LFxuICApOiBQcm9taXNlPGJpZ2ludD4ge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gYXdhaXQgdGhpcy5jb250cmFjdC5nZXRGdW5jdGlvbihcImFjY3VtdWxhdGVkVmVQZW5kbGUoKVwiKShcbiAgICAgICAgb3ZlcnJpZGVzIHx8IHt9LFxuICAgICAgKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBjb25zdCBzdGFjayA9IG5ldyBFcnJvcigpLnN0YWNrO1xuICAgICAgdGhyb3cgdHJhbnNmb3JtRXRoZXJFcnJvcihlLCB1bmRlZmluZWQsIHN0YWNrKTtcbiAgICB9XG4gIH1cblxuICBhc3luYyBhdXRvQnJpYmVGZWUoXG4gICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzLFxuICAgIHByZXBhcmVkRGF0YT86IFByZXBhcmVkRGF0YSxcbiAgICBldGhDYWxsQ29udGV4dD86IEV0aENhbGxDb250ZXh0LFxuICApOiBQcm9taXNlPGJpZ2ludD4ge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gYXdhaXQgdGhpcy5jb250cmFjdC5nZXRGdW5jdGlvbihcImF1dG9CcmliZUZlZSgpXCIpKG92ZXJyaWRlcyB8fCB7fSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgY29uc3Qgc3RhY2sgPSBuZXcgRXJyb3IoKS5zdGFjaztcbiAgICAgIHRocm93IHRyYW5zZm9ybUV0aGVyRXJyb3IoZSwgdW5kZWZpbmVkLCBzdGFjayk7XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgYnJpYmVNYW5hZ2VyKFxuICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlcyxcbiAgICBwcmVwYXJlZERhdGE/OiBQcmVwYXJlZERhdGEsXG4gICAgZXRoQ2FsbENvbnRleHQ/OiBFdGhDYWxsQ29udGV4dCxcbiAgKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuY29udHJhY3QuZ2V0RnVuY3Rpb24oXCJicmliZU1hbmFnZXIoKVwiKShvdmVycmlkZXMgfHwge30pO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGNvbnN0IHN0YWNrID0gbmV3IEVycm9yKCkuc3RhY2s7XG4gICAgICB0aHJvdyB0cmFuc2Zvcm1FdGhlckVycm9yKGUsIHVuZGVmaW5lZCwgc3RhY2spO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIGJyaWJlTWFuYWdlckVPQShcbiAgICBvdmVycmlkZXM/OiBPdmVycmlkZXMsXG4gICAgcHJlcGFyZWREYXRhPzogUHJlcGFyZWREYXRhLFxuICAgIGV0aENhbGxDb250ZXh0PzogRXRoQ2FsbENvbnRleHQsXG4gICk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBhd2FpdCB0aGlzLmNvbnRyYWN0LmdldEZ1bmN0aW9uKFwiYnJpYmVNYW5hZ2VyRU9BKClcIikoXG4gICAgICAgIG92ZXJyaWRlcyB8fCB7fSxcbiAgICAgICk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgY29uc3Qgc3RhY2sgPSBuZXcgRXJyb3IoKS5zdGFjaztcbiAgICAgIHRocm93IHRyYW5zZm9ybUV0aGVyRXJyb3IoZSwgdW5kZWZpbmVkLCBzdGFjayk7XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgZGlzdHJpYnV0b3JFVEgoXG4gICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzLFxuICAgIHByZXBhcmVkRGF0YT86IFByZXBhcmVkRGF0YSxcbiAgICBldGhDYWxsQ29udGV4dD86IEV0aENhbGxDb250ZXh0LFxuICApOiBQcm9taXNlPHN0cmluZz4ge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gYXdhaXQgdGhpcy5jb250cmFjdC5nZXRGdW5jdGlvbihcImRpc3RyaWJ1dG9yRVRIKClcIikoXG4gICAgICAgIG92ZXJyaWRlcyB8fCB7fSxcbiAgICAgICk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgY29uc3Qgc3RhY2sgPSBuZXcgRXJyb3IoKS5zdGFjaztcbiAgICAgIHRocm93IHRyYW5zZm9ybUV0aGVyRXJyb3IoZSwgdW5kZWZpbmVkLCBzdGFjayk7XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgZmVlQ29sbGVjdG9yKFxuICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlcyxcbiAgICBwcmVwYXJlZERhdGE/OiBQcmVwYXJlZERhdGEsXG4gICAgZXRoQ2FsbENvbnRleHQ/OiBFdGhDYWxsQ29udGV4dCxcbiAgKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuY29udHJhY3QuZ2V0RnVuY3Rpb24oXCJmZWVDb2xsZWN0b3IoKVwiKShvdmVycmlkZXMgfHwge30pO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGNvbnN0IHN0YWNrID0gbmV3IEVycm9yKCkuc3RhY2s7XG4gICAgICB0aHJvdyB0cmFuc2Zvcm1FdGhlckVycm9yKGUsIHVuZGVmaW5lZCwgc3RhY2spO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIGdldFBvb2xMZW5ndGgoXG4gICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzLFxuICAgIHByZXBhcmVkRGF0YT86IFByZXBhcmVkRGF0YSxcbiAgICBldGhDYWxsQ29udGV4dD86IEV0aENhbGxDb250ZXh0LFxuICApOiBQcm9taXNlPGJpZ2ludD4ge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gYXdhaXQgdGhpcy5jb250cmFjdC5nZXRGdW5jdGlvbihcImdldFBvb2xMZW5ndGgoKVwiKShcbiAgICAgICAgb3ZlcnJpZGVzIHx8IHt9LFxuICAgICAgKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBjb25zdCBzdGFjayA9IG5ldyBFcnJvcigpLnN0YWNrO1xuICAgICAgdGhyb3cgdHJhbnNmb3JtRXRoZXJFcnJvcihlLCB1bmRlZmluZWQsIHN0YWNrKTtcbiAgICB9XG4gIH1cblxuICBhc3luYyBoYXJ2ZXN0Q2FsbGVyUGVuZGxlRmVlKFxuICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlcyxcbiAgICBwcmVwYXJlZERhdGE/OiBQcmVwYXJlZERhdGEsXG4gICAgZXRoQ2FsbENvbnRleHQ/OiBFdGhDYWxsQ29udGV4dCxcbiAgKTogUHJvbWlzZTxiaWdpbnQ+IHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuY29udHJhY3QuZ2V0RnVuY3Rpb24oXCJoYXJ2ZXN0Q2FsbGVyUGVuZGxlRmVlKClcIikoXG4gICAgICAgIG92ZXJyaWRlcyB8fCB7fSxcbiAgICAgICk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgY29uc3Qgc3RhY2sgPSBuZXcgRXJyb3IoKS5zdGFjaztcbiAgICAgIHRocm93IHRyYW5zZm9ybUV0aGVyRXJyb3IoZSwgdW5kZWZpbmVkLCBzdGFjayk7XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgaGFydmVzdFRpbWVHYXAoXG4gICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzLFxuICAgIHByZXBhcmVkRGF0YT86IFByZXBhcmVkRGF0YSxcbiAgICBldGhDYWxsQ29udGV4dD86IEV0aENhbGxDb250ZXh0LFxuICApOiBQcm9taXNlPGJpZ2ludD4ge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gYXdhaXQgdGhpcy5jb250cmFjdC5nZXRGdW5jdGlvbihcImhhcnZlc3RUaW1lR2FwKClcIikoXG4gICAgICAgIG92ZXJyaWRlcyB8fCB7fSxcbiAgICAgICk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgY29uc3Qgc3RhY2sgPSBuZXcgRXJyb3IoKS5zdGFjaztcbiAgICAgIHRocm93IHRyYW5zZm9ybUV0aGVyRXJyb3IoZSwgdW5kZWZpbmVkLCBzdGFjayk7XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgbG9ja1BlcmlvZChcbiAgICBvdmVycmlkZXM/OiBPdmVycmlkZXMsXG4gICAgcHJlcGFyZWREYXRhPzogUHJlcGFyZWREYXRhLFxuICAgIGV0aENhbGxDb250ZXh0PzogRXRoQ2FsbENvbnRleHQsXG4gICk6IFByb21pc2U8YmlnaW50PiB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBhd2FpdCB0aGlzLmNvbnRyYWN0LmdldEZ1bmN0aW9uKFwibG9ja1BlcmlvZCgpXCIpKG92ZXJyaWRlcyB8fCB7fSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgY29uc3Qgc3RhY2sgPSBuZXcgRXJyb3IoKS5zdGFjaztcbiAgICAgIHRocm93IHRyYW5zZm9ybUV0aGVyRXJyb3IoZSwgdW5kZWZpbmVkLCBzdGFjayk7XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgbVBlbmRsZUNvbnZlcnRvcihcbiAgICBvdmVycmlkZXM/OiBPdmVycmlkZXMsXG4gICAgcHJlcGFyZWREYXRhPzogUHJlcGFyZWREYXRhLFxuICAgIGV0aENhbGxDb250ZXh0PzogRXRoQ2FsbENvbnRleHQsXG4gICk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBhd2FpdCB0aGlzLmNvbnRyYWN0LmdldEZ1bmN0aW9uKFwibVBlbmRsZUNvbnZlcnRvcigpXCIpKFxuICAgICAgICBvdmVycmlkZXMgfHwge30sXG4gICAgICApO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGNvbnN0IHN0YWNrID0gbmV3IEVycm9yKCkuc3RhY2s7XG4gICAgICB0aHJvdyB0cmFuc2Zvcm1FdGhlckVycm9yKGUsIHVuZGVmaW5lZCwgc3RhY2spO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIG1QZW5kbGVPRlQoXG4gICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzLFxuICAgIHByZXBhcmVkRGF0YT86IFByZXBhcmVkRGF0YSxcbiAgICBldGhDYWxsQ29udGV4dD86IEV0aENhbGxDb250ZXh0LFxuICApOiBQcm9taXNlPHN0cmluZz4ge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gYXdhaXQgdGhpcy5jb250cmFjdC5nZXRGdW5jdGlvbihcIm1QZW5kbGVPRlQoKVwiKShvdmVycmlkZXMgfHwge30pO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGNvbnN0IHN0YWNrID0gbmV3IEVycm9yKCkuc3RhY2s7XG4gICAgICB0aHJvdyB0cmFuc2Zvcm1FdGhlckVycm9yKGUsIHVuZGVmaW5lZCwgc3RhY2spO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIG1hcmtldERlcG9zaXRIZWxwZXIoXG4gICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzLFxuICAgIHByZXBhcmVkRGF0YT86IFByZXBhcmVkRGF0YSxcbiAgICBldGhDYWxsQ29udGV4dD86IEV0aENhbGxDb250ZXh0LFxuICApOiBQcm9taXNlPHN0cmluZz4ge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gYXdhaXQgdGhpcy5jb250cmFjdC5nZXRGdW5jdGlvbihcIm1hcmtldERlcG9zaXRIZWxwZXIoKVwiKShcbiAgICAgICAgb3ZlcnJpZGVzIHx8IHt9LFxuICAgICAgKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBjb25zdCBzdGFjayA9IG5ldyBFcnJvcigpLnN0YWNrO1xuICAgICAgdGhyb3cgdHJhbnNmb3JtRXRoZXJFcnJvcihlLCB1bmRlZmluZWQsIHN0YWNrKTtcbiAgICB9XG4gIH1cblxuICBhc3luYyBtYXN0ZXJQZW5waWUoXG4gICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzLFxuICAgIHByZXBhcmVkRGF0YT86IFByZXBhcmVkRGF0YSxcbiAgICBldGhDYWxsQ29udGV4dD86IEV0aENhbGxDb250ZXh0LFxuICApOiBQcm9taXNlPHN0cmluZz4ge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gYXdhaXQgdGhpcy5jb250cmFjdC5nZXRGdW5jdGlvbihcIm1hc3RlclBlbnBpZSgpXCIpKG92ZXJyaWRlcyB8fCB7fSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgY29uc3Qgc3RhY2sgPSBuZXcgRXJyb3IoKS5zdGFjaztcbiAgICAgIHRocm93IHRyYW5zZm9ybUV0aGVyRXJyb3IoZSwgdW5kZWZpbmVkLCBzdGFjayk7XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgb3duZXIoXG4gICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzLFxuICAgIHByZXBhcmVkRGF0YT86IFByZXBhcmVkRGF0YSxcbiAgICBldGhDYWxsQ29udGV4dD86IEV0aENhbGxDb250ZXh0LFxuICApOiBQcm9taXNlPHN0cmluZz4ge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gYXdhaXQgdGhpcy5jb250cmFjdC5nZXRGdW5jdGlvbihcIm93bmVyKClcIikob3ZlcnJpZGVzIHx8IHt9KTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBjb25zdCBzdGFjayA9IG5ldyBFcnJvcigpLnN0YWNrO1xuICAgICAgdGhyb3cgdHJhbnNmb3JtRXRoZXJFcnJvcihlLCB1bmRlZmluZWQsIHN0YWNrKTtcbiAgICB9XG4gIH1cblxuICBhc3luYyBwYXVzZWQoXG4gICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzLFxuICAgIHByZXBhcmVkRGF0YT86IFByZXBhcmVkRGF0YSxcbiAgICBldGhDYWxsQ29udGV4dD86IEV0aENhbGxDb250ZXh0LFxuICApOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuY29udHJhY3QuZ2V0RnVuY3Rpb24oXCJwYXVzZWQoKVwiKShvdmVycmlkZXMgfHwge30pO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGNvbnN0IHN0YWNrID0gbmV3IEVycm9yKCkuc3RhY2s7XG4gICAgICB0aHJvdyB0cmFuc2Zvcm1FdGhlckVycm9yKGUsIHVuZGVmaW5lZCwgc3RhY2spO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIHBlbmRsZUZlZUluZm9zKFxuICAgIGFyZzA6IEJpZ051bWJlcmlzaCxcbiAgICBvdmVycmlkZXM/OiBPdmVycmlkZXMsXG4gICAgcHJlcGFyZWREYXRhPzogUHJlcGFyZWREYXRhLFxuICAgIGV0aENhbGxDb250ZXh0PzogRXRoQ2FsbENvbnRleHQsXG4gICk6IFByb21pc2U8XG4gICAgW2JpZ2ludCwgc3RyaW5nLCBib29sZWFuLCBib29sZWFuLCBib29sZWFuXSAmIHtcbiAgICAgIHZhbHVlOiBiaWdpbnQ7XG4gICAgICB0bzogc3RyaW5nO1xuICAgICAgaXNNUEVORExFOiBib29sZWFuO1xuICAgICAgaXNBZGRyZXNzOiBib29sZWFuO1xuICAgICAgaXNBY3RpdmU6IGJvb2xlYW47XG4gICAgfVxuICA+IHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuY29udHJhY3QuZ2V0RnVuY3Rpb24oXCJwZW5kbGVGZWVJbmZvcyh1aW50MjU2KVwiKShcbiAgICAgICAgYXJnMCxcbiAgICAgICAgb3ZlcnJpZGVzIHx8IHt9LFxuICAgICAgKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBjb25zdCBzdGFjayA9IG5ldyBFcnJvcigpLnN0YWNrO1xuICAgICAgdGhyb3cgdHJhbnNmb3JtRXRoZXJFcnJvcihlLCB1bmRlZmluZWQsIHN0YWNrKTtcbiAgICB9XG4gIH1cblxuICBhc3luYyBwZW5kbGVSb3V0ZXIoXG4gICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzLFxuICAgIHByZXBhcmVkRGF0YT86IFByZXBhcmVkRGF0YSxcbiAgICBldGhDYWxsQ29udGV4dD86IEV0aENhbGxDb250ZXh0LFxuICApOiBQcm9taXNlPHN0cmluZz4ge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gYXdhaXQgdGhpcy5jb250cmFjdC5nZXRGdW5jdGlvbihcInBlbmRsZVJvdXRlcigpXCIpKG92ZXJyaWRlcyB8fCB7fSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgY29uc3Qgc3RhY2sgPSBuZXcgRXJyb3IoKS5zdGFjaztcbiAgICAgIHRocm93IHRyYW5zZm9ybUV0aGVyRXJyb3IoZSwgdW5kZWZpbmVkLCBzdGFjayk7XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgcGVuZGxlVm90ZShcbiAgICBvdmVycmlkZXM/OiBPdmVycmlkZXMsXG4gICAgcHJlcGFyZWREYXRhPzogUHJlcGFyZWREYXRhLFxuICAgIGV0aENhbGxDb250ZXh0PzogRXRoQ2FsbENvbnRleHQsXG4gICk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBhd2FpdCB0aGlzLmNvbnRyYWN0LmdldEZ1bmN0aW9uKFwicGVuZGxlVm90ZSgpXCIpKG92ZXJyaWRlcyB8fCB7fSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgY29uc3Qgc3RhY2sgPSBuZXcgRXJyb3IoKS5zdGFjaztcbiAgICAgIHRocm93IHRyYW5zZm9ybUV0aGVyRXJyb3IoZSwgdW5kZWZpbmVkLCBzdGFjayk7XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgcG9vbFRva2VuTGlzdChcbiAgICBhcmcwOiBCaWdOdW1iZXJpc2gsXG4gICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzLFxuICAgIHByZXBhcmVkRGF0YT86IFByZXBhcmVkRGF0YSxcbiAgICBldGhDYWxsQ29udGV4dD86IEV0aENhbGxDb250ZXh0LFxuICApOiBQcm9taXNlPHN0cmluZz4ge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gYXdhaXQgdGhpcy5jb250cmFjdC5nZXRGdW5jdGlvbihcInBvb2xUb2tlbkxpc3QodWludDI1NilcIikoXG4gICAgICAgIGFyZzAsXG4gICAgICAgIG92ZXJyaWRlcyB8fCB7fSxcbiAgICAgICk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgY29uc3Qgc3RhY2sgPSBuZXcgRXJyb3IoKS5zdGFjaztcbiAgICAgIHRocm93IHRyYW5zZm9ybUV0aGVyRXJyb3IoZSwgdW5kZWZpbmVkLCBzdGFjayk7XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgcG9vbHMoXG4gICAgYXJnMDogc3RyaW5nLFxuICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlcyxcbiAgICBwcmVwYXJlZERhdGE/OiBQcmVwYXJlZERhdGEsXG4gICAgZXRoQ2FsbENvbnRleHQ/OiBFdGhDYWxsQ29udGV4dCxcbiAgKTogUHJvbWlzZTxcbiAgICBbc3RyaW5nLCBzdHJpbmcsIHN0cmluZywgc3RyaW5nLCBiaWdpbnQsIGJvb2xlYW5dICYge1xuICAgICAgbWFya2V0OiBzdHJpbmc7XG4gICAgICByZXdhcmRlcjogc3RyaW5nO1xuICAgICAgaGVscGVyOiBzdHJpbmc7XG4gICAgICByZWNlaXB0VG9rZW46IHN0cmluZztcbiAgICAgIGxhc3RIYXJ2ZXN0VGltZTogYmlnaW50O1xuICAgICAgaXNBY3RpdmU6IGJvb2xlYW47XG4gICAgfVxuICA+IHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuY29udHJhY3QuZ2V0RnVuY3Rpb24oXCJwb29scyhhZGRyZXNzKVwiKShcbiAgICAgICAgYXJnMCxcbiAgICAgICAgb3ZlcnJpZGVzIHx8IHt9LFxuICAgICAgKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBjb25zdCBzdGFjayA9IG5ldyBFcnJvcigpLnN0YWNrO1xuICAgICAgdGhyb3cgdHJhbnNmb3JtRXRoZXJFcnJvcihlLCB1bmRlZmluZWQsIHN0YWNrKTtcbiAgICB9XG4gIH1cblxuICBhc3luYyBwcm90b2NvbEZlZShcbiAgICBvdmVycmlkZXM/OiBPdmVycmlkZXMsXG4gICAgcHJlcGFyZWREYXRhPzogUHJlcGFyZWREYXRhLFxuICAgIGV0aENhbGxDb250ZXh0PzogRXRoQ2FsbENvbnRleHQsXG4gICk6IFByb21pc2U8YmlnaW50PiB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBhd2FpdCB0aGlzLmNvbnRyYWN0LmdldEZ1bmN0aW9uKFwicHJvdG9jb2xGZWUoKVwiKShvdmVycmlkZXMgfHwge30pO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGNvbnN0IHN0YWNrID0gbmV3IEVycm9yKCkuc3RhY2s7XG4gICAgICB0aHJvdyB0cmFuc2Zvcm1FdGhlckVycm9yKGUsIHVuZGVmaW5lZCwgc3RhY2spO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIHNtYXJ0UGVuZGxlQ29udmVydChcbiAgICBvdmVycmlkZXM/OiBPdmVycmlkZXMsXG4gICAgcHJlcGFyZWREYXRhPzogUHJlcGFyZWREYXRhLFxuICAgIGV0aENhbGxDb250ZXh0PzogRXRoQ2FsbENvbnRleHQsXG4gICk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBhd2FpdCB0aGlzLmNvbnRyYWN0LmdldEZ1bmN0aW9uKFwic21hcnRQZW5kbGVDb252ZXJ0KClcIikoXG4gICAgICAgIG92ZXJyaWRlcyB8fCB7fSxcbiAgICAgICk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgY29uc3Qgc3RhY2sgPSBuZXcgRXJyb3IoKS5zdGFjaztcbiAgICAgIHRocm93IHRyYW5zZm9ybUV0aGVyRXJyb3IoZSwgdW5kZWZpbmVkLCBzdGFjayk7XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgdG90YWxQZW5kbGVGZWUoXG4gICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzLFxuICAgIHByZXBhcmVkRGF0YT86IFByZXBhcmVkRGF0YSxcbiAgICBldGhDYWxsQ29udGV4dD86IEV0aENhbGxDb250ZXh0LFxuICApOiBQcm9taXNlPGJpZ2ludD4ge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gYXdhaXQgdGhpcy5jb250cmFjdC5nZXRGdW5jdGlvbihcInRvdGFsUGVuZGxlRmVlKClcIikoXG4gICAgICAgIG92ZXJyaWRlcyB8fCB7fSxcbiAgICAgICk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgY29uc3Qgc3RhY2sgPSBuZXcgRXJyb3IoKS5zdGFjaztcbiAgICAgIHRocm93IHRyYW5zZm9ybUV0aGVyRXJyb3IoZSwgdW5kZWZpbmVkLCBzdGFjayk7XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgdG90YWxVbmNsYWltZWRFVEgoXG4gICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzLFxuICAgIHByZXBhcmVkRGF0YT86IFByZXBhcmVkRGF0YSxcbiAgICBldGhDYWxsQ29udGV4dD86IEV0aENhbGxDb250ZXh0LFxuICApOiBQcm9taXNlPGJpZ2ludD4ge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gYXdhaXQgdGhpcy5jb250cmFjdC5nZXRGdW5jdGlvbihcInRvdGFsVW5jbGFpbWVkRVRIKClcIikoXG4gICAgICAgIG92ZXJyaWRlcyB8fCB7fSxcbiAgICAgICk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgY29uc3Qgc3RhY2sgPSBuZXcgRXJyb3IoKS5zdGFjaztcbiAgICAgIHRocm93IHRyYW5zZm9ybUV0aGVyRXJyb3IoZSwgdW5kZWZpbmVkLCBzdGFjayk7XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgdmVQZW5kbGUoXG4gICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzLFxuICAgIHByZXBhcmVkRGF0YT86IFByZXBhcmVkRGF0YSxcbiAgICBldGhDYWxsQ29udGV4dD86IEV0aENhbGxDb250ZXh0LFxuICApOiBQcm9taXNlPHN0cmluZz4ge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gYXdhaXQgdGhpcy5jb250cmFjdC5nZXRGdW5jdGlvbihcInZlUGVuZGxlKClcIikob3ZlcnJpZGVzIHx8IHt9KTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBjb25zdCBzdGFjayA9IG5ldyBFcnJvcigpLnN0YWNrO1xuICAgICAgdGhyb3cgdHJhbnNmb3JtRXRoZXJFcnJvcihlLCB1bmRlZmluZWQsIHN0YWNrKTtcbiAgICB9XG4gIH1cblxuICBhc3luYyB2ZVBlbmRsZUhhcnZlc3RDYWxsZXJGZWUoXG4gICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzLFxuICAgIHByZXBhcmVkRGF0YT86IFByZXBhcmVkRGF0YSxcbiAgICBldGhDYWxsQ29udGV4dD86IEV0aENhbGxDb250ZXh0LFxuICApOiBQcm9taXNlPGJpZ2ludD4ge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gYXdhaXQgdGhpcy5jb250cmFjdC5nZXRGdW5jdGlvbihcInZlUGVuZGxlSGFydmVzdENhbGxlckZlZSgpXCIpKFxuICAgICAgICBvdmVycmlkZXMgfHwge30sXG4gICAgICApO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGNvbnN0IHN0YWNrID0gbmV3IEVycm9yKCkuc3RhY2s7XG4gICAgICB0aHJvdyB0cmFuc2Zvcm1FdGhlckVycm9yKGUsIHVuZGVmaW5lZCwgc3RhY2spO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIHZvdGVNYW5hZ2VyKFxuICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlcyxcbiAgICBwcmVwYXJlZERhdGE/OiBQcmVwYXJlZERhdGEsXG4gICAgZXRoQ2FsbENvbnRleHQ/OiBFdGhDYWxsQ29udGV4dCxcbiAgKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuY29udHJhY3QuZ2V0RnVuY3Rpb24oXCJ2b3RlTWFuYWdlcigpXCIpKG92ZXJyaWRlcyB8fCB7fSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgY29uc3Qgc3RhY2sgPSBuZXcgRXJyb3IoKS5zdGFjaztcbiAgICAgIHRocm93IHRyYW5zZm9ybUV0aGVyRXJyb3IoZSwgdW5kZWZpbmVkLCBzdGFjayk7XG4gICAgfVxuICB9XG5cbiAgY2FsbFN0YXRpYyA9IHtcbiAgICBjb250cmFjdDogdGhpcy5jb250cmFjdCxcblxuICAgIGFzeW5jIF9fUGVuZGxlU3Rha2luZ0Jhc2VVcGdfaW5pdChcbiAgICAgIF9wZW5kbGU6IHN0cmluZyxcbiAgICAgIF9XRVRIOiBzdHJpbmcsXG4gICAgICBfdmVQZW5kbGU6IHN0cmluZyxcbiAgICAgIF9kaXN0cmlidXRvckVUSDogc3RyaW5nLFxuICAgICAgX3BlbmRsZVJvdXRlcjogc3RyaW5nLFxuICAgICAgX21hc3RlclBlbnBpZTogc3RyaW5nLFxuICAgICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzLFxuICAgICAgcHJlcGFyZWREYXRhPzogUHJlcGFyZWREYXRhLFxuICAgICAgZXRoQ2FsbENvbnRleHQ/OiBFdGhDYWxsQ29udGV4dCxcbiAgICApOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLmNvbnRyYWN0XG4gICAgICAgICAgLmdldEZ1bmN0aW9uKFxuICAgICAgICAgICAgXCJfX1BlbmRsZVN0YWtpbmdCYXNlVXBnX2luaXQoYWRkcmVzcyxhZGRyZXNzLGFkZHJlc3MsYWRkcmVzcyxhZGRyZXNzLGFkZHJlc3MpXCIsXG4gICAgICAgICAgKVxuICAgICAgICAgIC5zdGF0aWNDYWxsKFxuICAgICAgICAgICAgX3BlbmRsZSxcbiAgICAgICAgICAgIF9XRVRILFxuICAgICAgICAgICAgX3ZlUGVuZGxlLFxuICAgICAgICAgICAgX2Rpc3RyaWJ1dG9yRVRILFxuICAgICAgICAgICAgX3BlbmRsZVJvdXRlcixcbiAgICAgICAgICAgIF9tYXN0ZXJQZW5waWUsXG4gICAgICAgICAgICBvdmVycmlkZXMgfHwge30sXG4gICAgICAgICAgKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY29uc3Qgc3RhY2sgPSBuZXcgRXJyb3IoKS5zdGFjaztcbiAgICAgICAgdGhyb3cgdHJhbnNmb3JtRXRoZXJFcnJvcihlLCB1bmRlZmluZWQsIHN0YWNrKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGFzeW5jIF9fUGVuZGxlU3Rha2luZ19pbml0KFxuICAgICAgX3BlbmRsZTogc3RyaW5nLFxuICAgICAgX1dFVEg6IHN0cmluZyxcbiAgICAgIF92ZVBlbmRsZTogc3RyaW5nLFxuICAgICAgX2Rpc3RyaWJ1dG9yRVRIOiBzdHJpbmcsXG4gICAgICBfcGVuZGxlUm91dGVyOiBzdHJpbmcsXG4gICAgICBfbWFzdGVyUGVucGllOiBzdHJpbmcsXG4gICAgICBvdmVycmlkZXM/OiBPdmVycmlkZXMsXG4gICAgICBwcmVwYXJlZERhdGE/OiBQcmVwYXJlZERhdGEsXG4gICAgICBldGhDYWxsQ29udGV4dD86IEV0aENhbGxDb250ZXh0LFxuICAgICk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuY29udHJhY3RcbiAgICAgICAgICAuZ2V0RnVuY3Rpb24oXG4gICAgICAgICAgICBcIl9fUGVuZGxlU3Rha2luZ19pbml0KGFkZHJlc3MsYWRkcmVzcyxhZGRyZXNzLGFkZHJlc3MsYWRkcmVzcyxhZGRyZXNzKVwiLFxuICAgICAgICAgIClcbiAgICAgICAgICAuc3RhdGljQ2FsbChcbiAgICAgICAgICAgIF9wZW5kbGUsXG4gICAgICAgICAgICBfV0VUSCxcbiAgICAgICAgICAgIF92ZVBlbmRsZSxcbiAgICAgICAgICAgIF9kaXN0cmlidXRvckVUSCxcbiAgICAgICAgICAgIF9wZW5kbGVSb3V0ZXIsXG4gICAgICAgICAgICBfbWFzdGVyUGVucGllLFxuICAgICAgICAgICAgb3ZlcnJpZGVzIHx8IHt9LFxuICAgICAgICAgICk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNvbnN0IHN0YWNrID0gbmV3IEVycm9yKCkuc3RhY2s7XG4gICAgICAgIHRocm93IHRyYW5zZm9ybUV0aGVyRXJyb3IoZSwgdW5kZWZpbmVkLCBzdGFjayk7XG4gICAgICB9XG4gICAgfSxcbiAgICBhc3luYyBhZGRQZW5kbGVGZWUoXG4gICAgICBfdmFsdWU6IEJpZ051bWJlcmlzaCxcbiAgICAgIF90bzogc3RyaW5nLFxuICAgICAgX2lzTVBFTkRMRTogYm9vbGVhbixcbiAgICAgIF9pc0FkZHJlc3M6IGJvb2xlYW4sXG4gICAgICBvdmVycmlkZXM/OiBPdmVycmlkZXMsXG4gICAgICBwcmVwYXJlZERhdGE/OiBQcmVwYXJlZERhdGEsXG4gICAgICBldGhDYWxsQ29udGV4dD86IEV0aENhbGxDb250ZXh0LFxuICAgICk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuY29udHJhY3RcbiAgICAgICAgICAuZ2V0RnVuY3Rpb24oXCJhZGRQZW5kbGVGZWUodWludDI1NixhZGRyZXNzLGJvb2wsYm9vbClcIilcbiAgICAgICAgICAuc3RhdGljQ2FsbChfdmFsdWUsIF90bywgX2lzTVBFTkRMRSwgX2lzQWRkcmVzcywgb3ZlcnJpZGVzIHx8IHt9KTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY29uc3Qgc3RhY2sgPSBuZXcgRXJyb3IoKS5zdGFjaztcbiAgICAgICAgdGhyb3cgdHJhbnNmb3JtRXRoZXJFcnJvcihlLCB1bmRlZmluZWQsIHN0YWNrKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGFzeW5jIGJhdGNoSGFydmVzdE1hcmtldFJld2FyZHMoXG4gICAgICBfbWFya2V0czogc3RyaW5nW10sXG4gICAgICBtaW5FdGhUb1JlY2lldmU6IEJpZ051bWJlcmlzaCxcbiAgICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlcyxcbiAgICAgIHByZXBhcmVkRGF0YT86IFByZXBhcmVkRGF0YSxcbiAgICAgIGV0aENhbGxDb250ZXh0PzogRXRoQ2FsbENvbnRleHQsXG4gICAgKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5jb250cmFjdFxuICAgICAgICAgIC5nZXRGdW5jdGlvbihcImJhdGNoSGFydmVzdE1hcmtldFJld2FyZHMoYWRkcmVzc1tdLHVpbnQyNTYpXCIpXG4gICAgICAgICAgLnN0YXRpY0NhbGwoX21hcmtldHMsIG1pbkV0aFRvUmVjaWV2ZSwgb3ZlcnJpZGVzIHx8IHt9KTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY29uc3Qgc3RhY2sgPSBuZXcgRXJyb3IoKS5zdGFjaztcbiAgICAgICAgdGhyb3cgdHJhbnNmb3JtRXRoZXJFcnJvcihlLCB1bmRlZmluZWQsIHN0YWNrKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGFzeW5jIGJvb3RzdHJhcFZlUGVuZGxlKFxuICAgICAgY2hhaW5JZDogQmlnTnVtYmVyaXNoW10sXG4gICAgICBvdmVycmlkZXM/OiBPdmVycmlkZXMsXG4gICAgICBwcmVwYXJlZERhdGE/OiBQcmVwYXJlZERhdGEsXG4gICAgICBldGhDYWxsQ29udGV4dD86IEV0aENhbGxDb250ZXh0LFxuICAgICk6IFByb21pc2U8YmlnaW50PiB7XG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5jb250cmFjdFxuICAgICAgICAgIC5nZXRGdW5jdGlvbihcImJvb3RzdHJhcFZlUGVuZGxlKHVpbnQyNTZbXSlcIilcbiAgICAgICAgICAuc3RhdGljQ2FsbChjaGFpbklkLCBvdmVycmlkZXMgfHwge30pO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjb25zdCBzdGFjayA9IG5ldyBFcnJvcigpLnN0YWNrO1xuICAgICAgICB0aHJvdyB0cmFuc2Zvcm1FdGhlckVycm9yKGUsIHVuZGVmaW5lZCwgc3RhY2spO1xuICAgICAgfVxuICAgIH0sXG4gICAgYXN5bmMgY29udmVydFBlbmRsZShcbiAgICAgIF9hbW91bnQ6IEJpZ051bWJlcmlzaCxcbiAgICAgIGNoYWluSWQ6IEJpZ051bWJlcmlzaFtdLFxuICAgICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzLFxuICAgICAgcHJlcGFyZWREYXRhPzogUHJlcGFyZWREYXRhLFxuICAgICAgZXRoQ2FsbENvbnRleHQ/OiBFdGhDYWxsQ29udGV4dCxcbiAgICApOiBQcm9taXNlPGJpZ2ludD4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuY29udHJhY3RcbiAgICAgICAgICAuZ2V0RnVuY3Rpb24oXCJjb252ZXJ0UGVuZGxlKHVpbnQyNTYsdWludDI1NltdKVwiKVxuICAgICAgICAgIC5zdGF0aWNDYWxsKF9hbW91bnQsIGNoYWluSWQsIG92ZXJyaWRlcyB8fCB7fSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNvbnN0IHN0YWNrID0gbmV3IEVycm9yKCkuc3RhY2s7XG4gICAgICAgIHRocm93IHRyYW5zZm9ybUV0aGVyRXJyb3IoZSwgdW5kZWZpbmVkLCBzdGFjayk7XG4gICAgICB9XG4gICAgfSxcbiAgICBhc3luYyBkZXBvc2l0TWFya2V0KFxuICAgICAgX21hcmtldDogc3RyaW5nLFxuICAgICAgX2Zvcjogc3RyaW5nLFxuICAgICAgX2Zyb206IHN0cmluZyxcbiAgICAgIF9hbW91bnQ6IEJpZ051bWJlcmlzaCxcbiAgICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlcyxcbiAgICAgIHByZXBhcmVkRGF0YT86IFByZXBhcmVkRGF0YSxcbiAgICAgIGV0aENhbGxDb250ZXh0PzogRXRoQ2FsbENvbnRleHQsXG4gICAgKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5jb250cmFjdFxuICAgICAgICAgIC5nZXRGdW5jdGlvbihcImRlcG9zaXRNYXJrZXQoYWRkcmVzcyxhZGRyZXNzLGFkZHJlc3MsdWludDI1NilcIilcbiAgICAgICAgICAuc3RhdGljQ2FsbChfbWFya2V0LCBfZm9yLCBfZnJvbSwgX2Ftb3VudCwgb3ZlcnJpZGVzIHx8IHt9KTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY29uc3Qgc3RhY2sgPSBuZXcgRXJyb3IoKS5zdGFjaztcbiAgICAgICAgdGhyb3cgdHJhbnNmb3JtRXRoZXJFcnJvcihlLCB1bmRlZmluZWQsIHN0YWNrKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGFzeW5jIGhhcnZlc3RNYXJrZXRSZXdhcmQoXG4gICAgICBfbWFya2V0OiBzdHJpbmcsXG4gICAgICBfY2FsbGVyOiBzdHJpbmcsXG4gICAgICBfbWluRXRoUmVjaXZlOiBCaWdOdW1iZXJpc2gsXG4gICAgICBvdmVycmlkZXM/OiBPdmVycmlkZXMsXG4gICAgICBwcmVwYXJlZERhdGE/OiBQcmVwYXJlZERhdGEsXG4gICAgICBldGhDYWxsQ29udGV4dD86IEV0aENhbGxDb250ZXh0LFxuICAgICk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuY29udHJhY3RcbiAgICAgICAgICAuZ2V0RnVuY3Rpb24oXCJoYXJ2ZXN0TWFya2V0UmV3YXJkKGFkZHJlc3MsYWRkcmVzcyx1aW50MjU2KVwiKVxuICAgICAgICAgIC5zdGF0aWNDYWxsKF9tYXJrZXQsIF9jYWxsZXIsIF9taW5FdGhSZWNpdmUsIG92ZXJyaWRlcyB8fCB7fSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNvbnN0IHN0YWNrID0gbmV3IEVycm9yKCkuc3RhY2s7XG4gICAgICAgIHRocm93IHRyYW5zZm9ybUV0aGVyRXJyb3IoZSwgdW5kZWZpbmVkLCBzdGFjayk7XG4gICAgICB9XG4gICAgfSxcbiAgICBhc3luYyBoYXJ2ZXN0VmVQZW5kbGVSZXdhcmQoXG4gICAgICBfcG9vbHM6IHN0cmluZ1tdLFxuICAgICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzLFxuICAgICAgcHJlcGFyZWREYXRhPzogUHJlcGFyZWREYXRhLFxuICAgICAgZXRoQ2FsbENvbnRleHQ/OiBFdGhDYWxsQ29udGV4dCxcbiAgICApOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLmNvbnRyYWN0XG4gICAgICAgICAgLmdldEZ1bmN0aW9uKFwiaGFydmVzdFZlUGVuZGxlUmV3YXJkKGFkZHJlc3NbXSlcIilcbiAgICAgICAgICAuc3RhdGljQ2FsbChfcG9vbHMsIG92ZXJyaWRlcyB8fCB7fSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNvbnN0IHN0YWNrID0gbmV3IEVycm9yKCkuc3RhY2s7XG4gICAgICAgIHRocm93IHRyYW5zZm9ybUV0aGVyRXJyb3IoZSwgdW5kZWZpbmVkLCBzdGFjayk7XG4gICAgICB9XG4gICAgfSxcbiAgICBhc3luYyBpbmNyZWFzZUxvY2tUaW1lKFxuICAgICAgX3VubG9ja1RpbWU6IEJpZ051bWJlcmlzaCxcbiAgICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlcyxcbiAgICAgIHByZXBhcmVkRGF0YT86IFByZXBhcmVkRGF0YSxcbiAgICAgIGV0aENhbGxDb250ZXh0PzogRXRoQ2FsbENvbnRleHQsXG4gICAgKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5jb250cmFjdFxuICAgICAgICAgIC5nZXRGdW5jdGlvbihcImluY3JlYXNlTG9ja1RpbWUodWludDI1NilcIilcbiAgICAgICAgICAuc3RhdGljQ2FsbChfdW5sb2NrVGltZSwgb3ZlcnJpZGVzIHx8IHt9KTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY29uc3Qgc3RhY2sgPSBuZXcgRXJyb3IoKS5zdGFjaztcbiAgICAgICAgdGhyb3cgdHJhbnNmb3JtRXRoZXJFcnJvcihlLCB1bmRlZmluZWQsIHN0YWNrKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGFzeW5jIHBhdXNlKFxuICAgICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzLFxuICAgICAgcHJlcGFyZWREYXRhPzogUHJlcGFyZWREYXRhLFxuICAgICAgZXRoQ2FsbENvbnRleHQ/OiBFdGhDYWxsQ29udGV4dCxcbiAgICApOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLmNvbnRyYWN0XG4gICAgICAgICAgLmdldEZ1bmN0aW9uKFwicGF1c2UoKVwiKVxuICAgICAgICAgIC5zdGF0aWNDYWxsKG92ZXJyaWRlcyB8fCB7fSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNvbnN0IHN0YWNrID0gbmV3IEVycm9yKCkuc3RhY2s7XG4gICAgICAgIHRocm93IHRyYW5zZm9ybUV0aGVyRXJyb3IoZSwgdW5kZWZpbmVkLCBzdGFjayk7XG4gICAgICB9XG4gICAgfSxcbiAgICBhc3luYyByZWdpc3RlclBvb2woXG4gICAgICBfbWFya2V0OiBzdHJpbmcsXG4gICAgICBfYWxsb2NQb2ludHM6IEJpZ051bWJlcmlzaCxcbiAgICAgIG5hbWU6IHN0cmluZyxcbiAgICAgIHN5bWJvbDogc3RyaW5nLFxuICAgICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzLFxuICAgICAgcHJlcGFyZWREYXRhPzogUHJlcGFyZWREYXRhLFxuICAgICAgZXRoQ2FsbENvbnRleHQ/OiBFdGhDYWxsQ29udGV4dCxcbiAgICApOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLmNvbnRyYWN0XG4gICAgICAgICAgLmdldEZ1bmN0aW9uKFwicmVnaXN0ZXJQb29sKGFkZHJlc3MsdWludDI1NixzdHJpbmcsc3RyaW5nKVwiKVxuICAgICAgICAgIC5zdGF0aWNDYWxsKF9tYXJrZXQsIF9hbGxvY1BvaW50cywgbmFtZSwgc3ltYm9sLCBvdmVycmlkZXMgfHwge30pO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjb25zdCBzdGFjayA9IG5ldyBFcnJvcigpLnN0YWNrO1xuICAgICAgICB0aHJvdyB0cmFuc2Zvcm1FdGhlckVycm9yKGUsIHVuZGVmaW5lZCwgc3RhY2spO1xuICAgICAgfVxuICAgIH0sXG4gICAgYXN5bmMgcmVtb3ZlUGVuZGxlRmVlKFxuICAgICAgX2luZGV4OiBCaWdOdW1iZXJpc2gsXG4gICAgICBvdmVycmlkZXM/OiBPdmVycmlkZXMsXG4gICAgICBwcmVwYXJlZERhdGE/OiBQcmVwYXJlZERhdGEsXG4gICAgICBldGhDYWxsQ29udGV4dD86IEV0aENhbGxDb250ZXh0LFxuICAgICk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuY29udHJhY3RcbiAgICAgICAgICAuZ2V0RnVuY3Rpb24oXCJyZW1vdmVQZW5kbGVGZWUodWludDI1NilcIilcbiAgICAgICAgICAuc3RhdGljQ2FsbChfaW5kZXgsIG92ZXJyaWRlcyB8fCB7fSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNvbnN0IHN0YWNrID0gbmV3IEVycm9yKCkuc3RhY2s7XG4gICAgICAgIHRocm93IHRyYW5zZm9ybUV0aGVyRXJyb3IoZSwgdW5kZWZpbmVkLCBzdGFjayk7XG4gICAgICB9XG4gICAgfSxcbiAgICBhc3luYyByZW5vdW5jZU93bmVyc2hpcChcbiAgICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlcyxcbiAgICAgIHByZXBhcmVkRGF0YT86IFByZXBhcmVkRGF0YSxcbiAgICAgIGV0aENhbGxDb250ZXh0PzogRXRoQ2FsbENvbnRleHQsXG4gICAgKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5jb250cmFjdFxuICAgICAgICAgIC5nZXRGdW5jdGlvbihcInJlbm91bmNlT3duZXJzaGlwKClcIilcbiAgICAgICAgICAuc3RhdGljQ2FsbChvdmVycmlkZXMgfHwge30pO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjb25zdCBzdGFjayA9IG5ldyBFcnJvcigpLnN0YWNrO1xuICAgICAgICB0aHJvdyB0cmFuc2Zvcm1FdGhlckVycm9yKGUsIHVuZGVmaW5lZCwgc3RhY2spO1xuICAgICAgfVxuICAgIH0sXG4gICAgYXN5bmMgc2V0QXV0b0JyaWJlRmVlKFxuICAgICAgX2F1dG9CcmliZUZlZTogQmlnTnVtYmVyaXNoLFxuICAgICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzLFxuICAgICAgcHJlcGFyZWREYXRhPzogUHJlcGFyZWREYXRhLFxuICAgICAgZXRoQ2FsbENvbnRleHQ/OiBFdGhDYWxsQ29udGV4dCxcbiAgICApOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLmNvbnRyYWN0XG4gICAgICAgICAgLmdldEZ1bmN0aW9uKFwic2V0QXV0b0JyaWJlRmVlKHVpbnQyNTYpXCIpXG4gICAgICAgICAgLnN0YXRpY0NhbGwoX2F1dG9CcmliZUZlZSwgb3ZlcnJpZGVzIHx8IHt9KTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY29uc3Qgc3RhY2sgPSBuZXcgRXJyb3IoKS5zdGFjaztcbiAgICAgICAgdGhyb3cgdHJhbnNmb3JtRXRoZXJFcnJvcihlLCB1bmRlZmluZWQsIHN0YWNrKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGFzeW5jIHNldEJyaWJlTWFuYWdlcihcbiAgICAgIF9icmliZU1hbmFnZXI6IHN0cmluZyxcbiAgICAgIF9icmliZU1hbmFnZXJFT0E6IHN0cmluZyxcbiAgICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlcyxcbiAgICAgIHByZXBhcmVkRGF0YT86IFByZXBhcmVkRGF0YSxcbiAgICAgIGV0aENhbGxDb250ZXh0PzogRXRoQ2FsbENvbnRleHQsXG4gICAgKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5jb250cmFjdFxuICAgICAgICAgIC5nZXRGdW5jdGlvbihcInNldEJyaWJlTWFuYWdlcihhZGRyZXNzLGFkZHJlc3MpXCIpXG4gICAgICAgICAgLnN0YXRpY0NhbGwoX2JyaWJlTWFuYWdlciwgX2JyaWJlTWFuYWdlckVPQSwgb3ZlcnJpZGVzIHx8IHt9KTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY29uc3Qgc3RhY2sgPSBuZXcgRXJyb3IoKS5zdGFjaztcbiAgICAgICAgdGhyb3cgdHJhbnNmb3JtRXRoZXJFcnJvcihlLCB1bmRlZmluZWQsIHN0YWNrKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGFzeW5jIHNldEVUSFphcHBlcihcbiAgICAgIF9FVEhaYXBwZXI6IHN0cmluZyxcbiAgICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlcyxcbiAgICAgIHByZXBhcmVkRGF0YT86IFByZXBhcmVkRGF0YSxcbiAgICAgIGV0aENhbGxDb250ZXh0PzogRXRoQ2FsbENvbnRleHQsXG4gICAgKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5jb250cmFjdFxuICAgICAgICAgIC5nZXRGdW5jdGlvbihcInNldEVUSFphcHBlcihhZGRyZXNzKVwiKVxuICAgICAgICAgIC5zdGF0aWNDYWxsKF9FVEhaYXBwZXIsIG92ZXJyaWRlcyB8fCB7fSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNvbnN0IHN0YWNrID0gbmV3IEVycm9yKCkuc3RhY2s7XG4gICAgICAgIHRocm93IHRyYW5zZm9ybUV0aGVyRXJyb3IoZSwgdW5kZWZpbmVkLCBzdGFjayk7XG4gICAgICB9XG4gICAgfSxcbiAgICBhc3luYyBzZXRIYXJ2ZXN0VGltZUdhcChcbiAgICAgIF9wZXJpb2Q6IEJpZ051bWJlcmlzaCxcbiAgICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlcyxcbiAgICAgIHByZXBhcmVkRGF0YT86IFByZXBhcmVkRGF0YSxcbiAgICAgIGV0aENhbGxDb250ZXh0PzogRXRoQ2FsbENvbnRleHQsXG4gICAgKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5jb250cmFjdFxuICAgICAgICAgIC5nZXRGdW5jdGlvbihcInNldEhhcnZlc3RUaW1lR2FwKHVpbnQyNTYpXCIpXG4gICAgICAgICAgLnN0YXRpY0NhbGwoX3BlcmlvZCwgb3ZlcnJpZGVzIHx8IHt9KTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY29uc3Qgc3RhY2sgPSBuZXcgRXJyb3IoKS5zdGFjaztcbiAgICAgICAgdGhyb3cgdHJhbnNmb3JtRXRoZXJFcnJvcihlLCB1bmRlZmluZWQsIHN0YWNrKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGFzeW5jIHNldExvY2tEYXlzKFxuICAgICAgX25ld0xvY2tQZXJpb2Q6IEJpZ051bWJlcmlzaCxcbiAgICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlcyxcbiAgICAgIHByZXBhcmVkRGF0YT86IFByZXBhcmVkRGF0YSxcbiAgICAgIGV0aENhbGxDb250ZXh0PzogRXRoQ2FsbENvbnRleHQsXG4gICAgKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5jb250cmFjdFxuICAgICAgICAgIC5nZXRGdW5jdGlvbihcInNldExvY2tEYXlzKHVpbnQyNTYpXCIpXG4gICAgICAgICAgLnN0YXRpY0NhbGwoX25ld0xvY2tQZXJpb2QsIG92ZXJyaWRlcyB8fCB7fSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNvbnN0IHN0YWNrID0gbmV3IEVycm9yKCkuc3RhY2s7XG4gICAgICAgIHRocm93IHRyYW5zZm9ybUV0aGVyRXJyb3IoZSwgdW5kZWZpbmVkLCBzdGFjayk7XG4gICAgICB9XG4gICAgfSxcbiAgICBhc3luYyBzZXRNUGVuZGxlQ29udmVydG9yKFxuICAgICAgX21QZW5kbGVDb252ZXJ0b3I6IHN0cmluZyxcbiAgICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlcyxcbiAgICAgIHByZXBhcmVkRGF0YT86IFByZXBhcmVkRGF0YSxcbiAgICAgIGV0aENhbGxDb250ZXh0PzogRXRoQ2FsbENvbnRleHQsXG4gICAgKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5jb250cmFjdFxuICAgICAgICAgIC5nZXRGdW5jdGlvbihcInNldE1QZW5kbGVDb252ZXJ0b3IoYWRkcmVzcylcIilcbiAgICAgICAgICAuc3RhdGljQ2FsbChfbVBlbmRsZUNvbnZlcnRvciwgb3ZlcnJpZGVzIHx8IHt9KTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY29uc3Qgc3RhY2sgPSBuZXcgRXJyb3IoKS5zdGFjaztcbiAgICAgICAgdGhyb3cgdHJhbnNmb3JtRXRoZXJFcnJvcihlLCB1bmRlZmluZWQsIHN0YWNrKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGFzeW5jIHNldE1QZW5kbGVPRlQoXG4gICAgICBfc2V0TVBlbmRsZU9GVDogc3RyaW5nLFxuICAgICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzLFxuICAgICAgcHJlcGFyZWREYXRhPzogUHJlcGFyZWREYXRhLFxuICAgICAgZXRoQ2FsbENvbnRleHQ/OiBFdGhDYWxsQ29udGV4dCxcbiAgICApOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLmNvbnRyYWN0XG4gICAgICAgICAgLmdldEZ1bmN0aW9uKFwic2V0TVBlbmRsZU9GVChhZGRyZXNzKVwiKVxuICAgICAgICAgIC5zdGF0aWNDYWxsKF9zZXRNUGVuZGxlT0ZULCBvdmVycmlkZXMgfHwge30pO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjb25zdCBzdGFjayA9IG5ldyBFcnJvcigpLnN0YWNrO1xuICAgICAgICB0aHJvdyB0cmFuc2Zvcm1FdGhlckVycm9yKGUsIHVuZGVmaW5lZCwgc3RhY2spO1xuICAgICAgfVxuICAgIH0sXG4gICAgYXN5bmMgc2V0TWFya2V0RGVwb3NpdEhlbHBlcihcbiAgICAgIF9oZWxwZXI6IHN0cmluZyxcbiAgICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlcyxcbiAgICAgIHByZXBhcmVkRGF0YT86IFByZXBhcmVkRGF0YSxcbiAgICAgIGV0aENhbGxDb250ZXh0PzogRXRoQ2FsbENvbnRleHQsXG4gICAgKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5jb250cmFjdFxuICAgICAgICAgIC5nZXRGdW5jdGlvbihcInNldE1hcmtldERlcG9zaXRIZWxwZXIoYWRkcmVzcylcIilcbiAgICAgICAgICAuc3RhdGljQ2FsbChfaGVscGVyLCBvdmVycmlkZXMgfHwge30pO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjb25zdCBzdGFjayA9IG5ldyBFcnJvcigpLnN0YWNrO1xuICAgICAgICB0aHJvdyB0cmFuc2Zvcm1FdGhlckVycm9yKGUsIHVuZGVmaW5lZCwgc3RhY2spO1xuICAgICAgfVxuICAgIH0sXG4gICAgYXN5bmMgc2V0UGVuZGxlRmVlKFxuICAgICAgX2luZGV4OiBCaWdOdW1iZXJpc2gsXG4gICAgICBfdmFsdWU6IEJpZ051bWJlcmlzaCxcbiAgICAgIF90bzogc3RyaW5nLFxuICAgICAgX2lzTVBFTkRMRTogYm9vbGVhbixcbiAgICAgIF9pc0FkZHJlc3M6IGJvb2xlYW4sXG4gICAgICBfaXNBY3RpdmU6IGJvb2xlYW4sXG4gICAgICBvdmVycmlkZXM/OiBPdmVycmlkZXMsXG4gICAgICBwcmVwYXJlZERhdGE/OiBQcmVwYXJlZERhdGEsXG4gICAgICBldGhDYWxsQ29udGV4dD86IEV0aENhbGxDb250ZXh0LFxuICAgICk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuY29udHJhY3RcbiAgICAgICAgICAuZ2V0RnVuY3Rpb24oXCJzZXRQZW5kbGVGZWUodWludDI1Nix1aW50MjU2LGFkZHJlc3MsYm9vbCxib29sLGJvb2wpXCIpXG4gICAgICAgICAgLnN0YXRpY0NhbGwoXG4gICAgICAgICAgICBfaW5kZXgsXG4gICAgICAgICAgICBfdmFsdWUsXG4gICAgICAgICAgICBfdG8sXG4gICAgICAgICAgICBfaXNNUEVORExFLFxuICAgICAgICAgICAgX2lzQWRkcmVzcyxcbiAgICAgICAgICAgIF9pc0FjdGl2ZSxcbiAgICAgICAgICAgIG92ZXJyaWRlcyB8fCB7fSxcbiAgICAgICAgICApO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjb25zdCBzdGFjayA9IG5ldyBFcnJvcigpLnN0YWNrO1xuICAgICAgICB0aHJvdyB0cmFuc2Zvcm1FdGhlckVycm9yKGUsIHVuZGVmaW5lZCwgc3RhY2spO1xuICAgICAgfVxuICAgIH0sXG4gICAgYXN5bmMgc2V0U21hcnRDb252ZXJ0KFxuICAgICAgX3NtYXJ0UGVuZGxlQ29udmVydDogc3RyaW5nLFxuICAgICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzLFxuICAgICAgcHJlcGFyZWREYXRhPzogUHJlcGFyZWREYXRhLFxuICAgICAgZXRoQ2FsbENvbnRleHQ/OiBFdGhDYWxsQ29udGV4dCxcbiAgICApOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLmNvbnRyYWN0XG4gICAgICAgICAgLmdldEZ1bmN0aW9uKFwic2V0U21hcnRDb252ZXJ0KGFkZHJlc3MpXCIpXG4gICAgICAgICAgLnN0YXRpY0NhbGwoX3NtYXJ0UGVuZGxlQ29udmVydCwgb3ZlcnJpZGVzIHx8IHt9KTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY29uc3Qgc3RhY2sgPSBuZXcgRXJyb3IoKS5zdGFjaztcbiAgICAgICAgdGhyb3cgdHJhbnNmb3JtRXRoZXJFcnJvcihlLCB1bmRlZmluZWQsIHN0YWNrKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGFzeW5jIHNldFZvdGUoXG4gICAgICBfcGVuZGxlVm90ZTogc3RyaW5nLFxuICAgICAgX3ZlUGVuZGxlSGFydmVzdENhbGxlckZlZTogQmlnTnVtYmVyaXNoLFxuICAgICAgX2hhcnZlc3RDYWxsZXJQZW5kbGVGZWU6IEJpZ051bWJlcmlzaCxcbiAgICAgIF9wcm90b2NvbEZlZTogQmlnTnVtYmVyaXNoLFxuICAgICAgX2ZlZUNvbGxlY3Rvcjogc3RyaW5nLFxuICAgICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzLFxuICAgICAgcHJlcGFyZWREYXRhPzogUHJlcGFyZWREYXRhLFxuICAgICAgZXRoQ2FsbENvbnRleHQ/OiBFdGhDYWxsQ29udGV4dCxcbiAgICApOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLmNvbnRyYWN0XG4gICAgICAgICAgLmdldEZ1bmN0aW9uKFwic2V0Vm90ZShhZGRyZXNzLHVpbnQyNTYsdWludDI1Nix1aW50MjU2LGFkZHJlc3MpXCIpXG4gICAgICAgICAgLnN0YXRpY0NhbGwoXG4gICAgICAgICAgICBfcGVuZGxlVm90ZSxcbiAgICAgICAgICAgIF92ZVBlbmRsZUhhcnZlc3RDYWxsZXJGZWUsXG4gICAgICAgICAgICBfaGFydmVzdENhbGxlclBlbmRsZUZlZSxcbiAgICAgICAgICAgIF9wcm90b2NvbEZlZSxcbiAgICAgICAgICAgIF9mZWVDb2xsZWN0b3IsXG4gICAgICAgICAgICBvdmVycmlkZXMgfHwge30sXG4gICAgICAgICAgKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY29uc3Qgc3RhY2sgPSBuZXcgRXJyb3IoKS5zdGFjaztcbiAgICAgICAgdGhyb3cgdHJhbnNmb3JtRXRoZXJFcnJvcihlLCB1bmRlZmluZWQsIHN0YWNrKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGFzeW5jIHNldFZvdGVNYW5hZ2VyKFxuICAgICAgX3ZvdGVNYW5hZ2VyOiBzdHJpbmcsXG4gICAgICBvdmVycmlkZXM/OiBPdmVycmlkZXMsXG4gICAgICBwcmVwYXJlZERhdGE/OiBQcmVwYXJlZERhdGEsXG4gICAgICBldGhDYWxsQ29udGV4dD86IEV0aENhbGxDb250ZXh0LFxuICAgICk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuY29udHJhY3RcbiAgICAgICAgICAuZ2V0RnVuY3Rpb24oXCJzZXRWb3RlTWFuYWdlcihhZGRyZXNzKVwiKVxuICAgICAgICAgIC5zdGF0aWNDYWxsKF92b3RlTWFuYWdlciwgb3ZlcnJpZGVzIHx8IHt9KTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY29uc3Qgc3RhY2sgPSBuZXcgRXJyb3IoKS5zdGFjaztcbiAgICAgICAgdGhyb3cgdHJhbnNmb3JtRXRoZXJFcnJvcihlLCB1bmRlZmluZWQsIHN0YWNrKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGFzeW5jIHNldG1hc3RlclBlbnBpZShcbiAgICAgIF9tYXN0ZXJQZW5waWU6IHN0cmluZyxcbiAgICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlcyxcbiAgICAgIHByZXBhcmVkRGF0YT86IFByZXBhcmVkRGF0YSxcbiAgICAgIGV0aENhbGxDb250ZXh0PzogRXRoQ2FsbENvbnRleHQsXG4gICAgKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5jb250cmFjdFxuICAgICAgICAgIC5nZXRGdW5jdGlvbihcInNldG1hc3RlclBlbnBpZShhZGRyZXNzKVwiKVxuICAgICAgICAgIC5zdGF0aWNDYWxsKF9tYXN0ZXJQZW5waWUsIG92ZXJyaWRlcyB8fCB7fSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNvbnN0IHN0YWNrID0gbmV3IEVycm9yKCkuc3RhY2s7XG4gICAgICAgIHRocm93IHRyYW5zZm9ybUV0aGVyRXJyb3IoZSwgdW5kZWZpbmVkLCBzdGFjayk7XG4gICAgICB9XG4gICAgfSxcbiAgICBhc3luYyB0cmFuc2Zlck93bmVyc2hpcChcbiAgICAgIG5ld093bmVyOiBzdHJpbmcsXG4gICAgICBvdmVycmlkZXM/OiBPdmVycmlkZXMsXG4gICAgICBwcmVwYXJlZERhdGE/OiBQcmVwYXJlZERhdGEsXG4gICAgICBldGhDYWxsQ29udGV4dD86IEV0aENhbGxDb250ZXh0LFxuICAgICk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuY29udHJhY3RcbiAgICAgICAgICAuZ2V0RnVuY3Rpb24oXCJ0cmFuc2Zlck93bmVyc2hpcChhZGRyZXNzKVwiKVxuICAgICAgICAgIC5zdGF0aWNDYWxsKG5ld093bmVyLCBvdmVycmlkZXMgfHwge30pO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjb25zdCBzdGFjayA9IG5ldyBFcnJvcigpLnN0YWNrO1xuICAgICAgICB0aHJvdyB0cmFuc2Zvcm1FdGhlckVycm9yKGUsIHVuZGVmaW5lZCwgc3RhY2spO1xuICAgICAgfVxuICAgIH0sXG4gICAgYXN5bmMgdW5wYXVzZShcbiAgICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlcyxcbiAgICAgIHByZXBhcmVkRGF0YT86IFByZXBhcmVkRGF0YSxcbiAgICAgIGV0aENhbGxDb250ZXh0PzogRXRoQ2FsbENvbnRleHQsXG4gICAgKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5jb250cmFjdFxuICAgICAgICAgIC5nZXRGdW5jdGlvbihcInVucGF1c2UoKVwiKVxuICAgICAgICAgIC5zdGF0aWNDYWxsKG92ZXJyaWRlcyB8fCB7fSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNvbnN0IHN0YWNrID0gbmV3IEVycm9yKCkuc3RhY2s7XG4gICAgICAgIHRocm93IHRyYW5zZm9ybUV0aGVyRXJyb3IoZSwgdW5kZWZpbmVkLCBzdGFjayk7XG4gICAgICB9XG4gICAgfSxcbiAgICBhc3luYyB1cGRhdGVNYXJrZXRSZXdhcmRzKFxuICAgICAgX21hcmtldDogc3RyaW5nLFxuICAgICAgYW1vdW50czogQmlnTnVtYmVyaXNoW10sXG4gICAgICBvdmVycmlkZXM/OiBPdmVycmlkZXMsXG4gICAgICBwcmVwYXJlZERhdGE/OiBQcmVwYXJlZERhdGEsXG4gICAgICBldGhDYWxsQ29udGV4dD86IEV0aENhbGxDb250ZXh0LFxuICAgICk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuY29udHJhY3RcbiAgICAgICAgICAuZ2V0RnVuY3Rpb24oXCJ1cGRhdGVNYXJrZXRSZXdhcmRzKGFkZHJlc3MsdWludDI1NltdKVwiKVxuICAgICAgICAgIC5zdGF0aWNDYWxsKF9tYXJrZXQsIGFtb3VudHMsIG92ZXJyaWRlcyB8fCB7fSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNvbnN0IHN0YWNrID0gbmV3IEVycm9yKCkuc3RhY2s7XG4gICAgICAgIHRocm93IHRyYW5zZm9ybUV0aGVyRXJyb3IoZSwgdW5kZWZpbmVkLCBzdGFjayk7XG4gICAgICB9XG4gICAgfSxcbiAgICBhc3luYyB1cGRhdGVQb29sSGVscGVyKFxuICAgICAgX21hcmtldDogc3RyaW5nLFxuICAgICAgX2hlbHBlcjogc3RyaW5nLFxuICAgICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzLFxuICAgICAgcHJlcGFyZWREYXRhPzogUHJlcGFyZWREYXRhLFxuICAgICAgZXRoQ2FsbENvbnRleHQ/OiBFdGhDYWxsQ29udGV4dCxcbiAgICApOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLmNvbnRyYWN0XG4gICAgICAgICAgLmdldEZ1bmN0aW9uKFwidXBkYXRlUG9vbEhlbHBlcihhZGRyZXNzLGFkZHJlc3MpXCIpXG4gICAgICAgICAgLnN0YXRpY0NhbGwoX21hcmtldCwgX2hlbHBlciwgb3ZlcnJpZGVzIHx8IHt9KTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY29uc3Qgc3RhY2sgPSBuZXcgRXJyb3IoKS5zdGFjaztcbiAgICAgICAgdGhyb3cgdHJhbnNmb3JtRXRoZXJFcnJvcihlLCB1bmRlZmluZWQsIHN0YWNrKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGFzeW5jIHZvdGUoXG4gICAgICBfcG9vbHM6IHN0cmluZ1tdLFxuICAgICAgX3dlaWdodHM6IEJpZ051bWJlcmlzaFtdLFxuICAgICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzLFxuICAgICAgcHJlcGFyZWREYXRhPzogUHJlcGFyZWREYXRhLFxuICAgICAgZXRoQ2FsbENvbnRleHQ/OiBFdGhDYWxsQ29udGV4dCxcbiAgICApOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLmNvbnRyYWN0XG4gICAgICAgICAgLmdldEZ1bmN0aW9uKFwidm90ZShhZGRyZXNzW10sdWludDY0W10pXCIpXG4gICAgICAgICAgLnN0YXRpY0NhbGwoX3Bvb2xzLCBfd2VpZ2h0cywgb3ZlcnJpZGVzIHx8IHt9KTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY29uc3Qgc3RhY2sgPSBuZXcgRXJyb3IoKS5zdGFjaztcbiAgICAgICAgdGhyb3cgdHJhbnNmb3JtRXRoZXJFcnJvcihlLCB1bmRlZmluZWQsIHN0YWNrKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGFzeW5jIHdpdGhkcmF3TWFya2V0KFxuICAgICAgX21hcmtldDogc3RyaW5nLFxuICAgICAgX2Zvcjogc3RyaW5nLFxuICAgICAgX2Ftb3VudDogQmlnTnVtYmVyaXNoLFxuICAgICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzLFxuICAgICAgcHJlcGFyZWREYXRhPzogUHJlcGFyZWREYXRhLFxuICAgICAgZXRoQ2FsbENvbnRleHQ/OiBFdGhDYWxsQ29udGV4dCxcbiAgICApOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLmNvbnRyYWN0XG4gICAgICAgICAgLmdldEZ1bmN0aW9uKFwid2l0aGRyYXdNYXJrZXQoYWRkcmVzcyxhZGRyZXNzLHVpbnQyNTYpXCIpXG4gICAgICAgICAgLnN0YXRpY0NhbGwoX21hcmtldCwgX2ZvciwgX2Ftb3VudCwgb3ZlcnJpZGVzIHx8IHt9KTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY29uc3Qgc3RhY2sgPSBuZXcgRXJyb3IoKS5zdGFjaztcbiAgICAgICAgdGhyb3cgdHJhbnNmb3JtRXRoZXJFcnJvcihlLCB1bmRlZmluZWQsIHN0YWNrKTtcbiAgICAgIH1cbiAgICB9LFxuICB9O1xuXG4gIGVuY29kZUNhbGwgPSB7XG4gICAgRVRIWmFwcGVyKGNhbGxDb250ZXh0OiBFdGhDYWxsQ29udGV4dCk6IEV0aENhbGxQYXJhbSB7XG4gICAgICByZXR1cm4gZW5jb2RlQ2FsbERhdGEoXG4gICAgICAgIGNhbGxDb250ZXh0LFxuICAgICAgICBcIkVUSFphcHBlclwiLFxuICAgICAgICBcImZ1bmN0aW9uIEVUSFphcHBlcigpXCIsXG4gICAgICAgIFtdLFxuICAgICAgKTtcbiAgICB9LFxuICAgIFBFTkRMRShjYWxsQ29udGV4dDogRXRoQ2FsbENvbnRleHQpOiBFdGhDYWxsUGFyYW0ge1xuICAgICAgcmV0dXJuIGVuY29kZUNhbGxEYXRhKGNhbGxDb250ZXh0LCBcIlBFTkRMRVwiLCBcImZ1bmN0aW9uIFBFTkRMRSgpXCIsIFtdKTtcbiAgICB9LFxuICAgIFdFVEgoY2FsbENvbnRleHQ6IEV0aENhbGxDb250ZXh0KTogRXRoQ2FsbFBhcmFtIHtcbiAgICAgIHJldHVybiBlbmNvZGVDYWxsRGF0YShjYWxsQ29udGV4dCwgXCJXRVRIXCIsIFwiZnVuY3Rpb24gV0VUSCgpXCIsIFtdKTtcbiAgICB9LFxuICAgIF9fUGVuZGxlU3Rha2luZ0Jhc2VVcGdfaW5pdChcbiAgICAgIF9wZW5kbGU6IHN0cmluZyxcbiAgICAgIF9XRVRIOiBzdHJpbmcsXG4gICAgICBfdmVQZW5kbGU6IHN0cmluZyxcbiAgICAgIF9kaXN0cmlidXRvckVUSDogc3RyaW5nLFxuICAgICAgX3BlbmRsZVJvdXRlcjogc3RyaW5nLFxuICAgICAgX21hc3RlclBlbnBpZTogc3RyaW5nLFxuICAgICAgY2FsbENvbnRleHQ6IEV0aENhbGxDb250ZXh0LFxuICAgICk6IEV0aENhbGxQYXJhbSB7XG4gICAgICByZXR1cm4gZW5jb2RlQ2FsbERhdGEoXG4gICAgICAgIGNhbGxDb250ZXh0LFxuICAgICAgICBcIl9fUGVuZGxlU3Rha2luZ0Jhc2VVcGdfaW5pdFwiLFxuICAgICAgICBcImZ1bmN0aW9uIF9fUGVuZGxlU3Rha2luZ0Jhc2VVcGdfaW5pdChhZGRyZXNzLGFkZHJlc3MsYWRkcmVzcyxhZGRyZXNzLGFkZHJlc3MsYWRkcmVzcylcIixcbiAgICAgICAgW1xuICAgICAgICAgIF9wZW5kbGUsXG4gICAgICAgICAgX1dFVEgsXG4gICAgICAgICAgX3ZlUGVuZGxlLFxuICAgICAgICAgIF9kaXN0cmlidXRvckVUSCxcbiAgICAgICAgICBfcGVuZGxlUm91dGVyLFxuICAgICAgICAgIF9tYXN0ZXJQZW5waWUsXG4gICAgICAgIF0sXG4gICAgICApO1xuICAgIH0sXG4gICAgX19QZW5kbGVTdGFraW5nX2luaXQoXG4gICAgICBfcGVuZGxlOiBzdHJpbmcsXG4gICAgICBfV0VUSDogc3RyaW5nLFxuICAgICAgX3ZlUGVuZGxlOiBzdHJpbmcsXG4gICAgICBfZGlzdHJpYnV0b3JFVEg6IHN0cmluZyxcbiAgICAgIF9wZW5kbGVSb3V0ZXI6IHN0cmluZyxcbiAgICAgIF9tYXN0ZXJQZW5waWU6IHN0cmluZyxcbiAgICAgIGNhbGxDb250ZXh0OiBFdGhDYWxsQ29udGV4dCxcbiAgICApOiBFdGhDYWxsUGFyYW0ge1xuICAgICAgcmV0dXJuIGVuY29kZUNhbGxEYXRhKFxuICAgICAgICBjYWxsQ29udGV4dCxcbiAgICAgICAgXCJfX1BlbmRsZVN0YWtpbmdfaW5pdFwiLFxuICAgICAgICBcImZ1bmN0aW9uIF9fUGVuZGxlU3Rha2luZ19pbml0KGFkZHJlc3MsYWRkcmVzcyxhZGRyZXNzLGFkZHJlc3MsYWRkcmVzcyxhZGRyZXNzKVwiLFxuICAgICAgICBbXG4gICAgICAgICAgX3BlbmRsZSxcbiAgICAgICAgICBfV0VUSCxcbiAgICAgICAgICBfdmVQZW5kbGUsXG4gICAgICAgICAgX2Rpc3RyaWJ1dG9yRVRILFxuICAgICAgICAgIF9wZW5kbGVSb3V0ZXIsXG4gICAgICAgICAgX21hc3RlclBlbnBpZSxcbiAgICAgICAgXSxcbiAgICAgICk7XG4gICAgfSxcbiAgICBhY2N1bXVsYXRlZFZlUGVuZGxlKGNhbGxDb250ZXh0OiBFdGhDYWxsQ29udGV4dCk6IEV0aENhbGxQYXJhbSB7XG4gICAgICByZXR1cm4gZW5jb2RlQ2FsbERhdGEoXG4gICAgICAgIGNhbGxDb250ZXh0LFxuICAgICAgICBcImFjY3VtdWxhdGVkVmVQZW5kbGVcIixcbiAgICAgICAgXCJmdW5jdGlvbiBhY2N1bXVsYXRlZFZlUGVuZGxlKClcIixcbiAgICAgICAgW10sXG4gICAgICApO1xuICAgIH0sXG4gICAgYWRkUGVuZGxlRmVlKFxuICAgICAgX3ZhbHVlOiBCaWdOdW1iZXJpc2gsXG4gICAgICBfdG86IHN0cmluZyxcbiAgICAgIF9pc01QRU5ETEU6IGJvb2xlYW4sXG4gICAgICBfaXNBZGRyZXNzOiBib29sZWFuLFxuICAgICAgY2FsbENvbnRleHQ6IEV0aENhbGxDb250ZXh0LFxuICAgICk6IEV0aENhbGxQYXJhbSB7XG4gICAgICByZXR1cm4gZW5jb2RlQ2FsbERhdGEoXG4gICAgICAgIGNhbGxDb250ZXh0LFxuICAgICAgICBcImFkZFBlbmRsZUZlZVwiLFxuICAgICAgICBcImZ1bmN0aW9uIGFkZFBlbmRsZUZlZSh1aW50MjU2LGFkZHJlc3MsYm9vbCxib29sKVwiLFxuICAgICAgICBbX3ZhbHVlLCBfdG8sIF9pc01QRU5ETEUsIF9pc0FkZHJlc3NdLFxuICAgICAgKTtcbiAgICB9LFxuICAgIGF1dG9CcmliZUZlZShjYWxsQ29udGV4dDogRXRoQ2FsbENvbnRleHQpOiBFdGhDYWxsUGFyYW0ge1xuICAgICAgcmV0dXJuIGVuY29kZUNhbGxEYXRhKFxuICAgICAgICBjYWxsQ29udGV4dCxcbiAgICAgICAgXCJhdXRvQnJpYmVGZWVcIixcbiAgICAgICAgXCJmdW5jdGlvbiBhdXRvQnJpYmVGZWUoKVwiLFxuICAgICAgICBbXSxcbiAgICAgICk7XG4gICAgfSxcbiAgICBiYXRjaEhhcnZlc3RNYXJrZXRSZXdhcmRzKFxuICAgICAgX21hcmtldHM6IHN0cmluZ1tdLFxuICAgICAgbWluRXRoVG9SZWNpZXZlOiBCaWdOdW1iZXJpc2gsXG4gICAgICBjYWxsQ29udGV4dDogRXRoQ2FsbENvbnRleHQsXG4gICAgKTogRXRoQ2FsbFBhcmFtIHtcbiAgICAgIHJldHVybiBlbmNvZGVDYWxsRGF0YShcbiAgICAgICAgY2FsbENvbnRleHQsXG4gICAgICAgIFwiYmF0Y2hIYXJ2ZXN0TWFya2V0UmV3YXJkc1wiLFxuICAgICAgICBcImZ1bmN0aW9uIGJhdGNoSGFydmVzdE1hcmtldFJld2FyZHMoYWRkcmVzc1tdLHVpbnQyNTYpXCIsXG4gICAgICAgIFtfbWFya2V0cywgbWluRXRoVG9SZWNpZXZlXSxcbiAgICAgICk7XG4gICAgfSxcbiAgICBib290c3RyYXBWZVBlbmRsZShcbiAgICAgIGNoYWluSWQ6IEJpZ051bWJlcmlzaFtdLFxuICAgICAgY2FsbENvbnRleHQ6IEV0aENhbGxDb250ZXh0LFxuICAgICk6IEV0aENhbGxQYXJhbSB7XG4gICAgICByZXR1cm4gZW5jb2RlQ2FsbERhdGEoXG4gICAgICAgIGNhbGxDb250ZXh0LFxuICAgICAgICBcImJvb3RzdHJhcFZlUGVuZGxlXCIsXG4gICAgICAgIFwiZnVuY3Rpb24gYm9vdHN0cmFwVmVQZW5kbGUodWludDI1NltdKVwiLFxuICAgICAgICBbY2hhaW5JZF0sXG4gICAgICApO1xuICAgIH0sXG4gICAgYnJpYmVNYW5hZ2VyKGNhbGxDb250ZXh0OiBFdGhDYWxsQ29udGV4dCk6IEV0aENhbGxQYXJhbSB7XG4gICAgICByZXR1cm4gZW5jb2RlQ2FsbERhdGEoXG4gICAgICAgIGNhbGxDb250ZXh0LFxuICAgICAgICBcImJyaWJlTWFuYWdlclwiLFxuICAgICAgICBcImZ1bmN0aW9uIGJyaWJlTWFuYWdlcigpXCIsXG4gICAgICAgIFtdLFxuICAgICAgKTtcbiAgICB9LFxuICAgIGJyaWJlTWFuYWdlckVPQShjYWxsQ29udGV4dDogRXRoQ2FsbENvbnRleHQpOiBFdGhDYWxsUGFyYW0ge1xuICAgICAgcmV0dXJuIGVuY29kZUNhbGxEYXRhKFxuICAgICAgICBjYWxsQ29udGV4dCxcbiAgICAgICAgXCJicmliZU1hbmFnZXJFT0FcIixcbiAgICAgICAgXCJmdW5jdGlvbiBicmliZU1hbmFnZXJFT0EoKVwiLFxuICAgICAgICBbXSxcbiAgICAgICk7XG4gICAgfSxcbiAgICBjb252ZXJ0UGVuZGxlKFxuICAgICAgX2Ftb3VudDogQmlnTnVtYmVyaXNoLFxuICAgICAgY2hhaW5JZDogQmlnTnVtYmVyaXNoW10sXG4gICAgICBjYWxsQ29udGV4dDogRXRoQ2FsbENvbnRleHQsXG4gICAgKTogRXRoQ2FsbFBhcmFtIHtcbiAgICAgIHJldHVybiBlbmNvZGVDYWxsRGF0YShcbiAgICAgICAgY2FsbENvbnRleHQsXG4gICAgICAgIFwiY29udmVydFBlbmRsZVwiLFxuICAgICAgICBcImZ1bmN0aW9uIGNvbnZlcnRQZW5kbGUodWludDI1Nix1aW50MjU2W10pXCIsXG4gICAgICAgIFtfYW1vdW50LCBjaGFpbklkXSxcbiAgICAgICk7XG4gICAgfSxcbiAgICBkZXBvc2l0TWFya2V0KFxuICAgICAgX21hcmtldDogc3RyaW5nLFxuICAgICAgX2Zvcjogc3RyaW5nLFxuICAgICAgX2Zyb206IHN0cmluZyxcbiAgICAgIF9hbW91bnQ6IEJpZ051bWJlcmlzaCxcbiAgICAgIGNhbGxDb250ZXh0OiBFdGhDYWxsQ29udGV4dCxcbiAgICApOiBFdGhDYWxsUGFyYW0ge1xuICAgICAgcmV0dXJuIGVuY29kZUNhbGxEYXRhKFxuICAgICAgICBjYWxsQ29udGV4dCxcbiAgICAgICAgXCJkZXBvc2l0TWFya2V0XCIsXG4gICAgICAgIFwiZnVuY3Rpb24gZGVwb3NpdE1hcmtldChhZGRyZXNzLGFkZHJlc3MsYWRkcmVzcyx1aW50MjU2KVwiLFxuICAgICAgICBbX21hcmtldCwgX2ZvciwgX2Zyb20sIF9hbW91bnRdLFxuICAgICAgKTtcbiAgICB9LFxuICAgIGRpc3RyaWJ1dG9yRVRIKGNhbGxDb250ZXh0OiBFdGhDYWxsQ29udGV4dCk6IEV0aENhbGxQYXJhbSB7XG4gICAgICByZXR1cm4gZW5jb2RlQ2FsbERhdGEoXG4gICAgICAgIGNhbGxDb250ZXh0LFxuICAgICAgICBcImRpc3RyaWJ1dG9yRVRIXCIsXG4gICAgICAgIFwiZnVuY3Rpb24gZGlzdHJpYnV0b3JFVEgoKVwiLFxuICAgICAgICBbXSxcbiAgICAgICk7XG4gICAgfSxcbiAgICBmZWVDb2xsZWN0b3IoY2FsbENvbnRleHQ6IEV0aENhbGxDb250ZXh0KTogRXRoQ2FsbFBhcmFtIHtcbiAgICAgIHJldHVybiBlbmNvZGVDYWxsRGF0YShcbiAgICAgICAgY2FsbENvbnRleHQsXG4gICAgICAgIFwiZmVlQ29sbGVjdG9yXCIsXG4gICAgICAgIFwiZnVuY3Rpb24gZmVlQ29sbGVjdG9yKClcIixcbiAgICAgICAgW10sXG4gICAgICApO1xuICAgIH0sXG4gICAgZ2V0UG9vbExlbmd0aChjYWxsQ29udGV4dDogRXRoQ2FsbENvbnRleHQpOiBFdGhDYWxsUGFyYW0ge1xuICAgICAgcmV0dXJuIGVuY29kZUNhbGxEYXRhKFxuICAgICAgICBjYWxsQ29udGV4dCxcbiAgICAgICAgXCJnZXRQb29sTGVuZ3RoXCIsXG4gICAgICAgIFwiZnVuY3Rpb24gZ2V0UG9vbExlbmd0aCgpXCIsXG4gICAgICAgIFtdLFxuICAgICAgKTtcbiAgICB9LFxuICAgIGhhcnZlc3RDYWxsZXJQZW5kbGVGZWUoY2FsbENvbnRleHQ6IEV0aENhbGxDb250ZXh0KTogRXRoQ2FsbFBhcmFtIHtcbiAgICAgIHJldHVybiBlbmNvZGVDYWxsRGF0YShcbiAgICAgICAgY2FsbENvbnRleHQsXG4gICAgICAgIFwiaGFydmVzdENhbGxlclBlbmRsZUZlZVwiLFxuICAgICAgICBcImZ1bmN0aW9uIGhhcnZlc3RDYWxsZXJQZW5kbGVGZWUoKVwiLFxuICAgICAgICBbXSxcbiAgICAgICk7XG4gICAgfSxcbiAgICBoYXJ2ZXN0TWFya2V0UmV3YXJkKFxuICAgICAgX21hcmtldDogc3RyaW5nLFxuICAgICAgX2NhbGxlcjogc3RyaW5nLFxuICAgICAgX21pbkV0aFJlY2l2ZTogQmlnTnVtYmVyaXNoLFxuICAgICAgY2FsbENvbnRleHQ6IEV0aENhbGxDb250ZXh0LFxuICAgICk6IEV0aENhbGxQYXJhbSB7XG4gICAgICByZXR1cm4gZW5jb2RlQ2FsbERhdGEoXG4gICAgICAgIGNhbGxDb250ZXh0LFxuICAgICAgICBcImhhcnZlc3RNYXJrZXRSZXdhcmRcIixcbiAgICAgICAgXCJmdW5jdGlvbiBoYXJ2ZXN0TWFya2V0UmV3YXJkKGFkZHJlc3MsYWRkcmVzcyx1aW50MjU2KVwiLFxuICAgICAgICBbX21hcmtldCwgX2NhbGxlciwgX21pbkV0aFJlY2l2ZV0sXG4gICAgICApO1xuICAgIH0sXG4gICAgaGFydmVzdFRpbWVHYXAoY2FsbENvbnRleHQ6IEV0aENhbGxDb250ZXh0KTogRXRoQ2FsbFBhcmFtIHtcbiAgICAgIHJldHVybiBlbmNvZGVDYWxsRGF0YShcbiAgICAgICAgY2FsbENvbnRleHQsXG4gICAgICAgIFwiaGFydmVzdFRpbWVHYXBcIixcbiAgICAgICAgXCJmdW5jdGlvbiBoYXJ2ZXN0VGltZUdhcCgpXCIsXG4gICAgICAgIFtdLFxuICAgICAgKTtcbiAgICB9LFxuICAgIGhhcnZlc3RWZVBlbmRsZVJld2FyZChcbiAgICAgIF9wb29sczogc3RyaW5nW10sXG4gICAgICBjYWxsQ29udGV4dDogRXRoQ2FsbENvbnRleHQsXG4gICAgKTogRXRoQ2FsbFBhcmFtIHtcbiAgICAgIHJldHVybiBlbmNvZGVDYWxsRGF0YShcbiAgICAgICAgY2FsbENvbnRleHQsXG4gICAgICAgIFwiaGFydmVzdFZlUGVuZGxlUmV3YXJkXCIsXG4gICAgICAgIFwiZnVuY3Rpb24gaGFydmVzdFZlUGVuZGxlUmV3YXJkKGFkZHJlc3NbXSlcIixcbiAgICAgICAgW19wb29sc10sXG4gICAgICApO1xuICAgIH0sXG4gICAgaW5jcmVhc2VMb2NrVGltZShcbiAgICAgIF91bmxvY2tUaW1lOiBCaWdOdW1iZXJpc2gsXG4gICAgICBjYWxsQ29udGV4dDogRXRoQ2FsbENvbnRleHQsXG4gICAgKTogRXRoQ2FsbFBhcmFtIHtcbiAgICAgIHJldHVybiBlbmNvZGVDYWxsRGF0YShcbiAgICAgICAgY2FsbENvbnRleHQsXG4gICAgICAgIFwiaW5jcmVhc2VMb2NrVGltZVwiLFxuICAgICAgICBcImZ1bmN0aW9uIGluY3JlYXNlTG9ja1RpbWUodWludDI1NilcIixcbiAgICAgICAgW191bmxvY2tUaW1lXSxcbiAgICAgICk7XG4gICAgfSxcbiAgICBsb2NrUGVyaW9kKGNhbGxDb250ZXh0OiBFdGhDYWxsQ29udGV4dCk6IEV0aENhbGxQYXJhbSB7XG4gICAgICByZXR1cm4gZW5jb2RlQ2FsbERhdGEoXG4gICAgICAgIGNhbGxDb250ZXh0LFxuICAgICAgICBcImxvY2tQZXJpb2RcIixcbiAgICAgICAgXCJmdW5jdGlvbiBsb2NrUGVyaW9kKClcIixcbiAgICAgICAgW10sXG4gICAgICApO1xuICAgIH0sXG4gICAgbVBlbmRsZUNvbnZlcnRvcihjYWxsQ29udGV4dDogRXRoQ2FsbENvbnRleHQpOiBFdGhDYWxsUGFyYW0ge1xuICAgICAgcmV0dXJuIGVuY29kZUNhbGxEYXRhKFxuICAgICAgICBjYWxsQ29udGV4dCxcbiAgICAgICAgXCJtUGVuZGxlQ29udmVydG9yXCIsXG4gICAgICAgIFwiZnVuY3Rpb24gbVBlbmRsZUNvbnZlcnRvcigpXCIsXG4gICAgICAgIFtdLFxuICAgICAgKTtcbiAgICB9LFxuICAgIG1QZW5kbGVPRlQoY2FsbENvbnRleHQ6IEV0aENhbGxDb250ZXh0KTogRXRoQ2FsbFBhcmFtIHtcbiAgICAgIHJldHVybiBlbmNvZGVDYWxsRGF0YShcbiAgICAgICAgY2FsbENvbnRleHQsXG4gICAgICAgIFwibVBlbmRsZU9GVFwiLFxuICAgICAgICBcImZ1bmN0aW9uIG1QZW5kbGVPRlQoKVwiLFxuICAgICAgICBbXSxcbiAgICAgICk7XG4gICAgfSxcbiAgICBtYXJrZXREZXBvc2l0SGVscGVyKGNhbGxDb250ZXh0OiBFdGhDYWxsQ29udGV4dCk6IEV0aENhbGxQYXJhbSB7XG4gICAgICByZXR1cm4gZW5jb2RlQ2FsbERhdGEoXG4gICAgICAgIGNhbGxDb250ZXh0LFxuICAgICAgICBcIm1hcmtldERlcG9zaXRIZWxwZXJcIixcbiAgICAgICAgXCJmdW5jdGlvbiBtYXJrZXREZXBvc2l0SGVscGVyKClcIixcbiAgICAgICAgW10sXG4gICAgICApO1xuICAgIH0sXG4gICAgbWFzdGVyUGVucGllKGNhbGxDb250ZXh0OiBFdGhDYWxsQ29udGV4dCk6IEV0aENhbGxQYXJhbSB7XG4gICAgICByZXR1cm4gZW5jb2RlQ2FsbERhdGEoXG4gICAgICAgIGNhbGxDb250ZXh0LFxuICAgICAgICBcIm1hc3RlclBlbnBpZVwiLFxuICAgICAgICBcImZ1bmN0aW9uIG1hc3RlclBlbnBpZSgpXCIsXG4gICAgICAgIFtdLFxuICAgICAgKTtcbiAgICB9LFxuICAgIG93bmVyKGNhbGxDb250ZXh0OiBFdGhDYWxsQ29udGV4dCk6IEV0aENhbGxQYXJhbSB7XG4gICAgICByZXR1cm4gZW5jb2RlQ2FsbERhdGEoY2FsbENvbnRleHQsIFwib3duZXJcIiwgXCJmdW5jdGlvbiBvd25lcigpXCIsIFtdKTtcbiAgICB9LFxuICAgIHBhdXNlKGNhbGxDb250ZXh0OiBFdGhDYWxsQ29udGV4dCk6IEV0aENhbGxQYXJhbSB7XG4gICAgICByZXR1cm4gZW5jb2RlQ2FsbERhdGEoY2FsbENvbnRleHQsIFwicGF1c2VcIiwgXCJmdW5jdGlvbiBwYXVzZSgpXCIsIFtdKTtcbiAgICB9LFxuICAgIHBhdXNlZChjYWxsQ29udGV4dDogRXRoQ2FsbENvbnRleHQpOiBFdGhDYWxsUGFyYW0ge1xuICAgICAgcmV0dXJuIGVuY29kZUNhbGxEYXRhKGNhbGxDb250ZXh0LCBcInBhdXNlZFwiLCBcImZ1bmN0aW9uIHBhdXNlZCgpXCIsIFtdKTtcbiAgICB9LFxuICAgIHBlbmRsZUZlZUluZm9zKFxuICAgICAgYXJnMDogQmlnTnVtYmVyaXNoLFxuICAgICAgY2FsbENvbnRleHQ6IEV0aENhbGxDb250ZXh0LFxuICAgICk6IEV0aENhbGxQYXJhbSB7XG4gICAgICByZXR1cm4gZW5jb2RlQ2FsbERhdGEoXG4gICAgICAgIGNhbGxDb250ZXh0LFxuICAgICAgICBcInBlbmRsZUZlZUluZm9zXCIsXG4gICAgICAgIFwiZnVuY3Rpb24gcGVuZGxlRmVlSW5mb3ModWludDI1NilcIixcbiAgICAgICAgW2FyZzBdLFxuICAgICAgKTtcbiAgICB9LFxuICAgIHBlbmRsZVJvdXRlcihjYWxsQ29udGV4dDogRXRoQ2FsbENvbnRleHQpOiBFdGhDYWxsUGFyYW0ge1xuICAgICAgcmV0dXJuIGVuY29kZUNhbGxEYXRhKFxuICAgICAgICBjYWxsQ29udGV4dCxcbiAgICAgICAgXCJwZW5kbGVSb3V0ZXJcIixcbiAgICAgICAgXCJmdW5jdGlvbiBwZW5kbGVSb3V0ZXIoKVwiLFxuICAgICAgICBbXSxcbiAgICAgICk7XG4gICAgfSxcbiAgICBwZW5kbGVWb3RlKGNhbGxDb250ZXh0OiBFdGhDYWxsQ29udGV4dCk6IEV0aENhbGxQYXJhbSB7XG4gICAgICByZXR1cm4gZW5jb2RlQ2FsbERhdGEoXG4gICAgICAgIGNhbGxDb250ZXh0LFxuICAgICAgICBcInBlbmRsZVZvdGVcIixcbiAgICAgICAgXCJmdW5jdGlvbiBwZW5kbGVWb3RlKClcIixcbiAgICAgICAgW10sXG4gICAgICApO1xuICAgIH0sXG4gICAgcG9vbFRva2VuTGlzdChcbiAgICAgIGFyZzA6IEJpZ051bWJlcmlzaCxcbiAgICAgIGNhbGxDb250ZXh0OiBFdGhDYWxsQ29udGV4dCxcbiAgICApOiBFdGhDYWxsUGFyYW0ge1xuICAgICAgcmV0dXJuIGVuY29kZUNhbGxEYXRhKFxuICAgICAgICBjYWxsQ29udGV4dCxcbiAgICAgICAgXCJwb29sVG9rZW5MaXN0XCIsXG4gICAgICAgIFwiZnVuY3Rpb24gcG9vbFRva2VuTGlzdCh1aW50MjU2KVwiLFxuICAgICAgICBbYXJnMF0sXG4gICAgICApO1xuICAgIH0sXG4gICAgcG9vbHMoYXJnMDogc3RyaW5nLCBjYWxsQ29udGV4dDogRXRoQ2FsbENvbnRleHQpOiBFdGhDYWxsUGFyYW0ge1xuICAgICAgcmV0dXJuIGVuY29kZUNhbGxEYXRhKGNhbGxDb250ZXh0LCBcInBvb2xzXCIsIFwiZnVuY3Rpb24gcG9vbHMoYWRkcmVzcylcIiwgW1xuICAgICAgICBhcmcwLFxuICAgICAgXSk7XG4gICAgfSxcbiAgICBwcm90b2NvbEZlZShjYWxsQ29udGV4dDogRXRoQ2FsbENvbnRleHQpOiBFdGhDYWxsUGFyYW0ge1xuICAgICAgcmV0dXJuIGVuY29kZUNhbGxEYXRhKFxuICAgICAgICBjYWxsQ29udGV4dCxcbiAgICAgICAgXCJwcm90b2NvbEZlZVwiLFxuICAgICAgICBcImZ1bmN0aW9uIHByb3RvY29sRmVlKClcIixcbiAgICAgICAgW10sXG4gICAgICApO1xuICAgIH0sXG4gICAgcmVnaXN0ZXJQb29sKFxuICAgICAgX21hcmtldDogc3RyaW5nLFxuICAgICAgX2FsbG9jUG9pbnRzOiBCaWdOdW1iZXJpc2gsXG4gICAgICBuYW1lOiBzdHJpbmcsXG4gICAgICBzeW1ib2w6IHN0cmluZyxcbiAgICAgIGNhbGxDb250ZXh0OiBFdGhDYWxsQ29udGV4dCxcbiAgICApOiBFdGhDYWxsUGFyYW0ge1xuICAgICAgcmV0dXJuIGVuY29kZUNhbGxEYXRhKFxuICAgICAgICBjYWxsQ29udGV4dCxcbiAgICAgICAgXCJyZWdpc3RlclBvb2xcIixcbiAgICAgICAgXCJmdW5jdGlvbiByZWdpc3RlclBvb2woYWRkcmVzcyx1aW50MjU2LHN0cmluZyxzdHJpbmcpXCIsXG4gICAgICAgIFtfbWFya2V0LCBfYWxsb2NQb2ludHMsIG5hbWUsIHN5bWJvbF0sXG4gICAgICApO1xuICAgIH0sXG4gICAgcmVtb3ZlUGVuZGxlRmVlKFxuICAgICAgX2luZGV4OiBCaWdOdW1iZXJpc2gsXG4gICAgICBjYWxsQ29udGV4dDogRXRoQ2FsbENvbnRleHQsXG4gICAgKTogRXRoQ2FsbFBhcmFtIHtcbiAgICAgIHJldHVybiBlbmNvZGVDYWxsRGF0YShcbiAgICAgICAgY2FsbENvbnRleHQsXG4gICAgICAgIFwicmVtb3ZlUGVuZGxlRmVlXCIsXG4gICAgICAgIFwiZnVuY3Rpb24gcmVtb3ZlUGVuZGxlRmVlKHVpbnQyNTYpXCIsXG4gICAgICAgIFtfaW5kZXhdLFxuICAgICAgKTtcbiAgICB9LFxuICAgIHJlbm91bmNlT3duZXJzaGlwKGNhbGxDb250ZXh0OiBFdGhDYWxsQ29udGV4dCk6IEV0aENhbGxQYXJhbSB7XG4gICAgICByZXR1cm4gZW5jb2RlQ2FsbERhdGEoXG4gICAgICAgIGNhbGxDb250ZXh0LFxuICAgICAgICBcInJlbm91bmNlT3duZXJzaGlwXCIsXG4gICAgICAgIFwiZnVuY3Rpb24gcmVub3VuY2VPd25lcnNoaXAoKVwiLFxuICAgICAgICBbXSxcbiAgICAgICk7XG4gICAgfSxcbiAgICBzZXRBdXRvQnJpYmVGZWUoXG4gICAgICBfYXV0b0JyaWJlRmVlOiBCaWdOdW1iZXJpc2gsXG4gICAgICBjYWxsQ29udGV4dDogRXRoQ2FsbENvbnRleHQsXG4gICAgKTogRXRoQ2FsbFBhcmFtIHtcbiAgICAgIHJldHVybiBlbmNvZGVDYWxsRGF0YShcbiAgICAgICAgY2FsbENvbnRleHQsXG4gICAgICAgIFwic2V0QXV0b0JyaWJlRmVlXCIsXG4gICAgICAgIFwiZnVuY3Rpb24gc2V0QXV0b0JyaWJlRmVlKHVpbnQyNTYpXCIsXG4gICAgICAgIFtfYXV0b0JyaWJlRmVlXSxcbiAgICAgICk7XG4gICAgfSxcbiAgICBzZXRCcmliZU1hbmFnZXIoXG4gICAgICBfYnJpYmVNYW5hZ2VyOiBzdHJpbmcsXG4gICAgICBfYnJpYmVNYW5hZ2VyRU9BOiBzdHJpbmcsXG4gICAgICBjYWxsQ29udGV4dDogRXRoQ2FsbENvbnRleHQsXG4gICAgKTogRXRoQ2FsbFBhcmFtIHtcbiAgICAgIHJldHVybiBlbmNvZGVDYWxsRGF0YShcbiAgICAgICAgY2FsbENvbnRleHQsXG4gICAgICAgIFwic2V0QnJpYmVNYW5hZ2VyXCIsXG4gICAgICAgIFwiZnVuY3Rpb24gc2V0QnJpYmVNYW5hZ2VyKGFkZHJlc3MsYWRkcmVzcylcIixcbiAgICAgICAgW19icmliZU1hbmFnZXIsIF9icmliZU1hbmFnZXJFT0FdLFxuICAgICAgKTtcbiAgICB9LFxuICAgIHNldEVUSFphcHBlcihcbiAgICAgIF9FVEhaYXBwZXI6IHN0cmluZyxcbiAgICAgIGNhbGxDb250ZXh0OiBFdGhDYWxsQ29udGV4dCxcbiAgICApOiBFdGhDYWxsUGFyYW0ge1xuICAgICAgcmV0dXJuIGVuY29kZUNhbGxEYXRhKFxuICAgICAgICBjYWxsQ29udGV4dCxcbiAgICAgICAgXCJzZXRFVEhaYXBwZXJcIixcbiAgICAgICAgXCJmdW5jdGlvbiBzZXRFVEhaYXBwZXIoYWRkcmVzcylcIixcbiAgICAgICAgW19FVEhaYXBwZXJdLFxuICAgICAgKTtcbiAgICB9LFxuICAgIHNldEhhcnZlc3RUaW1lR2FwKFxuICAgICAgX3BlcmlvZDogQmlnTnVtYmVyaXNoLFxuICAgICAgY2FsbENvbnRleHQ6IEV0aENhbGxDb250ZXh0LFxuICAgICk6IEV0aENhbGxQYXJhbSB7XG4gICAgICByZXR1cm4gZW5jb2RlQ2FsbERhdGEoXG4gICAgICAgIGNhbGxDb250ZXh0LFxuICAgICAgICBcInNldEhhcnZlc3RUaW1lR2FwXCIsXG4gICAgICAgIFwiZnVuY3Rpb24gc2V0SGFydmVzdFRpbWVHYXAodWludDI1NilcIixcbiAgICAgICAgW19wZXJpb2RdLFxuICAgICAgKTtcbiAgICB9LFxuICAgIHNldExvY2tEYXlzKFxuICAgICAgX25ld0xvY2tQZXJpb2Q6IEJpZ051bWJlcmlzaCxcbiAgICAgIGNhbGxDb250ZXh0OiBFdGhDYWxsQ29udGV4dCxcbiAgICApOiBFdGhDYWxsUGFyYW0ge1xuICAgICAgcmV0dXJuIGVuY29kZUNhbGxEYXRhKFxuICAgICAgICBjYWxsQ29udGV4dCxcbiAgICAgICAgXCJzZXRMb2NrRGF5c1wiLFxuICAgICAgICBcImZ1bmN0aW9uIHNldExvY2tEYXlzKHVpbnQyNTYpXCIsXG4gICAgICAgIFtfbmV3TG9ja1BlcmlvZF0sXG4gICAgICApO1xuICAgIH0sXG4gICAgc2V0TVBlbmRsZUNvbnZlcnRvcihcbiAgICAgIF9tUGVuZGxlQ29udmVydG9yOiBzdHJpbmcsXG4gICAgICBjYWxsQ29udGV4dDogRXRoQ2FsbENvbnRleHQsXG4gICAgKTogRXRoQ2FsbFBhcmFtIHtcbiAgICAgIHJldHVybiBlbmNvZGVDYWxsRGF0YShcbiAgICAgICAgY2FsbENvbnRleHQsXG4gICAgICAgIFwic2V0TVBlbmRsZUNvbnZlcnRvclwiLFxuICAgICAgICBcImZ1bmN0aW9uIHNldE1QZW5kbGVDb252ZXJ0b3IoYWRkcmVzcylcIixcbiAgICAgICAgW19tUGVuZGxlQ29udmVydG9yXSxcbiAgICAgICk7XG4gICAgfSxcbiAgICBzZXRNUGVuZGxlT0ZUKFxuICAgICAgX3NldE1QZW5kbGVPRlQ6IHN0cmluZyxcbiAgICAgIGNhbGxDb250ZXh0OiBFdGhDYWxsQ29udGV4dCxcbiAgICApOiBFdGhDYWxsUGFyYW0ge1xuICAgICAgcmV0dXJuIGVuY29kZUNhbGxEYXRhKFxuICAgICAgICBjYWxsQ29udGV4dCxcbiAgICAgICAgXCJzZXRNUGVuZGxlT0ZUXCIsXG4gICAgICAgIFwiZnVuY3Rpb24gc2V0TVBlbmRsZU9GVChhZGRyZXNzKVwiLFxuICAgICAgICBbX3NldE1QZW5kbGVPRlRdLFxuICAgICAgKTtcbiAgICB9LFxuICAgIHNldE1hcmtldERlcG9zaXRIZWxwZXIoXG4gICAgICBfaGVscGVyOiBzdHJpbmcsXG4gICAgICBjYWxsQ29udGV4dDogRXRoQ2FsbENvbnRleHQsXG4gICAgKTogRXRoQ2FsbFBhcmFtIHtcbiAgICAgIHJldHVybiBlbmNvZGVDYWxsRGF0YShcbiAgICAgICAgY2FsbENvbnRleHQsXG4gICAgICAgIFwic2V0TWFya2V0RGVwb3NpdEhlbHBlclwiLFxuICAgICAgICBcImZ1bmN0aW9uIHNldE1hcmtldERlcG9zaXRIZWxwZXIoYWRkcmVzcylcIixcbiAgICAgICAgW19oZWxwZXJdLFxuICAgICAgKTtcbiAgICB9LFxuICAgIHNldFBlbmRsZUZlZShcbiAgICAgIF9pbmRleDogQmlnTnVtYmVyaXNoLFxuICAgICAgX3ZhbHVlOiBCaWdOdW1iZXJpc2gsXG4gICAgICBfdG86IHN0cmluZyxcbiAgICAgIF9pc01QRU5ETEU6IGJvb2xlYW4sXG4gICAgICBfaXNBZGRyZXNzOiBib29sZWFuLFxuICAgICAgX2lzQWN0aXZlOiBib29sZWFuLFxuICAgICAgY2FsbENvbnRleHQ6IEV0aENhbGxDb250ZXh0LFxuICAgICk6IEV0aENhbGxQYXJhbSB7XG4gICAgICByZXR1cm4gZW5jb2RlQ2FsbERhdGEoXG4gICAgICAgIGNhbGxDb250ZXh0LFxuICAgICAgICBcInNldFBlbmRsZUZlZVwiLFxuICAgICAgICBcImZ1bmN0aW9uIHNldFBlbmRsZUZlZSh1aW50MjU2LHVpbnQyNTYsYWRkcmVzcyxib29sLGJvb2wsYm9vbClcIixcbiAgICAgICAgW19pbmRleCwgX3ZhbHVlLCBfdG8sIF9pc01QRU5ETEUsIF9pc0FkZHJlc3MsIF9pc0FjdGl2ZV0sXG4gICAgICApO1xuICAgIH0sXG4gICAgc2V0U21hcnRDb252ZXJ0KFxuICAgICAgX3NtYXJ0UGVuZGxlQ29udmVydDogc3RyaW5nLFxuICAgICAgY2FsbENvbnRleHQ6IEV0aENhbGxDb250ZXh0LFxuICAgICk6IEV0aENhbGxQYXJhbSB7XG4gICAgICByZXR1cm4gZW5jb2RlQ2FsbERhdGEoXG4gICAgICAgIGNhbGxDb250ZXh0LFxuICAgICAgICBcInNldFNtYXJ0Q29udmVydFwiLFxuICAgICAgICBcImZ1bmN0aW9uIHNldFNtYXJ0Q29udmVydChhZGRyZXNzKVwiLFxuICAgICAgICBbX3NtYXJ0UGVuZGxlQ29udmVydF0sXG4gICAgICApO1xuICAgIH0sXG4gICAgc2V0Vm90ZShcbiAgICAgIF9wZW5kbGVWb3RlOiBzdHJpbmcsXG4gICAgICBfdmVQZW5kbGVIYXJ2ZXN0Q2FsbGVyRmVlOiBCaWdOdW1iZXJpc2gsXG4gICAgICBfaGFydmVzdENhbGxlclBlbmRsZUZlZTogQmlnTnVtYmVyaXNoLFxuICAgICAgX3Byb3RvY29sRmVlOiBCaWdOdW1iZXJpc2gsXG4gICAgICBfZmVlQ29sbGVjdG9yOiBzdHJpbmcsXG4gICAgICBjYWxsQ29udGV4dDogRXRoQ2FsbENvbnRleHQsXG4gICAgKTogRXRoQ2FsbFBhcmFtIHtcbiAgICAgIHJldHVybiBlbmNvZGVDYWxsRGF0YShcbiAgICAgICAgY2FsbENvbnRleHQsXG4gICAgICAgIFwic2V0Vm90ZVwiLFxuICAgICAgICBcImZ1bmN0aW9uIHNldFZvdGUoYWRkcmVzcyx1aW50MjU2LHVpbnQyNTYsdWludDI1NixhZGRyZXNzKVwiLFxuICAgICAgICBbXG4gICAgICAgICAgX3BlbmRsZVZvdGUsXG4gICAgICAgICAgX3ZlUGVuZGxlSGFydmVzdENhbGxlckZlZSxcbiAgICAgICAgICBfaGFydmVzdENhbGxlclBlbmRsZUZlZSxcbiAgICAgICAgICBfcHJvdG9jb2xGZWUsXG4gICAgICAgICAgX2ZlZUNvbGxlY3RvcixcbiAgICAgICAgXSxcbiAgICAgICk7XG4gICAgfSxcbiAgICBzZXRWb3RlTWFuYWdlcihcbiAgICAgIF92b3RlTWFuYWdlcjogc3RyaW5nLFxuICAgICAgY2FsbENvbnRleHQ6IEV0aENhbGxDb250ZXh0LFxuICAgICk6IEV0aENhbGxQYXJhbSB7XG4gICAgICByZXR1cm4gZW5jb2RlQ2FsbERhdGEoXG4gICAgICAgIGNhbGxDb250ZXh0LFxuICAgICAgICBcInNldFZvdGVNYW5hZ2VyXCIsXG4gICAgICAgIFwiZnVuY3Rpb24gc2V0Vm90ZU1hbmFnZXIoYWRkcmVzcylcIixcbiAgICAgICAgW192b3RlTWFuYWdlcl0sXG4gICAgICApO1xuICAgIH0sXG4gICAgc2V0bWFzdGVyUGVucGllKFxuICAgICAgX21hc3RlclBlbnBpZTogc3RyaW5nLFxuICAgICAgY2FsbENvbnRleHQ6IEV0aENhbGxDb250ZXh0LFxuICAgICk6IEV0aENhbGxQYXJhbSB7XG4gICAgICByZXR1cm4gZW5jb2RlQ2FsbERhdGEoXG4gICAgICAgIGNhbGxDb250ZXh0LFxuICAgICAgICBcInNldG1hc3RlclBlbnBpZVwiLFxuICAgICAgICBcImZ1bmN0aW9uIHNldG1hc3RlclBlbnBpZShhZGRyZXNzKVwiLFxuICAgICAgICBbX21hc3RlclBlbnBpZV0sXG4gICAgICApO1xuICAgIH0sXG4gICAgc21hcnRQZW5kbGVDb252ZXJ0KGNhbGxDb250ZXh0OiBFdGhDYWxsQ29udGV4dCk6IEV0aENhbGxQYXJhbSB7XG4gICAgICByZXR1cm4gZW5jb2RlQ2FsbERhdGEoXG4gICAgICAgIGNhbGxDb250ZXh0LFxuICAgICAgICBcInNtYXJ0UGVuZGxlQ29udmVydFwiLFxuICAgICAgICBcImZ1bmN0aW9uIHNtYXJ0UGVuZGxlQ29udmVydCgpXCIsXG4gICAgICAgIFtdLFxuICAgICAgKTtcbiAgICB9LFxuICAgIHRvdGFsUGVuZGxlRmVlKGNhbGxDb250ZXh0OiBFdGhDYWxsQ29udGV4dCk6IEV0aENhbGxQYXJhbSB7XG4gICAgICByZXR1cm4gZW5jb2RlQ2FsbERhdGEoXG4gICAgICAgIGNhbGxDb250ZXh0LFxuICAgICAgICBcInRvdGFsUGVuZGxlRmVlXCIsXG4gICAgICAgIFwiZnVuY3Rpb24gdG90YWxQZW5kbGVGZWUoKVwiLFxuICAgICAgICBbXSxcbiAgICAgICk7XG4gICAgfSxcbiAgICB0b3RhbFVuY2xhaW1lZEVUSChjYWxsQ29udGV4dDogRXRoQ2FsbENvbnRleHQpOiBFdGhDYWxsUGFyYW0ge1xuICAgICAgcmV0dXJuIGVuY29kZUNhbGxEYXRhKFxuICAgICAgICBjYWxsQ29udGV4dCxcbiAgICAgICAgXCJ0b3RhbFVuY2xhaW1lZEVUSFwiLFxuICAgICAgICBcImZ1bmN0aW9uIHRvdGFsVW5jbGFpbWVkRVRIKClcIixcbiAgICAgICAgW10sXG4gICAgICApO1xuICAgIH0sXG4gICAgdHJhbnNmZXJPd25lcnNoaXAoXG4gICAgICBuZXdPd25lcjogc3RyaW5nLFxuICAgICAgY2FsbENvbnRleHQ6IEV0aENhbGxDb250ZXh0LFxuICAgICk6IEV0aENhbGxQYXJhbSB7XG4gICAgICByZXR1cm4gZW5jb2RlQ2FsbERhdGEoXG4gICAgICAgIGNhbGxDb250ZXh0LFxuICAgICAgICBcInRyYW5zZmVyT3duZXJzaGlwXCIsXG4gICAgICAgIFwiZnVuY3Rpb24gdHJhbnNmZXJPd25lcnNoaXAoYWRkcmVzcylcIixcbiAgICAgICAgW25ld093bmVyXSxcbiAgICAgICk7XG4gICAgfSxcbiAgICB1bnBhdXNlKGNhbGxDb250ZXh0OiBFdGhDYWxsQ29udGV4dCk6IEV0aENhbGxQYXJhbSB7XG4gICAgICByZXR1cm4gZW5jb2RlQ2FsbERhdGEoY2FsbENvbnRleHQsIFwidW5wYXVzZVwiLCBcImZ1bmN0aW9uIHVucGF1c2UoKVwiLCBbXSk7XG4gICAgfSxcbiAgICB1cGRhdGVNYXJrZXRSZXdhcmRzKFxuICAgICAgX21hcmtldDogc3RyaW5nLFxuICAgICAgYW1vdW50czogQmlnTnVtYmVyaXNoW10sXG4gICAgICBjYWxsQ29udGV4dDogRXRoQ2FsbENvbnRleHQsXG4gICAgKTogRXRoQ2FsbFBhcmFtIHtcbiAgICAgIHJldHVybiBlbmNvZGVDYWxsRGF0YShcbiAgICAgICAgY2FsbENvbnRleHQsXG4gICAgICAgIFwidXBkYXRlTWFya2V0UmV3YXJkc1wiLFxuICAgICAgICBcImZ1bmN0aW9uIHVwZGF0ZU1hcmtldFJld2FyZHMoYWRkcmVzcyx1aW50MjU2W10pXCIsXG4gICAgICAgIFtfbWFya2V0LCBhbW91bnRzXSxcbiAgICAgICk7XG4gICAgfSxcbiAgICB1cGRhdGVQb29sSGVscGVyKFxuICAgICAgX21hcmtldDogc3RyaW5nLFxuICAgICAgX2hlbHBlcjogc3RyaW5nLFxuICAgICAgY2FsbENvbnRleHQ6IEV0aENhbGxDb250ZXh0LFxuICAgICk6IEV0aENhbGxQYXJhbSB7XG4gICAgICByZXR1cm4gZW5jb2RlQ2FsbERhdGEoXG4gICAgICAgIGNhbGxDb250ZXh0LFxuICAgICAgICBcInVwZGF0ZVBvb2xIZWxwZXJcIixcbiAgICAgICAgXCJmdW5jdGlvbiB1cGRhdGVQb29sSGVscGVyKGFkZHJlc3MsYWRkcmVzcylcIixcbiAgICAgICAgW19tYXJrZXQsIF9oZWxwZXJdLFxuICAgICAgKTtcbiAgICB9LFxuICAgIHZlUGVuZGxlKGNhbGxDb250ZXh0OiBFdGhDYWxsQ29udGV4dCk6IEV0aENhbGxQYXJhbSB7XG4gICAgICByZXR1cm4gZW5jb2RlQ2FsbERhdGEoY2FsbENvbnRleHQsIFwidmVQZW5kbGVcIiwgXCJmdW5jdGlvbiB2ZVBlbmRsZSgpXCIsIFtdKTtcbiAgICB9LFxuICAgIHZlUGVuZGxlSGFydmVzdENhbGxlckZlZShjYWxsQ29udGV4dDogRXRoQ2FsbENvbnRleHQpOiBFdGhDYWxsUGFyYW0ge1xuICAgICAgcmV0dXJuIGVuY29kZUNhbGxEYXRhKFxuICAgICAgICBjYWxsQ29udGV4dCxcbiAgICAgICAgXCJ2ZVBlbmRsZUhhcnZlc3RDYWxsZXJGZWVcIixcbiAgICAgICAgXCJmdW5jdGlvbiB2ZVBlbmRsZUhhcnZlc3RDYWxsZXJGZWUoKVwiLFxuICAgICAgICBbXSxcbiAgICAgICk7XG4gICAgfSxcbiAgICB2b3RlKFxuICAgICAgX3Bvb2xzOiBzdHJpbmdbXSxcbiAgICAgIF93ZWlnaHRzOiBCaWdOdW1iZXJpc2hbXSxcbiAgICAgIGNhbGxDb250ZXh0OiBFdGhDYWxsQ29udGV4dCxcbiAgICApOiBFdGhDYWxsUGFyYW0ge1xuICAgICAgcmV0dXJuIGVuY29kZUNhbGxEYXRhKFxuICAgICAgICBjYWxsQ29udGV4dCxcbiAgICAgICAgXCJ2b3RlXCIsXG4gICAgICAgIFwiZnVuY3Rpb24gdm90ZShhZGRyZXNzW10sdWludDY0W10pXCIsXG4gICAgICAgIFtfcG9vbHMsIF93ZWlnaHRzXSxcbiAgICAgICk7XG4gICAgfSxcbiAgICB2b3RlTWFuYWdlcihjYWxsQ29udGV4dDogRXRoQ2FsbENvbnRleHQpOiBFdGhDYWxsUGFyYW0ge1xuICAgICAgcmV0dXJuIGVuY29kZUNhbGxEYXRhKFxuICAgICAgICBjYWxsQ29udGV4dCxcbiAgICAgICAgXCJ2b3RlTWFuYWdlclwiLFxuICAgICAgICBcImZ1bmN0aW9uIHZvdGVNYW5hZ2VyKClcIixcbiAgICAgICAgW10sXG4gICAgICApO1xuICAgIH0sXG4gICAgd2l0aGRyYXdNYXJrZXQoXG4gICAgICBfbWFya2V0OiBzdHJpbmcsXG4gICAgICBfZm9yOiBzdHJpbmcsXG4gICAgICBfYW1vdW50OiBCaWdOdW1iZXJpc2gsXG4gICAgICBjYWxsQ29udGV4dDogRXRoQ2FsbENvbnRleHQsXG4gICAgKTogRXRoQ2FsbFBhcmFtIHtcbiAgICAgIHJldHVybiBlbmNvZGVDYWxsRGF0YShcbiAgICAgICAgY2FsbENvbnRleHQsXG4gICAgICAgIFwid2l0aGRyYXdNYXJrZXRcIixcbiAgICAgICAgXCJmdW5jdGlvbiB3aXRoZHJhd01hcmtldChhZGRyZXNzLGFkZHJlc3MsdWludDI1NilcIixcbiAgICAgICAgW19tYXJrZXQsIF9mb3IsIF9hbW91bnRdLFxuICAgICAgKTtcbiAgICB9LFxuICB9O1xufVxuXG5leHBvcnQgY2xhc3MgUGVucGllU3Rha2luZ0JvdW5kQ29udHJhY3RWaWV3IGV4dGVuZHMgQm91bmRDb250cmFjdFZpZXc8XG4gIFBlbnBpZVN0YWtpbmcsXG4gIFBlbnBpZVN0YWtpbmdDb250cmFjdFZpZXdcbj4ge1xuICBhc3luYyBFVEhaYXBwZXIob3ZlcnJpZGVzPzogT3ZlcnJpZGVzKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy52aWV3LkVUSFphcHBlcihcbiAgICAgIHtcbiAgICAgICAgYmxvY2tUYWc6IHRoaXMuY29udGV4dC5ibG9ja051bWJlcixcbiAgICAgICAgLi4ub3ZlcnJpZGVzLFxuICAgICAgfSxcbiAgICAgIHRoaXMuY29udGV4dC5wcmVwYXJlZERhdGEsXG4gICAgICB0aGlzLmNvbnRleHQuZ2V0RXRoQ2FsbENvbnRleHQoKSxcbiAgICApO1xuICB9XG5cbiAgYXN5bmMgUEVORExFKG92ZXJyaWRlcz86IE92ZXJyaWRlcyk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMudmlldy5QRU5ETEUoXG4gICAgICB7XG4gICAgICAgIGJsb2NrVGFnOiB0aGlzLmNvbnRleHQuYmxvY2tOdW1iZXIsXG4gICAgICAgIC4uLm92ZXJyaWRlcyxcbiAgICAgIH0sXG4gICAgICB0aGlzLmNvbnRleHQucHJlcGFyZWREYXRhLFxuICAgICAgdGhpcy5jb250ZXh0LmdldEV0aENhbGxDb250ZXh0KCksXG4gICAgKTtcbiAgfVxuXG4gIGFzeW5jIFdFVEgob3ZlcnJpZGVzPzogT3ZlcnJpZGVzKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy52aWV3LldFVEgoXG4gICAgICB7XG4gICAgICAgIGJsb2NrVGFnOiB0aGlzLmNvbnRleHQuYmxvY2tOdW1iZXIsXG4gICAgICAgIC4uLm92ZXJyaWRlcyxcbiAgICAgIH0sXG4gICAgICB0aGlzLmNvbnRleHQucHJlcGFyZWREYXRhLFxuICAgICAgdGhpcy5jb250ZXh0LmdldEV0aENhbGxDb250ZXh0KCksXG4gICAgKTtcbiAgfVxuXG4gIGFzeW5jIGFjY3VtdWxhdGVkVmVQZW5kbGUob3ZlcnJpZGVzPzogT3ZlcnJpZGVzKTogUHJvbWlzZTxiaWdpbnQ+IHtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy52aWV3LmFjY3VtdWxhdGVkVmVQZW5kbGUoXG4gICAgICB7XG4gICAgICAgIGJsb2NrVGFnOiB0aGlzLmNvbnRleHQuYmxvY2tOdW1iZXIsXG4gICAgICAgIC4uLm92ZXJyaWRlcyxcbiAgICAgIH0sXG4gICAgICB0aGlzLmNvbnRleHQucHJlcGFyZWREYXRhLFxuICAgICAgdGhpcy5jb250ZXh0LmdldEV0aENhbGxDb250ZXh0KCksXG4gICAgKTtcbiAgfVxuXG4gIGFzeW5jIGF1dG9CcmliZUZlZShvdmVycmlkZXM/OiBPdmVycmlkZXMpOiBQcm9taXNlPGJpZ2ludD4ge1xuICAgIHJldHVybiBhd2FpdCB0aGlzLnZpZXcuYXV0b0JyaWJlRmVlKFxuICAgICAge1xuICAgICAgICBibG9ja1RhZzogdGhpcy5jb250ZXh0LmJsb2NrTnVtYmVyLFxuICAgICAgICAuLi5vdmVycmlkZXMsXG4gICAgICB9LFxuICAgICAgdGhpcy5jb250ZXh0LnByZXBhcmVkRGF0YSxcbiAgICAgIHRoaXMuY29udGV4dC5nZXRFdGhDYWxsQ29udGV4dCgpLFxuICAgICk7XG4gIH1cblxuICBhc3luYyBicmliZU1hbmFnZXIob3ZlcnJpZGVzPzogT3ZlcnJpZGVzKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy52aWV3LmJyaWJlTWFuYWdlcihcbiAgICAgIHtcbiAgICAgICAgYmxvY2tUYWc6IHRoaXMuY29udGV4dC5ibG9ja051bWJlcixcbiAgICAgICAgLi4ub3ZlcnJpZGVzLFxuICAgICAgfSxcbiAgICAgIHRoaXMuY29udGV4dC5wcmVwYXJlZERhdGEsXG4gICAgICB0aGlzLmNvbnRleHQuZ2V0RXRoQ2FsbENvbnRleHQoKSxcbiAgICApO1xuICB9XG5cbiAgYXN5bmMgYnJpYmVNYW5hZ2VyRU9BKG92ZXJyaWRlcz86IE92ZXJyaWRlcyk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMudmlldy5icmliZU1hbmFnZXJFT0EoXG4gICAgICB7XG4gICAgICAgIGJsb2NrVGFnOiB0aGlzLmNvbnRleHQuYmxvY2tOdW1iZXIsXG4gICAgICAgIC4uLm92ZXJyaWRlcyxcbiAgICAgIH0sXG4gICAgICB0aGlzLmNvbnRleHQucHJlcGFyZWREYXRhLFxuICAgICAgdGhpcy5jb250ZXh0LmdldEV0aENhbGxDb250ZXh0KCksXG4gICAgKTtcbiAgfVxuXG4gIGFzeW5jIGRpc3RyaWJ1dG9yRVRIKG92ZXJyaWRlcz86IE92ZXJyaWRlcyk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMudmlldy5kaXN0cmlidXRvckVUSChcbiAgICAgIHtcbiAgICAgICAgYmxvY2tUYWc6IHRoaXMuY29udGV4dC5ibG9ja051bWJlcixcbiAgICAgICAgLi4ub3ZlcnJpZGVzLFxuICAgICAgfSxcbiAgICAgIHRoaXMuY29udGV4dC5wcmVwYXJlZERhdGEsXG4gICAgICB0aGlzLmNvbnRleHQuZ2V0RXRoQ2FsbENvbnRleHQoKSxcbiAgICApO1xuICB9XG5cbiAgYXN5bmMgZmVlQ29sbGVjdG9yKG92ZXJyaWRlcz86IE92ZXJyaWRlcyk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMudmlldy5mZWVDb2xsZWN0b3IoXG4gICAgICB7XG4gICAgICAgIGJsb2NrVGFnOiB0aGlzLmNvbnRleHQuYmxvY2tOdW1iZXIsXG4gICAgICAgIC4uLm92ZXJyaWRlcyxcbiAgICAgIH0sXG4gICAgICB0aGlzLmNvbnRleHQucHJlcGFyZWREYXRhLFxuICAgICAgdGhpcy5jb250ZXh0LmdldEV0aENhbGxDb250ZXh0KCksXG4gICAgKTtcbiAgfVxuXG4gIGFzeW5jIGdldFBvb2xMZW5ndGgob3ZlcnJpZGVzPzogT3ZlcnJpZGVzKTogUHJvbWlzZTxiaWdpbnQ+IHtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy52aWV3LmdldFBvb2xMZW5ndGgoXG4gICAgICB7XG4gICAgICAgIGJsb2NrVGFnOiB0aGlzLmNvbnRleHQuYmxvY2tOdW1iZXIsXG4gICAgICAgIC4uLm92ZXJyaWRlcyxcbiAgICAgIH0sXG4gICAgICB0aGlzLmNvbnRleHQucHJlcGFyZWREYXRhLFxuICAgICAgdGhpcy5jb250ZXh0LmdldEV0aENhbGxDb250ZXh0KCksXG4gICAgKTtcbiAgfVxuXG4gIGFzeW5jIGhhcnZlc3RDYWxsZXJQZW5kbGVGZWUob3ZlcnJpZGVzPzogT3ZlcnJpZGVzKTogUHJvbWlzZTxiaWdpbnQ+IHtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy52aWV3LmhhcnZlc3RDYWxsZXJQZW5kbGVGZWUoXG4gICAgICB7XG4gICAgICAgIGJsb2NrVGFnOiB0aGlzLmNvbnRleHQuYmxvY2tOdW1iZXIsXG4gICAgICAgIC4uLm92ZXJyaWRlcyxcbiAgICAgIH0sXG4gICAgICB0aGlzLmNvbnRleHQucHJlcGFyZWREYXRhLFxuICAgICAgdGhpcy5jb250ZXh0LmdldEV0aENhbGxDb250ZXh0KCksXG4gICAgKTtcbiAgfVxuXG4gIGFzeW5jIGhhcnZlc3RUaW1lR2FwKG92ZXJyaWRlcz86IE92ZXJyaWRlcyk6IFByb21pc2U8YmlnaW50PiB7XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMudmlldy5oYXJ2ZXN0VGltZUdhcChcbiAgICAgIHtcbiAgICAgICAgYmxvY2tUYWc6IHRoaXMuY29udGV4dC5ibG9ja051bWJlcixcbiAgICAgICAgLi4ub3ZlcnJpZGVzLFxuICAgICAgfSxcbiAgICAgIHRoaXMuY29udGV4dC5wcmVwYXJlZERhdGEsXG4gICAgICB0aGlzLmNvbnRleHQuZ2V0RXRoQ2FsbENvbnRleHQoKSxcbiAgICApO1xuICB9XG5cbiAgYXN5bmMgbG9ja1BlcmlvZChvdmVycmlkZXM/OiBPdmVycmlkZXMpOiBQcm9taXNlPGJpZ2ludD4ge1xuICAgIHJldHVybiBhd2FpdCB0aGlzLnZpZXcubG9ja1BlcmlvZChcbiAgICAgIHtcbiAgICAgICAgYmxvY2tUYWc6IHRoaXMuY29udGV4dC5ibG9ja051bWJlcixcbiAgICAgICAgLi4ub3ZlcnJpZGVzLFxuICAgICAgfSxcbiAgICAgIHRoaXMuY29udGV4dC5wcmVwYXJlZERhdGEsXG4gICAgICB0aGlzLmNvbnRleHQuZ2V0RXRoQ2FsbENvbnRleHQoKSxcbiAgICApO1xuICB9XG5cbiAgYXN5bmMgbVBlbmRsZUNvbnZlcnRvcihvdmVycmlkZXM/OiBPdmVycmlkZXMpOiBQcm9taXNlPHN0cmluZz4ge1xuICAgIHJldHVybiBhd2FpdCB0aGlzLnZpZXcubVBlbmRsZUNvbnZlcnRvcihcbiAgICAgIHtcbiAgICAgICAgYmxvY2tUYWc6IHRoaXMuY29udGV4dC5ibG9ja051bWJlcixcbiAgICAgICAgLi4ub3ZlcnJpZGVzLFxuICAgICAgfSxcbiAgICAgIHRoaXMuY29udGV4dC5wcmVwYXJlZERhdGEsXG4gICAgICB0aGlzLmNvbnRleHQuZ2V0RXRoQ2FsbENvbnRleHQoKSxcbiAgICApO1xuICB9XG5cbiAgYXN5bmMgbVBlbmRsZU9GVChvdmVycmlkZXM/OiBPdmVycmlkZXMpOiBQcm9taXNlPHN0cmluZz4ge1xuICAgIHJldHVybiBhd2FpdCB0aGlzLnZpZXcubVBlbmRsZU9GVChcbiAgICAgIHtcbiAgICAgICAgYmxvY2tUYWc6IHRoaXMuY29udGV4dC5ibG9ja051bWJlcixcbiAgICAgICAgLi4ub3ZlcnJpZGVzLFxuICAgICAgfSxcbiAgICAgIHRoaXMuY29udGV4dC5wcmVwYXJlZERhdGEsXG4gICAgICB0aGlzLmNvbnRleHQuZ2V0RXRoQ2FsbENvbnRleHQoKSxcbiAgICApO1xuICB9XG5cbiAgYXN5bmMgbWFya2V0RGVwb3NpdEhlbHBlcihvdmVycmlkZXM/OiBPdmVycmlkZXMpOiBQcm9taXNlPHN0cmluZz4ge1xuICAgIHJldHVybiBhd2FpdCB0aGlzLnZpZXcubWFya2V0RGVwb3NpdEhlbHBlcihcbiAgICAgIHtcbiAgICAgICAgYmxvY2tUYWc6IHRoaXMuY29udGV4dC5ibG9ja051bWJlcixcbiAgICAgICAgLi4ub3ZlcnJpZGVzLFxuICAgICAgfSxcbiAgICAgIHRoaXMuY29udGV4dC5wcmVwYXJlZERhdGEsXG4gICAgICB0aGlzLmNvbnRleHQuZ2V0RXRoQ2FsbENvbnRleHQoKSxcbiAgICApO1xuICB9XG5cbiAgYXN5bmMgbWFzdGVyUGVucGllKG92ZXJyaWRlcz86IE92ZXJyaWRlcyk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMudmlldy5tYXN0ZXJQZW5waWUoXG4gICAgICB7XG4gICAgICAgIGJsb2NrVGFnOiB0aGlzLmNvbnRleHQuYmxvY2tOdW1iZXIsXG4gICAgICAgIC4uLm92ZXJyaWRlcyxcbiAgICAgIH0sXG4gICAgICB0aGlzLmNvbnRleHQucHJlcGFyZWREYXRhLFxuICAgICAgdGhpcy5jb250ZXh0LmdldEV0aENhbGxDb250ZXh0KCksXG4gICAgKTtcbiAgfVxuXG4gIGFzeW5jIG93bmVyKG92ZXJyaWRlcz86IE92ZXJyaWRlcyk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMudmlldy5vd25lcihcbiAgICAgIHtcbiAgICAgICAgYmxvY2tUYWc6IHRoaXMuY29udGV4dC5ibG9ja051bWJlcixcbiAgICAgICAgLi4ub3ZlcnJpZGVzLFxuICAgICAgfSxcbiAgICAgIHRoaXMuY29udGV4dC5wcmVwYXJlZERhdGEsXG4gICAgICB0aGlzLmNvbnRleHQuZ2V0RXRoQ2FsbENvbnRleHQoKSxcbiAgICApO1xuICB9XG5cbiAgYXN5bmMgcGF1c2VkKG92ZXJyaWRlcz86IE92ZXJyaWRlcyk6IFByb21pc2U8Ym9vbGVhbj4ge1xuICAgIHJldHVybiBhd2FpdCB0aGlzLnZpZXcucGF1c2VkKFxuICAgICAge1xuICAgICAgICBibG9ja1RhZzogdGhpcy5jb250ZXh0LmJsb2NrTnVtYmVyLFxuICAgICAgICAuLi5vdmVycmlkZXMsXG4gICAgICB9LFxuICAgICAgdGhpcy5jb250ZXh0LnByZXBhcmVkRGF0YSxcbiAgICAgIHRoaXMuY29udGV4dC5nZXRFdGhDYWxsQ29udGV4dCgpLFxuICAgICk7XG4gIH1cblxuICBhc3luYyBwZW5kbGVGZWVJbmZvcyhcbiAgICBhcmcwOiBCaWdOdW1iZXJpc2gsXG4gICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzLFxuICApOiBQcm9taXNlPFxuICAgIFtiaWdpbnQsIHN0cmluZywgYm9vbGVhbiwgYm9vbGVhbiwgYm9vbGVhbl0gJiB7XG4gICAgICB2YWx1ZTogYmlnaW50O1xuICAgICAgdG86IHN0cmluZztcbiAgICAgIGlzTVBFTkRMRTogYm9vbGVhbjtcbiAgICAgIGlzQWRkcmVzczogYm9vbGVhbjtcbiAgICAgIGlzQWN0aXZlOiBib29sZWFuO1xuICAgIH1cbiAgPiB7XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMudmlldy5wZW5kbGVGZWVJbmZvcyhcbiAgICAgIGFyZzAsXG4gICAgICB7XG4gICAgICAgIGJsb2NrVGFnOiB0aGlzLmNvbnRleHQuYmxvY2tOdW1iZXIsXG4gICAgICAgIC4uLm92ZXJyaWRlcyxcbiAgICAgIH0sXG4gICAgICB0aGlzLmNvbnRleHQucHJlcGFyZWREYXRhLFxuICAgICAgdGhpcy5jb250ZXh0LmdldEV0aENhbGxDb250ZXh0KCksXG4gICAgKTtcbiAgfVxuXG4gIGFzeW5jIHBlbmRsZVJvdXRlcihvdmVycmlkZXM/OiBPdmVycmlkZXMpOiBQcm9taXNlPHN0cmluZz4ge1xuICAgIHJldHVybiBhd2FpdCB0aGlzLnZpZXcucGVuZGxlUm91dGVyKFxuICAgICAge1xuICAgICAgICBibG9ja1RhZzogdGhpcy5jb250ZXh0LmJsb2NrTnVtYmVyLFxuICAgICAgICAuLi5vdmVycmlkZXMsXG4gICAgICB9LFxuICAgICAgdGhpcy5jb250ZXh0LnByZXBhcmVkRGF0YSxcbiAgICAgIHRoaXMuY29udGV4dC5nZXRFdGhDYWxsQ29udGV4dCgpLFxuICAgICk7XG4gIH1cblxuICBhc3luYyBwZW5kbGVWb3RlKG92ZXJyaWRlcz86IE92ZXJyaWRlcyk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMudmlldy5wZW5kbGVWb3RlKFxuICAgICAge1xuICAgICAgICBibG9ja1RhZzogdGhpcy5jb250ZXh0LmJsb2NrTnVtYmVyLFxuICAgICAgICAuLi5vdmVycmlkZXMsXG4gICAgICB9LFxuICAgICAgdGhpcy5jb250ZXh0LnByZXBhcmVkRGF0YSxcbiAgICAgIHRoaXMuY29udGV4dC5nZXRFdGhDYWxsQ29udGV4dCgpLFxuICAgICk7XG4gIH1cblxuICBhc3luYyBwb29sVG9rZW5MaXN0KFxuICAgIGFyZzA6IEJpZ051bWJlcmlzaCxcbiAgICBvdmVycmlkZXM/OiBPdmVycmlkZXMsXG4gICk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMudmlldy5wb29sVG9rZW5MaXN0KFxuICAgICAgYXJnMCxcbiAgICAgIHtcbiAgICAgICAgYmxvY2tUYWc6IHRoaXMuY29udGV4dC5ibG9ja051bWJlcixcbiAgICAgICAgLi4ub3ZlcnJpZGVzLFxuICAgICAgfSxcbiAgICAgIHRoaXMuY29udGV4dC5wcmVwYXJlZERhdGEsXG4gICAgICB0aGlzLmNvbnRleHQuZ2V0RXRoQ2FsbENvbnRleHQoKSxcbiAgICApO1xuICB9XG5cbiAgYXN5bmMgcG9vbHMoXG4gICAgYXJnMDogc3RyaW5nLFxuICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlcyxcbiAgKTogUHJvbWlzZTxcbiAgICBbc3RyaW5nLCBzdHJpbmcsIHN0cmluZywgc3RyaW5nLCBiaWdpbnQsIGJvb2xlYW5dICYge1xuICAgICAgbWFya2V0OiBzdHJpbmc7XG4gICAgICByZXdhcmRlcjogc3RyaW5nO1xuICAgICAgaGVscGVyOiBzdHJpbmc7XG4gICAgICByZWNlaXB0VG9rZW46IHN0cmluZztcbiAgICAgIGxhc3RIYXJ2ZXN0VGltZTogYmlnaW50O1xuICAgICAgaXNBY3RpdmU6IGJvb2xlYW47XG4gICAgfVxuICA+IHtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy52aWV3LnBvb2xzKFxuICAgICAgYXJnMCxcbiAgICAgIHtcbiAgICAgICAgYmxvY2tUYWc6IHRoaXMuY29udGV4dC5ibG9ja051bWJlcixcbiAgICAgICAgLi4ub3ZlcnJpZGVzLFxuICAgICAgfSxcbiAgICAgIHRoaXMuY29udGV4dC5wcmVwYXJlZERhdGEsXG4gICAgICB0aGlzLmNvbnRleHQuZ2V0RXRoQ2FsbENvbnRleHQoKSxcbiAgICApO1xuICB9XG5cbiAgYXN5bmMgcHJvdG9jb2xGZWUob3ZlcnJpZGVzPzogT3ZlcnJpZGVzKTogUHJvbWlzZTxiaWdpbnQ+IHtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy52aWV3LnByb3RvY29sRmVlKFxuICAgICAge1xuICAgICAgICBibG9ja1RhZzogdGhpcy5jb250ZXh0LmJsb2NrTnVtYmVyLFxuICAgICAgICAuLi5vdmVycmlkZXMsXG4gICAgICB9LFxuICAgICAgdGhpcy5jb250ZXh0LnByZXBhcmVkRGF0YSxcbiAgICAgIHRoaXMuY29udGV4dC5nZXRFdGhDYWxsQ29udGV4dCgpLFxuICAgICk7XG4gIH1cblxuICBhc3luYyBzbWFydFBlbmRsZUNvbnZlcnQob3ZlcnJpZGVzPzogT3ZlcnJpZGVzKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy52aWV3LnNtYXJ0UGVuZGxlQ29udmVydChcbiAgICAgIHtcbiAgICAgICAgYmxvY2tUYWc6IHRoaXMuY29udGV4dC5ibG9ja051bWJlcixcbiAgICAgICAgLi4ub3ZlcnJpZGVzLFxuICAgICAgfSxcbiAgICAgIHRoaXMuY29udGV4dC5wcmVwYXJlZERhdGEsXG4gICAgICB0aGlzLmNvbnRleHQuZ2V0RXRoQ2FsbENvbnRleHQoKSxcbiAgICApO1xuICB9XG5cbiAgYXN5bmMgdG90YWxQZW5kbGVGZWUob3ZlcnJpZGVzPzogT3ZlcnJpZGVzKTogUHJvbWlzZTxiaWdpbnQ+IHtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy52aWV3LnRvdGFsUGVuZGxlRmVlKFxuICAgICAge1xuICAgICAgICBibG9ja1RhZzogdGhpcy5jb250ZXh0LmJsb2NrTnVtYmVyLFxuICAgICAgICAuLi5vdmVycmlkZXMsXG4gICAgICB9LFxuICAgICAgdGhpcy5jb250ZXh0LnByZXBhcmVkRGF0YSxcbiAgICAgIHRoaXMuY29udGV4dC5nZXRFdGhDYWxsQ29udGV4dCgpLFxuICAgICk7XG4gIH1cblxuICBhc3luYyB0b3RhbFVuY2xhaW1lZEVUSChvdmVycmlkZXM/OiBPdmVycmlkZXMpOiBQcm9taXNlPGJpZ2ludD4ge1xuICAgIHJldHVybiBhd2FpdCB0aGlzLnZpZXcudG90YWxVbmNsYWltZWRFVEgoXG4gICAgICB7XG4gICAgICAgIGJsb2NrVGFnOiB0aGlzLmNvbnRleHQuYmxvY2tOdW1iZXIsXG4gICAgICAgIC4uLm92ZXJyaWRlcyxcbiAgICAgIH0sXG4gICAgICB0aGlzLmNvbnRleHQucHJlcGFyZWREYXRhLFxuICAgICAgdGhpcy5jb250ZXh0LmdldEV0aENhbGxDb250ZXh0KCksXG4gICAgKTtcbiAgfVxuXG4gIGFzeW5jIHZlUGVuZGxlKG92ZXJyaWRlcz86IE92ZXJyaWRlcyk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMudmlldy52ZVBlbmRsZShcbiAgICAgIHtcbiAgICAgICAgYmxvY2tUYWc6IHRoaXMuY29udGV4dC5ibG9ja051bWJlcixcbiAgICAgICAgLi4ub3ZlcnJpZGVzLFxuICAgICAgfSxcbiAgICAgIHRoaXMuY29udGV4dC5wcmVwYXJlZERhdGEsXG4gICAgICB0aGlzLmNvbnRleHQuZ2V0RXRoQ2FsbENvbnRleHQoKSxcbiAgICApO1xuICB9XG5cbiAgYXN5bmMgdmVQZW5kbGVIYXJ2ZXN0Q2FsbGVyRmVlKG92ZXJyaWRlcz86IE92ZXJyaWRlcyk6IFByb21pc2U8YmlnaW50PiB7XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMudmlldy52ZVBlbmRsZUhhcnZlc3RDYWxsZXJGZWUoXG4gICAgICB7XG4gICAgICAgIGJsb2NrVGFnOiB0aGlzLmNvbnRleHQuYmxvY2tOdW1iZXIsXG4gICAgICAgIC4uLm92ZXJyaWRlcyxcbiAgICAgIH0sXG4gICAgICB0aGlzLmNvbnRleHQucHJlcGFyZWREYXRhLFxuICAgICAgdGhpcy5jb250ZXh0LmdldEV0aENhbGxDb250ZXh0KCksXG4gICAgKTtcbiAgfVxuXG4gIGFzeW5jIHZvdGVNYW5hZ2VyKG92ZXJyaWRlcz86IE92ZXJyaWRlcyk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMudmlldy52b3RlTWFuYWdlcihcbiAgICAgIHtcbiAgICAgICAgYmxvY2tUYWc6IHRoaXMuY29udGV4dC5ibG9ja051bWJlcixcbiAgICAgICAgLi4ub3ZlcnJpZGVzLFxuICAgICAgfSxcbiAgICAgIHRoaXMuY29udGV4dC5wcmVwYXJlZERhdGEsXG4gICAgICB0aGlzLmNvbnRleHQuZ2V0RXRoQ2FsbENvbnRleHQoKSxcbiAgICApO1xuICB9XG5cbiAgY2FsbFN0YXRpYyA9IHtcbiAgICB2aWV3OiB0aGlzLnZpZXcsXG4gICAgY29udGV4dDogdGhpcy5jb250ZXh0LFxuXG4gICAgYXN5bmMgX19QZW5kbGVTdGFraW5nQmFzZVVwZ19pbml0KFxuICAgICAgX3BlbmRsZTogc3RyaW5nLFxuICAgICAgX1dFVEg6IHN0cmluZyxcbiAgICAgIF92ZVBlbmRsZTogc3RyaW5nLFxuICAgICAgX2Rpc3RyaWJ1dG9yRVRIOiBzdHJpbmcsXG4gICAgICBfcGVuZGxlUm91dGVyOiBzdHJpbmcsXG4gICAgICBfbWFzdGVyUGVucGllOiBzdHJpbmcsXG4gICAgICBvdmVycmlkZXM/OiBPdmVycmlkZXMsXG4gICAgKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICByZXR1cm4gYXdhaXQgdGhpcy52aWV3LmNhbGxTdGF0aWMuX19QZW5kbGVTdGFraW5nQmFzZVVwZ19pbml0KFxuICAgICAgICBfcGVuZGxlLFxuICAgICAgICBfV0VUSCxcbiAgICAgICAgX3ZlUGVuZGxlLFxuICAgICAgICBfZGlzdHJpYnV0b3JFVEgsXG4gICAgICAgIF9wZW5kbGVSb3V0ZXIsXG4gICAgICAgIF9tYXN0ZXJQZW5waWUsXG4gICAgICAgIHtcbiAgICAgICAgICBibG9ja1RhZzogdGhpcy5jb250ZXh0LmJsb2NrTnVtYmVyLFxuICAgICAgICAgIC4uLm92ZXJyaWRlcyxcbiAgICAgICAgfSxcbiAgICAgICAgdGhpcy5jb250ZXh0LnByZXBhcmVkRGF0YSxcbiAgICAgICAgdGhpcy5jb250ZXh0LmdldEV0aENhbGxDb250ZXh0KCksXG4gICAgICApO1xuICAgIH0sXG4gICAgYXN5bmMgX19QZW5kbGVTdGFraW5nX2luaXQoXG4gICAgICBfcGVuZGxlOiBzdHJpbmcsXG4gICAgICBfV0VUSDogc3RyaW5nLFxuICAgICAgX3ZlUGVuZGxlOiBzdHJpbmcsXG4gICAgICBfZGlzdHJpYnV0b3JFVEg6IHN0cmluZyxcbiAgICAgIF9wZW5kbGVSb3V0ZXI6IHN0cmluZyxcbiAgICAgIF9tYXN0ZXJQZW5waWU6IHN0cmluZyxcbiAgICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlcyxcbiAgICApOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgIHJldHVybiBhd2FpdCB0aGlzLnZpZXcuY2FsbFN0YXRpYy5fX1BlbmRsZVN0YWtpbmdfaW5pdChcbiAgICAgICAgX3BlbmRsZSxcbiAgICAgICAgX1dFVEgsXG4gICAgICAgIF92ZVBlbmRsZSxcbiAgICAgICAgX2Rpc3RyaWJ1dG9yRVRILFxuICAgICAgICBfcGVuZGxlUm91dGVyLFxuICAgICAgICBfbWFzdGVyUGVucGllLFxuICAgICAgICB7XG4gICAgICAgICAgYmxvY2tUYWc6IHRoaXMuY29udGV4dC5ibG9ja051bWJlcixcbiAgICAgICAgICAuLi5vdmVycmlkZXMsXG4gICAgICAgIH0sXG4gICAgICAgIHRoaXMuY29udGV4dC5wcmVwYXJlZERhdGEsXG4gICAgICAgIHRoaXMuY29udGV4dC5nZXRFdGhDYWxsQ29udGV4dCgpLFxuICAgICAgKTtcbiAgICB9LFxuICAgIGFzeW5jIGFkZFBlbmRsZUZlZShcbiAgICAgIF92YWx1ZTogQmlnTnVtYmVyaXNoLFxuICAgICAgX3RvOiBzdHJpbmcsXG4gICAgICBfaXNNUEVORExFOiBib29sZWFuLFxuICAgICAgX2lzQWRkcmVzczogYm9vbGVhbixcbiAgICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlcyxcbiAgICApOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgIHJldHVybiBhd2FpdCB0aGlzLnZpZXcuY2FsbFN0YXRpYy5hZGRQZW5kbGVGZWUoXG4gICAgICAgIF92YWx1ZSxcbiAgICAgICAgX3RvLFxuICAgICAgICBfaXNNUEVORExFLFxuICAgICAgICBfaXNBZGRyZXNzLFxuICAgICAgICB7XG4gICAgICAgICAgYmxvY2tUYWc6IHRoaXMuY29udGV4dC5ibG9ja051bWJlcixcbiAgICAgICAgICAuLi5vdmVycmlkZXMsXG4gICAgICAgIH0sXG4gICAgICAgIHRoaXMuY29udGV4dC5wcmVwYXJlZERhdGEsXG4gICAgICAgIHRoaXMuY29udGV4dC5nZXRFdGhDYWxsQ29udGV4dCgpLFxuICAgICAgKTtcbiAgICB9LFxuICAgIGFzeW5jIGJhdGNoSGFydmVzdE1hcmtldFJld2FyZHMoXG4gICAgICBfbWFya2V0czogc3RyaW5nW10sXG4gICAgICBtaW5FdGhUb1JlY2lldmU6IEJpZ051bWJlcmlzaCxcbiAgICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlcyxcbiAgICApOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgIHJldHVybiBhd2FpdCB0aGlzLnZpZXcuY2FsbFN0YXRpYy5iYXRjaEhhcnZlc3RNYXJrZXRSZXdhcmRzKFxuICAgICAgICBfbWFya2V0cyxcbiAgICAgICAgbWluRXRoVG9SZWNpZXZlLFxuICAgICAgICB7XG4gICAgICAgICAgYmxvY2tUYWc6IHRoaXMuY29udGV4dC5ibG9ja051bWJlcixcbiAgICAgICAgICAuLi5vdmVycmlkZXMsXG4gICAgICAgIH0sXG4gICAgICAgIHRoaXMuY29udGV4dC5wcmVwYXJlZERhdGEsXG4gICAgICAgIHRoaXMuY29udGV4dC5nZXRFdGhDYWxsQ29udGV4dCgpLFxuICAgICAgKTtcbiAgICB9LFxuICAgIGFzeW5jIGJvb3RzdHJhcFZlUGVuZGxlKFxuICAgICAgY2hhaW5JZDogQmlnTnVtYmVyaXNoW10sXG4gICAgICBvdmVycmlkZXM/OiBPdmVycmlkZXMsXG4gICAgKTogUHJvbWlzZTxiaWdpbnQ+IHtcbiAgICAgIHJldHVybiBhd2FpdCB0aGlzLnZpZXcuY2FsbFN0YXRpYy5ib290c3RyYXBWZVBlbmRsZShcbiAgICAgICAgY2hhaW5JZCxcbiAgICAgICAge1xuICAgICAgICAgIGJsb2NrVGFnOiB0aGlzLmNvbnRleHQuYmxvY2tOdW1iZXIsXG4gICAgICAgICAgLi4ub3ZlcnJpZGVzLFxuICAgICAgICB9LFxuICAgICAgICB0aGlzLmNvbnRleHQucHJlcGFyZWREYXRhLFxuICAgICAgICB0aGlzLmNvbnRleHQuZ2V0RXRoQ2FsbENvbnRleHQoKSxcbiAgICAgICk7XG4gICAgfSxcbiAgICBhc3luYyBjb252ZXJ0UGVuZGxlKFxuICAgICAgX2Ftb3VudDogQmlnTnVtYmVyaXNoLFxuICAgICAgY2hhaW5JZDogQmlnTnVtYmVyaXNoW10sXG4gICAgICBvdmVycmlkZXM/OiBPdmVycmlkZXMsXG4gICAgKTogUHJvbWlzZTxiaWdpbnQ+IHtcbiAgICAgIHJldHVybiBhd2FpdCB0aGlzLnZpZXcuY2FsbFN0YXRpYy5jb252ZXJ0UGVuZGxlKFxuICAgICAgICBfYW1vdW50LFxuICAgICAgICBjaGFpbklkLFxuICAgICAgICB7XG4gICAgICAgICAgYmxvY2tUYWc6IHRoaXMuY29udGV4dC5ibG9ja051bWJlcixcbiAgICAgICAgICAuLi5vdmVycmlkZXMsXG4gICAgICAgIH0sXG4gICAgICAgIHRoaXMuY29udGV4dC5wcmVwYXJlZERhdGEsXG4gICAgICAgIHRoaXMuY29udGV4dC5nZXRFdGhDYWxsQ29udGV4dCgpLFxuICAgICAgKTtcbiAgICB9LFxuICAgIGFzeW5jIGRlcG9zaXRNYXJrZXQoXG4gICAgICBfbWFya2V0OiBzdHJpbmcsXG4gICAgICBfZm9yOiBzdHJpbmcsXG4gICAgICBfZnJvbTogc3RyaW5nLFxuICAgICAgX2Ftb3VudDogQmlnTnVtYmVyaXNoLFxuICAgICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzLFxuICAgICk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgcmV0dXJuIGF3YWl0IHRoaXMudmlldy5jYWxsU3RhdGljLmRlcG9zaXRNYXJrZXQoXG4gICAgICAgIF9tYXJrZXQsXG4gICAgICAgIF9mb3IsXG4gICAgICAgIF9mcm9tLFxuICAgICAgICBfYW1vdW50LFxuICAgICAgICB7XG4gICAgICAgICAgYmxvY2tUYWc6IHRoaXMuY29udGV4dC5ibG9ja051bWJlcixcbiAgICAgICAgICAuLi5vdmVycmlkZXMsXG4gICAgICAgIH0sXG4gICAgICAgIHRoaXMuY29udGV4dC5wcmVwYXJlZERhdGEsXG4gICAgICAgIHRoaXMuY29udGV4dC5nZXRFdGhDYWxsQ29udGV4dCgpLFxuICAgICAgKTtcbiAgICB9LFxuICAgIGFzeW5jIGhhcnZlc3RNYXJrZXRSZXdhcmQoXG4gICAgICBfbWFya2V0OiBzdHJpbmcsXG4gICAgICBfY2FsbGVyOiBzdHJpbmcsXG4gICAgICBfbWluRXRoUmVjaXZlOiBCaWdOdW1iZXJpc2gsXG4gICAgICBvdmVycmlkZXM/OiBPdmVycmlkZXMsXG4gICAgKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICByZXR1cm4gYXdhaXQgdGhpcy52aWV3LmNhbGxTdGF0aWMuaGFydmVzdE1hcmtldFJld2FyZChcbiAgICAgICAgX21hcmtldCxcbiAgICAgICAgX2NhbGxlcixcbiAgICAgICAgX21pbkV0aFJlY2l2ZSxcbiAgICAgICAge1xuICAgICAgICAgIGJsb2NrVGFnOiB0aGlzLmNvbnRleHQuYmxvY2tOdW1iZXIsXG4gICAgICAgICAgLi4ub3ZlcnJpZGVzLFxuICAgICAgICB9LFxuICAgICAgICB0aGlzLmNvbnRleHQucHJlcGFyZWREYXRhLFxuICAgICAgICB0aGlzLmNvbnRleHQuZ2V0RXRoQ2FsbENvbnRleHQoKSxcbiAgICAgICk7XG4gICAgfSxcbiAgICBhc3luYyBoYXJ2ZXN0VmVQZW5kbGVSZXdhcmQoXG4gICAgICBfcG9vbHM6IHN0cmluZ1tdLFxuICAgICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzLFxuICAgICk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgcmV0dXJuIGF3YWl0IHRoaXMudmlldy5jYWxsU3RhdGljLmhhcnZlc3RWZVBlbmRsZVJld2FyZChcbiAgICAgICAgX3Bvb2xzLFxuICAgICAgICB7XG4gICAgICAgICAgYmxvY2tUYWc6IHRoaXMuY29udGV4dC5ibG9ja051bWJlcixcbiAgICAgICAgICAuLi5vdmVycmlkZXMsXG4gICAgICAgIH0sXG4gICAgICAgIHRoaXMuY29udGV4dC5wcmVwYXJlZERhdGEsXG4gICAgICAgIHRoaXMuY29udGV4dC5nZXRFdGhDYWxsQ29udGV4dCgpLFxuICAgICAgKTtcbiAgICB9LFxuICAgIGFzeW5jIGluY3JlYXNlTG9ja1RpbWUoXG4gICAgICBfdW5sb2NrVGltZTogQmlnTnVtYmVyaXNoLFxuICAgICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzLFxuICAgICk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgcmV0dXJuIGF3YWl0IHRoaXMudmlldy5jYWxsU3RhdGljLmluY3JlYXNlTG9ja1RpbWUoXG4gICAgICAgIF91bmxvY2tUaW1lLFxuICAgICAgICB7XG4gICAgICAgICAgYmxvY2tUYWc6IHRoaXMuY29udGV4dC5ibG9ja051bWJlcixcbiAgICAgICAgICAuLi5vdmVycmlkZXMsXG4gICAgICAgIH0sXG4gICAgICAgIHRoaXMuY29udGV4dC5wcmVwYXJlZERhdGEsXG4gICAgICAgIHRoaXMuY29udGV4dC5nZXRFdGhDYWxsQ29udGV4dCgpLFxuICAgICAgKTtcbiAgICB9LFxuICAgIGFzeW5jIHBhdXNlKG92ZXJyaWRlcz86IE92ZXJyaWRlcyk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgcmV0dXJuIGF3YWl0IHRoaXMudmlldy5jYWxsU3RhdGljLnBhdXNlKFxuICAgICAgICB7XG4gICAgICAgICAgYmxvY2tUYWc6IHRoaXMuY29udGV4dC5ibG9ja051bWJlcixcbiAgICAgICAgICAuLi5vdmVycmlkZXMsXG4gICAgICAgIH0sXG4gICAgICAgIHRoaXMuY29udGV4dC5wcmVwYXJlZERhdGEsXG4gICAgICAgIHRoaXMuY29udGV4dC5nZXRFdGhDYWxsQ29udGV4dCgpLFxuICAgICAgKTtcbiAgICB9LFxuICAgIGFzeW5jIHJlZ2lzdGVyUG9vbChcbiAgICAgIF9tYXJrZXQ6IHN0cmluZyxcbiAgICAgIF9hbGxvY1BvaW50czogQmlnTnVtYmVyaXNoLFxuICAgICAgbmFtZTogc3RyaW5nLFxuICAgICAgc3ltYm9sOiBzdHJpbmcsXG4gICAgICBvdmVycmlkZXM/OiBPdmVycmlkZXMsXG4gICAgKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICByZXR1cm4gYXdhaXQgdGhpcy52aWV3LmNhbGxTdGF0aWMucmVnaXN0ZXJQb29sKFxuICAgICAgICBfbWFya2V0LFxuICAgICAgICBfYWxsb2NQb2ludHMsXG4gICAgICAgIG5hbWUsXG4gICAgICAgIHN5bWJvbCxcbiAgICAgICAge1xuICAgICAgICAgIGJsb2NrVGFnOiB0aGlzLmNvbnRleHQuYmxvY2tOdW1iZXIsXG4gICAgICAgICAgLi4ub3ZlcnJpZGVzLFxuICAgICAgICB9LFxuICAgICAgICB0aGlzLmNvbnRleHQucHJlcGFyZWREYXRhLFxuICAgICAgICB0aGlzLmNvbnRleHQuZ2V0RXRoQ2FsbENvbnRleHQoKSxcbiAgICAgICk7XG4gICAgfSxcbiAgICBhc3luYyByZW1vdmVQZW5kbGVGZWUoXG4gICAgICBfaW5kZXg6IEJpZ051bWJlcmlzaCxcbiAgICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlcyxcbiAgICApOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgIHJldHVybiBhd2FpdCB0aGlzLnZpZXcuY2FsbFN0YXRpYy5yZW1vdmVQZW5kbGVGZWUoXG4gICAgICAgIF9pbmRleCxcbiAgICAgICAge1xuICAgICAgICAgIGJsb2NrVGFnOiB0aGlzLmNvbnRleHQuYmxvY2tOdW1iZXIsXG4gICAgICAgICAgLi4ub3ZlcnJpZGVzLFxuICAgICAgICB9LFxuICAgICAgICB0aGlzLmNvbnRleHQucHJlcGFyZWREYXRhLFxuICAgICAgICB0aGlzLmNvbnRleHQuZ2V0RXRoQ2FsbENvbnRleHQoKSxcbiAgICAgICk7XG4gICAgfSxcbiAgICBhc3luYyByZW5vdW5jZU93bmVyc2hpcChvdmVycmlkZXM/OiBPdmVycmlkZXMpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgIHJldHVybiBhd2FpdCB0aGlzLnZpZXcuY2FsbFN0YXRpYy5yZW5vdW5jZU93bmVyc2hpcChcbiAgICAgICAge1xuICAgICAgICAgIGJsb2NrVGFnOiB0aGlzLmNvbnRleHQuYmxvY2tOdW1iZXIsXG4gICAgICAgICAgLi4ub3ZlcnJpZGVzLFxuICAgICAgICB9LFxuICAgICAgICB0aGlzLmNvbnRleHQucHJlcGFyZWREYXRhLFxuICAgICAgICB0aGlzLmNvbnRleHQuZ2V0RXRoQ2FsbENvbnRleHQoKSxcbiAgICAgICk7XG4gICAgfSxcbiAgICBhc3luYyBzZXRBdXRvQnJpYmVGZWUoXG4gICAgICBfYXV0b0JyaWJlRmVlOiBCaWdOdW1iZXJpc2gsXG4gICAgICBvdmVycmlkZXM/OiBPdmVycmlkZXMsXG4gICAgKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICByZXR1cm4gYXdhaXQgdGhpcy52aWV3LmNhbGxTdGF0aWMuc2V0QXV0b0JyaWJlRmVlKFxuICAgICAgICBfYXV0b0JyaWJlRmVlLFxuICAgICAgICB7XG4gICAgICAgICAgYmxvY2tUYWc6IHRoaXMuY29udGV4dC5ibG9ja051bWJlcixcbiAgICAgICAgICAuLi5vdmVycmlkZXMsXG4gICAgICAgIH0sXG4gICAgICAgIHRoaXMuY29udGV4dC5wcmVwYXJlZERhdGEsXG4gICAgICAgIHRoaXMuY29udGV4dC5nZXRFdGhDYWxsQ29udGV4dCgpLFxuICAgICAgKTtcbiAgICB9LFxuICAgIGFzeW5jIHNldEJyaWJlTWFuYWdlcihcbiAgICAgIF9icmliZU1hbmFnZXI6IHN0cmluZyxcbiAgICAgIF9icmliZU1hbmFnZXJFT0E6IHN0cmluZyxcbiAgICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlcyxcbiAgICApOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgIHJldHVybiBhd2FpdCB0aGlzLnZpZXcuY2FsbFN0YXRpYy5zZXRCcmliZU1hbmFnZXIoXG4gICAgICAgIF9icmliZU1hbmFnZXIsXG4gICAgICAgIF9icmliZU1hbmFnZXJFT0EsXG4gICAgICAgIHtcbiAgICAgICAgICBibG9ja1RhZzogdGhpcy5jb250ZXh0LmJsb2NrTnVtYmVyLFxuICAgICAgICAgIC4uLm92ZXJyaWRlcyxcbiAgICAgICAgfSxcbiAgICAgICAgdGhpcy5jb250ZXh0LnByZXBhcmVkRGF0YSxcbiAgICAgICAgdGhpcy5jb250ZXh0LmdldEV0aENhbGxDb250ZXh0KCksXG4gICAgICApO1xuICAgIH0sXG4gICAgYXN5bmMgc2V0RVRIWmFwcGVyKFxuICAgICAgX0VUSFphcHBlcjogc3RyaW5nLFxuICAgICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzLFxuICAgICk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgcmV0dXJuIGF3YWl0IHRoaXMudmlldy5jYWxsU3RhdGljLnNldEVUSFphcHBlcihcbiAgICAgICAgX0VUSFphcHBlcixcbiAgICAgICAge1xuICAgICAgICAgIGJsb2NrVGFnOiB0aGlzLmNvbnRleHQuYmxvY2tOdW1iZXIsXG4gICAgICAgICAgLi4ub3ZlcnJpZGVzLFxuICAgICAgICB9LFxuICAgICAgICB0aGlzLmNvbnRleHQucHJlcGFyZWREYXRhLFxuICAgICAgICB0aGlzLmNvbnRleHQuZ2V0RXRoQ2FsbENvbnRleHQoKSxcbiAgICAgICk7XG4gICAgfSxcbiAgICBhc3luYyBzZXRIYXJ2ZXN0VGltZUdhcChcbiAgICAgIF9wZXJpb2Q6IEJpZ051bWJlcmlzaCxcbiAgICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlcyxcbiAgICApOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgIHJldHVybiBhd2FpdCB0aGlzLnZpZXcuY2FsbFN0YXRpYy5zZXRIYXJ2ZXN0VGltZUdhcChcbiAgICAgICAgX3BlcmlvZCxcbiAgICAgICAge1xuICAgICAgICAgIGJsb2NrVGFnOiB0aGlzLmNvbnRleHQuYmxvY2tOdW1iZXIsXG4gICAgICAgICAgLi4ub3ZlcnJpZGVzLFxuICAgICAgICB9LFxuICAgICAgICB0aGlzLmNvbnRleHQucHJlcGFyZWREYXRhLFxuICAgICAgICB0aGlzLmNvbnRleHQuZ2V0RXRoQ2FsbENvbnRleHQoKSxcbiAgICAgICk7XG4gICAgfSxcbiAgICBhc3luYyBzZXRMb2NrRGF5cyhcbiAgICAgIF9uZXdMb2NrUGVyaW9kOiBCaWdOdW1iZXJpc2gsXG4gICAgICBvdmVycmlkZXM/OiBPdmVycmlkZXMsXG4gICAgKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICByZXR1cm4gYXdhaXQgdGhpcy52aWV3LmNhbGxTdGF0aWMuc2V0TG9ja0RheXMoXG4gICAgICAgIF9uZXdMb2NrUGVyaW9kLFxuICAgICAgICB7XG4gICAgICAgICAgYmxvY2tUYWc6IHRoaXMuY29udGV4dC5ibG9ja051bWJlcixcbiAgICAgICAgICAuLi5vdmVycmlkZXMsXG4gICAgICAgIH0sXG4gICAgICAgIHRoaXMuY29udGV4dC5wcmVwYXJlZERhdGEsXG4gICAgICAgIHRoaXMuY29udGV4dC5nZXRFdGhDYWxsQ29udGV4dCgpLFxuICAgICAgKTtcbiAgICB9LFxuICAgIGFzeW5jIHNldE1QZW5kbGVDb252ZXJ0b3IoXG4gICAgICBfbVBlbmRsZUNvbnZlcnRvcjogc3RyaW5nLFxuICAgICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzLFxuICAgICk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgcmV0dXJuIGF3YWl0IHRoaXMudmlldy5jYWxsU3RhdGljLnNldE1QZW5kbGVDb252ZXJ0b3IoXG4gICAgICAgIF9tUGVuZGxlQ29udmVydG9yLFxuICAgICAgICB7XG4gICAgICAgICAgYmxvY2tUYWc6IHRoaXMuY29udGV4dC5ibG9ja051bWJlcixcbiAgICAgICAgICAuLi5vdmVycmlkZXMsXG4gICAgICAgIH0sXG4gICAgICAgIHRoaXMuY29udGV4dC5wcmVwYXJlZERhdGEsXG4gICAgICAgIHRoaXMuY29udGV4dC5nZXRFdGhDYWxsQ29udGV4dCgpLFxuICAgICAgKTtcbiAgICB9LFxuICAgIGFzeW5jIHNldE1QZW5kbGVPRlQoXG4gICAgICBfc2V0TVBlbmRsZU9GVDogc3RyaW5nLFxuICAgICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzLFxuICAgICk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgcmV0dXJuIGF3YWl0IHRoaXMudmlldy5jYWxsU3RhdGljLnNldE1QZW5kbGVPRlQoXG4gICAgICAgIF9zZXRNUGVuZGxlT0ZULFxuICAgICAgICB7XG4gICAgICAgICAgYmxvY2tUYWc6IHRoaXMuY29udGV4dC5ibG9ja051bWJlcixcbiAgICAgICAgICAuLi5vdmVycmlkZXMsXG4gICAgICAgIH0sXG4gICAgICAgIHRoaXMuY29udGV4dC5wcmVwYXJlZERhdGEsXG4gICAgICAgIHRoaXMuY29udGV4dC5nZXRFdGhDYWxsQ29udGV4dCgpLFxuICAgICAgKTtcbiAgICB9LFxuICAgIGFzeW5jIHNldE1hcmtldERlcG9zaXRIZWxwZXIoXG4gICAgICBfaGVscGVyOiBzdHJpbmcsXG4gICAgICBvdmVycmlkZXM/OiBPdmVycmlkZXMsXG4gICAgKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICByZXR1cm4gYXdhaXQgdGhpcy52aWV3LmNhbGxTdGF0aWMuc2V0TWFya2V0RGVwb3NpdEhlbHBlcihcbiAgICAgICAgX2hlbHBlcixcbiAgICAgICAge1xuICAgICAgICAgIGJsb2NrVGFnOiB0aGlzLmNvbnRleHQuYmxvY2tOdW1iZXIsXG4gICAgICAgICAgLi4ub3ZlcnJpZGVzLFxuICAgICAgICB9LFxuICAgICAgICB0aGlzLmNvbnRleHQucHJlcGFyZWREYXRhLFxuICAgICAgICB0aGlzLmNvbnRleHQuZ2V0RXRoQ2FsbENvbnRleHQoKSxcbiAgICAgICk7XG4gICAgfSxcbiAgICBhc3luYyBzZXRQZW5kbGVGZWUoXG4gICAgICBfaW5kZXg6IEJpZ051bWJlcmlzaCxcbiAgICAgIF92YWx1ZTogQmlnTnVtYmVyaXNoLFxuICAgICAgX3RvOiBzdHJpbmcsXG4gICAgICBfaXNNUEVORExFOiBib29sZWFuLFxuICAgICAgX2lzQWRkcmVzczogYm9vbGVhbixcbiAgICAgIF9pc0FjdGl2ZTogYm9vbGVhbixcbiAgICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlcyxcbiAgICApOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgIHJldHVybiBhd2FpdCB0aGlzLnZpZXcuY2FsbFN0YXRpYy5zZXRQZW5kbGVGZWUoXG4gICAgICAgIF9pbmRleCxcbiAgICAgICAgX3ZhbHVlLFxuICAgICAgICBfdG8sXG4gICAgICAgIF9pc01QRU5ETEUsXG4gICAgICAgIF9pc0FkZHJlc3MsXG4gICAgICAgIF9pc0FjdGl2ZSxcbiAgICAgICAge1xuICAgICAgICAgIGJsb2NrVGFnOiB0aGlzLmNvbnRleHQuYmxvY2tOdW1iZXIsXG4gICAgICAgICAgLi4ub3ZlcnJpZGVzLFxuICAgICAgICB9LFxuICAgICAgICB0aGlzLmNvbnRleHQucHJlcGFyZWREYXRhLFxuICAgICAgICB0aGlzLmNvbnRleHQuZ2V0RXRoQ2FsbENvbnRleHQoKSxcbiAgICAgICk7XG4gICAgfSxcbiAgICBhc3luYyBzZXRTbWFydENvbnZlcnQoXG4gICAgICBfc21hcnRQZW5kbGVDb252ZXJ0OiBzdHJpbmcsXG4gICAgICBvdmVycmlkZXM/OiBPdmVycmlkZXMsXG4gICAgKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICByZXR1cm4gYXdhaXQgdGhpcy52aWV3LmNhbGxTdGF0aWMuc2V0U21hcnRDb252ZXJ0KFxuICAgICAgICBfc21hcnRQZW5kbGVDb252ZXJ0LFxuICAgICAgICB7XG4gICAgICAgICAgYmxvY2tUYWc6IHRoaXMuY29udGV4dC5ibG9ja051bWJlcixcbiAgICAgICAgICAuLi5vdmVycmlkZXMsXG4gICAgICAgIH0sXG4gICAgICAgIHRoaXMuY29udGV4dC5wcmVwYXJlZERhdGEsXG4gICAgICAgIHRoaXMuY29udGV4dC5nZXRFdGhDYWxsQ29udGV4dCgpLFxuICAgICAgKTtcbiAgICB9LFxuICAgIGFzeW5jIHNldFZvdGUoXG4gICAgICBfcGVuZGxlVm90ZTogc3RyaW5nLFxuICAgICAgX3ZlUGVuZGxlSGFydmVzdENhbGxlckZlZTogQmlnTnVtYmVyaXNoLFxuICAgICAgX2hhcnZlc3RDYWxsZXJQZW5kbGVGZWU6IEJpZ051bWJlcmlzaCxcbiAgICAgIF9wcm90b2NvbEZlZTogQmlnTnVtYmVyaXNoLFxuICAgICAgX2ZlZUNvbGxlY3Rvcjogc3RyaW5nLFxuICAgICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzLFxuICAgICk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgcmV0dXJuIGF3YWl0IHRoaXMudmlldy5jYWxsU3RhdGljLnNldFZvdGUoXG4gICAgICAgIF9wZW5kbGVWb3RlLFxuICAgICAgICBfdmVQZW5kbGVIYXJ2ZXN0Q2FsbGVyRmVlLFxuICAgICAgICBfaGFydmVzdENhbGxlclBlbmRsZUZlZSxcbiAgICAgICAgX3Byb3RvY29sRmVlLFxuICAgICAgICBfZmVlQ29sbGVjdG9yLFxuICAgICAgICB7XG4gICAgICAgICAgYmxvY2tUYWc6IHRoaXMuY29udGV4dC5ibG9ja051bWJlcixcbiAgICAgICAgICAuLi5vdmVycmlkZXMsXG4gICAgICAgIH0sXG4gICAgICAgIHRoaXMuY29udGV4dC5wcmVwYXJlZERhdGEsXG4gICAgICAgIHRoaXMuY29udGV4dC5nZXRFdGhDYWxsQ29udGV4dCgpLFxuICAgICAgKTtcbiAgICB9LFxuICAgIGFzeW5jIHNldFZvdGVNYW5hZ2VyKFxuICAgICAgX3ZvdGVNYW5hZ2VyOiBzdHJpbmcsXG4gICAgICBvdmVycmlkZXM/OiBPdmVycmlkZXMsXG4gICAgKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICByZXR1cm4gYXdhaXQgdGhpcy52aWV3LmNhbGxTdGF0aWMuc2V0Vm90ZU1hbmFnZXIoXG4gICAgICAgIF92b3RlTWFuYWdlcixcbiAgICAgICAge1xuICAgICAgICAgIGJsb2NrVGFnOiB0aGlzLmNvbnRleHQuYmxvY2tOdW1iZXIsXG4gICAgICAgICAgLi4ub3ZlcnJpZGVzLFxuICAgICAgICB9LFxuICAgICAgICB0aGlzLmNvbnRleHQucHJlcGFyZWREYXRhLFxuICAgICAgICB0aGlzLmNvbnRleHQuZ2V0RXRoQ2FsbENvbnRleHQoKSxcbiAgICAgICk7XG4gICAgfSxcbiAgICBhc3luYyBzZXRtYXN0ZXJQZW5waWUoXG4gICAgICBfbWFzdGVyUGVucGllOiBzdHJpbmcsXG4gICAgICBvdmVycmlkZXM/OiBPdmVycmlkZXMsXG4gICAgKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICByZXR1cm4gYXdhaXQgdGhpcy52aWV3LmNhbGxTdGF0aWMuc2V0bWFzdGVyUGVucGllKFxuICAgICAgICBfbWFzdGVyUGVucGllLFxuICAgICAgICB7XG4gICAgICAgICAgYmxvY2tUYWc6IHRoaXMuY29udGV4dC5ibG9ja051bWJlcixcbiAgICAgICAgICAuLi5vdmVycmlkZXMsXG4gICAgICAgIH0sXG4gICAgICAgIHRoaXMuY29udGV4dC5wcmVwYXJlZERhdGEsXG4gICAgICAgIHRoaXMuY29udGV4dC5nZXRFdGhDYWxsQ29udGV4dCgpLFxuICAgICAgKTtcbiAgICB9LFxuICAgIGFzeW5jIHRyYW5zZmVyT3duZXJzaGlwKFxuICAgICAgbmV3T3duZXI6IHN0cmluZyxcbiAgICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlcyxcbiAgICApOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgIHJldHVybiBhd2FpdCB0aGlzLnZpZXcuY2FsbFN0YXRpYy50cmFuc2Zlck93bmVyc2hpcChcbiAgICAgICAgbmV3T3duZXIsXG4gICAgICAgIHtcbiAgICAgICAgICBibG9ja1RhZzogdGhpcy5jb250ZXh0LmJsb2NrTnVtYmVyLFxuICAgICAgICAgIC4uLm92ZXJyaWRlcyxcbiAgICAgICAgfSxcbiAgICAgICAgdGhpcy5jb250ZXh0LnByZXBhcmVkRGF0YSxcbiAgICAgICAgdGhpcy5jb250ZXh0LmdldEV0aENhbGxDb250ZXh0KCksXG4gICAgICApO1xuICAgIH0sXG4gICAgYXN5bmMgdW5wYXVzZShvdmVycmlkZXM/OiBPdmVycmlkZXMpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgIHJldHVybiBhd2FpdCB0aGlzLnZpZXcuY2FsbFN0YXRpYy51bnBhdXNlKFxuICAgICAgICB7XG4gICAgICAgICAgYmxvY2tUYWc6IHRoaXMuY29udGV4dC5ibG9ja051bWJlcixcbiAgICAgICAgICAuLi5vdmVycmlkZXMsXG4gICAgICAgIH0sXG4gICAgICAgIHRoaXMuY29udGV4dC5wcmVwYXJlZERhdGEsXG4gICAgICAgIHRoaXMuY29udGV4dC5nZXRFdGhDYWxsQ29udGV4dCgpLFxuICAgICAgKTtcbiAgICB9LFxuICAgIGFzeW5jIHVwZGF0ZU1hcmtldFJld2FyZHMoXG4gICAgICBfbWFya2V0OiBzdHJpbmcsXG4gICAgICBhbW91bnRzOiBCaWdOdW1iZXJpc2hbXSxcbiAgICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlcyxcbiAgICApOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgIHJldHVybiBhd2FpdCB0aGlzLnZpZXcuY2FsbFN0YXRpYy51cGRhdGVNYXJrZXRSZXdhcmRzKFxuICAgICAgICBfbWFya2V0LFxuICAgICAgICBhbW91bnRzLFxuICAgICAgICB7XG4gICAgICAgICAgYmxvY2tUYWc6IHRoaXMuY29udGV4dC5ibG9ja051bWJlcixcbiAgICAgICAgICAuLi5vdmVycmlkZXMsXG4gICAgICAgIH0sXG4gICAgICAgIHRoaXMuY29udGV4dC5wcmVwYXJlZERhdGEsXG4gICAgICAgIHRoaXMuY29udGV4dC5nZXRFdGhDYWxsQ29udGV4dCgpLFxuICAgICAgKTtcbiAgICB9LFxuICAgIGFzeW5jIHVwZGF0ZVBvb2xIZWxwZXIoXG4gICAgICBfbWFya2V0OiBzdHJpbmcsXG4gICAgICBfaGVscGVyOiBzdHJpbmcsXG4gICAgICBvdmVycmlkZXM/OiBPdmVycmlkZXMsXG4gICAgKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICByZXR1cm4gYXdhaXQgdGhpcy52aWV3LmNhbGxTdGF0aWMudXBkYXRlUG9vbEhlbHBlcihcbiAgICAgICAgX21hcmtldCxcbiAgICAgICAgX2hlbHBlcixcbiAgICAgICAge1xuICAgICAgICAgIGJsb2NrVGFnOiB0aGlzLmNvbnRleHQuYmxvY2tOdW1iZXIsXG4gICAgICAgICAgLi4ub3ZlcnJpZGVzLFxuICAgICAgICB9LFxuICAgICAgICB0aGlzLmNvbnRleHQucHJlcGFyZWREYXRhLFxuICAgICAgICB0aGlzLmNvbnRleHQuZ2V0RXRoQ2FsbENvbnRleHQoKSxcbiAgICAgICk7XG4gICAgfSxcbiAgICBhc3luYyB2b3RlKFxuICAgICAgX3Bvb2xzOiBzdHJpbmdbXSxcbiAgICAgIF93ZWlnaHRzOiBCaWdOdW1iZXJpc2hbXSxcbiAgICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlcyxcbiAgICApOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgIHJldHVybiBhd2FpdCB0aGlzLnZpZXcuY2FsbFN0YXRpYy52b3RlKFxuICAgICAgICBfcG9vbHMsXG4gICAgICAgIF93ZWlnaHRzLFxuICAgICAgICB7XG4gICAgICAgICAgYmxvY2tUYWc6IHRoaXMuY29udGV4dC5ibG9ja051bWJlcixcbiAgICAgICAgICAuLi5vdmVycmlkZXMsXG4gICAgICAgIH0sXG4gICAgICAgIHRoaXMuY29udGV4dC5wcmVwYXJlZERhdGEsXG4gICAgICAgIHRoaXMuY29udGV4dC5nZXRFdGhDYWxsQ29udGV4dCgpLFxuICAgICAgKTtcbiAgICB9LFxuICAgIGFzeW5jIHdpdGhkcmF3TWFya2V0KFxuICAgICAgX21hcmtldDogc3RyaW5nLFxuICAgICAgX2Zvcjogc3RyaW5nLFxuICAgICAgX2Ftb3VudDogQmlnTnVtYmVyaXNoLFxuICAgICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzLFxuICAgICk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgcmV0dXJuIGF3YWl0IHRoaXMudmlldy5jYWxsU3RhdGljLndpdGhkcmF3TWFya2V0KFxuICAgICAgICBfbWFya2V0LFxuICAgICAgICBfZm9yLFxuICAgICAgICBfYW1vdW50LFxuICAgICAgICB7XG4gICAgICAgICAgYmxvY2tUYWc6IHRoaXMuY29udGV4dC5ibG9ja051bWJlcixcbiAgICAgICAgICAuLi5vdmVycmlkZXMsXG4gICAgICAgIH0sXG4gICAgICAgIHRoaXMuY29udGV4dC5wcmVwYXJlZERhdGEsXG4gICAgICAgIHRoaXMuY29udGV4dC5nZXRFdGhDYWxsQ29udGV4dCgpLFxuICAgICAgKTtcbiAgICB9LFxuICB9O1xuXG4gIGVuY29kZUNhbGwgPSB7XG4gICAgdmlldzogdGhpcy52aWV3LFxuICAgIGNvbnRleHQ6IHRoaXMuY29udGV4dCxcblxuICAgIEVUSFphcHBlcihvdmVycmlkZXM/OiBPdmVycmlkZXMpOiBFdGhDYWxsUGFyYW0ge1xuICAgICAgcmV0dXJuIHRoaXMudmlldy5lbmNvZGVDYWxsLkVUSFphcHBlcih7XG4gICAgICAgIGNoYWluSWQ6IHRoaXMuY29udGV4dC5jaGFpbklkLnRvU3RyaW5nKCksXG4gICAgICAgIGFkZHJlc3M6IHRoaXMuY29udGV4dC5hZGRyZXNzLFxuICAgICAgICBibG9ja1RhZzogdGhpcy5jb250ZXh0LmdldEJsb2NrVGFnKG92ZXJyaWRlcyksXG4gICAgICB9KTtcbiAgICB9LFxuICAgIFBFTkRMRShvdmVycmlkZXM/OiBPdmVycmlkZXMpOiBFdGhDYWxsUGFyYW0ge1xuICAgICAgcmV0dXJuIHRoaXMudmlldy5lbmNvZGVDYWxsLlBFTkRMRSh7XG4gICAgICAgIGNoYWluSWQ6IHRoaXMuY29udGV4dC5jaGFpbklkLnRvU3RyaW5nKCksXG4gICAgICAgIGFkZHJlc3M6IHRoaXMuY29udGV4dC5hZGRyZXNzLFxuICAgICAgICBibG9ja1RhZzogdGhpcy5jb250ZXh0LmdldEJsb2NrVGFnKG92ZXJyaWRlcyksXG4gICAgICB9KTtcbiAgICB9LFxuICAgIFdFVEgob3ZlcnJpZGVzPzogT3ZlcnJpZGVzKTogRXRoQ2FsbFBhcmFtIHtcbiAgICAgIHJldHVybiB0aGlzLnZpZXcuZW5jb2RlQ2FsbC5XRVRIKHtcbiAgICAgICAgY2hhaW5JZDogdGhpcy5jb250ZXh0LmNoYWluSWQudG9TdHJpbmcoKSxcbiAgICAgICAgYWRkcmVzczogdGhpcy5jb250ZXh0LmFkZHJlc3MsXG4gICAgICAgIGJsb2NrVGFnOiB0aGlzLmNvbnRleHQuZ2V0QmxvY2tUYWcob3ZlcnJpZGVzKSxcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgX19QZW5kbGVTdGFraW5nQmFzZVVwZ19pbml0KFxuICAgICAgX3BlbmRsZTogc3RyaW5nLFxuICAgICAgX1dFVEg6IHN0cmluZyxcbiAgICAgIF92ZVBlbmRsZTogc3RyaW5nLFxuICAgICAgX2Rpc3RyaWJ1dG9yRVRIOiBzdHJpbmcsXG4gICAgICBfcGVuZGxlUm91dGVyOiBzdHJpbmcsXG4gICAgICBfbWFzdGVyUGVucGllOiBzdHJpbmcsXG4gICAgICBvdmVycmlkZXM/OiBPdmVycmlkZXMsXG4gICAgKTogRXRoQ2FsbFBhcmFtIHtcbiAgICAgIHJldHVybiB0aGlzLnZpZXcuZW5jb2RlQ2FsbC5fX1BlbmRsZVN0YWtpbmdCYXNlVXBnX2luaXQoXG4gICAgICAgIF9wZW5kbGUsXG4gICAgICAgIF9XRVRILFxuICAgICAgICBfdmVQZW5kbGUsXG4gICAgICAgIF9kaXN0cmlidXRvckVUSCxcbiAgICAgICAgX3BlbmRsZVJvdXRlcixcbiAgICAgICAgX21hc3RlclBlbnBpZSxcbiAgICAgICAge1xuICAgICAgICAgIGNoYWluSWQ6IHRoaXMuY29udGV4dC5jaGFpbklkLnRvU3RyaW5nKCksXG4gICAgICAgICAgYWRkcmVzczogdGhpcy5jb250ZXh0LmFkZHJlc3MsXG4gICAgICAgICAgYmxvY2tUYWc6IHRoaXMuY29udGV4dC5nZXRCbG9ja1RhZyhvdmVycmlkZXMpLFxuICAgICAgICB9LFxuICAgICAgKTtcbiAgICB9LFxuICAgIF9fUGVuZGxlU3Rha2luZ19pbml0KFxuICAgICAgX3BlbmRsZTogc3RyaW5nLFxuICAgICAgX1dFVEg6IHN0cmluZyxcbiAgICAgIF92ZVBlbmRsZTogc3RyaW5nLFxuICAgICAgX2Rpc3RyaWJ1dG9yRVRIOiBzdHJpbmcsXG4gICAgICBfcGVuZGxlUm91dGVyOiBzdHJpbmcsXG4gICAgICBfbWFzdGVyUGVucGllOiBzdHJpbmcsXG4gICAgICBvdmVycmlkZXM/OiBPdmVycmlkZXMsXG4gICAgKTogRXRoQ2FsbFBhcmFtIHtcbiAgICAgIHJldHVybiB0aGlzLnZpZXcuZW5jb2RlQ2FsbC5fX1BlbmRsZVN0YWtpbmdfaW5pdChcbiAgICAgICAgX3BlbmRsZSxcbiAgICAgICAgX1dFVEgsXG4gICAgICAgIF92ZVBlbmRsZSxcbiAgICAgICAgX2Rpc3RyaWJ1dG9yRVRILFxuICAgICAgICBfcGVuZGxlUm91dGVyLFxuICAgICAgICBfbWFzdGVyUGVucGllLFxuICAgICAgICB7XG4gICAgICAgICAgY2hhaW5JZDogdGhpcy5jb250ZXh0LmNoYWluSWQudG9TdHJpbmcoKSxcbiAgICAgICAgICBhZGRyZXNzOiB0aGlzLmNvbnRleHQuYWRkcmVzcyxcbiAgICAgICAgICBibG9ja1RhZzogdGhpcy5jb250ZXh0LmdldEJsb2NrVGFnKG92ZXJyaWRlcyksXG4gICAgICAgIH0sXG4gICAgICApO1xuICAgIH0sXG4gICAgYWNjdW11bGF0ZWRWZVBlbmRsZShvdmVycmlkZXM/OiBPdmVycmlkZXMpOiBFdGhDYWxsUGFyYW0ge1xuICAgICAgcmV0dXJuIHRoaXMudmlldy5lbmNvZGVDYWxsLmFjY3VtdWxhdGVkVmVQZW5kbGUoe1xuICAgICAgICBjaGFpbklkOiB0aGlzLmNvbnRleHQuY2hhaW5JZC50b1N0cmluZygpLFxuICAgICAgICBhZGRyZXNzOiB0aGlzLmNvbnRleHQuYWRkcmVzcyxcbiAgICAgICAgYmxvY2tUYWc6IHRoaXMuY29udGV4dC5nZXRCbG9ja1RhZyhvdmVycmlkZXMpLFxuICAgICAgfSk7XG4gICAgfSxcbiAgICBhZGRQZW5kbGVGZWUoXG4gICAgICBfdmFsdWU6IEJpZ051bWJlcmlzaCxcbiAgICAgIF90bzogc3RyaW5nLFxuICAgICAgX2lzTVBFTkRMRTogYm9vbGVhbixcbiAgICAgIF9pc0FkZHJlc3M6IGJvb2xlYW4sXG4gICAgICBvdmVycmlkZXM/OiBPdmVycmlkZXMsXG4gICAgKTogRXRoQ2FsbFBhcmFtIHtcbiAgICAgIHJldHVybiB0aGlzLnZpZXcuZW5jb2RlQ2FsbC5hZGRQZW5kbGVGZWUoXG4gICAgICAgIF92YWx1ZSxcbiAgICAgICAgX3RvLFxuICAgICAgICBfaXNNUEVORExFLFxuICAgICAgICBfaXNBZGRyZXNzLFxuICAgICAgICB7XG4gICAgICAgICAgY2hhaW5JZDogdGhpcy5jb250ZXh0LmNoYWluSWQudG9TdHJpbmcoKSxcbiAgICAgICAgICBhZGRyZXNzOiB0aGlzLmNvbnRleHQuYWRkcmVzcyxcbiAgICAgICAgICBibG9ja1RhZzogdGhpcy5jb250ZXh0LmdldEJsb2NrVGFnKG92ZXJyaWRlcyksXG4gICAgICAgIH0sXG4gICAgICApO1xuICAgIH0sXG4gICAgYXV0b0JyaWJlRmVlKG92ZXJyaWRlcz86IE92ZXJyaWRlcyk6IEV0aENhbGxQYXJhbSB7XG4gICAgICByZXR1cm4gdGhpcy52aWV3LmVuY29kZUNhbGwuYXV0b0JyaWJlRmVlKHtcbiAgICAgICAgY2hhaW5JZDogdGhpcy5jb250ZXh0LmNoYWluSWQudG9TdHJpbmcoKSxcbiAgICAgICAgYWRkcmVzczogdGhpcy5jb250ZXh0LmFkZHJlc3MsXG4gICAgICAgIGJsb2NrVGFnOiB0aGlzLmNvbnRleHQuZ2V0QmxvY2tUYWcob3ZlcnJpZGVzKSxcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgYmF0Y2hIYXJ2ZXN0TWFya2V0UmV3YXJkcyhcbiAgICAgIF9tYXJrZXRzOiBzdHJpbmdbXSxcbiAgICAgIG1pbkV0aFRvUmVjaWV2ZTogQmlnTnVtYmVyaXNoLFxuICAgICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzLFxuICAgICk6IEV0aENhbGxQYXJhbSB7XG4gICAgICByZXR1cm4gdGhpcy52aWV3LmVuY29kZUNhbGwuYmF0Y2hIYXJ2ZXN0TWFya2V0UmV3YXJkcyhcbiAgICAgICAgX21hcmtldHMsXG4gICAgICAgIG1pbkV0aFRvUmVjaWV2ZSxcbiAgICAgICAge1xuICAgICAgICAgIGNoYWluSWQ6IHRoaXMuY29udGV4dC5jaGFpbklkLnRvU3RyaW5nKCksXG4gICAgICAgICAgYWRkcmVzczogdGhpcy5jb250ZXh0LmFkZHJlc3MsXG4gICAgICAgICAgYmxvY2tUYWc6IHRoaXMuY29udGV4dC5nZXRCbG9ja1RhZyhvdmVycmlkZXMpLFxuICAgICAgICB9LFxuICAgICAgKTtcbiAgICB9LFxuICAgIGJvb3RzdHJhcFZlUGVuZGxlKFxuICAgICAgY2hhaW5JZDogQmlnTnVtYmVyaXNoW10sXG4gICAgICBvdmVycmlkZXM/OiBPdmVycmlkZXMsXG4gICAgKTogRXRoQ2FsbFBhcmFtIHtcbiAgICAgIHJldHVybiB0aGlzLnZpZXcuZW5jb2RlQ2FsbC5ib290c3RyYXBWZVBlbmRsZShjaGFpbklkLCB7XG4gICAgICAgIGNoYWluSWQ6IHRoaXMuY29udGV4dC5jaGFpbklkLnRvU3RyaW5nKCksXG4gICAgICAgIGFkZHJlc3M6IHRoaXMuY29udGV4dC5hZGRyZXNzLFxuICAgICAgICBibG9ja1RhZzogdGhpcy5jb250ZXh0LmdldEJsb2NrVGFnKG92ZXJyaWRlcyksXG4gICAgICB9KTtcbiAgICB9LFxuICAgIGJyaWJlTWFuYWdlcihvdmVycmlkZXM/OiBPdmVycmlkZXMpOiBFdGhDYWxsUGFyYW0ge1xuICAgICAgcmV0dXJuIHRoaXMudmlldy5lbmNvZGVDYWxsLmJyaWJlTWFuYWdlcih7XG4gICAgICAgIGNoYWluSWQ6IHRoaXMuY29udGV4dC5jaGFpbklkLnRvU3RyaW5nKCksXG4gICAgICAgIGFkZHJlc3M6IHRoaXMuY29udGV4dC5hZGRyZXNzLFxuICAgICAgICBibG9ja1RhZzogdGhpcy5jb250ZXh0LmdldEJsb2NrVGFnKG92ZXJyaWRlcyksXG4gICAgICB9KTtcbiAgICB9LFxuICAgIGJyaWJlTWFuYWdlckVPQShvdmVycmlkZXM/OiBPdmVycmlkZXMpOiBFdGhDYWxsUGFyYW0ge1xuICAgICAgcmV0dXJuIHRoaXMudmlldy5lbmNvZGVDYWxsLmJyaWJlTWFuYWdlckVPQSh7XG4gICAgICAgIGNoYWluSWQ6IHRoaXMuY29udGV4dC5jaGFpbklkLnRvU3RyaW5nKCksXG4gICAgICAgIGFkZHJlc3M6IHRoaXMuY29udGV4dC5hZGRyZXNzLFxuICAgICAgICBibG9ja1RhZzogdGhpcy5jb250ZXh0LmdldEJsb2NrVGFnKG92ZXJyaWRlcyksXG4gICAgICB9KTtcbiAgICB9LFxuICAgIGNvbnZlcnRQZW5kbGUoXG4gICAgICBfYW1vdW50OiBCaWdOdW1iZXJpc2gsXG4gICAgICBjaGFpbklkOiBCaWdOdW1iZXJpc2hbXSxcbiAgICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlcyxcbiAgICApOiBFdGhDYWxsUGFyYW0ge1xuICAgICAgcmV0dXJuIHRoaXMudmlldy5lbmNvZGVDYWxsLmNvbnZlcnRQZW5kbGUoX2Ftb3VudCwgY2hhaW5JZCwge1xuICAgICAgICBjaGFpbklkOiB0aGlzLmNvbnRleHQuY2hhaW5JZC50b1N0cmluZygpLFxuICAgICAgICBhZGRyZXNzOiB0aGlzLmNvbnRleHQuYWRkcmVzcyxcbiAgICAgICAgYmxvY2tUYWc6IHRoaXMuY29udGV4dC5nZXRCbG9ja1RhZyhvdmVycmlkZXMpLFxuICAgICAgfSk7XG4gICAgfSxcbiAgICBkZXBvc2l0TWFya2V0KFxuICAgICAgX21hcmtldDogc3RyaW5nLFxuICAgICAgX2Zvcjogc3RyaW5nLFxuICAgICAgX2Zyb206IHN0cmluZyxcbiAgICAgIF9hbW91bnQ6IEJpZ051bWJlcmlzaCxcbiAgICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlcyxcbiAgICApOiBFdGhDYWxsUGFyYW0ge1xuICAgICAgcmV0dXJuIHRoaXMudmlldy5lbmNvZGVDYWxsLmRlcG9zaXRNYXJrZXQoX21hcmtldCwgX2ZvciwgX2Zyb20sIF9hbW91bnQsIHtcbiAgICAgICAgY2hhaW5JZDogdGhpcy5jb250ZXh0LmNoYWluSWQudG9TdHJpbmcoKSxcbiAgICAgICAgYWRkcmVzczogdGhpcy5jb250ZXh0LmFkZHJlc3MsXG4gICAgICAgIGJsb2NrVGFnOiB0aGlzLmNvbnRleHQuZ2V0QmxvY2tUYWcob3ZlcnJpZGVzKSxcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgZGlzdHJpYnV0b3JFVEgob3ZlcnJpZGVzPzogT3ZlcnJpZGVzKTogRXRoQ2FsbFBhcmFtIHtcbiAgICAgIHJldHVybiB0aGlzLnZpZXcuZW5jb2RlQ2FsbC5kaXN0cmlidXRvckVUSCh7XG4gICAgICAgIGNoYWluSWQ6IHRoaXMuY29udGV4dC5jaGFpbklkLnRvU3RyaW5nKCksXG4gICAgICAgIGFkZHJlc3M6IHRoaXMuY29udGV4dC5hZGRyZXNzLFxuICAgICAgICBibG9ja1RhZzogdGhpcy5jb250ZXh0LmdldEJsb2NrVGFnKG92ZXJyaWRlcyksXG4gICAgICB9KTtcbiAgICB9LFxuICAgIGZlZUNvbGxlY3RvcihvdmVycmlkZXM/OiBPdmVycmlkZXMpOiBFdGhDYWxsUGFyYW0ge1xuICAgICAgcmV0dXJuIHRoaXMudmlldy5lbmNvZGVDYWxsLmZlZUNvbGxlY3Rvcih7XG4gICAgICAgIGNoYWluSWQ6IHRoaXMuY29udGV4dC5jaGFpbklkLnRvU3RyaW5nKCksXG4gICAgICAgIGFkZHJlc3M6IHRoaXMuY29udGV4dC5hZGRyZXNzLFxuICAgICAgICBibG9ja1RhZzogdGhpcy5jb250ZXh0LmdldEJsb2NrVGFnKG92ZXJyaWRlcyksXG4gICAgICB9KTtcbiAgICB9LFxuICAgIGdldFBvb2xMZW5ndGgob3ZlcnJpZGVzPzogT3ZlcnJpZGVzKTogRXRoQ2FsbFBhcmFtIHtcbiAgICAgIHJldHVybiB0aGlzLnZpZXcuZW5jb2RlQ2FsbC5nZXRQb29sTGVuZ3RoKHtcbiAgICAgICAgY2hhaW5JZDogdGhpcy5jb250ZXh0LmNoYWluSWQudG9TdHJpbmcoKSxcbiAgICAgICAgYWRkcmVzczogdGhpcy5jb250ZXh0LmFkZHJlc3MsXG4gICAgICAgIGJsb2NrVGFnOiB0aGlzLmNvbnRleHQuZ2V0QmxvY2tUYWcob3ZlcnJpZGVzKSxcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgaGFydmVzdENhbGxlclBlbmRsZUZlZShvdmVycmlkZXM/OiBPdmVycmlkZXMpOiBFdGhDYWxsUGFyYW0ge1xuICAgICAgcmV0dXJuIHRoaXMudmlldy5lbmNvZGVDYWxsLmhhcnZlc3RDYWxsZXJQZW5kbGVGZWUoe1xuICAgICAgICBjaGFpbklkOiB0aGlzLmNvbnRleHQuY2hhaW5JZC50b1N0cmluZygpLFxuICAgICAgICBhZGRyZXNzOiB0aGlzLmNvbnRleHQuYWRkcmVzcyxcbiAgICAgICAgYmxvY2tUYWc6IHRoaXMuY29udGV4dC5nZXRCbG9ja1RhZyhvdmVycmlkZXMpLFxuICAgICAgfSk7XG4gICAgfSxcbiAgICBoYXJ2ZXN0TWFya2V0UmV3YXJkKFxuICAgICAgX21hcmtldDogc3RyaW5nLFxuICAgICAgX2NhbGxlcjogc3RyaW5nLFxuICAgICAgX21pbkV0aFJlY2l2ZTogQmlnTnVtYmVyaXNoLFxuICAgICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzLFxuICAgICk6IEV0aENhbGxQYXJhbSB7XG4gICAgICByZXR1cm4gdGhpcy52aWV3LmVuY29kZUNhbGwuaGFydmVzdE1hcmtldFJld2FyZChcbiAgICAgICAgX21hcmtldCxcbiAgICAgICAgX2NhbGxlcixcbiAgICAgICAgX21pbkV0aFJlY2l2ZSxcbiAgICAgICAge1xuICAgICAgICAgIGNoYWluSWQ6IHRoaXMuY29udGV4dC5jaGFpbklkLnRvU3RyaW5nKCksXG4gICAgICAgICAgYWRkcmVzczogdGhpcy5jb250ZXh0LmFkZHJlc3MsXG4gICAgICAgICAgYmxvY2tUYWc6IHRoaXMuY29udGV4dC5nZXRCbG9ja1RhZyhvdmVycmlkZXMpLFxuICAgICAgICB9LFxuICAgICAgKTtcbiAgICB9LFxuICAgIGhhcnZlc3RUaW1lR2FwKG92ZXJyaWRlcz86IE92ZXJyaWRlcyk6IEV0aENhbGxQYXJhbSB7XG4gICAgICByZXR1cm4gdGhpcy52aWV3LmVuY29kZUNhbGwuaGFydmVzdFRpbWVHYXAoe1xuICAgICAgICBjaGFpbklkOiB0aGlzLmNvbnRleHQuY2hhaW5JZC50b1N0cmluZygpLFxuICAgICAgICBhZGRyZXNzOiB0aGlzLmNvbnRleHQuYWRkcmVzcyxcbiAgICAgICAgYmxvY2tUYWc6IHRoaXMuY29udGV4dC5nZXRCbG9ja1RhZyhvdmVycmlkZXMpLFxuICAgICAgfSk7XG4gICAgfSxcbiAgICBoYXJ2ZXN0VmVQZW5kbGVSZXdhcmQoXG4gICAgICBfcG9vbHM6IHN0cmluZ1tdLFxuICAgICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzLFxuICAgICk6IEV0aENhbGxQYXJhbSB7XG4gICAgICByZXR1cm4gdGhpcy52aWV3LmVuY29kZUNhbGwuaGFydmVzdFZlUGVuZGxlUmV3YXJkKF9wb29scywge1xuICAgICAgICBjaGFpbklkOiB0aGlzLmNvbnRleHQuY2hhaW5JZC50b1N0cmluZygpLFxuICAgICAgICBhZGRyZXNzOiB0aGlzLmNvbnRleHQuYWRkcmVzcyxcbiAgICAgICAgYmxvY2tUYWc6IHRoaXMuY29udGV4dC5nZXRCbG9ja1RhZyhvdmVycmlkZXMpLFxuICAgICAgfSk7XG4gICAgfSxcbiAgICBpbmNyZWFzZUxvY2tUaW1lKFxuICAgICAgX3VubG9ja1RpbWU6IEJpZ051bWJlcmlzaCxcbiAgICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlcyxcbiAgICApOiBFdGhDYWxsUGFyYW0ge1xuICAgICAgcmV0dXJuIHRoaXMudmlldy5lbmNvZGVDYWxsLmluY3JlYXNlTG9ja1RpbWUoX3VubG9ja1RpbWUsIHtcbiAgICAgICAgY2hhaW5JZDogdGhpcy5jb250ZXh0LmNoYWluSWQudG9TdHJpbmcoKSxcbiAgICAgICAgYWRkcmVzczogdGhpcy5jb250ZXh0LmFkZHJlc3MsXG4gICAgICAgIGJsb2NrVGFnOiB0aGlzLmNvbnRleHQuZ2V0QmxvY2tUYWcob3ZlcnJpZGVzKSxcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgbG9ja1BlcmlvZChvdmVycmlkZXM/OiBPdmVycmlkZXMpOiBFdGhDYWxsUGFyYW0ge1xuICAgICAgcmV0dXJuIHRoaXMudmlldy5lbmNvZGVDYWxsLmxvY2tQZXJpb2Qoe1xuICAgICAgICBjaGFpbklkOiB0aGlzLmNvbnRleHQuY2hhaW5JZC50b1N0cmluZygpLFxuICAgICAgICBhZGRyZXNzOiB0aGlzLmNvbnRleHQuYWRkcmVzcyxcbiAgICAgICAgYmxvY2tUYWc6IHRoaXMuY29udGV4dC5nZXRCbG9ja1RhZyhvdmVycmlkZXMpLFxuICAgICAgfSk7XG4gICAgfSxcbiAgICBtUGVuZGxlQ29udmVydG9yKG92ZXJyaWRlcz86IE92ZXJyaWRlcyk6IEV0aENhbGxQYXJhbSB7XG4gICAgICByZXR1cm4gdGhpcy52aWV3LmVuY29kZUNhbGwubVBlbmRsZUNvbnZlcnRvcih7XG4gICAgICAgIGNoYWluSWQ6IHRoaXMuY29udGV4dC5jaGFpbklkLnRvU3RyaW5nKCksXG4gICAgICAgIGFkZHJlc3M6IHRoaXMuY29udGV4dC5hZGRyZXNzLFxuICAgICAgICBibG9ja1RhZzogdGhpcy5jb250ZXh0LmdldEJsb2NrVGFnKG92ZXJyaWRlcyksXG4gICAgICB9KTtcbiAgICB9LFxuICAgIG1QZW5kbGVPRlQob3ZlcnJpZGVzPzogT3ZlcnJpZGVzKTogRXRoQ2FsbFBhcmFtIHtcbiAgICAgIHJldHVybiB0aGlzLnZpZXcuZW5jb2RlQ2FsbC5tUGVuZGxlT0ZUKHtcbiAgICAgICAgY2hhaW5JZDogdGhpcy5jb250ZXh0LmNoYWluSWQudG9TdHJpbmcoKSxcbiAgICAgICAgYWRkcmVzczogdGhpcy5jb250ZXh0LmFkZHJlc3MsXG4gICAgICAgIGJsb2NrVGFnOiB0aGlzLmNvbnRleHQuZ2V0QmxvY2tUYWcob3ZlcnJpZGVzKSxcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgbWFya2V0RGVwb3NpdEhlbHBlcihvdmVycmlkZXM/OiBPdmVycmlkZXMpOiBFdGhDYWxsUGFyYW0ge1xuICAgICAgcmV0dXJuIHRoaXMudmlldy5lbmNvZGVDYWxsLm1hcmtldERlcG9zaXRIZWxwZXIoe1xuICAgICAgICBjaGFpbklkOiB0aGlzLmNvbnRleHQuY2hhaW5JZC50b1N0cmluZygpLFxuICAgICAgICBhZGRyZXNzOiB0aGlzLmNvbnRleHQuYWRkcmVzcyxcbiAgICAgICAgYmxvY2tUYWc6IHRoaXMuY29udGV4dC5nZXRCbG9ja1RhZyhvdmVycmlkZXMpLFxuICAgICAgfSk7XG4gICAgfSxcbiAgICBtYXN0ZXJQZW5waWUob3ZlcnJpZGVzPzogT3ZlcnJpZGVzKTogRXRoQ2FsbFBhcmFtIHtcbiAgICAgIHJldHVybiB0aGlzLnZpZXcuZW5jb2RlQ2FsbC5tYXN0ZXJQZW5waWUoe1xuICAgICAgICBjaGFpbklkOiB0aGlzLmNvbnRleHQuY2hhaW5JZC50b1N0cmluZygpLFxuICAgICAgICBhZGRyZXNzOiB0aGlzLmNvbnRleHQuYWRkcmVzcyxcbiAgICAgICAgYmxvY2tUYWc6IHRoaXMuY29udGV4dC5nZXRCbG9ja1RhZyhvdmVycmlkZXMpLFxuICAgICAgfSk7XG4gICAgfSxcbiAgICBvd25lcihvdmVycmlkZXM/OiBPdmVycmlkZXMpOiBFdGhDYWxsUGFyYW0ge1xuICAgICAgcmV0dXJuIHRoaXMudmlldy5lbmNvZGVDYWxsLm93bmVyKHtcbiAgICAgICAgY2hhaW5JZDogdGhpcy5jb250ZXh0LmNoYWluSWQudG9TdHJpbmcoKSxcbiAgICAgICAgYWRkcmVzczogdGhpcy5jb250ZXh0LmFkZHJlc3MsXG4gICAgICAgIGJsb2NrVGFnOiB0aGlzLmNvbnRleHQuZ2V0QmxvY2tUYWcob3ZlcnJpZGVzKSxcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgcGF1c2Uob3ZlcnJpZGVzPzogT3ZlcnJpZGVzKTogRXRoQ2FsbFBhcmFtIHtcbiAgICAgIHJldHVybiB0aGlzLnZpZXcuZW5jb2RlQ2FsbC5wYXVzZSh7XG4gICAgICAgIGNoYWluSWQ6IHRoaXMuY29udGV4dC5jaGFpbklkLnRvU3RyaW5nKCksXG4gICAgICAgIGFkZHJlc3M6IHRoaXMuY29udGV4dC5hZGRyZXNzLFxuICAgICAgICBibG9ja1RhZzogdGhpcy5jb250ZXh0LmdldEJsb2NrVGFnKG92ZXJyaWRlcyksXG4gICAgICB9KTtcbiAgICB9LFxuICAgIHBhdXNlZChvdmVycmlkZXM/OiBPdmVycmlkZXMpOiBFdGhDYWxsUGFyYW0ge1xuICAgICAgcmV0dXJuIHRoaXMudmlldy5lbmNvZGVDYWxsLnBhdXNlZCh7XG4gICAgICAgIGNoYWluSWQ6IHRoaXMuY29udGV4dC5jaGFpbklkLnRvU3RyaW5nKCksXG4gICAgICAgIGFkZHJlc3M6IHRoaXMuY29udGV4dC5hZGRyZXNzLFxuICAgICAgICBibG9ja1RhZzogdGhpcy5jb250ZXh0LmdldEJsb2NrVGFnKG92ZXJyaWRlcyksXG4gICAgICB9KTtcbiAgICB9LFxuICAgIHBlbmRsZUZlZUluZm9zKGFyZzA6IEJpZ051bWJlcmlzaCwgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzKTogRXRoQ2FsbFBhcmFtIHtcbiAgICAgIHJldHVybiB0aGlzLnZpZXcuZW5jb2RlQ2FsbC5wZW5kbGVGZWVJbmZvcyhhcmcwLCB7XG4gICAgICAgIGNoYWluSWQ6IHRoaXMuY29udGV4dC5jaGFpbklkLnRvU3RyaW5nKCksXG4gICAgICAgIGFkZHJlc3M6IHRoaXMuY29udGV4dC5hZGRyZXNzLFxuICAgICAgICBibG9ja1RhZzogdGhpcy5jb250ZXh0LmdldEJsb2NrVGFnKG92ZXJyaWRlcyksXG4gICAgICB9KTtcbiAgICB9LFxuICAgIHBlbmRsZVJvdXRlcihvdmVycmlkZXM/OiBPdmVycmlkZXMpOiBFdGhDYWxsUGFyYW0ge1xuICAgICAgcmV0dXJuIHRoaXMudmlldy5lbmNvZGVDYWxsLnBlbmRsZVJvdXRlcih7XG4gICAgICAgIGNoYWluSWQ6IHRoaXMuY29udGV4dC5jaGFpbklkLnRvU3RyaW5nKCksXG4gICAgICAgIGFkZHJlc3M6IHRoaXMuY29udGV4dC5hZGRyZXNzLFxuICAgICAgICBibG9ja1RhZzogdGhpcy5jb250ZXh0LmdldEJsb2NrVGFnKG92ZXJyaWRlcyksXG4gICAgICB9KTtcbiAgICB9LFxuICAgIHBlbmRsZVZvdGUob3ZlcnJpZGVzPzogT3ZlcnJpZGVzKTogRXRoQ2FsbFBhcmFtIHtcbiAgICAgIHJldHVybiB0aGlzLnZpZXcuZW5jb2RlQ2FsbC5wZW5kbGVWb3RlKHtcbiAgICAgICAgY2hhaW5JZDogdGhpcy5jb250ZXh0LmNoYWluSWQudG9TdHJpbmcoKSxcbiAgICAgICAgYWRkcmVzczogdGhpcy5jb250ZXh0LmFkZHJlc3MsXG4gICAgICAgIGJsb2NrVGFnOiB0aGlzLmNvbnRleHQuZ2V0QmxvY2tUYWcob3ZlcnJpZGVzKSxcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgcG9vbFRva2VuTGlzdChhcmcwOiBCaWdOdW1iZXJpc2gsIG92ZXJyaWRlcz86IE92ZXJyaWRlcyk6IEV0aENhbGxQYXJhbSB7XG4gICAgICByZXR1cm4gdGhpcy52aWV3LmVuY29kZUNhbGwucG9vbFRva2VuTGlzdChhcmcwLCB7XG4gICAgICAgIGNoYWluSWQ6IHRoaXMuY29udGV4dC5jaGFpbklkLnRvU3RyaW5nKCksXG4gICAgICAgIGFkZHJlc3M6IHRoaXMuY29udGV4dC5hZGRyZXNzLFxuICAgICAgICBibG9ja1RhZzogdGhpcy5jb250ZXh0LmdldEJsb2NrVGFnKG92ZXJyaWRlcyksXG4gICAgICB9KTtcbiAgICB9LFxuICAgIHBvb2xzKGFyZzA6IHN0cmluZywgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzKTogRXRoQ2FsbFBhcmFtIHtcbiAgICAgIHJldHVybiB0aGlzLnZpZXcuZW5jb2RlQ2FsbC5wb29scyhhcmcwLCB7XG4gICAgICAgIGNoYWluSWQ6IHRoaXMuY29udGV4dC5jaGFpbklkLnRvU3RyaW5nKCksXG4gICAgICAgIGFkZHJlc3M6IHRoaXMuY29udGV4dC5hZGRyZXNzLFxuICAgICAgICBibG9ja1RhZzogdGhpcy5jb250ZXh0LmdldEJsb2NrVGFnKG92ZXJyaWRlcyksXG4gICAgICB9KTtcbiAgICB9LFxuICAgIHByb3RvY29sRmVlKG92ZXJyaWRlcz86IE92ZXJyaWRlcyk6IEV0aENhbGxQYXJhbSB7XG4gICAgICByZXR1cm4gdGhpcy52aWV3LmVuY29kZUNhbGwucHJvdG9jb2xGZWUoe1xuICAgICAgICBjaGFpbklkOiB0aGlzLmNvbnRleHQuY2hhaW5JZC50b1N0cmluZygpLFxuICAgICAgICBhZGRyZXNzOiB0aGlzLmNvbnRleHQuYWRkcmVzcyxcbiAgICAgICAgYmxvY2tUYWc6IHRoaXMuY29udGV4dC5nZXRCbG9ja1RhZyhvdmVycmlkZXMpLFxuICAgICAgfSk7XG4gICAgfSxcbiAgICByZWdpc3RlclBvb2woXG4gICAgICBfbWFya2V0OiBzdHJpbmcsXG4gICAgICBfYWxsb2NQb2ludHM6IEJpZ051bWJlcmlzaCxcbiAgICAgIG5hbWU6IHN0cmluZyxcbiAgICAgIHN5bWJvbDogc3RyaW5nLFxuICAgICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzLFxuICAgICk6IEV0aENhbGxQYXJhbSB7XG4gICAgICByZXR1cm4gdGhpcy52aWV3LmVuY29kZUNhbGwucmVnaXN0ZXJQb29sKFxuICAgICAgICBfbWFya2V0LFxuICAgICAgICBfYWxsb2NQb2ludHMsXG4gICAgICAgIG5hbWUsXG4gICAgICAgIHN5bWJvbCxcbiAgICAgICAge1xuICAgICAgICAgIGNoYWluSWQ6IHRoaXMuY29udGV4dC5jaGFpbklkLnRvU3RyaW5nKCksXG4gICAgICAgICAgYWRkcmVzczogdGhpcy5jb250ZXh0LmFkZHJlc3MsXG4gICAgICAgICAgYmxvY2tUYWc6IHRoaXMuY29udGV4dC5nZXRCbG9ja1RhZyhvdmVycmlkZXMpLFxuICAgICAgICB9LFxuICAgICAgKTtcbiAgICB9LFxuICAgIHJlbW92ZVBlbmRsZUZlZShfaW5kZXg6IEJpZ051bWJlcmlzaCwgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzKTogRXRoQ2FsbFBhcmFtIHtcbiAgICAgIHJldHVybiB0aGlzLnZpZXcuZW5jb2RlQ2FsbC5yZW1vdmVQZW5kbGVGZWUoX2luZGV4LCB7XG4gICAgICAgIGNoYWluSWQ6IHRoaXMuY29udGV4dC5jaGFpbklkLnRvU3RyaW5nKCksXG4gICAgICAgIGFkZHJlc3M6IHRoaXMuY29udGV4dC5hZGRyZXNzLFxuICAgICAgICBibG9ja1RhZzogdGhpcy5jb250ZXh0LmdldEJsb2NrVGFnKG92ZXJyaWRlcyksXG4gICAgICB9KTtcbiAgICB9LFxuICAgIHJlbm91bmNlT3duZXJzaGlwKG92ZXJyaWRlcz86IE92ZXJyaWRlcyk6IEV0aENhbGxQYXJhbSB7XG4gICAgICByZXR1cm4gdGhpcy52aWV3LmVuY29kZUNhbGwucmVub3VuY2VPd25lcnNoaXAoe1xuICAgICAgICBjaGFpbklkOiB0aGlzLmNvbnRleHQuY2hhaW5JZC50b1N0cmluZygpLFxuICAgICAgICBhZGRyZXNzOiB0aGlzLmNvbnRleHQuYWRkcmVzcyxcbiAgICAgICAgYmxvY2tUYWc6IHRoaXMuY29udGV4dC5nZXRCbG9ja1RhZyhvdmVycmlkZXMpLFxuICAgICAgfSk7XG4gICAgfSxcbiAgICBzZXRBdXRvQnJpYmVGZWUoXG4gICAgICBfYXV0b0JyaWJlRmVlOiBCaWdOdW1iZXJpc2gsXG4gICAgICBvdmVycmlkZXM/OiBPdmVycmlkZXMsXG4gICAgKTogRXRoQ2FsbFBhcmFtIHtcbiAgICAgIHJldHVybiB0aGlzLnZpZXcuZW5jb2RlQ2FsbC5zZXRBdXRvQnJpYmVGZWUoX2F1dG9CcmliZUZlZSwge1xuICAgICAgICBjaGFpbklkOiB0aGlzLmNvbnRleHQuY2hhaW5JZC50b1N0cmluZygpLFxuICAgICAgICBhZGRyZXNzOiB0aGlzLmNvbnRleHQuYWRkcmVzcyxcbiAgICAgICAgYmxvY2tUYWc6IHRoaXMuY29udGV4dC5nZXRCbG9ja1RhZyhvdmVycmlkZXMpLFxuICAgICAgfSk7XG4gICAgfSxcbiAgICBzZXRCcmliZU1hbmFnZXIoXG4gICAgICBfYnJpYmVNYW5hZ2VyOiBzdHJpbmcsXG4gICAgICBfYnJpYmVNYW5hZ2VyRU9BOiBzdHJpbmcsXG4gICAgICBvdmVycmlkZXM/OiBPdmVycmlkZXMsXG4gICAgKTogRXRoQ2FsbFBhcmFtIHtcbiAgICAgIHJldHVybiB0aGlzLnZpZXcuZW5jb2RlQ2FsbC5zZXRCcmliZU1hbmFnZXIoXG4gICAgICAgIF9icmliZU1hbmFnZXIsXG4gICAgICAgIF9icmliZU1hbmFnZXJFT0EsXG4gICAgICAgIHtcbiAgICAgICAgICBjaGFpbklkOiB0aGlzLmNvbnRleHQuY2hhaW5JZC50b1N0cmluZygpLFxuICAgICAgICAgIGFkZHJlc3M6IHRoaXMuY29udGV4dC5hZGRyZXNzLFxuICAgICAgICAgIGJsb2NrVGFnOiB0aGlzLmNvbnRleHQuZ2V0QmxvY2tUYWcob3ZlcnJpZGVzKSxcbiAgICAgICAgfSxcbiAgICAgICk7XG4gICAgfSxcbiAgICBzZXRFVEhaYXBwZXIoX0VUSFphcHBlcjogc3RyaW5nLCBvdmVycmlkZXM/OiBPdmVycmlkZXMpOiBFdGhDYWxsUGFyYW0ge1xuICAgICAgcmV0dXJuIHRoaXMudmlldy5lbmNvZGVDYWxsLnNldEVUSFphcHBlcihfRVRIWmFwcGVyLCB7XG4gICAgICAgIGNoYWluSWQ6IHRoaXMuY29udGV4dC5jaGFpbklkLnRvU3RyaW5nKCksXG4gICAgICAgIGFkZHJlc3M6IHRoaXMuY29udGV4dC5hZGRyZXNzLFxuICAgICAgICBibG9ja1RhZzogdGhpcy5jb250ZXh0LmdldEJsb2NrVGFnKG92ZXJyaWRlcyksXG4gICAgICB9KTtcbiAgICB9LFxuICAgIHNldEhhcnZlc3RUaW1lR2FwKFxuICAgICAgX3BlcmlvZDogQmlnTnVtYmVyaXNoLFxuICAgICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzLFxuICAgICk6IEV0aENhbGxQYXJhbSB7XG4gICAgICByZXR1cm4gdGhpcy52aWV3LmVuY29kZUNhbGwuc2V0SGFydmVzdFRpbWVHYXAoX3BlcmlvZCwge1xuICAgICAgICBjaGFpbklkOiB0aGlzLmNvbnRleHQuY2hhaW5JZC50b1N0cmluZygpLFxuICAgICAgICBhZGRyZXNzOiB0aGlzLmNvbnRleHQuYWRkcmVzcyxcbiAgICAgICAgYmxvY2tUYWc6IHRoaXMuY29udGV4dC5nZXRCbG9ja1RhZyhvdmVycmlkZXMpLFxuICAgICAgfSk7XG4gICAgfSxcbiAgICBzZXRMb2NrRGF5cyhcbiAgICAgIF9uZXdMb2NrUGVyaW9kOiBCaWdOdW1iZXJpc2gsXG4gICAgICBvdmVycmlkZXM/OiBPdmVycmlkZXMsXG4gICAgKTogRXRoQ2FsbFBhcmFtIHtcbiAgICAgIHJldHVybiB0aGlzLnZpZXcuZW5jb2RlQ2FsbC5zZXRMb2NrRGF5cyhfbmV3TG9ja1BlcmlvZCwge1xuICAgICAgICBjaGFpbklkOiB0aGlzLmNvbnRleHQuY2hhaW5JZC50b1N0cmluZygpLFxuICAgICAgICBhZGRyZXNzOiB0aGlzLmNvbnRleHQuYWRkcmVzcyxcbiAgICAgICAgYmxvY2tUYWc6IHRoaXMuY29udGV4dC5nZXRCbG9ja1RhZyhvdmVycmlkZXMpLFxuICAgICAgfSk7XG4gICAgfSxcbiAgICBzZXRNUGVuZGxlQ29udmVydG9yKFxuICAgICAgX21QZW5kbGVDb252ZXJ0b3I6IHN0cmluZyxcbiAgICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlcyxcbiAgICApOiBFdGhDYWxsUGFyYW0ge1xuICAgICAgcmV0dXJuIHRoaXMudmlldy5lbmNvZGVDYWxsLnNldE1QZW5kbGVDb252ZXJ0b3IoX21QZW5kbGVDb252ZXJ0b3IsIHtcbiAgICAgICAgY2hhaW5JZDogdGhpcy5jb250ZXh0LmNoYWluSWQudG9TdHJpbmcoKSxcbiAgICAgICAgYWRkcmVzczogdGhpcy5jb250ZXh0LmFkZHJlc3MsXG4gICAgICAgIGJsb2NrVGFnOiB0aGlzLmNvbnRleHQuZ2V0QmxvY2tUYWcob3ZlcnJpZGVzKSxcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgc2V0TVBlbmRsZU9GVChfc2V0TVBlbmRsZU9GVDogc3RyaW5nLCBvdmVycmlkZXM/OiBPdmVycmlkZXMpOiBFdGhDYWxsUGFyYW0ge1xuICAgICAgcmV0dXJuIHRoaXMudmlldy5lbmNvZGVDYWxsLnNldE1QZW5kbGVPRlQoX3NldE1QZW5kbGVPRlQsIHtcbiAgICAgICAgY2hhaW5JZDogdGhpcy5jb250ZXh0LmNoYWluSWQudG9TdHJpbmcoKSxcbiAgICAgICAgYWRkcmVzczogdGhpcy5jb250ZXh0LmFkZHJlc3MsXG4gICAgICAgIGJsb2NrVGFnOiB0aGlzLmNvbnRleHQuZ2V0QmxvY2tUYWcob3ZlcnJpZGVzKSxcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgc2V0TWFya2V0RGVwb3NpdEhlbHBlcihcbiAgICAgIF9oZWxwZXI6IHN0cmluZyxcbiAgICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlcyxcbiAgICApOiBFdGhDYWxsUGFyYW0ge1xuICAgICAgcmV0dXJuIHRoaXMudmlldy5lbmNvZGVDYWxsLnNldE1hcmtldERlcG9zaXRIZWxwZXIoX2hlbHBlciwge1xuICAgICAgICBjaGFpbklkOiB0aGlzLmNvbnRleHQuY2hhaW5JZC50b1N0cmluZygpLFxuICAgICAgICBhZGRyZXNzOiB0aGlzLmNvbnRleHQuYWRkcmVzcyxcbiAgICAgICAgYmxvY2tUYWc6IHRoaXMuY29udGV4dC5nZXRCbG9ja1RhZyhvdmVycmlkZXMpLFxuICAgICAgfSk7XG4gICAgfSxcbiAgICBzZXRQZW5kbGVGZWUoXG4gICAgICBfaW5kZXg6IEJpZ051bWJlcmlzaCxcbiAgICAgIF92YWx1ZTogQmlnTnVtYmVyaXNoLFxuICAgICAgX3RvOiBzdHJpbmcsXG4gICAgICBfaXNNUEVORExFOiBib29sZWFuLFxuICAgICAgX2lzQWRkcmVzczogYm9vbGVhbixcbiAgICAgIF9pc0FjdGl2ZTogYm9vbGVhbixcbiAgICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlcyxcbiAgICApOiBFdGhDYWxsUGFyYW0ge1xuICAgICAgcmV0dXJuIHRoaXMudmlldy5lbmNvZGVDYWxsLnNldFBlbmRsZUZlZShcbiAgICAgICAgX2luZGV4LFxuICAgICAgICBfdmFsdWUsXG4gICAgICAgIF90byxcbiAgICAgICAgX2lzTVBFTkRMRSxcbiAgICAgICAgX2lzQWRkcmVzcyxcbiAgICAgICAgX2lzQWN0aXZlLFxuICAgICAgICB7XG4gICAgICAgICAgY2hhaW5JZDogdGhpcy5jb250ZXh0LmNoYWluSWQudG9TdHJpbmcoKSxcbiAgICAgICAgICBhZGRyZXNzOiB0aGlzLmNvbnRleHQuYWRkcmVzcyxcbiAgICAgICAgICBibG9ja1RhZzogdGhpcy5jb250ZXh0LmdldEJsb2NrVGFnKG92ZXJyaWRlcyksXG4gICAgICAgIH0sXG4gICAgICApO1xuICAgIH0sXG4gICAgc2V0U21hcnRDb252ZXJ0KFxuICAgICAgX3NtYXJ0UGVuZGxlQ29udmVydDogc3RyaW5nLFxuICAgICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzLFxuICAgICk6IEV0aENhbGxQYXJhbSB7XG4gICAgICByZXR1cm4gdGhpcy52aWV3LmVuY29kZUNhbGwuc2V0U21hcnRDb252ZXJ0KF9zbWFydFBlbmRsZUNvbnZlcnQsIHtcbiAgICAgICAgY2hhaW5JZDogdGhpcy5jb250ZXh0LmNoYWluSWQudG9TdHJpbmcoKSxcbiAgICAgICAgYWRkcmVzczogdGhpcy5jb250ZXh0LmFkZHJlc3MsXG4gICAgICAgIGJsb2NrVGFnOiB0aGlzLmNvbnRleHQuZ2V0QmxvY2tUYWcob3ZlcnJpZGVzKSxcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgc2V0Vm90ZShcbiAgICAgIF9wZW5kbGVWb3RlOiBzdHJpbmcsXG4gICAgICBfdmVQZW5kbGVIYXJ2ZXN0Q2FsbGVyRmVlOiBCaWdOdW1iZXJpc2gsXG4gICAgICBfaGFydmVzdENhbGxlclBlbmRsZUZlZTogQmlnTnVtYmVyaXNoLFxuICAgICAgX3Byb3RvY29sRmVlOiBCaWdOdW1iZXJpc2gsXG4gICAgICBfZmVlQ29sbGVjdG9yOiBzdHJpbmcsXG4gICAgICBvdmVycmlkZXM/OiBPdmVycmlkZXMsXG4gICAgKTogRXRoQ2FsbFBhcmFtIHtcbiAgICAgIHJldHVybiB0aGlzLnZpZXcuZW5jb2RlQ2FsbC5zZXRWb3RlKFxuICAgICAgICBfcGVuZGxlVm90ZSxcbiAgICAgICAgX3ZlUGVuZGxlSGFydmVzdENhbGxlckZlZSxcbiAgICAgICAgX2hhcnZlc3RDYWxsZXJQZW5kbGVGZWUsXG4gICAgICAgIF9wcm90b2NvbEZlZSxcbiAgICAgICAgX2ZlZUNvbGxlY3RvcixcbiAgICAgICAge1xuICAgICAgICAgIGNoYWluSWQ6IHRoaXMuY29udGV4dC5jaGFpbklkLnRvU3RyaW5nKCksXG4gICAgICAgICAgYWRkcmVzczogdGhpcy5jb250ZXh0LmFkZHJlc3MsXG4gICAgICAgICAgYmxvY2tUYWc6IHRoaXMuY29udGV4dC5nZXRCbG9ja1RhZyhvdmVycmlkZXMpLFxuICAgICAgICB9LFxuICAgICAgKTtcbiAgICB9LFxuICAgIHNldFZvdGVNYW5hZ2VyKF92b3RlTWFuYWdlcjogc3RyaW5nLCBvdmVycmlkZXM/OiBPdmVycmlkZXMpOiBFdGhDYWxsUGFyYW0ge1xuICAgICAgcmV0dXJuIHRoaXMudmlldy5lbmNvZGVDYWxsLnNldFZvdGVNYW5hZ2VyKF92b3RlTWFuYWdlciwge1xuICAgICAgICBjaGFpbklkOiB0aGlzLmNvbnRleHQuY2hhaW5JZC50b1N0cmluZygpLFxuICAgICAgICBhZGRyZXNzOiB0aGlzLmNvbnRleHQuYWRkcmVzcyxcbiAgICAgICAgYmxvY2tUYWc6IHRoaXMuY29udGV4dC5nZXRCbG9ja1RhZyhvdmVycmlkZXMpLFxuICAgICAgfSk7XG4gICAgfSxcbiAgICBzZXRtYXN0ZXJQZW5waWUoXG4gICAgICBfbWFzdGVyUGVucGllOiBzdHJpbmcsXG4gICAgICBvdmVycmlkZXM/OiBPdmVycmlkZXMsXG4gICAgKTogRXRoQ2FsbFBhcmFtIHtcbiAgICAgIHJldHVybiB0aGlzLnZpZXcuZW5jb2RlQ2FsbC5zZXRtYXN0ZXJQZW5waWUoX21hc3RlclBlbnBpZSwge1xuICAgICAgICBjaGFpbklkOiB0aGlzLmNvbnRleHQuY2hhaW5JZC50b1N0cmluZygpLFxuICAgICAgICBhZGRyZXNzOiB0aGlzLmNvbnRleHQuYWRkcmVzcyxcbiAgICAgICAgYmxvY2tUYWc6IHRoaXMuY29udGV4dC5nZXRCbG9ja1RhZyhvdmVycmlkZXMpLFxuICAgICAgfSk7XG4gICAgfSxcbiAgICBzbWFydFBlbmRsZUNvbnZlcnQob3ZlcnJpZGVzPzogT3ZlcnJpZGVzKTogRXRoQ2FsbFBhcmFtIHtcbiAgICAgIHJldHVybiB0aGlzLnZpZXcuZW5jb2RlQ2FsbC5zbWFydFBlbmRsZUNvbnZlcnQoe1xuICAgICAgICBjaGFpbklkOiB0aGlzLmNvbnRleHQuY2hhaW5JZC50b1N0cmluZygpLFxuICAgICAgICBhZGRyZXNzOiB0aGlzLmNvbnRleHQuYWRkcmVzcyxcbiAgICAgICAgYmxvY2tUYWc6IHRoaXMuY29udGV4dC5nZXRCbG9ja1RhZyhvdmVycmlkZXMpLFxuICAgICAgfSk7XG4gICAgfSxcbiAgICB0b3RhbFBlbmRsZUZlZShvdmVycmlkZXM/OiBPdmVycmlkZXMpOiBFdGhDYWxsUGFyYW0ge1xuICAgICAgcmV0dXJuIHRoaXMudmlldy5lbmNvZGVDYWxsLnRvdGFsUGVuZGxlRmVlKHtcbiAgICAgICAgY2hhaW5JZDogdGhpcy5jb250ZXh0LmNoYWluSWQudG9TdHJpbmcoKSxcbiAgICAgICAgYWRkcmVzczogdGhpcy5jb250ZXh0LmFkZHJlc3MsXG4gICAgICAgIGJsb2NrVGFnOiB0aGlzLmNvbnRleHQuZ2V0QmxvY2tUYWcob3ZlcnJpZGVzKSxcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgdG90YWxVbmNsYWltZWRFVEgob3ZlcnJpZGVzPzogT3ZlcnJpZGVzKTogRXRoQ2FsbFBhcmFtIHtcbiAgICAgIHJldHVybiB0aGlzLnZpZXcuZW5jb2RlQ2FsbC50b3RhbFVuY2xhaW1lZEVUSCh7XG4gICAgICAgIGNoYWluSWQ6IHRoaXMuY29udGV4dC5jaGFpbklkLnRvU3RyaW5nKCksXG4gICAgICAgIGFkZHJlc3M6IHRoaXMuY29udGV4dC5hZGRyZXNzLFxuICAgICAgICBibG9ja1RhZzogdGhpcy5jb250ZXh0LmdldEJsb2NrVGFnKG92ZXJyaWRlcyksXG4gICAgICB9KTtcbiAgICB9LFxuICAgIHRyYW5zZmVyT3duZXJzaGlwKG5ld093bmVyOiBzdHJpbmcsIG92ZXJyaWRlcz86IE92ZXJyaWRlcyk6IEV0aENhbGxQYXJhbSB7XG4gICAgICByZXR1cm4gdGhpcy52aWV3LmVuY29kZUNhbGwudHJhbnNmZXJPd25lcnNoaXAobmV3T3duZXIsIHtcbiAgICAgICAgY2hhaW5JZDogdGhpcy5jb250ZXh0LmNoYWluSWQudG9TdHJpbmcoKSxcbiAgICAgICAgYWRkcmVzczogdGhpcy5jb250ZXh0LmFkZHJlc3MsXG4gICAgICAgIGJsb2NrVGFnOiB0aGlzLmNvbnRleHQuZ2V0QmxvY2tUYWcob3ZlcnJpZGVzKSxcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgdW5wYXVzZShvdmVycmlkZXM/OiBPdmVycmlkZXMpOiBFdGhDYWxsUGFyYW0ge1xuICAgICAgcmV0dXJuIHRoaXMudmlldy5lbmNvZGVDYWxsLnVucGF1c2Uoe1xuICAgICAgICBjaGFpbklkOiB0aGlzLmNvbnRleHQuY2hhaW5JZC50b1N0cmluZygpLFxuICAgICAgICBhZGRyZXNzOiB0aGlzLmNvbnRleHQuYWRkcmVzcyxcbiAgICAgICAgYmxvY2tUYWc6IHRoaXMuY29udGV4dC5nZXRCbG9ja1RhZyhvdmVycmlkZXMpLFxuICAgICAgfSk7XG4gICAgfSxcbiAgICB1cGRhdGVNYXJrZXRSZXdhcmRzKFxuICAgICAgX21hcmtldDogc3RyaW5nLFxuICAgICAgYW1vdW50czogQmlnTnVtYmVyaXNoW10sXG4gICAgICBvdmVycmlkZXM/OiBPdmVycmlkZXMsXG4gICAgKTogRXRoQ2FsbFBhcmFtIHtcbiAgICAgIHJldHVybiB0aGlzLnZpZXcuZW5jb2RlQ2FsbC51cGRhdGVNYXJrZXRSZXdhcmRzKF9tYXJrZXQsIGFtb3VudHMsIHtcbiAgICAgICAgY2hhaW5JZDogdGhpcy5jb250ZXh0LmNoYWluSWQudG9TdHJpbmcoKSxcbiAgICAgICAgYWRkcmVzczogdGhpcy5jb250ZXh0LmFkZHJlc3MsXG4gICAgICAgIGJsb2NrVGFnOiB0aGlzLmNvbnRleHQuZ2V0QmxvY2tUYWcob3ZlcnJpZGVzKSxcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgdXBkYXRlUG9vbEhlbHBlcihcbiAgICAgIF9tYXJrZXQ6IHN0cmluZyxcbiAgICAgIF9oZWxwZXI6IHN0cmluZyxcbiAgICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlcyxcbiAgICApOiBFdGhDYWxsUGFyYW0ge1xuICAgICAgcmV0dXJuIHRoaXMudmlldy5lbmNvZGVDYWxsLnVwZGF0ZVBvb2xIZWxwZXIoX21hcmtldCwgX2hlbHBlciwge1xuICAgICAgICBjaGFpbklkOiB0aGlzLmNvbnRleHQuY2hhaW5JZC50b1N0cmluZygpLFxuICAgICAgICBhZGRyZXNzOiB0aGlzLmNvbnRleHQuYWRkcmVzcyxcbiAgICAgICAgYmxvY2tUYWc6IHRoaXMuY29udGV4dC5nZXRCbG9ja1RhZyhvdmVycmlkZXMpLFxuICAgICAgfSk7XG4gICAgfSxcbiAgICB2ZVBlbmRsZShvdmVycmlkZXM/OiBPdmVycmlkZXMpOiBFdGhDYWxsUGFyYW0ge1xuICAgICAgcmV0dXJuIHRoaXMudmlldy5lbmNvZGVDYWxsLnZlUGVuZGxlKHtcbiAgICAgICAgY2hhaW5JZDogdGhpcy5jb250ZXh0LmNoYWluSWQudG9TdHJpbmcoKSxcbiAgICAgICAgYWRkcmVzczogdGhpcy5jb250ZXh0LmFkZHJlc3MsXG4gICAgICAgIGJsb2NrVGFnOiB0aGlzLmNvbnRleHQuZ2V0QmxvY2tUYWcob3ZlcnJpZGVzKSxcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgdmVQZW5kbGVIYXJ2ZXN0Q2FsbGVyRmVlKG92ZXJyaWRlcz86IE92ZXJyaWRlcyk6IEV0aENhbGxQYXJhbSB7XG4gICAgICByZXR1cm4gdGhpcy52aWV3LmVuY29kZUNhbGwudmVQZW5kbGVIYXJ2ZXN0Q2FsbGVyRmVlKHtcbiAgICAgICAgY2hhaW5JZDogdGhpcy5jb250ZXh0LmNoYWluSWQudG9TdHJpbmcoKSxcbiAgICAgICAgYWRkcmVzczogdGhpcy5jb250ZXh0LmFkZHJlc3MsXG4gICAgICAgIGJsb2NrVGFnOiB0aGlzLmNvbnRleHQuZ2V0QmxvY2tUYWcob3ZlcnJpZGVzKSxcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgdm90ZShcbiAgICAgIF9wb29sczogc3RyaW5nW10sXG4gICAgICBfd2VpZ2h0czogQmlnTnVtYmVyaXNoW10sXG4gICAgICBvdmVycmlkZXM/OiBPdmVycmlkZXMsXG4gICAgKTogRXRoQ2FsbFBhcmFtIHtcbiAgICAgIHJldHVybiB0aGlzLnZpZXcuZW5jb2RlQ2FsbC52b3RlKF9wb29scywgX3dlaWdodHMsIHtcbiAgICAgICAgY2hhaW5JZDogdGhpcy5jb250ZXh0LmNoYWluSWQudG9TdHJpbmcoKSxcbiAgICAgICAgYWRkcmVzczogdGhpcy5jb250ZXh0LmFkZHJlc3MsXG4gICAgICAgIGJsb2NrVGFnOiB0aGlzLmNvbnRleHQuZ2V0QmxvY2tUYWcob3ZlcnJpZGVzKSxcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgdm90ZU1hbmFnZXIob3ZlcnJpZGVzPzogT3ZlcnJpZGVzKTogRXRoQ2FsbFBhcmFtIHtcbiAgICAgIHJldHVybiB0aGlzLnZpZXcuZW5jb2RlQ2FsbC52b3RlTWFuYWdlcih7XG4gICAgICAgIGNoYWluSWQ6IHRoaXMuY29udGV4dC5jaGFpbklkLnRvU3RyaW5nKCksXG4gICAgICAgIGFkZHJlc3M6IHRoaXMuY29udGV4dC5hZGRyZXNzLFxuICAgICAgICBibG9ja1RhZzogdGhpcy5jb250ZXh0LmdldEJsb2NrVGFnKG92ZXJyaWRlcyksXG4gICAgICB9KTtcbiAgICB9LFxuICAgIHdpdGhkcmF3TWFya2V0KFxuICAgICAgX21hcmtldDogc3RyaW5nLFxuICAgICAgX2Zvcjogc3RyaW5nLFxuICAgICAgX2Ftb3VudDogQmlnTnVtYmVyaXNoLFxuICAgICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzLFxuICAgICk6IEV0aENhbGxQYXJhbSB7XG4gICAgICByZXR1cm4gdGhpcy52aWV3LmVuY29kZUNhbGwud2l0aGRyYXdNYXJrZXQoX21hcmtldCwgX2ZvciwgX2Ftb3VudCwge1xuICAgICAgICBjaGFpbklkOiB0aGlzLmNvbnRleHQuY2hhaW5JZC50b1N0cmluZygpLFxuICAgICAgICBhZGRyZXNzOiB0aGlzLmNvbnRleHQuYWRkcmVzcyxcbiAgICAgICAgYmxvY2tUYWc6IHRoaXMuY29udGV4dC5nZXRCbG9ja1RhZyhvdmVycmlkZXMpLFxuICAgICAgfSk7XG4gICAgfSxcbiAgfTtcbn1cblxuZXhwb3J0IHR5cGUgUGVucGllU3Rha2luZ0NvbnRleHQgPSBDb250cmFjdENvbnRleHQ8XG4gIFBlbnBpZVN0YWtpbmcsXG4gIFBlbnBpZVN0YWtpbmdCb3VuZENvbnRyYWN0Vmlld1xuPjtcblxuZXhwb3J0IGNsYXNzIFBlbnBpZVN0YWtpbmdQcm9jZXNzb3IgZXh0ZW5kcyBCYXNlUHJvY2Vzc29yPFxuICBQZW5waWVTdGFraW5nLFxuICBQZW5waWVTdGFraW5nQm91bmRDb250cmFjdFZpZXdcbj4ge1xuICBvbkV2ZW50QWRkUGVuZGxlRmVlKFxuICAgIGhhbmRsZXI6IChldmVudDogQWRkUGVuZGxlRmVlRXZlbnQsIGN0eDogUGVucGllU3Rha2luZ0NvbnRleHQpID0+IHZvaWQsXG4gICAgZmlsdGVyPzogQWRkUGVuZGxlRmVlRXZlbnRGaWx0ZXIgfCBBZGRQZW5kbGVGZWVFdmVudEZpbHRlcltdLFxuICAgIGZldGNoQ29uZmlnPzogUGFydGlhbDxFdGhGZXRjaENvbmZpZz4sXG4gICAgcHJlcHJvY2Vzc0hhbmRsZXI/OiAoXG4gICAgICBldmVudDogQWRkUGVuZGxlRmVlRXZlbnQsXG4gICAgICBjdHg6IFBlbnBpZVN0YWtpbmdDb250ZXh0LFxuICAgICAgcHJlcHJvY2Vzc1N0b3JlOiB7IFtrOiBzdHJpbmddOiBhbnkgfSxcbiAgICApID0+IFByb21pc2U8UHJlcHJvY2Vzc1Jlc3VsdD4sXG4gICk6IHRoaXMge1xuICAgIGlmICghZmlsdGVyKSB7XG4gICAgICBmaWx0ZXIgPSB0ZW1wbGF0ZUNvbnRyYWN0LmZpbHRlcnNbXG4gICAgICAgIFwiQWRkUGVuZGxlRmVlKGFkZHJlc3MsdWludDI1Nixib29sLGJvb2wpXCJcbiAgICAgIF0obnVsbCwgbnVsbCwgbnVsbCwgbnVsbCk7XG4gICAgfVxuICAgIHJldHVybiBzdXBlci5vbkV0aEV2ZW50KGhhbmRsZXIsIGZpbHRlciEsIGZldGNoQ29uZmlnLCBwcmVwcm9jZXNzSGFuZGxlcik7XG4gIH1cblxuICBvbkV2ZW50QnJpYmVNYW5hZ2VyRU9BVXBkYXRlZChcbiAgICBoYW5kbGVyOiAoXG4gICAgICBldmVudDogQnJpYmVNYW5hZ2VyRU9BVXBkYXRlZEV2ZW50LFxuICAgICAgY3R4OiBQZW5waWVTdGFraW5nQ29udGV4dCxcbiAgICApID0+IHZvaWQsXG4gICAgZmlsdGVyPzpcbiAgICAgIHwgQnJpYmVNYW5hZ2VyRU9BVXBkYXRlZEV2ZW50RmlsdGVyXG4gICAgICB8IEJyaWJlTWFuYWdlckVPQVVwZGF0ZWRFdmVudEZpbHRlcltdLFxuICAgIGZldGNoQ29uZmlnPzogUGFydGlhbDxFdGhGZXRjaENvbmZpZz4sXG4gICAgcHJlcHJvY2Vzc0hhbmRsZXI/OiAoXG4gICAgICBldmVudDogQnJpYmVNYW5hZ2VyRU9BVXBkYXRlZEV2ZW50LFxuICAgICAgY3R4OiBQZW5waWVTdGFraW5nQ29udGV4dCxcbiAgICAgIHByZXByb2Nlc3NTdG9yZTogeyBbazogc3RyaW5nXTogYW55IH0sXG4gICAgKSA9PiBQcm9taXNlPFByZXByb2Nlc3NSZXN1bHQ+LFxuICApOiB0aGlzIHtcbiAgICBpZiAoIWZpbHRlcikge1xuICAgICAgZmlsdGVyID0gdGVtcGxhdGVDb250cmFjdC5maWx0ZXJzW1xuICAgICAgICBcIkJyaWJlTWFuYWdlckVPQVVwZGF0ZWQoYWRkcmVzcyxhZGRyZXNzKVwiXG4gICAgICBdKG51bGwsIG51bGwpO1xuICAgIH1cbiAgICByZXR1cm4gc3VwZXIub25FdGhFdmVudChoYW5kbGVyLCBmaWx0ZXIhLCBmZXRjaENvbmZpZywgcHJlcHJvY2Vzc0hhbmRsZXIpO1xuICB9XG5cbiAgb25FdmVudEJyaWJlTWFuYWdlclVwZGF0ZWQoXG4gICAgaGFuZGxlcjogKFxuICAgICAgZXZlbnQ6IEJyaWJlTWFuYWdlclVwZGF0ZWRFdmVudCxcbiAgICAgIGN0eDogUGVucGllU3Rha2luZ0NvbnRleHQsXG4gICAgKSA9PiB2b2lkLFxuICAgIGZpbHRlcj86IEJyaWJlTWFuYWdlclVwZGF0ZWRFdmVudEZpbHRlciB8IEJyaWJlTWFuYWdlclVwZGF0ZWRFdmVudEZpbHRlcltdLFxuICAgIGZldGNoQ29uZmlnPzogUGFydGlhbDxFdGhGZXRjaENvbmZpZz4sXG4gICAgcHJlcHJvY2Vzc0hhbmRsZXI/OiAoXG4gICAgICBldmVudDogQnJpYmVNYW5hZ2VyVXBkYXRlZEV2ZW50LFxuICAgICAgY3R4OiBQZW5waWVTdGFraW5nQ29udGV4dCxcbiAgICAgIHByZXByb2Nlc3NTdG9yZTogeyBbazogc3RyaW5nXTogYW55IH0sXG4gICAgKSA9PiBQcm9taXNlPFByZXByb2Nlc3NSZXN1bHQ+LFxuICApOiB0aGlzIHtcbiAgICBpZiAoIWZpbHRlcikge1xuICAgICAgZmlsdGVyID0gdGVtcGxhdGVDb250cmFjdC5maWx0ZXJzW1wiQnJpYmVNYW5hZ2VyVXBkYXRlZChhZGRyZXNzLGFkZHJlc3MpXCJdKFxuICAgICAgICBudWxsLFxuICAgICAgICBudWxsLFxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIHN1cGVyLm9uRXRoRXZlbnQoaGFuZGxlciwgZmlsdGVyISwgZmV0Y2hDb25maWcsIHByZXByb2Nlc3NIYW5kbGVyKTtcbiAgfVxuXG4gIG9uRXZlbnRJbml0aWFsaXplZChcbiAgICBoYW5kbGVyOiAoZXZlbnQ6IEluaXRpYWxpemVkRXZlbnQsIGN0eDogUGVucGllU3Rha2luZ0NvbnRleHQpID0+IHZvaWQsXG4gICAgZmlsdGVyPzogSW5pdGlhbGl6ZWRFdmVudEZpbHRlciB8IEluaXRpYWxpemVkRXZlbnRGaWx0ZXJbXSxcbiAgICBmZXRjaENvbmZpZz86IFBhcnRpYWw8RXRoRmV0Y2hDb25maWc+LFxuICAgIHByZXByb2Nlc3NIYW5kbGVyPzogKFxuICAgICAgZXZlbnQ6IEluaXRpYWxpemVkRXZlbnQsXG4gICAgICBjdHg6IFBlbnBpZVN0YWtpbmdDb250ZXh0LFxuICAgICAgcHJlcHJvY2Vzc1N0b3JlOiB7IFtrOiBzdHJpbmddOiBhbnkgfSxcbiAgICApID0+IFByb21pc2U8UHJlcHJvY2Vzc1Jlc3VsdD4sXG4gICk6IHRoaXMge1xuICAgIGlmICghZmlsdGVyKSB7XG4gICAgICBmaWx0ZXIgPSB0ZW1wbGF0ZUNvbnRyYWN0LmZpbHRlcnNbXCJJbml0aWFsaXplZCh1aW50OClcIl0obnVsbCk7XG4gICAgfVxuICAgIHJldHVybiBzdXBlci5vbkV0aEV2ZW50KGhhbmRsZXIsIGZpbHRlciEsIGZldGNoQ29uZmlnLCBwcmVwcm9jZXNzSGFuZGxlcik7XG4gIH1cblxuICBvbkV2ZW50TmV3TWFya2V0RGVwb3NpdChcbiAgICBoYW5kbGVyOiAoZXZlbnQ6IE5ld01hcmtldERlcG9zaXRFdmVudCwgY3R4OiBQZW5waWVTdGFraW5nQ29udGV4dCkgPT4gdm9pZCxcbiAgICBmaWx0ZXI/OiBOZXdNYXJrZXREZXBvc2l0RXZlbnRGaWx0ZXIgfCBOZXdNYXJrZXREZXBvc2l0RXZlbnRGaWx0ZXJbXSxcbiAgICBmZXRjaENvbmZpZz86IFBhcnRpYWw8RXRoRmV0Y2hDb25maWc+LFxuICAgIHByZXByb2Nlc3NIYW5kbGVyPzogKFxuICAgICAgZXZlbnQ6IE5ld01hcmtldERlcG9zaXRFdmVudCxcbiAgICAgIGN0eDogUGVucGllU3Rha2luZ0NvbnRleHQsXG4gICAgICBwcmVwcm9jZXNzU3RvcmU6IHsgW2s6IHN0cmluZ106IGFueSB9LFxuICAgICkgPT4gUHJvbWlzZTxQcmVwcm9jZXNzUmVzdWx0PixcbiAgKTogdGhpcyB7XG4gICAgaWYgKCFmaWx0ZXIpIHtcbiAgICAgIGZpbHRlciA9IHRlbXBsYXRlQ29udHJhY3QuZmlsdGVyc1tcbiAgICAgICAgXCJOZXdNYXJrZXREZXBvc2l0KGFkZHJlc3MsYWRkcmVzcyx1aW50MjU2LGFkZHJlc3MsdWludDI1NilcIlxuICAgICAgXShudWxsLCBudWxsLCBudWxsLCBudWxsLCBudWxsKTtcbiAgICB9XG4gICAgcmV0dXJuIHN1cGVyLm9uRXRoRXZlbnQoaGFuZGxlciwgZmlsdGVyISwgZmV0Y2hDb25maWcsIHByZXByb2Nlc3NIYW5kbGVyKTtcbiAgfVxuXG4gIG9uRXZlbnROZXdNYXJrZXRXaXRoZHJhdyhcbiAgICBoYW5kbGVyOiAoZXZlbnQ6IE5ld01hcmtldFdpdGhkcmF3RXZlbnQsIGN0eDogUGVucGllU3Rha2luZ0NvbnRleHQpID0+IHZvaWQsXG4gICAgZmlsdGVyPzogTmV3TWFya2V0V2l0aGRyYXdFdmVudEZpbHRlciB8IE5ld01hcmtldFdpdGhkcmF3RXZlbnRGaWx0ZXJbXSxcbiAgICBmZXRjaENvbmZpZz86IFBhcnRpYWw8RXRoRmV0Y2hDb25maWc+LFxuICAgIHByZXByb2Nlc3NIYW5kbGVyPzogKFxuICAgICAgZXZlbnQ6IE5ld01hcmtldFdpdGhkcmF3RXZlbnQsXG4gICAgICBjdHg6IFBlbnBpZVN0YWtpbmdDb250ZXh0LFxuICAgICAgcHJlcHJvY2Vzc1N0b3JlOiB7IFtrOiBzdHJpbmddOiBhbnkgfSxcbiAgICApID0+IFByb21pc2U8UHJlcHJvY2Vzc1Jlc3VsdD4sXG4gICk6IHRoaXMge1xuICAgIGlmICghZmlsdGVyKSB7XG4gICAgICBmaWx0ZXIgPSB0ZW1wbGF0ZUNvbnRyYWN0LmZpbHRlcnNbXG4gICAgICAgIFwiTmV3TWFya2V0V2l0aGRyYXcoYWRkcmVzcyxhZGRyZXNzLHVpbnQyNTYsYWRkcmVzcyx1aW50MjU2KVwiXG4gICAgICBdKG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwpO1xuICAgIH1cbiAgICByZXR1cm4gc3VwZXIub25FdGhFdmVudChoYW5kbGVyLCBmaWx0ZXIhLCBmZXRjaENvbmZpZywgcHJlcHJvY2Vzc0hhbmRsZXIpO1xuICB9XG5cbiAgb25FdmVudE93bmVyc2hpcFRyYW5zZmVycmVkKFxuICAgIGhhbmRsZXI6IChcbiAgICAgIGV2ZW50OiBPd25lcnNoaXBUcmFuc2ZlcnJlZEV2ZW50LFxuICAgICAgY3R4OiBQZW5waWVTdGFraW5nQ29udGV4dCxcbiAgICApID0+IHZvaWQsXG4gICAgZmlsdGVyPzpcbiAgICAgIHwgT3duZXJzaGlwVHJhbnNmZXJyZWRFdmVudEZpbHRlclxuICAgICAgfCBPd25lcnNoaXBUcmFuc2ZlcnJlZEV2ZW50RmlsdGVyW10sXG4gICAgZmV0Y2hDb25maWc/OiBQYXJ0aWFsPEV0aEZldGNoQ29uZmlnPixcbiAgICBwcmVwcm9jZXNzSGFuZGxlcj86IChcbiAgICAgIGV2ZW50OiBPd25lcnNoaXBUcmFuc2ZlcnJlZEV2ZW50LFxuICAgICAgY3R4OiBQZW5waWVTdGFraW5nQ29udGV4dCxcbiAgICAgIHByZXByb2Nlc3NTdG9yZTogeyBbazogc3RyaW5nXTogYW55IH0sXG4gICAgKSA9PiBQcm9taXNlPFByZXByb2Nlc3NSZXN1bHQ+LFxuICApOiB0aGlzIHtcbiAgICBpZiAoIWZpbHRlcikge1xuICAgICAgZmlsdGVyID0gdGVtcGxhdGVDb250cmFjdC5maWx0ZXJzW1xuICAgICAgICBcIk93bmVyc2hpcFRyYW5zZmVycmVkKGFkZHJlc3MsYWRkcmVzcylcIlxuICAgICAgXShudWxsLCBudWxsKTtcbiAgICB9XG4gICAgcmV0dXJuIHN1cGVyLm9uRXRoRXZlbnQoaGFuZGxlciwgZmlsdGVyISwgZmV0Y2hDb25maWcsIHByZXByb2Nlc3NIYW5kbGVyKTtcbiAgfVxuXG4gIG9uRXZlbnRQYXVzZWQoXG4gICAgaGFuZGxlcjogKGV2ZW50OiBQYXVzZWRFdmVudCwgY3R4OiBQZW5waWVTdGFraW5nQ29udGV4dCkgPT4gdm9pZCxcbiAgICBmaWx0ZXI/OiBQYXVzZWRFdmVudEZpbHRlciB8IFBhdXNlZEV2ZW50RmlsdGVyW10sXG4gICAgZmV0Y2hDb25maWc/OiBQYXJ0aWFsPEV0aEZldGNoQ29uZmlnPixcbiAgICBwcmVwcm9jZXNzSGFuZGxlcj86IChcbiAgICAgIGV2ZW50OiBQYXVzZWRFdmVudCxcbiAgICAgIGN0eDogUGVucGllU3Rha2luZ0NvbnRleHQsXG4gICAgICBwcmVwcm9jZXNzU3RvcmU6IHsgW2s6IHN0cmluZ106IGFueSB9LFxuICAgICkgPT4gUHJvbWlzZTxQcmVwcm9jZXNzUmVzdWx0PixcbiAgKTogdGhpcyB7XG4gICAgaWYgKCFmaWx0ZXIpIHtcbiAgICAgIGZpbHRlciA9IHRlbXBsYXRlQ29udHJhY3QuZmlsdGVyc1tcIlBhdXNlZChhZGRyZXNzKVwiXShudWxsKTtcbiAgICB9XG4gICAgcmV0dXJuIHN1cGVyLm9uRXRoRXZlbnQoaGFuZGxlciwgZmlsdGVyISwgZmV0Y2hDb25maWcsIHByZXByb2Nlc3NIYW5kbGVyKTtcbiAgfVxuXG4gIG9uRXZlbnRQZW5kbGVMb2NrZWQoXG4gICAgaGFuZGxlcjogKGV2ZW50OiBQZW5kbGVMb2NrZWRFdmVudCwgY3R4OiBQZW5waWVTdGFraW5nQ29udGV4dCkgPT4gdm9pZCxcbiAgICBmaWx0ZXI/OiBQZW5kbGVMb2NrZWRFdmVudEZpbHRlciB8IFBlbmRsZUxvY2tlZEV2ZW50RmlsdGVyW10sXG4gICAgZmV0Y2hDb25maWc/OiBQYXJ0aWFsPEV0aEZldGNoQ29uZmlnPixcbiAgICBwcmVwcm9jZXNzSGFuZGxlcj86IChcbiAgICAgIGV2ZW50OiBQZW5kbGVMb2NrZWRFdmVudCxcbiAgICAgIGN0eDogUGVucGllU3Rha2luZ0NvbnRleHQsXG4gICAgICBwcmVwcm9jZXNzU3RvcmU6IHsgW2s6IHN0cmluZ106IGFueSB9LFxuICAgICkgPT4gUHJvbWlzZTxQcmVwcm9jZXNzUmVzdWx0PixcbiAgKTogdGhpcyB7XG4gICAgaWYgKCFmaWx0ZXIpIHtcbiAgICAgIGZpbHRlciA9IHRlbXBsYXRlQ29udHJhY3QuZmlsdGVyc1tcbiAgICAgICAgXCJQZW5kbGVMb2NrZWQodWludDI1Nix1aW50MjU2LHVpbnQyNTYpXCJcbiAgICAgIF0obnVsbCwgbnVsbCwgbnVsbCk7XG4gICAgfVxuICAgIHJldHVybiBzdXBlci5vbkV0aEV2ZW50KGhhbmRsZXIsIGZpbHRlciEsIGZldGNoQ29uZmlnLCBwcmVwcm9jZXNzSGFuZGxlcik7XG4gIH1cblxuICBvbkV2ZW50UG9vbEFkZGVkKFxuICAgIGhhbmRsZXI6IChldmVudDogUG9vbEFkZGVkRXZlbnQsIGN0eDogUGVucGllU3Rha2luZ0NvbnRleHQpID0+IHZvaWQsXG4gICAgZmlsdGVyPzogUG9vbEFkZGVkRXZlbnRGaWx0ZXIgfCBQb29sQWRkZWRFdmVudEZpbHRlcltdLFxuICAgIGZldGNoQ29uZmlnPzogUGFydGlhbDxFdGhGZXRjaENvbmZpZz4sXG4gICAgcHJlcHJvY2Vzc0hhbmRsZXI/OiAoXG4gICAgICBldmVudDogUG9vbEFkZGVkRXZlbnQsXG4gICAgICBjdHg6IFBlbnBpZVN0YWtpbmdDb250ZXh0LFxuICAgICAgcHJlcHJvY2Vzc1N0b3JlOiB7IFtrOiBzdHJpbmddOiBhbnkgfSxcbiAgICApID0+IFByb21pc2U8UHJlcHJvY2Vzc1Jlc3VsdD4sXG4gICk6IHRoaXMge1xuICAgIGlmICghZmlsdGVyKSB7XG4gICAgICBmaWx0ZXIgPSB0ZW1wbGF0ZUNvbnRyYWN0LmZpbHRlcnNbXCJQb29sQWRkZWQoYWRkcmVzcyxhZGRyZXNzLGFkZHJlc3MpXCJdKFxuICAgICAgICBudWxsLFxuICAgICAgICBudWxsLFxuICAgICAgICBudWxsLFxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIHN1cGVyLm9uRXRoRXZlbnQoaGFuZGxlciwgZmlsdGVyISwgZmV0Y2hDb25maWcsIHByZXByb2Nlc3NIYW5kbGVyKTtcbiAgfVxuXG4gIG9uRXZlbnRQb29sSGVscGVyVXBkYXRlZChcbiAgICBoYW5kbGVyOiAoZXZlbnQ6IFBvb2xIZWxwZXJVcGRhdGVkRXZlbnQsIGN0eDogUGVucGllU3Rha2luZ0NvbnRleHQpID0+IHZvaWQsXG4gICAgZmlsdGVyPzogUG9vbEhlbHBlclVwZGF0ZWRFdmVudEZpbHRlciB8IFBvb2xIZWxwZXJVcGRhdGVkRXZlbnRGaWx0ZXJbXSxcbiAgICBmZXRjaENvbmZpZz86IFBhcnRpYWw8RXRoRmV0Y2hDb25maWc+LFxuICAgIHByZXByb2Nlc3NIYW5kbGVyPzogKFxuICAgICAgZXZlbnQ6IFBvb2xIZWxwZXJVcGRhdGVkRXZlbnQsXG4gICAgICBjdHg6IFBlbnBpZVN0YWtpbmdDb250ZXh0LFxuICAgICAgcHJlcHJvY2Vzc1N0b3JlOiB7IFtrOiBzdHJpbmddOiBhbnkgfSxcbiAgICApID0+IFByb21pc2U8UHJlcHJvY2Vzc1Jlc3VsdD4sXG4gICk6IHRoaXMge1xuICAgIGlmICghZmlsdGVyKSB7XG4gICAgICBmaWx0ZXIgPSB0ZW1wbGF0ZUNvbnRyYWN0LmZpbHRlcnNbXCJQb29sSGVscGVyVXBkYXRlZChhZGRyZXNzKVwiXShudWxsKTtcbiAgICB9XG4gICAgcmV0dXJuIHN1cGVyLm9uRXRoRXZlbnQoaGFuZGxlciwgZmlsdGVyISwgZmV0Y2hDb25maWcsIHByZXByb2Nlc3NIYW5kbGVyKTtcbiAgfVxuXG4gIG9uRXZlbnRQb29sUmVtb3ZlZChcbiAgICBoYW5kbGVyOiAoZXZlbnQ6IFBvb2xSZW1vdmVkRXZlbnQsIGN0eDogUGVucGllU3Rha2luZ0NvbnRleHQpID0+IHZvaWQsXG4gICAgZmlsdGVyPzogUG9vbFJlbW92ZWRFdmVudEZpbHRlciB8IFBvb2xSZW1vdmVkRXZlbnRGaWx0ZXJbXSxcbiAgICBmZXRjaENvbmZpZz86IFBhcnRpYWw8RXRoRmV0Y2hDb25maWc+LFxuICAgIHByZXByb2Nlc3NIYW5kbGVyPzogKFxuICAgICAgZXZlbnQ6IFBvb2xSZW1vdmVkRXZlbnQsXG4gICAgICBjdHg6IFBlbnBpZVN0YWtpbmdDb250ZXh0LFxuICAgICAgcHJlcHJvY2Vzc1N0b3JlOiB7IFtrOiBzdHJpbmddOiBhbnkgfSxcbiAgICApID0+IFByb21pc2U8UHJlcHJvY2Vzc1Jlc3VsdD4sXG4gICk6IHRoaXMge1xuICAgIGlmICghZmlsdGVyKSB7XG4gICAgICBmaWx0ZXIgPSB0ZW1wbGF0ZUNvbnRyYWN0LmZpbHRlcnNbXCJQb29sUmVtb3ZlZCh1aW50MjU2LGFkZHJlc3MpXCJdKFxuICAgICAgICBudWxsLFxuICAgICAgICBudWxsLFxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIHN1cGVyLm9uRXRoRXZlbnQoaGFuZGxlciwgZmlsdGVyISwgZmV0Y2hDb25maWcsIHByZXByb2Nlc3NIYW5kbGVyKTtcbiAgfVxuXG4gIG9uRXZlbnRSZW1vdmVQZW5kbGVGZWUoXG4gICAgaGFuZGxlcjogKGV2ZW50OiBSZW1vdmVQZW5kbGVGZWVFdmVudCwgY3R4OiBQZW5waWVTdGFraW5nQ29udGV4dCkgPT4gdm9pZCxcbiAgICBmaWx0ZXI/OiBSZW1vdmVQZW5kbGVGZWVFdmVudEZpbHRlciB8IFJlbW92ZVBlbmRsZUZlZUV2ZW50RmlsdGVyW10sXG4gICAgZmV0Y2hDb25maWc/OiBQYXJ0aWFsPEV0aEZldGNoQ29uZmlnPixcbiAgICBwcmVwcm9jZXNzSGFuZGxlcj86IChcbiAgICAgIGV2ZW50OiBSZW1vdmVQZW5kbGVGZWVFdmVudCxcbiAgICAgIGN0eDogUGVucGllU3Rha2luZ0NvbnRleHQsXG4gICAgICBwcmVwcm9jZXNzU3RvcmU6IHsgW2s6IHN0cmluZ106IGFueSB9LFxuICAgICkgPT4gUHJvbWlzZTxQcmVwcm9jZXNzUmVzdWx0PixcbiAgKTogdGhpcyB7XG4gICAgaWYgKCFmaWx0ZXIpIHtcbiAgICAgIGZpbHRlciA9IHRlbXBsYXRlQ29udHJhY3QuZmlsdGVyc1tcbiAgICAgICAgXCJSZW1vdmVQZW5kbGVGZWUodWludDI1NixhZGRyZXNzLGJvb2wsYm9vbClcIlxuICAgICAgXShudWxsLCBudWxsLCBudWxsLCBudWxsKTtcbiAgICB9XG4gICAgcmV0dXJuIHN1cGVyLm9uRXRoRXZlbnQoaGFuZGxlciwgZmlsdGVyISwgZmV0Y2hDb25maWcsIHByZXByb2Nlc3NIYW5kbGVyKTtcbiAgfVxuXG4gIG9uRXZlbnRSZXdhcmRQYWlkVG8oXG4gICAgaGFuZGxlcjogKGV2ZW50OiBSZXdhcmRQYWlkVG9FdmVudCwgY3R4OiBQZW5waWVTdGFraW5nQ29udGV4dCkgPT4gdm9pZCxcbiAgICBmaWx0ZXI/OiBSZXdhcmRQYWlkVG9FdmVudEZpbHRlciB8IFJld2FyZFBhaWRUb0V2ZW50RmlsdGVyW10sXG4gICAgZmV0Y2hDb25maWc/OiBQYXJ0aWFsPEV0aEZldGNoQ29uZmlnPixcbiAgICBwcmVwcm9jZXNzSGFuZGxlcj86IChcbiAgICAgIGV2ZW50OiBSZXdhcmRQYWlkVG9FdmVudCxcbiAgICAgIGN0eDogUGVucGllU3Rha2luZ0NvbnRleHQsXG4gICAgICBwcmVwcm9jZXNzU3RvcmU6IHsgW2s6IHN0cmluZ106IGFueSB9LFxuICAgICkgPT4gUHJvbWlzZTxQcmVwcm9jZXNzUmVzdWx0PixcbiAgKTogdGhpcyB7XG4gICAgaWYgKCFmaWx0ZXIpIHtcbiAgICAgIGZpbHRlciA9IHRlbXBsYXRlQ29udHJhY3QuZmlsdGVyc1tcbiAgICAgICAgXCJSZXdhcmRQYWlkVG8oYWRkcmVzcyxhZGRyZXNzLGFkZHJlc3MsdWludDI1NilcIlxuICAgICAgXShudWxsLCBudWxsLCBudWxsLCBudWxsKTtcbiAgICB9XG4gICAgcmV0dXJuIHN1cGVyLm9uRXRoRXZlbnQoaGFuZGxlciwgZmlsdGVyISwgZmV0Y2hDb25maWcsIHByZXByb2Nlc3NIYW5kbGVyKTtcbiAgfVxuXG4gIG9uRXZlbnRTZXRMb2NrRGF5cyhcbiAgICBoYW5kbGVyOiAoZXZlbnQ6IFNldExvY2tEYXlzRXZlbnQsIGN0eDogUGVucGllU3Rha2luZ0NvbnRleHQpID0+IHZvaWQsXG4gICAgZmlsdGVyPzogU2V0TG9ja0RheXNFdmVudEZpbHRlciB8IFNldExvY2tEYXlzRXZlbnRGaWx0ZXJbXSxcbiAgICBmZXRjaENvbmZpZz86IFBhcnRpYWw8RXRoRmV0Y2hDb25maWc+LFxuICAgIHByZXByb2Nlc3NIYW5kbGVyPzogKFxuICAgICAgZXZlbnQ6IFNldExvY2tEYXlzRXZlbnQsXG4gICAgICBjdHg6IFBlbnBpZVN0YWtpbmdDb250ZXh0LFxuICAgICAgcHJlcHJvY2Vzc1N0b3JlOiB7IFtrOiBzdHJpbmddOiBhbnkgfSxcbiAgICApID0+IFByb21pc2U8UHJlcHJvY2Vzc1Jlc3VsdD4sXG4gICk6IHRoaXMge1xuICAgIGlmICghZmlsdGVyKSB7XG4gICAgICBmaWx0ZXIgPSB0ZW1wbGF0ZUNvbnRyYWN0LmZpbHRlcnNbXCJTZXRMb2NrRGF5cyh1aW50MjU2LHVpbnQyNTYpXCJdKFxuICAgICAgICBudWxsLFxuICAgICAgICBudWxsLFxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIHN1cGVyLm9uRXRoRXZlbnQoaGFuZGxlciwgZmlsdGVyISwgZmV0Y2hDb25maWcsIHByZXByb2Nlc3NIYW5kbGVyKTtcbiAgfVxuXG4gIG9uRXZlbnRTZXRNUGVuZGxlQ29udmVydG9yKFxuICAgIGhhbmRsZXI6IChcbiAgICAgIGV2ZW50OiBTZXRNUGVuZGxlQ29udmVydG9yRXZlbnQsXG4gICAgICBjdHg6IFBlbnBpZVN0YWtpbmdDb250ZXh0LFxuICAgICkgPT4gdm9pZCxcbiAgICBmaWx0ZXI/OiBTZXRNUGVuZGxlQ29udmVydG9yRXZlbnRGaWx0ZXIgfCBTZXRNUGVuZGxlQ29udmVydG9yRXZlbnRGaWx0ZXJbXSxcbiAgICBmZXRjaENvbmZpZz86IFBhcnRpYWw8RXRoRmV0Y2hDb25maWc+LFxuICAgIHByZXByb2Nlc3NIYW5kbGVyPzogKFxuICAgICAgZXZlbnQ6IFNldE1QZW5kbGVDb252ZXJ0b3JFdmVudCxcbiAgICAgIGN0eDogUGVucGllU3Rha2luZ0NvbnRleHQsXG4gICAgICBwcmVwcm9jZXNzU3RvcmU6IHsgW2s6IHN0cmluZ106IGFueSB9LFxuICAgICkgPT4gUHJvbWlzZTxQcmVwcm9jZXNzUmVzdWx0PixcbiAgKTogdGhpcyB7XG4gICAgaWYgKCFmaWx0ZXIpIHtcbiAgICAgIGZpbHRlciA9IHRlbXBsYXRlQ29udHJhY3QuZmlsdGVyc1tcIlNldE1QZW5kbGVDb252ZXJ0b3IoYWRkcmVzcyxhZGRyZXNzKVwiXShcbiAgICAgICAgbnVsbCxcbiAgICAgICAgbnVsbCxcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiBzdXBlci5vbkV0aEV2ZW50KGhhbmRsZXIsIGZpbHRlciEsIGZldGNoQ29uZmlnLCBwcmVwcm9jZXNzSGFuZGxlcik7XG4gIH1cblxuICBvbkV2ZW50U2V0UGVuZGxlRmVlKFxuICAgIGhhbmRsZXI6IChldmVudDogU2V0UGVuZGxlRmVlRXZlbnQsIGN0eDogUGVucGllU3Rha2luZ0NvbnRleHQpID0+IHZvaWQsXG4gICAgZmlsdGVyPzogU2V0UGVuZGxlRmVlRXZlbnRGaWx0ZXIgfCBTZXRQZW5kbGVGZWVFdmVudEZpbHRlcltdLFxuICAgIGZldGNoQ29uZmlnPzogUGFydGlhbDxFdGhGZXRjaENvbmZpZz4sXG4gICAgcHJlcHJvY2Vzc0hhbmRsZXI/OiAoXG4gICAgICBldmVudDogU2V0UGVuZGxlRmVlRXZlbnQsXG4gICAgICBjdHg6IFBlbnBpZVN0YWtpbmdDb250ZXh0LFxuICAgICAgcHJlcHJvY2Vzc1N0b3JlOiB7IFtrOiBzdHJpbmddOiBhbnkgfSxcbiAgICApID0+IFByb21pc2U8UHJlcHJvY2Vzc1Jlc3VsdD4sXG4gICk6IHRoaXMge1xuICAgIGlmICghZmlsdGVyKSB7XG4gICAgICBmaWx0ZXIgPSB0ZW1wbGF0ZUNvbnRyYWN0LmZpbHRlcnNbXCJTZXRQZW5kbGVGZWUoYWRkcmVzcyx1aW50MjU2KVwiXShcbiAgICAgICAgbnVsbCxcbiAgICAgICAgbnVsbCxcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiBzdXBlci5vbkV0aEV2ZW50KGhhbmRsZXIsIGZpbHRlciEsIGZldGNoQ29uZmlnLCBwcmVwcm9jZXNzSGFuZGxlcik7XG4gIH1cblxuICBvbkV2ZW50U21hcnRQZW5kbGVDb252ZXJ0VXBkYXRlZChcbiAgICBoYW5kbGVyOiAoXG4gICAgICBldmVudDogU21hcnRQZW5kbGVDb252ZXJ0VXBkYXRlZEV2ZW50LFxuICAgICAgY3R4OiBQZW5waWVTdGFraW5nQ29udGV4dCxcbiAgICApID0+IHZvaWQsXG4gICAgZmlsdGVyPzpcbiAgICAgIHwgU21hcnRQZW5kbGVDb252ZXJ0VXBkYXRlZEV2ZW50RmlsdGVyXG4gICAgICB8IFNtYXJ0UGVuZGxlQ29udmVydFVwZGF0ZWRFdmVudEZpbHRlcltdLFxuICAgIGZldGNoQ29uZmlnPzogUGFydGlhbDxFdGhGZXRjaENvbmZpZz4sXG4gICAgcHJlcHJvY2Vzc0hhbmRsZXI/OiAoXG4gICAgICBldmVudDogU21hcnRQZW5kbGVDb252ZXJ0VXBkYXRlZEV2ZW50LFxuICAgICAgY3R4OiBQZW5waWVTdGFraW5nQ29udGV4dCxcbiAgICAgIHByZXByb2Nlc3NTdG9yZTogeyBbazogc3RyaW5nXTogYW55IH0sXG4gICAgKSA9PiBQcm9taXNlPFByZXByb2Nlc3NSZXN1bHQ+LFxuICApOiB0aGlzIHtcbiAgICBpZiAoIWZpbHRlcikge1xuICAgICAgZmlsdGVyID0gdGVtcGxhdGVDb250cmFjdC5maWx0ZXJzW1xuICAgICAgICBcIlNtYXJ0UGVuZGxlQ29udmVydFVwZGF0ZWQoYWRkcmVzcyxhZGRyZXNzKVwiXG4gICAgICBdKG51bGwsIG51bGwpO1xuICAgIH1cbiAgICByZXR1cm4gc3VwZXIub25FdGhFdmVudChoYW5kbGVyLCBmaWx0ZXIhLCBmZXRjaENvbmZpZywgcHJlcHJvY2Vzc0hhbmRsZXIpO1xuICB9XG5cbiAgb25FdmVudFVucGF1c2VkKFxuICAgIGhhbmRsZXI6IChldmVudDogVW5wYXVzZWRFdmVudCwgY3R4OiBQZW5waWVTdGFraW5nQ29udGV4dCkgPT4gdm9pZCxcbiAgICBmaWx0ZXI/OiBVbnBhdXNlZEV2ZW50RmlsdGVyIHwgVW5wYXVzZWRFdmVudEZpbHRlcltdLFxuICAgIGZldGNoQ29uZmlnPzogUGFydGlhbDxFdGhGZXRjaENvbmZpZz4sXG4gICAgcHJlcHJvY2Vzc0hhbmRsZXI/OiAoXG4gICAgICBldmVudDogVW5wYXVzZWRFdmVudCxcbiAgICAgIGN0eDogUGVucGllU3Rha2luZ0NvbnRleHQsXG4gICAgICBwcmVwcm9jZXNzU3RvcmU6IHsgW2s6IHN0cmluZ106IGFueSB9LFxuICAgICkgPT4gUHJvbWlzZTxQcmVwcm9jZXNzUmVzdWx0PixcbiAgKTogdGhpcyB7XG4gICAgaWYgKCFmaWx0ZXIpIHtcbiAgICAgIGZpbHRlciA9IHRlbXBsYXRlQ29udHJhY3QuZmlsdGVyc1tcIlVucGF1c2VkKGFkZHJlc3MpXCJdKG51bGwpO1xuICAgIH1cbiAgICByZXR1cm4gc3VwZXIub25FdGhFdmVudChoYW5kbGVyLCBmaWx0ZXIhLCBmZXRjaENvbmZpZywgcHJlcHJvY2Vzc0hhbmRsZXIpO1xuICB9XG5cbiAgb25FdmVudFZlUGVuZGxlSGFydmVzdGVkKFxuICAgIGhhbmRsZXI6IChldmVudDogVmVQZW5kbGVIYXJ2ZXN0ZWRFdmVudCwgY3R4OiBQZW5waWVTdGFraW5nQ29udGV4dCkgPT4gdm9pZCxcbiAgICBmaWx0ZXI/OiBWZVBlbmRsZUhhcnZlc3RlZEV2ZW50RmlsdGVyIHwgVmVQZW5kbGVIYXJ2ZXN0ZWRFdmVudEZpbHRlcltdLFxuICAgIGZldGNoQ29uZmlnPzogUGFydGlhbDxFdGhGZXRjaENvbmZpZz4sXG4gICAgcHJlcHJvY2Vzc0hhbmRsZXI/OiAoXG4gICAgICBldmVudDogVmVQZW5kbGVIYXJ2ZXN0ZWRFdmVudCxcbiAgICAgIGN0eDogUGVucGllU3Rha2luZ0NvbnRleHQsXG4gICAgICBwcmVwcm9jZXNzU3RvcmU6IHsgW2s6IHN0cmluZ106IGFueSB9LFxuICAgICkgPT4gUHJvbWlzZTxQcmVwcm9jZXNzUmVzdWx0PixcbiAgKTogdGhpcyB7XG4gICAgaWYgKCFmaWx0ZXIpIHtcbiAgICAgIGZpbHRlciA9IHRlbXBsYXRlQ29udHJhY3QuZmlsdGVyc1tcbiAgICAgICAgXCJWZVBlbmRsZUhhcnZlc3RlZCh1aW50MjU2LGFkZHJlc3NbXSx1aW50MjU2W10sdWludDI1Nix1aW50MjU2LHVpbnQyNTYpXCJcbiAgICAgIF0obnVsbCwgbnVsbCwgbnVsbCwgbnVsbCwgbnVsbCwgbnVsbCk7XG4gICAgfVxuICAgIHJldHVybiBzdXBlci5vbkV0aEV2ZW50KGhhbmRsZXIsIGZpbHRlciEsIGZldGNoQ29uZmlnLCBwcmVwcm9jZXNzSGFuZGxlcik7XG4gIH1cblxuICBvbkV2ZW50Vm90ZU1hbmFnZXJVcGRhdGVkKFxuICAgIGhhbmRsZXI6IChcbiAgICAgIGV2ZW50OiBWb3RlTWFuYWdlclVwZGF0ZWRFdmVudCxcbiAgICAgIGN0eDogUGVucGllU3Rha2luZ0NvbnRleHQsXG4gICAgKSA9PiB2b2lkLFxuICAgIGZpbHRlcj86IFZvdGVNYW5hZ2VyVXBkYXRlZEV2ZW50RmlsdGVyIHwgVm90ZU1hbmFnZXJVcGRhdGVkRXZlbnRGaWx0ZXJbXSxcbiAgICBmZXRjaENvbmZpZz86IFBhcnRpYWw8RXRoRmV0Y2hDb25maWc+LFxuICAgIHByZXByb2Nlc3NIYW5kbGVyPzogKFxuICAgICAgZXZlbnQ6IFZvdGVNYW5hZ2VyVXBkYXRlZEV2ZW50LFxuICAgICAgY3R4OiBQZW5waWVTdGFraW5nQ29udGV4dCxcbiAgICAgIHByZXByb2Nlc3NTdG9yZTogeyBbazogc3RyaW5nXTogYW55IH0sXG4gICAgKSA9PiBQcm9taXNlPFByZXByb2Nlc3NSZXN1bHQ+LFxuICApOiB0aGlzIHtcbiAgICBpZiAoIWZpbHRlcikge1xuICAgICAgZmlsdGVyID0gdGVtcGxhdGVDb250cmFjdC5maWx0ZXJzW1wiVm90ZU1hbmFnZXJVcGRhdGVkKGFkZHJlc3MsYWRkcmVzcylcIl0oXG4gICAgICAgIG51bGwsXG4gICAgICAgIG51bGwsXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gc3VwZXIub25FdGhFdmVudChoYW5kbGVyLCBmaWx0ZXIhLCBmZXRjaENvbmZpZywgcHJlcHJvY2Vzc0hhbmRsZXIpO1xuICB9XG5cbiAgb25FdmVudFZvdGVTZXQoXG4gICAgaGFuZGxlcjogKGV2ZW50OiBWb3RlU2V0RXZlbnQsIGN0eDogUGVucGllU3Rha2luZ0NvbnRleHQpID0+IHZvaWQsXG4gICAgZmlsdGVyPzogVm90ZVNldEV2ZW50RmlsdGVyIHwgVm90ZVNldEV2ZW50RmlsdGVyW10sXG4gICAgZmV0Y2hDb25maWc/OiBQYXJ0aWFsPEV0aEZldGNoQ29uZmlnPixcbiAgICBwcmVwcm9jZXNzSGFuZGxlcj86IChcbiAgICAgIGV2ZW50OiBWb3RlU2V0RXZlbnQsXG4gICAgICBjdHg6IFBlbnBpZVN0YWtpbmdDb250ZXh0LFxuICAgICAgcHJlcHJvY2Vzc1N0b3JlOiB7IFtrOiBzdHJpbmddOiBhbnkgfSxcbiAgICApID0+IFByb21pc2U8UHJlcHJvY2Vzc1Jlc3VsdD4sXG4gICk6IHRoaXMge1xuICAgIGlmICghZmlsdGVyKSB7XG4gICAgICBmaWx0ZXIgPSB0ZW1wbGF0ZUNvbnRyYWN0LmZpbHRlcnNbXG4gICAgICAgIFwiVm90ZVNldChhZGRyZXNzLHVpbnQyNTYsdWludDI1Nix1aW50MjU2LGFkZHJlc3MpXCJcbiAgICAgIF0obnVsbCwgbnVsbCwgbnVsbCwgbnVsbCwgbnVsbCk7XG4gICAgfVxuICAgIHJldHVybiBzdXBlci5vbkV0aEV2ZW50KGhhbmRsZXIsIGZpbHRlciEsIGZldGNoQ29uZmlnLCBwcmVwcm9jZXNzSGFuZGxlcik7XG4gIH1cblxuICBvbkNhbGxFVEhaYXBwZXIoXG4gICAgaGFuZGxlcjogKGNhbGw6IEVUSFphcHBlckNhbGxUcmFjZSwgY3R4OiBQZW5waWVTdGFraW5nQ29udGV4dCkgPT4gdm9pZCxcbiAgICBmZXRjaENvbmZpZz86IFBhcnRpYWw8RXRoRmV0Y2hDb25maWc+LFxuICAgIHByZXByb2Nlc3NIYW5kbGVyPzogKFxuICAgICAgY2FsbDogRVRIWmFwcGVyQ2FsbFRyYWNlLFxuICAgICAgY3R4OiBQZW5waWVTdGFraW5nQ29udGV4dCxcbiAgICApID0+IFByb21pc2U8UHJlcHJvY2Vzc1Jlc3VsdD4sXG4gICk6IHRoaXMge1xuICAgIHJldHVybiBzdXBlci5vbkV0aFRyYWNlKFxuICAgICAgXCIweDhjNDY2NTA3XCIsXG4gICAgICBoYW5kbGVyIGFzIGFueSxcbiAgICAgIGZldGNoQ29uZmlnLFxuICAgICAgcHJlcHJvY2Vzc0hhbmRsZXIsXG4gICAgKTtcbiAgfVxuXG4gIG9uQ2FsbFBFTkRMRShcbiAgICBoYW5kbGVyOiAoY2FsbDogUEVORExFQ2FsbFRyYWNlLCBjdHg6IFBlbnBpZVN0YWtpbmdDb250ZXh0KSA9PiB2b2lkLFxuICAgIGZldGNoQ29uZmlnPzogUGFydGlhbDxFdGhGZXRjaENvbmZpZz4sXG4gICAgcHJlcHJvY2Vzc0hhbmRsZXI/OiAoXG4gICAgICBjYWxsOiBQRU5ETEVDYWxsVHJhY2UsXG4gICAgICBjdHg6IFBlbnBpZVN0YWtpbmdDb250ZXh0LFxuICAgICkgPT4gUHJvbWlzZTxQcmVwcm9jZXNzUmVzdWx0PixcbiAgKTogdGhpcyB7XG4gICAgcmV0dXJuIHN1cGVyLm9uRXRoVHJhY2UoXG4gICAgICBcIjB4N2NmNzM4ZDJcIixcbiAgICAgIGhhbmRsZXIgYXMgYW55LFxuICAgICAgZmV0Y2hDb25maWcsXG4gICAgICBwcmVwcm9jZXNzSGFuZGxlcixcbiAgICApO1xuICB9XG5cbiAgb25DYWxsV0VUSChcbiAgICBoYW5kbGVyOiAoY2FsbDogV0VUSENhbGxUcmFjZSwgY3R4OiBQZW5waWVTdGFraW5nQ29udGV4dCkgPT4gdm9pZCxcbiAgICBmZXRjaENvbmZpZz86IFBhcnRpYWw8RXRoRmV0Y2hDb25maWc+LFxuICAgIHByZXByb2Nlc3NIYW5kbGVyPzogKFxuICAgICAgY2FsbDogV0VUSENhbGxUcmFjZSxcbiAgICAgIGN0eDogUGVucGllU3Rha2luZ0NvbnRleHQsXG4gICAgKSA9PiBQcm9taXNlPFByZXByb2Nlc3NSZXN1bHQ+LFxuICApOiB0aGlzIHtcbiAgICByZXR1cm4gc3VwZXIub25FdGhUcmFjZShcbiAgICAgIFwiMHhhZDVjNDY0OFwiLFxuICAgICAgaGFuZGxlciBhcyBhbnksXG4gICAgICBmZXRjaENvbmZpZyxcbiAgICAgIHByZXByb2Nlc3NIYW5kbGVyLFxuICAgICk7XG4gIH1cblxuICBvbkNhbGxfX1BlbmRsZVN0YWtpbmdCYXNlVXBnX2luaXQoXG4gICAgaGFuZGxlcjogKFxuICAgICAgY2FsbDogX19QZW5kbGVTdGFraW5nQmFzZVVwZ19pbml0Q2FsbFRyYWNlLFxuICAgICAgY3R4OiBQZW5waWVTdGFraW5nQ29udGV4dCxcbiAgICApID0+IHZvaWQsXG4gICAgZmV0Y2hDb25maWc/OiBQYXJ0aWFsPEV0aEZldGNoQ29uZmlnPixcbiAgICBwcmVwcm9jZXNzSGFuZGxlcj86IChcbiAgICAgIGNhbGw6IF9fUGVuZGxlU3Rha2luZ0Jhc2VVcGdfaW5pdENhbGxUcmFjZSxcbiAgICAgIGN0eDogUGVucGllU3Rha2luZ0NvbnRleHQsXG4gICAgKSA9PiBQcm9taXNlPFByZXByb2Nlc3NSZXN1bHQ+LFxuICApOiB0aGlzIHtcbiAgICByZXR1cm4gc3VwZXIub25FdGhUcmFjZShcbiAgICAgIFwiMHgxYTJkNWU2ZVwiLFxuICAgICAgaGFuZGxlciBhcyBhbnksXG4gICAgICBmZXRjaENvbmZpZyxcbiAgICAgIHByZXByb2Nlc3NIYW5kbGVyLFxuICAgICk7XG4gIH1cblxuICBvbkNhbGxfX1BlbmRsZVN0YWtpbmdfaW5pdChcbiAgICBoYW5kbGVyOiAoXG4gICAgICBjYWxsOiBfX1BlbmRsZVN0YWtpbmdfaW5pdENhbGxUcmFjZSxcbiAgICAgIGN0eDogUGVucGllU3Rha2luZ0NvbnRleHQsXG4gICAgKSA9PiB2b2lkLFxuICAgIGZldGNoQ29uZmlnPzogUGFydGlhbDxFdGhGZXRjaENvbmZpZz4sXG4gICAgcHJlcHJvY2Vzc0hhbmRsZXI/OiAoXG4gICAgICBjYWxsOiBfX1BlbmRsZVN0YWtpbmdfaW5pdENhbGxUcmFjZSxcbiAgICAgIGN0eDogUGVucGllU3Rha2luZ0NvbnRleHQsXG4gICAgKSA9PiBQcm9taXNlPFByZXByb2Nlc3NSZXN1bHQ+LFxuICApOiB0aGlzIHtcbiAgICByZXR1cm4gc3VwZXIub25FdGhUcmFjZShcbiAgICAgIFwiMHhmMjNmNTY5Y1wiLFxuICAgICAgaGFuZGxlciBhcyBhbnksXG4gICAgICBmZXRjaENvbmZpZyxcbiAgICAgIHByZXByb2Nlc3NIYW5kbGVyLFxuICAgICk7XG4gIH1cblxuICBvbkNhbGxBY2N1bXVsYXRlZFZlUGVuZGxlKFxuICAgIGhhbmRsZXI6IChcbiAgICAgIGNhbGw6IEFjY3VtdWxhdGVkVmVQZW5kbGVDYWxsVHJhY2UsXG4gICAgICBjdHg6IFBlbnBpZVN0YWtpbmdDb250ZXh0LFxuICAgICkgPT4gdm9pZCxcbiAgICBmZXRjaENvbmZpZz86IFBhcnRpYWw8RXRoRmV0Y2hDb25maWc+LFxuICAgIHByZXByb2Nlc3NIYW5kbGVyPzogKFxuICAgICAgY2FsbDogQWNjdW11bGF0ZWRWZVBlbmRsZUNhbGxUcmFjZSxcbiAgICAgIGN0eDogUGVucGllU3Rha2luZ0NvbnRleHQsXG4gICAgKSA9PiBQcm9taXNlPFByZXByb2Nlc3NSZXN1bHQ+LFxuICApOiB0aGlzIHtcbiAgICByZXR1cm4gc3VwZXIub25FdGhUcmFjZShcbiAgICAgIFwiMHgzZDM4YjNhN1wiLFxuICAgICAgaGFuZGxlciBhcyBhbnksXG4gICAgICBmZXRjaENvbmZpZyxcbiAgICAgIHByZXByb2Nlc3NIYW5kbGVyLFxuICAgICk7XG4gIH1cblxuICBvbkNhbGxBZGRQZW5kbGVGZWUoXG4gICAgaGFuZGxlcjogKGNhbGw6IEFkZFBlbmRsZUZlZUNhbGxUcmFjZSwgY3R4OiBQZW5waWVTdGFraW5nQ29udGV4dCkgPT4gdm9pZCxcbiAgICBmZXRjaENvbmZpZz86IFBhcnRpYWw8RXRoRmV0Y2hDb25maWc+LFxuICAgIHByZXByb2Nlc3NIYW5kbGVyPzogKFxuICAgICAgY2FsbDogQWRkUGVuZGxlRmVlQ2FsbFRyYWNlLFxuICAgICAgY3R4OiBQZW5waWVTdGFraW5nQ29udGV4dCxcbiAgICApID0+IFByb21pc2U8UHJlcHJvY2Vzc1Jlc3VsdD4sXG4gICk6IHRoaXMge1xuICAgIHJldHVybiBzdXBlci5vbkV0aFRyYWNlKFxuICAgICAgXCIweGFiOWM3OTk3XCIsXG4gICAgICBoYW5kbGVyIGFzIGFueSxcbiAgICAgIGZldGNoQ29uZmlnLFxuICAgICAgcHJlcHJvY2Vzc0hhbmRsZXIsXG4gICAgKTtcbiAgfVxuXG4gIG9uQ2FsbEF1dG9CcmliZUZlZShcbiAgICBoYW5kbGVyOiAoY2FsbDogQXV0b0JyaWJlRmVlQ2FsbFRyYWNlLCBjdHg6IFBlbnBpZVN0YWtpbmdDb250ZXh0KSA9PiB2b2lkLFxuICAgIGZldGNoQ29uZmlnPzogUGFydGlhbDxFdGhGZXRjaENvbmZpZz4sXG4gICAgcHJlcHJvY2Vzc0hhbmRsZXI/OiAoXG4gICAgICBjYWxsOiBBdXRvQnJpYmVGZWVDYWxsVHJhY2UsXG4gICAgICBjdHg6IFBlbnBpZVN0YWtpbmdDb250ZXh0LFxuICAgICkgPT4gUHJvbWlzZTxQcmVwcm9jZXNzUmVzdWx0PixcbiAgKTogdGhpcyB7XG4gICAgcmV0dXJuIHN1cGVyLm9uRXRoVHJhY2UoXG4gICAgICBcIjB4NDE1YmJlOGFcIixcbiAgICAgIGhhbmRsZXIgYXMgYW55LFxuICAgICAgZmV0Y2hDb25maWcsXG4gICAgICBwcmVwcm9jZXNzSGFuZGxlcixcbiAgICApO1xuICB9XG5cbiAgb25DYWxsQmF0Y2hIYXJ2ZXN0TWFya2V0UmV3YXJkcyhcbiAgICBoYW5kbGVyOiAoXG4gICAgICBjYWxsOiBCYXRjaEhhcnZlc3RNYXJrZXRSZXdhcmRzQ2FsbFRyYWNlLFxuICAgICAgY3R4OiBQZW5waWVTdGFraW5nQ29udGV4dCxcbiAgICApID0+IHZvaWQsXG4gICAgZmV0Y2hDb25maWc/OiBQYXJ0aWFsPEV0aEZldGNoQ29uZmlnPixcbiAgICBwcmVwcm9jZXNzSGFuZGxlcj86IChcbiAgICAgIGNhbGw6IEJhdGNoSGFydmVzdE1hcmtldFJld2FyZHNDYWxsVHJhY2UsXG4gICAgICBjdHg6IFBlbnBpZVN0YWtpbmdDb250ZXh0LFxuICAgICkgPT4gUHJvbWlzZTxQcmVwcm9jZXNzUmVzdWx0PixcbiAgKTogdGhpcyB7XG4gICAgcmV0dXJuIHN1cGVyLm9uRXRoVHJhY2UoXG4gICAgICBcIjB4Y2U3MzE5YWVcIixcbiAgICAgIGhhbmRsZXIgYXMgYW55LFxuICAgICAgZmV0Y2hDb25maWcsXG4gICAgICBwcmVwcm9jZXNzSGFuZGxlcixcbiAgICApO1xuICB9XG5cbiAgb25DYWxsQm9vdHN0cmFwVmVQZW5kbGUoXG4gICAgaGFuZGxlcjogKFxuICAgICAgY2FsbDogQm9vdHN0cmFwVmVQZW5kbGVDYWxsVHJhY2UsXG4gICAgICBjdHg6IFBlbnBpZVN0YWtpbmdDb250ZXh0LFxuICAgICkgPT4gdm9pZCxcbiAgICBmZXRjaENvbmZpZz86IFBhcnRpYWw8RXRoRmV0Y2hDb25maWc+LFxuICAgIHByZXByb2Nlc3NIYW5kbGVyPzogKFxuICAgICAgY2FsbDogQm9vdHN0cmFwVmVQZW5kbGVDYWxsVHJhY2UsXG4gICAgICBjdHg6IFBlbnBpZVN0YWtpbmdDb250ZXh0LFxuICAgICkgPT4gUHJvbWlzZTxQcmVwcm9jZXNzUmVzdWx0PixcbiAgKTogdGhpcyB7XG4gICAgcmV0dXJuIHN1cGVyLm9uRXRoVHJhY2UoXG4gICAgICBcIjB4MGVkZDc1ZDJcIixcbiAgICAgIGhhbmRsZXIgYXMgYW55LFxuICAgICAgZmV0Y2hDb25maWcsXG4gICAgICBwcmVwcm9jZXNzSGFuZGxlcixcbiAgICApO1xuICB9XG5cbiAgb25DYWxsQnJpYmVNYW5hZ2VyKFxuICAgIGhhbmRsZXI6IChjYWxsOiBCcmliZU1hbmFnZXJDYWxsVHJhY2UsIGN0eDogUGVucGllU3Rha2luZ0NvbnRleHQpID0+IHZvaWQsXG4gICAgZmV0Y2hDb25maWc/OiBQYXJ0aWFsPEV0aEZldGNoQ29uZmlnPixcbiAgICBwcmVwcm9jZXNzSGFuZGxlcj86IChcbiAgICAgIGNhbGw6IEJyaWJlTWFuYWdlckNhbGxUcmFjZSxcbiAgICAgIGN0eDogUGVucGllU3Rha2luZ0NvbnRleHQsXG4gICAgKSA9PiBQcm9taXNlPFByZXByb2Nlc3NSZXN1bHQ+LFxuICApOiB0aGlzIHtcbiAgICByZXR1cm4gc3VwZXIub25FdGhUcmFjZShcbiAgICAgIFwiMHhlMmE1NzhjZFwiLFxuICAgICAgaGFuZGxlciBhcyBhbnksXG4gICAgICBmZXRjaENvbmZpZyxcbiAgICAgIHByZXByb2Nlc3NIYW5kbGVyLFxuICAgICk7XG4gIH1cblxuICBvbkNhbGxCcmliZU1hbmFnZXJFT0EoXG4gICAgaGFuZGxlcjogKFxuICAgICAgY2FsbDogQnJpYmVNYW5hZ2VyRU9BQ2FsbFRyYWNlLFxuICAgICAgY3R4OiBQZW5waWVTdGFraW5nQ29udGV4dCxcbiAgICApID0+IHZvaWQsXG4gICAgZmV0Y2hDb25maWc/OiBQYXJ0aWFsPEV0aEZldGNoQ29uZmlnPixcbiAgICBwcmVwcm9jZXNzSGFuZGxlcj86IChcbiAgICAgIGNhbGw6IEJyaWJlTWFuYWdlckVPQUNhbGxUcmFjZSxcbiAgICAgIGN0eDogUGVucGllU3Rha2luZ0NvbnRleHQsXG4gICAgKSA9PiBQcm9taXNlPFByZXByb2Nlc3NSZXN1bHQ+LFxuICApOiB0aGlzIHtcbiAgICByZXR1cm4gc3VwZXIub25FdGhUcmFjZShcbiAgICAgIFwiMHhlNDM3YWQwM1wiLFxuICAgICAgaGFuZGxlciBhcyBhbnksXG4gICAgICBmZXRjaENvbmZpZyxcbiAgICAgIHByZXByb2Nlc3NIYW5kbGVyLFxuICAgICk7XG4gIH1cblxuICBvbkNhbGxDb252ZXJ0UGVuZGxlKFxuICAgIGhhbmRsZXI6IChjYWxsOiBDb252ZXJ0UGVuZGxlQ2FsbFRyYWNlLCBjdHg6IFBlbnBpZVN0YWtpbmdDb250ZXh0KSA9PiB2b2lkLFxuICAgIGZldGNoQ29uZmlnPzogUGFydGlhbDxFdGhGZXRjaENvbmZpZz4sXG4gICAgcHJlcHJvY2Vzc0hhbmRsZXI/OiAoXG4gICAgICBjYWxsOiBDb252ZXJ0UGVuZGxlQ2FsbFRyYWNlLFxuICAgICAgY3R4OiBQZW5waWVTdGFraW5nQ29udGV4dCxcbiAgICApID0+IFByb21pc2U8UHJlcHJvY2Vzc1Jlc3VsdD4sXG4gICk6IHRoaXMge1xuICAgIHJldHVybiBzdXBlci5vbkV0aFRyYWNlKFxuICAgICAgXCIweGE4ZjUwYTQ0XCIsXG4gICAgICBoYW5kbGVyIGFzIGFueSxcbiAgICAgIGZldGNoQ29uZmlnLFxuICAgICAgcHJlcHJvY2Vzc0hhbmRsZXIsXG4gICAgKTtcbiAgfVxuXG4gIG9uQ2FsbERlcG9zaXRNYXJrZXQoXG4gICAgaGFuZGxlcjogKGNhbGw6IERlcG9zaXRNYXJrZXRDYWxsVHJhY2UsIGN0eDogUGVucGllU3Rha2luZ0NvbnRleHQpID0+IHZvaWQsXG4gICAgZmV0Y2hDb25maWc/OiBQYXJ0aWFsPEV0aEZldGNoQ29uZmlnPixcbiAgICBwcmVwcm9jZXNzSGFuZGxlcj86IChcbiAgICAgIGNhbGw6IERlcG9zaXRNYXJrZXRDYWxsVHJhY2UsXG4gICAgICBjdHg6IFBlbnBpZVN0YWtpbmdDb250ZXh0LFxuICAgICkgPT4gUHJvbWlzZTxQcmVwcm9jZXNzUmVzdWx0PixcbiAgKTogdGhpcyB7XG4gICAgcmV0dXJuIHN1cGVyLm9uRXRoVHJhY2UoXG4gICAgICBcIjB4MzIzYjMwOWFcIixcbiAgICAgIGhhbmRsZXIgYXMgYW55LFxuICAgICAgZmV0Y2hDb25maWcsXG4gICAgICBwcmVwcm9jZXNzSGFuZGxlcixcbiAgICApO1xuICB9XG5cbiAgb25DYWxsRGlzdHJpYnV0b3JFVEgoXG4gICAgaGFuZGxlcjogKGNhbGw6IERpc3RyaWJ1dG9yRVRIQ2FsbFRyYWNlLCBjdHg6IFBlbnBpZVN0YWtpbmdDb250ZXh0KSA9PiB2b2lkLFxuICAgIGZldGNoQ29uZmlnPzogUGFydGlhbDxFdGhGZXRjaENvbmZpZz4sXG4gICAgcHJlcHJvY2Vzc0hhbmRsZXI/OiAoXG4gICAgICBjYWxsOiBEaXN0cmlidXRvckVUSENhbGxUcmFjZSxcbiAgICAgIGN0eDogUGVucGllU3Rha2luZ0NvbnRleHQsXG4gICAgKSA9PiBQcm9taXNlPFByZXByb2Nlc3NSZXN1bHQ+LFxuICApOiB0aGlzIHtcbiAgICByZXR1cm4gc3VwZXIub25FdGhUcmFjZShcbiAgICAgIFwiMHhiNDYwNmJhYlwiLFxuICAgICAgaGFuZGxlciBhcyBhbnksXG4gICAgICBmZXRjaENvbmZpZyxcbiAgICAgIHByZXByb2Nlc3NIYW5kbGVyLFxuICAgICk7XG4gIH1cblxuICBvbkNhbGxGZWVDb2xsZWN0b3IoXG4gICAgaGFuZGxlcjogKGNhbGw6IEZlZUNvbGxlY3RvckNhbGxUcmFjZSwgY3R4OiBQZW5waWVTdGFraW5nQ29udGV4dCkgPT4gdm9pZCxcbiAgICBmZXRjaENvbmZpZz86IFBhcnRpYWw8RXRoRmV0Y2hDb25maWc+LFxuICAgIHByZXByb2Nlc3NIYW5kbGVyPzogKFxuICAgICAgY2FsbDogRmVlQ29sbGVjdG9yQ2FsbFRyYWNlLFxuICAgICAgY3R4OiBQZW5waWVTdGFraW5nQ29udGV4dCxcbiAgICApID0+IFByb21pc2U8UHJlcHJvY2Vzc1Jlc3VsdD4sXG4gICk6IHRoaXMge1xuICAgIHJldHVybiBzdXBlci5vbkV0aFRyYWNlKFxuICAgICAgXCIweGM0MTViOTVjXCIsXG4gICAgICBoYW5kbGVyIGFzIGFueSxcbiAgICAgIGZldGNoQ29uZmlnLFxuICAgICAgcHJlcHJvY2Vzc0hhbmRsZXIsXG4gICAgKTtcbiAgfVxuXG4gIG9uQ2FsbEdldFBvb2xMZW5ndGgoXG4gICAgaGFuZGxlcjogKGNhbGw6IEdldFBvb2xMZW5ndGhDYWxsVHJhY2UsIGN0eDogUGVucGllU3Rha2luZ0NvbnRleHQpID0+IHZvaWQsXG4gICAgZmV0Y2hDb25maWc/OiBQYXJ0aWFsPEV0aEZldGNoQ29uZmlnPixcbiAgICBwcmVwcm9jZXNzSGFuZGxlcj86IChcbiAgICAgIGNhbGw6IEdldFBvb2xMZW5ndGhDYWxsVHJhY2UsXG4gICAgICBjdHg6IFBlbnBpZVN0YWtpbmdDb250ZXh0LFxuICAgICkgPT4gUHJvbWlzZTxQcmVwcm9jZXNzUmVzdWx0PixcbiAgKTogdGhpcyB7XG4gICAgcmV0dXJuIHN1cGVyLm9uRXRoVHJhY2UoXG4gICAgICBcIjB4YjM5NDRkNTJcIixcbiAgICAgIGhhbmRsZXIgYXMgYW55LFxuICAgICAgZmV0Y2hDb25maWcsXG4gICAgICBwcmVwcm9jZXNzSGFuZGxlcixcbiAgICApO1xuICB9XG5cbiAgb25DYWxsSGFydmVzdENhbGxlclBlbmRsZUZlZShcbiAgICBoYW5kbGVyOiAoXG4gICAgICBjYWxsOiBIYXJ2ZXN0Q2FsbGVyUGVuZGxlRmVlQ2FsbFRyYWNlLFxuICAgICAgY3R4OiBQZW5waWVTdGFraW5nQ29udGV4dCxcbiAgICApID0+IHZvaWQsXG4gICAgZmV0Y2hDb25maWc/OiBQYXJ0aWFsPEV0aEZldGNoQ29uZmlnPixcbiAgICBwcmVwcm9jZXNzSGFuZGxlcj86IChcbiAgICAgIGNhbGw6IEhhcnZlc3RDYWxsZXJQZW5kbGVGZWVDYWxsVHJhY2UsXG4gICAgICBjdHg6IFBlbnBpZVN0YWtpbmdDb250ZXh0LFxuICAgICkgPT4gUHJvbWlzZTxQcmVwcm9jZXNzUmVzdWx0PixcbiAgKTogdGhpcyB7XG4gICAgcmV0dXJuIHN1cGVyLm9uRXRoVHJhY2UoXG4gICAgICBcIjB4ZTdiOWI5M2RcIixcbiAgICAgIGhhbmRsZXIgYXMgYW55LFxuICAgICAgZmV0Y2hDb25maWcsXG4gICAgICBwcmVwcm9jZXNzSGFuZGxlcixcbiAgICApO1xuICB9XG5cbiAgb25DYWxsSGFydmVzdE1hcmtldFJld2FyZChcbiAgICBoYW5kbGVyOiAoXG4gICAgICBjYWxsOiBIYXJ2ZXN0TWFya2V0UmV3YXJkQ2FsbFRyYWNlLFxuICAgICAgY3R4OiBQZW5waWVTdGFraW5nQ29udGV4dCxcbiAgICApID0+IHZvaWQsXG4gICAgZmV0Y2hDb25maWc/OiBQYXJ0aWFsPEV0aEZldGNoQ29uZmlnPixcbiAgICBwcmVwcm9jZXNzSGFuZGxlcj86IChcbiAgICAgIGNhbGw6IEhhcnZlc3RNYXJrZXRSZXdhcmRDYWxsVHJhY2UsXG4gICAgICBjdHg6IFBlbnBpZVN0YWtpbmdDb250ZXh0LFxuICAgICkgPT4gUHJvbWlzZTxQcmVwcm9jZXNzUmVzdWx0PixcbiAgKTogdGhpcyB7XG4gICAgcmV0dXJuIHN1cGVyLm9uRXRoVHJhY2UoXG4gICAgICBcIjB4M2YzZTJiMTFcIixcbiAgICAgIGhhbmRsZXIgYXMgYW55LFxuICAgICAgZmV0Y2hDb25maWcsXG4gICAgICBwcmVwcm9jZXNzSGFuZGxlcixcbiAgICApO1xuICB9XG5cbiAgb25DYWxsSGFydmVzdFRpbWVHYXAoXG4gICAgaGFuZGxlcjogKGNhbGw6IEhhcnZlc3RUaW1lR2FwQ2FsbFRyYWNlLCBjdHg6IFBlbnBpZVN0YWtpbmdDb250ZXh0KSA9PiB2b2lkLFxuICAgIGZldGNoQ29uZmlnPzogUGFydGlhbDxFdGhGZXRjaENvbmZpZz4sXG4gICAgcHJlcHJvY2Vzc0hhbmRsZXI/OiAoXG4gICAgICBjYWxsOiBIYXJ2ZXN0VGltZUdhcENhbGxUcmFjZSxcbiAgICAgIGN0eDogUGVucGllU3Rha2luZ0NvbnRleHQsXG4gICAgKSA9PiBQcm9taXNlPFByZXByb2Nlc3NSZXN1bHQ+LFxuICApOiB0aGlzIHtcbiAgICByZXR1cm4gc3VwZXIub25FdGhUcmFjZShcbiAgICAgIFwiMHhlZmJkOTA2MFwiLFxuICAgICAgaGFuZGxlciBhcyBhbnksXG4gICAgICBmZXRjaENvbmZpZyxcbiAgICAgIHByZXByb2Nlc3NIYW5kbGVyLFxuICAgICk7XG4gIH1cblxuICBvbkNhbGxIYXJ2ZXN0VmVQZW5kbGVSZXdhcmQoXG4gICAgaGFuZGxlcjogKFxuICAgICAgY2FsbDogSGFydmVzdFZlUGVuZGxlUmV3YXJkQ2FsbFRyYWNlLFxuICAgICAgY3R4OiBQZW5waWVTdGFraW5nQ29udGV4dCxcbiAgICApID0+IHZvaWQsXG4gICAgZmV0Y2hDb25maWc/OiBQYXJ0aWFsPEV0aEZldGNoQ29uZmlnPixcbiAgICBwcmVwcm9jZXNzSGFuZGxlcj86IChcbiAgICAgIGNhbGw6IEhhcnZlc3RWZVBlbmRsZVJld2FyZENhbGxUcmFjZSxcbiAgICAgIGN0eDogUGVucGllU3Rha2luZ0NvbnRleHQsXG4gICAgKSA9PiBQcm9taXNlPFByZXByb2Nlc3NSZXN1bHQ+LFxuICApOiB0aGlzIHtcbiAgICByZXR1cm4gc3VwZXIub25FdGhUcmFjZShcbiAgICAgIFwiMHhmYThkYTkyMVwiLFxuICAgICAgaGFuZGxlciBhcyBhbnksXG4gICAgICBmZXRjaENvbmZpZyxcbiAgICAgIHByZXByb2Nlc3NIYW5kbGVyLFxuICAgICk7XG4gIH1cblxuICBvbkNhbGxJbmNyZWFzZUxvY2tUaW1lKFxuICAgIGhhbmRsZXI6IChcbiAgICAgIGNhbGw6IEluY3JlYXNlTG9ja1RpbWVDYWxsVHJhY2UsXG4gICAgICBjdHg6IFBlbnBpZVN0YWtpbmdDb250ZXh0LFxuICAgICkgPT4gdm9pZCxcbiAgICBmZXRjaENvbmZpZz86IFBhcnRpYWw8RXRoRmV0Y2hDb25maWc+LFxuICAgIHByZXByb2Nlc3NIYW5kbGVyPzogKFxuICAgICAgY2FsbDogSW5jcmVhc2VMb2NrVGltZUNhbGxUcmFjZSxcbiAgICAgIGN0eDogUGVucGllU3Rha2luZ0NvbnRleHQsXG4gICAgKSA9PiBQcm9taXNlPFByZXByb2Nlc3NSZXN1bHQ+LFxuICApOiB0aGlzIHtcbiAgICByZXR1cm4gc3VwZXIub25FdGhUcmFjZShcbiAgICAgIFwiMHg3OWFmNTVlNFwiLFxuICAgICAgaGFuZGxlciBhcyBhbnksXG4gICAgICBmZXRjaENvbmZpZyxcbiAgICAgIHByZXByb2Nlc3NIYW5kbGVyLFxuICAgICk7XG4gIH1cblxuICBvbkNhbGxMb2NrUGVyaW9kKFxuICAgIGhhbmRsZXI6IChjYWxsOiBMb2NrUGVyaW9kQ2FsbFRyYWNlLCBjdHg6IFBlbnBpZVN0YWtpbmdDb250ZXh0KSA9PiB2b2lkLFxuICAgIGZldGNoQ29uZmlnPzogUGFydGlhbDxFdGhGZXRjaENvbmZpZz4sXG4gICAgcHJlcHJvY2Vzc0hhbmRsZXI/OiAoXG4gICAgICBjYWxsOiBMb2NrUGVyaW9kQ2FsbFRyYWNlLFxuICAgICAgY3R4OiBQZW5waWVTdGFraW5nQ29udGV4dCxcbiAgICApID0+IFByb21pc2U8UHJlcHJvY2Vzc1Jlc3VsdD4sXG4gICk6IHRoaXMge1xuICAgIHJldHVybiBzdXBlci5vbkV0aFRyYWNlKFxuICAgICAgXCIweDNmZDhiMDJmXCIsXG4gICAgICBoYW5kbGVyIGFzIGFueSxcbiAgICAgIGZldGNoQ29uZmlnLFxuICAgICAgcHJlcHJvY2Vzc0hhbmRsZXIsXG4gICAgKTtcbiAgfVxuXG4gIG9uQ2FsbE1QZW5kbGVDb252ZXJ0b3IoXG4gICAgaGFuZGxlcjogKFxuICAgICAgY2FsbDogTVBlbmRsZUNvbnZlcnRvckNhbGxUcmFjZSxcbiAgICAgIGN0eDogUGVucGllU3Rha2luZ0NvbnRleHQsXG4gICAgKSA9PiB2b2lkLFxuICAgIGZldGNoQ29uZmlnPzogUGFydGlhbDxFdGhGZXRjaENvbmZpZz4sXG4gICAgcHJlcHJvY2Vzc0hhbmRsZXI/OiAoXG4gICAgICBjYWxsOiBNUGVuZGxlQ29udmVydG9yQ2FsbFRyYWNlLFxuICAgICAgY3R4OiBQZW5waWVTdGFraW5nQ29udGV4dCxcbiAgICApID0+IFByb21pc2U8UHJlcHJvY2Vzc1Jlc3VsdD4sXG4gICk6IHRoaXMge1xuICAgIHJldHVybiBzdXBlci5vbkV0aFRyYWNlKFxuICAgICAgXCIweGFkOGZhYjMyXCIsXG4gICAgICBoYW5kbGVyIGFzIGFueSxcbiAgICAgIGZldGNoQ29uZmlnLFxuICAgICAgcHJlcHJvY2Vzc0hhbmRsZXIsXG4gICAgKTtcbiAgfVxuXG4gIG9uQ2FsbE1QZW5kbGVPRlQoXG4gICAgaGFuZGxlcjogKGNhbGw6IE1QZW5kbGVPRlRDYWxsVHJhY2UsIGN0eDogUGVucGllU3Rha2luZ0NvbnRleHQpID0+IHZvaWQsXG4gICAgZmV0Y2hDb25maWc/OiBQYXJ0aWFsPEV0aEZldGNoQ29uZmlnPixcbiAgICBwcmVwcm9jZXNzSGFuZGxlcj86IChcbiAgICAgIGNhbGw6IE1QZW5kbGVPRlRDYWxsVHJhY2UsXG4gICAgICBjdHg6IFBlbnBpZVN0YWtpbmdDb250ZXh0LFxuICAgICkgPT4gUHJvbWlzZTxQcmVwcm9jZXNzUmVzdWx0PixcbiAgKTogdGhpcyB7XG4gICAgcmV0dXJuIHN1cGVyLm9uRXRoVHJhY2UoXG4gICAgICBcIjB4NjEyYmU2YTJcIixcbiAgICAgIGhhbmRsZXIgYXMgYW55LFxuICAgICAgZmV0Y2hDb25maWcsXG4gICAgICBwcmVwcm9jZXNzSGFuZGxlcixcbiAgICApO1xuICB9XG5cbiAgb25DYWxsTWFya2V0RGVwb3NpdEhlbHBlcihcbiAgICBoYW5kbGVyOiAoXG4gICAgICBjYWxsOiBNYXJrZXREZXBvc2l0SGVscGVyQ2FsbFRyYWNlLFxuICAgICAgY3R4OiBQZW5waWVTdGFraW5nQ29udGV4dCxcbiAgICApID0+IHZvaWQsXG4gICAgZmV0Y2hDb25maWc/OiBQYXJ0aWFsPEV0aEZldGNoQ29uZmlnPixcbiAgICBwcmVwcm9jZXNzSGFuZGxlcj86IChcbiAgICAgIGNhbGw6IE1hcmtldERlcG9zaXRIZWxwZXJDYWxsVHJhY2UsXG4gICAgICBjdHg6IFBlbnBpZVN0YWtpbmdDb250ZXh0LFxuICAgICkgPT4gUHJvbWlzZTxQcmVwcm9jZXNzUmVzdWx0PixcbiAgKTogdGhpcyB7XG4gICAgcmV0dXJuIHN1cGVyLm9uRXRoVHJhY2UoXG4gICAgICBcIjB4NGE5ZDcxMjdcIixcbiAgICAgIGhhbmRsZXIgYXMgYW55LFxuICAgICAgZmV0Y2hDb25maWcsXG4gICAgICBwcmVwcm9jZXNzSGFuZGxlcixcbiAgICApO1xuICB9XG5cbiAgb25DYWxsTWFzdGVyUGVucGllKFxuICAgIGhhbmRsZXI6IChjYWxsOiBNYXN0ZXJQZW5waWVDYWxsVHJhY2UsIGN0eDogUGVucGllU3Rha2luZ0NvbnRleHQpID0+IHZvaWQsXG4gICAgZmV0Y2hDb25maWc/OiBQYXJ0aWFsPEV0aEZldGNoQ29uZmlnPixcbiAgICBwcmVwcm9jZXNzSGFuZGxlcj86IChcbiAgICAgIGNhbGw6IE1hc3RlclBlbnBpZUNhbGxUcmFjZSxcbiAgICAgIGN0eDogUGVucGllU3Rha2luZ0NvbnRleHQsXG4gICAgKSA9PiBQcm9taXNlPFByZXByb2Nlc3NSZXN1bHQ+LFxuICApOiB0aGlzIHtcbiAgICByZXR1cm4gc3VwZXIub25FdGhUcmFjZShcbiAgICAgIFwiMHgzYzQxZDVhYlwiLFxuICAgICAgaGFuZGxlciBhcyBhbnksXG4gICAgICBmZXRjaENvbmZpZyxcbiAgICAgIHByZXByb2Nlc3NIYW5kbGVyLFxuICAgICk7XG4gIH1cblxuICBvbkNhbGxPd25lcihcbiAgICBoYW5kbGVyOiAoY2FsbDogT3duZXJDYWxsVHJhY2UsIGN0eDogUGVucGllU3Rha2luZ0NvbnRleHQpID0+IHZvaWQsXG4gICAgZmV0Y2hDb25maWc/OiBQYXJ0aWFsPEV0aEZldGNoQ29uZmlnPixcbiAgICBwcmVwcm9jZXNzSGFuZGxlcj86IChcbiAgICAgIGNhbGw6IE93bmVyQ2FsbFRyYWNlLFxuICAgICAgY3R4OiBQZW5waWVTdGFraW5nQ29udGV4dCxcbiAgICApID0+IFByb21pc2U8UHJlcHJvY2Vzc1Jlc3VsdD4sXG4gICk6IHRoaXMge1xuICAgIHJldHVybiBzdXBlci5vbkV0aFRyYWNlKFxuICAgICAgXCIweDhkYTVjYjViXCIsXG4gICAgICBoYW5kbGVyIGFzIGFueSxcbiAgICAgIGZldGNoQ29uZmlnLFxuICAgICAgcHJlcHJvY2Vzc0hhbmRsZXIsXG4gICAgKTtcbiAgfVxuXG4gIG9uQ2FsbFBhdXNlKFxuICAgIGhhbmRsZXI6IChjYWxsOiBQYXVzZUNhbGxUcmFjZSwgY3R4OiBQZW5waWVTdGFraW5nQ29udGV4dCkgPT4gdm9pZCxcbiAgICBmZXRjaENvbmZpZz86IFBhcnRpYWw8RXRoRmV0Y2hDb25maWc+LFxuICAgIHByZXByb2Nlc3NIYW5kbGVyPzogKFxuICAgICAgY2FsbDogUGF1c2VDYWxsVHJhY2UsXG4gICAgICBjdHg6IFBlbnBpZVN0YWtpbmdDb250ZXh0LFxuICAgICkgPT4gUHJvbWlzZTxQcmVwcm9jZXNzUmVzdWx0PixcbiAgKTogdGhpcyB7XG4gICAgcmV0dXJuIHN1cGVyLm9uRXRoVHJhY2UoXG4gICAgICBcIjB4ODQ1NmNiNTlcIixcbiAgICAgIGhhbmRsZXIgYXMgYW55LFxuICAgICAgZmV0Y2hDb25maWcsXG4gICAgICBwcmVwcm9jZXNzSGFuZGxlcixcbiAgICApO1xuICB9XG5cbiAgb25DYWxsUGF1c2VkKFxuICAgIGhhbmRsZXI6IChjYWxsOiBQYXVzZWRDYWxsVHJhY2UsIGN0eDogUGVucGllU3Rha2luZ0NvbnRleHQpID0+IHZvaWQsXG4gICAgZmV0Y2hDb25maWc/OiBQYXJ0aWFsPEV0aEZldGNoQ29uZmlnPixcbiAgICBwcmVwcm9jZXNzSGFuZGxlcj86IChcbiAgICAgIGNhbGw6IFBhdXNlZENhbGxUcmFjZSxcbiAgICAgIGN0eDogUGVucGllU3Rha2luZ0NvbnRleHQsXG4gICAgKSA9PiBQcm9taXNlPFByZXByb2Nlc3NSZXN1bHQ+LFxuICApOiB0aGlzIHtcbiAgICByZXR1cm4gc3VwZXIub25FdGhUcmFjZShcbiAgICAgIFwiMHg1Yzk3NWFiYlwiLFxuICAgICAgaGFuZGxlciBhcyBhbnksXG4gICAgICBmZXRjaENvbmZpZyxcbiAgICAgIHByZXByb2Nlc3NIYW5kbGVyLFxuICAgICk7XG4gIH1cblxuICBvbkNhbGxQZW5kbGVGZWVJbmZvcyhcbiAgICBoYW5kbGVyOiAoY2FsbDogUGVuZGxlRmVlSW5mb3NDYWxsVHJhY2UsIGN0eDogUGVucGllU3Rha2luZ0NvbnRleHQpID0+IHZvaWQsXG4gICAgZmV0Y2hDb25maWc/OiBQYXJ0aWFsPEV0aEZldGNoQ29uZmlnPixcbiAgICBwcmVwcm9jZXNzSGFuZGxlcj86IChcbiAgICAgIGNhbGw6IFBlbmRsZUZlZUluZm9zQ2FsbFRyYWNlLFxuICAgICAgY3R4OiBQZW5waWVTdGFraW5nQ29udGV4dCxcbiAgICApID0+IFByb21pc2U8UHJlcHJvY2Vzc1Jlc3VsdD4sXG4gICk6IHRoaXMge1xuICAgIHJldHVybiBzdXBlci5vbkV0aFRyYWNlKFxuICAgICAgXCIweDdlYWExNzZjXCIsXG4gICAgICBoYW5kbGVyIGFzIGFueSxcbiAgICAgIGZldGNoQ29uZmlnLFxuICAgICAgcHJlcHJvY2Vzc0hhbmRsZXIsXG4gICAgKTtcbiAgfVxuXG4gIG9uQ2FsbFBlbmRsZVJvdXRlcihcbiAgICBoYW5kbGVyOiAoY2FsbDogUGVuZGxlUm91dGVyQ2FsbFRyYWNlLCBjdHg6IFBlbnBpZVN0YWtpbmdDb250ZXh0KSA9PiB2b2lkLFxuICAgIGZldGNoQ29uZmlnPzogUGFydGlhbDxFdGhGZXRjaENvbmZpZz4sXG4gICAgcHJlcHJvY2Vzc0hhbmRsZXI/OiAoXG4gICAgICBjYWxsOiBQZW5kbGVSb3V0ZXJDYWxsVHJhY2UsXG4gICAgICBjdHg6IFBlbnBpZVN0YWtpbmdDb250ZXh0LFxuICAgICkgPT4gUHJvbWlzZTxQcmVwcm9jZXNzUmVzdWx0PixcbiAgKTogdGhpcyB7XG4gICAgcmV0dXJuIHN1cGVyLm9uRXRoVHJhY2UoXG4gICAgICBcIjB4MjA2YWVhYjNcIixcbiAgICAgIGhhbmRsZXIgYXMgYW55LFxuICAgICAgZmV0Y2hDb25maWcsXG4gICAgICBwcmVwcm9jZXNzSGFuZGxlcixcbiAgICApO1xuICB9XG5cbiAgb25DYWxsUGVuZGxlVm90ZShcbiAgICBoYW5kbGVyOiAoY2FsbDogUGVuZGxlVm90ZUNhbGxUcmFjZSwgY3R4OiBQZW5waWVTdGFraW5nQ29udGV4dCkgPT4gdm9pZCxcbiAgICBmZXRjaENvbmZpZz86IFBhcnRpYWw8RXRoRmV0Y2hDb25maWc+LFxuICAgIHByZXByb2Nlc3NIYW5kbGVyPzogKFxuICAgICAgY2FsbDogUGVuZGxlVm90ZUNhbGxUcmFjZSxcbiAgICAgIGN0eDogUGVucGllU3Rha2luZ0NvbnRleHQsXG4gICAgKSA9PiBQcm9taXNlPFByZXByb2Nlc3NSZXN1bHQ+LFxuICApOiB0aGlzIHtcbiAgICByZXR1cm4gc3VwZXIub25FdGhUcmFjZShcbiAgICAgIFwiMHhiZTE4YTYzZVwiLFxuICAgICAgaGFuZGxlciBhcyBhbnksXG4gICAgICBmZXRjaENvbmZpZyxcbiAgICAgIHByZXByb2Nlc3NIYW5kbGVyLFxuICAgICk7XG4gIH1cblxuICBvbkNhbGxQb29sVG9rZW5MaXN0KFxuICAgIGhhbmRsZXI6IChjYWxsOiBQb29sVG9rZW5MaXN0Q2FsbFRyYWNlLCBjdHg6IFBlbnBpZVN0YWtpbmdDb250ZXh0KSA9PiB2b2lkLFxuICAgIGZldGNoQ29uZmlnPzogUGFydGlhbDxFdGhGZXRjaENvbmZpZz4sXG4gICAgcHJlcHJvY2Vzc0hhbmRsZXI/OiAoXG4gICAgICBjYWxsOiBQb29sVG9rZW5MaXN0Q2FsbFRyYWNlLFxuICAgICAgY3R4OiBQZW5waWVTdGFraW5nQ29udGV4dCxcbiAgICApID0+IFByb21pc2U8UHJlcHJvY2Vzc1Jlc3VsdD4sXG4gICk6IHRoaXMge1xuICAgIHJldHVybiBzdXBlci5vbkV0aFRyYWNlKFxuICAgICAgXCIweDBmZTc5ZWU0XCIsXG4gICAgICBoYW5kbGVyIGFzIGFueSxcbiAgICAgIGZldGNoQ29uZmlnLFxuICAgICAgcHJlcHJvY2Vzc0hhbmRsZXIsXG4gICAgKTtcbiAgfVxuXG4gIG9uQ2FsbFBvb2xzKFxuICAgIGhhbmRsZXI6IChjYWxsOiBQb29sc0NhbGxUcmFjZSwgY3R4OiBQZW5waWVTdGFraW5nQ29udGV4dCkgPT4gdm9pZCxcbiAgICBmZXRjaENvbmZpZz86IFBhcnRpYWw8RXRoRmV0Y2hDb25maWc+LFxuICAgIHByZXByb2Nlc3NIYW5kbGVyPzogKFxuICAgICAgY2FsbDogUG9vbHNDYWxsVHJhY2UsXG4gICAgICBjdHg6IFBlbnBpZVN0YWtpbmdDb250ZXh0LFxuICAgICkgPT4gUHJvbWlzZTxQcmVwcm9jZXNzUmVzdWx0PixcbiAgKTogdGhpcyB7XG4gICAgcmV0dXJuIHN1cGVyLm9uRXRoVHJhY2UoXG4gICAgICBcIjB4YTQwNjNkYmNcIixcbiAgICAgIGhhbmRsZXIgYXMgYW55LFxuICAgICAgZmV0Y2hDb25maWcsXG4gICAgICBwcmVwcm9jZXNzSGFuZGxlcixcbiAgICApO1xuICB9XG5cbiAgb25DYWxsUHJvdG9jb2xGZWUoXG4gICAgaGFuZGxlcjogKGNhbGw6IFByb3RvY29sRmVlQ2FsbFRyYWNlLCBjdHg6IFBlbnBpZVN0YWtpbmdDb250ZXh0KSA9PiB2b2lkLFxuICAgIGZldGNoQ29uZmlnPzogUGFydGlhbDxFdGhGZXRjaENvbmZpZz4sXG4gICAgcHJlcHJvY2Vzc0hhbmRsZXI/OiAoXG4gICAgICBjYWxsOiBQcm90b2NvbEZlZUNhbGxUcmFjZSxcbiAgICAgIGN0eDogUGVucGllU3Rha2luZ0NvbnRleHQsXG4gICAgKSA9PiBQcm9taXNlPFByZXByb2Nlc3NSZXN1bHQ+LFxuICApOiB0aGlzIHtcbiAgICByZXR1cm4gc3VwZXIub25FdGhUcmFjZShcbiAgICAgIFwiMHhiMGUyMWU4YVwiLFxuICAgICAgaGFuZGxlciBhcyBhbnksXG4gICAgICBmZXRjaENvbmZpZyxcbiAgICAgIHByZXByb2Nlc3NIYW5kbGVyLFxuICAgICk7XG4gIH1cblxuICBvbkNhbGxSZWdpc3RlclBvb2woXG4gICAgaGFuZGxlcjogKGNhbGw6IFJlZ2lzdGVyUG9vbENhbGxUcmFjZSwgY3R4OiBQZW5waWVTdGFraW5nQ29udGV4dCkgPT4gdm9pZCxcbiAgICBmZXRjaENvbmZpZz86IFBhcnRpYWw8RXRoRmV0Y2hDb25maWc+LFxuICAgIHByZXByb2Nlc3NIYW5kbGVyPzogKFxuICAgICAgY2FsbDogUmVnaXN0ZXJQb29sQ2FsbFRyYWNlLFxuICAgICAgY3R4OiBQZW5waWVTdGFraW5nQ29udGV4dCxcbiAgICApID0+IFByb21pc2U8UHJlcHJvY2Vzc1Jlc3VsdD4sXG4gICk6IHRoaXMge1xuICAgIHJldHVybiBzdXBlci5vbkV0aFRyYWNlKFxuICAgICAgXCIweDFmZWQ2OTU1XCIsXG4gICAgICBoYW5kbGVyIGFzIGFueSxcbiAgICAgIGZldGNoQ29uZmlnLFxuICAgICAgcHJlcHJvY2Vzc0hhbmRsZXIsXG4gICAgKTtcbiAgfVxuXG4gIG9uQ2FsbFJlbW92ZVBlbmRsZUZlZShcbiAgICBoYW5kbGVyOiAoXG4gICAgICBjYWxsOiBSZW1vdmVQZW5kbGVGZWVDYWxsVHJhY2UsXG4gICAgICBjdHg6IFBlbnBpZVN0YWtpbmdDb250ZXh0LFxuICAgICkgPT4gdm9pZCxcbiAgICBmZXRjaENvbmZpZz86IFBhcnRpYWw8RXRoRmV0Y2hDb25maWc+LFxuICAgIHByZXByb2Nlc3NIYW5kbGVyPzogKFxuICAgICAgY2FsbDogUmVtb3ZlUGVuZGxlRmVlQ2FsbFRyYWNlLFxuICAgICAgY3R4OiBQZW5waWVTdGFraW5nQ29udGV4dCxcbiAgICApID0+IFByb21pc2U8UHJlcHJvY2Vzc1Jlc3VsdD4sXG4gICk6IHRoaXMge1xuICAgIHJldHVybiBzdXBlci5vbkV0aFRyYWNlKFxuICAgICAgXCIweDcxOWU1ZmYxXCIsXG4gICAgICBoYW5kbGVyIGFzIGFueSxcbiAgICAgIGZldGNoQ29uZmlnLFxuICAgICAgcHJlcHJvY2Vzc0hhbmRsZXIsXG4gICAgKTtcbiAgfVxuXG4gIG9uQ2FsbFJlbm91bmNlT3duZXJzaGlwKFxuICAgIGhhbmRsZXI6IChcbiAgICAgIGNhbGw6IFJlbm91bmNlT3duZXJzaGlwQ2FsbFRyYWNlLFxuICAgICAgY3R4OiBQZW5waWVTdGFraW5nQ29udGV4dCxcbiAgICApID0+IHZvaWQsXG4gICAgZmV0Y2hDb25maWc/OiBQYXJ0aWFsPEV0aEZldGNoQ29uZmlnPixcbiAgICBwcmVwcm9jZXNzSGFuZGxlcj86IChcbiAgICAgIGNhbGw6IFJlbm91bmNlT3duZXJzaGlwQ2FsbFRyYWNlLFxuICAgICAgY3R4OiBQZW5waWVTdGFraW5nQ29udGV4dCxcbiAgICApID0+IFByb21pc2U8UHJlcHJvY2Vzc1Jlc3VsdD4sXG4gICk6IHRoaXMge1xuICAgIHJldHVybiBzdXBlci5vbkV0aFRyYWNlKFxuICAgICAgXCIweDcxNTAxOGE2XCIsXG4gICAgICBoYW5kbGVyIGFzIGFueSxcbiAgICAgIGZldGNoQ29uZmlnLFxuICAgICAgcHJlcHJvY2Vzc0hhbmRsZXIsXG4gICAgKTtcbiAgfVxuXG4gIG9uQ2FsbFNldEF1dG9CcmliZUZlZShcbiAgICBoYW5kbGVyOiAoXG4gICAgICBjYWxsOiBTZXRBdXRvQnJpYmVGZWVDYWxsVHJhY2UsXG4gICAgICBjdHg6IFBlbnBpZVN0YWtpbmdDb250ZXh0LFxuICAgICkgPT4gdm9pZCxcbiAgICBmZXRjaENvbmZpZz86IFBhcnRpYWw8RXRoRmV0Y2hDb25maWc+LFxuICAgIHByZXByb2Nlc3NIYW5kbGVyPzogKFxuICAgICAgY2FsbDogU2V0QXV0b0JyaWJlRmVlQ2FsbFRyYWNlLFxuICAgICAgY3R4OiBQZW5waWVTdGFraW5nQ29udGV4dCxcbiAgICApID0+IFByb21pc2U8UHJlcHJvY2Vzc1Jlc3VsdD4sXG4gICk6IHRoaXMge1xuICAgIHJldHVybiBzdXBlci5vbkV0aFRyYWNlKFxuICAgICAgXCIweGY5MDUxYjcyXCIsXG4gICAgICBoYW5kbGVyIGFzIGFueSxcbiAgICAgIGZldGNoQ29uZmlnLFxuICAgICAgcHJlcHJvY2Vzc0hhbmRsZXIsXG4gICAgKTtcbiAgfVxuXG4gIG9uQ2FsbFNldEJyaWJlTWFuYWdlcihcbiAgICBoYW5kbGVyOiAoXG4gICAgICBjYWxsOiBTZXRCcmliZU1hbmFnZXJDYWxsVHJhY2UsXG4gICAgICBjdHg6IFBlbnBpZVN0YWtpbmdDb250ZXh0LFxuICAgICkgPT4gdm9pZCxcbiAgICBmZXRjaENvbmZpZz86IFBhcnRpYWw8RXRoRmV0Y2hDb25maWc+LFxuICAgIHByZXByb2Nlc3NIYW5kbGVyPzogKFxuICAgICAgY2FsbDogU2V0QnJpYmVNYW5hZ2VyQ2FsbFRyYWNlLFxuICAgICAgY3R4OiBQZW5waWVTdGFraW5nQ29udGV4dCxcbiAgICApID0+IFByb21pc2U8UHJlcHJvY2Vzc1Jlc3VsdD4sXG4gICk6IHRoaXMge1xuICAgIHJldHVybiBzdXBlci5vbkV0aFRyYWNlKFxuICAgICAgXCIweGU2ZWM2MzhiXCIsXG4gICAgICBoYW5kbGVyIGFzIGFueSxcbiAgICAgIGZldGNoQ29uZmlnLFxuICAgICAgcHJlcHJvY2Vzc0hhbmRsZXIsXG4gICAgKTtcbiAgfVxuXG4gIG9uQ2FsbFNldEVUSFphcHBlcihcbiAgICBoYW5kbGVyOiAoY2FsbDogU2V0RVRIWmFwcGVyQ2FsbFRyYWNlLCBjdHg6IFBlbnBpZVN0YWtpbmdDb250ZXh0KSA9PiB2b2lkLFxuICAgIGZldGNoQ29uZmlnPzogUGFydGlhbDxFdGhGZXRjaENvbmZpZz4sXG4gICAgcHJlcHJvY2Vzc0hhbmRsZXI/OiAoXG4gICAgICBjYWxsOiBTZXRFVEhaYXBwZXJDYWxsVHJhY2UsXG4gICAgICBjdHg6IFBlbnBpZVN0YWtpbmdDb250ZXh0LFxuICAgICkgPT4gUHJvbWlzZTxQcmVwcm9jZXNzUmVzdWx0PixcbiAgKTogdGhpcyB7XG4gICAgcmV0dXJuIHN1cGVyLm9uRXRoVHJhY2UoXG4gICAgICBcIjB4OGNiZmZmMDBcIixcbiAgICAgIGhhbmRsZXIgYXMgYW55LFxuICAgICAgZmV0Y2hDb25maWcsXG4gICAgICBwcmVwcm9jZXNzSGFuZGxlcixcbiAgICApO1xuICB9XG5cbiAgb25DYWxsU2V0SGFydmVzdFRpbWVHYXAoXG4gICAgaGFuZGxlcjogKFxuICAgICAgY2FsbDogU2V0SGFydmVzdFRpbWVHYXBDYWxsVHJhY2UsXG4gICAgICBjdHg6IFBlbnBpZVN0YWtpbmdDb250ZXh0LFxuICAgICkgPT4gdm9pZCxcbiAgICBmZXRjaENvbmZpZz86IFBhcnRpYWw8RXRoRmV0Y2hDb25maWc+LFxuICAgIHByZXByb2Nlc3NIYW5kbGVyPzogKFxuICAgICAgY2FsbDogU2V0SGFydmVzdFRpbWVHYXBDYWxsVHJhY2UsXG4gICAgICBjdHg6IFBlbnBpZVN0YWtpbmdDb250ZXh0LFxuICAgICkgPT4gUHJvbWlzZTxQcmVwcm9jZXNzUmVzdWx0PixcbiAgKTogdGhpcyB7XG4gICAgcmV0dXJuIHN1cGVyLm9uRXRoVHJhY2UoXG4gICAgICBcIjB4MzA0M2ZlZDBcIixcbiAgICAgIGhhbmRsZXIgYXMgYW55LFxuICAgICAgZmV0Y2hDb25maWcsXG4gICAgICBwcmVwcm9jZXNzSGFuZGxlcixcbiAgICApO1xuICB9XG5cbiAgb25DYWxsU2V0TG9ja0RheXMoXG4gICAgaGFuZGxlcjogKGNhbGw6IFNldExvY2tEYXlzQ2FsbFRyYWNlLCBjdHg6IFBlbnBpZVN0YWtpbmdDb250ZXh0KSA9PiB2b2lkLFxuICAgIGZldGNoQ29uZmlnPzogUGFydGlhbDxFdGhGZXRjaENvbmZpZz4sXG4gICAgcHJlcHJvY2Vzc0hhbmRsZXI/OiAoXG4gICAgICBjYWxsOiBTZXRMb2NrRGF5c0NhbGxUcmFjZSxcbiAgICAgIGN0eDogUGVucGllU3Rha2luZ0NvbnRleHQsXG4gICAgKSA9PiBQcm9taXNlPFByZXByb2Nlc3NSZXN1bHQ+LFxuICApOiB0aGlzIHtcbiAgICByZXR1cm4gc3VwZXIub25FdGhUcmFjZShcbiAgICAgIFwiMHhhZTEyMjEzYlwiLFxuICAgICAgaGFuZGxlciBhcyBhbnksXG4gICAgICBmZXRjaENvbmZpZyxcbiAgICAgIHByZXByb2Nlc3NIYW5kbGVyLFxuICAgICk7XG4gIH1cblxuICBvbkNhbGxTZXRNUGVuZGxlQ29udmVydG9yKFxuICAgIGhhbmRsZXI6IChcbiAgICAgIGNhbGw6IFNldE1QZW5kbGVDb252ZXJ0b3JDYWxsVHJhY2UsXG4gICAgICBjdHg6IFBlbnBpZVN0YWtpbmdDb250ZXh0LFxuICAgICkgPT4gdm9pZCxcbiAgICBmZXRjaENvbmZpZz86IFBhcnRpYWw8RXRoRmV0Y2hDb25maWc+LFxuICAgIHByZXByb2Nlc3NIYW5kbGVyPzogKFxuICAgICAgY2FsbDogU2V0TVBlbmRsZUNvbnZlcnRvckNhbGxUcmFjZSxcbiAgICAgIGN0eDogUGVucGllU3Rha2luZ0NvbnRleHQsXG4gICAgKSA9PiBQcm9taXNlPFByZXByb2Nlc3NSZXN1bHQ+LFxuICApOiB0aGlzIHtcbiAgICByZXR1cm4gc3VwZXIub25FdGhUcmFjZShcbiAgICAgIFwiMHhhODNiNjdkMVwiLFxuICAgICAgaGFuZGxlciBhcyBhbnksXG4gICAgICBmZXRjaENvbmZpZyxcbiAgICAgIHByZXByb2Nlc3NIYW5kbGVyLFxuICAgICk7XG4gIH1cblxuICBvbkNhbGxTZXRNUGVuZGxlT0ZUKFxuICAgIGhhbmRsZXI6IChjYWxsOiBTZXRNUGVuZGxlT0ZUQ2FsbFRyYWNlLCBjdHg6IFBlbnBpZVN0YWtpbmdDb250ZXh0KSA9PiB2b2lkLFxuICAgIGZldGNoQ29uZmlnPzogUGFydGlhbDxFdGhGZXRjaENvbmZpZz4sXG4gICAgcHJlcHJvY2Vzc0hhbmRsZXI/OiAoXG4gICAgICBjYWxsOiBTZXRNUGVuZGxlT0ZUQ2FsbFRyYWNlLFxuICAgICAgY3R4OiBQZW5waWVTdGFraW5nQ29udGV4dCxcbiAgICApID0+IFByb21pc2U8UHJlcHJvY2Vzc1Jlc3VsdD4sXG4gICk6IHRoaXMge1xuICAgIHJldHVybiBzdXBlci5vbkV0aFRyYWNlKFxuICAgICAgXCIweDI0ZTdhNjg4XCIsXG4gICAgICBoYW5kbGVyIGFzIGFueSxcbiAgICAgIGZldGNoQ29uZmlnLFxuICAgICAgcHJlcHJvY2Vzc0hhbmRsZXIsXG4gICAgKTtcbiAgfVxuXG4gIG9uQ2FsbFNldE1hcmtldERlcG9zaXRIZWxwZXIoXG4gICAgaGFuZGxlcjogKFxuICAgICAgY2FsbDogU2V0TWFya2V0RGVwb3NpdEhlbHBlckNhbGxUcmFjZSxcbiAgICAgIGN0eDogUGVucGllU3Rha2luZ0NvbnRleHQsXG4gICAgKSA9PiB2b2lkLFxuICAgIGZldGNoQ29uZmlnPzogUGFydGlhbDxFdGhGZXRjaENvbmZpZz4sXG4gICAgcHJlcHJvY2Vzc0hhbmRsZXI/OiAoXG4gICAgICBjYWxsOiBTZXRNYXJrZXREZXBvc2l0SGVscGVyQ2FsbFRyYWNlLFxuICAgICAgY3R4OiBQZW5waWVTdGFraW5nQ29udGV4dCxcbiAgICApID0+IFByb21pc2U8UHJlcHJvY2Vzc1Jlc3VsdD4sXG4gICk6IHRoaXMge1xuICAgIHJldHVybiBzdXBlci5vbkV0aFRyYWNlKFxuICAgICAgXCIweDkxMGEzODI0XCIsXG4gICAgICBoYW5kbGVyIGFzIGFueSxcbiAgICAgIGZldGNoQ29uZmlnLFxuICAgICAgcHJlcHJvY2Vzc0hhbmRsZXIsXG4gICAgKTtcbiAgfVxuXG4gIG9uQ2FsbFNldFBlbmRsZUZlZShcbiAgICBoYW5kbGVyOiAoY2FsbDogU2V0UGVuZGxlRmVlQ2FsbFRyYWNlLCBjdHg6IFBlbnBpZVN0YWtpbmdDb250ZXh0KSA9PiB2b2lkLFxuICAgIGZldGNoQ29uZmlnPzogUGFydGlhbDxFdGhGZXRjaENvbmZpZz4sXG4gICAgcHJlcHJvY2Vzc0hhbmRsZXI/OiAoXG4gICAgICBjYWxsOiBTZXRQZW5kbGVGZWVDYWxsVHJhY2UsXG4gICAgICBjdHg6IFBlbnBpZVN0YWtpbmdDb250ZXh0LFxuICAgICkgPT4gUHJvbWlzZTxQcmVwcm9jZXNzUmVzdWx0PixcbiAgKTogdGhpcyB7XG4gICAgcmV0dXJuIHN1cGVyLm9uRXRoVHJhY2UoXG4gICAgICBcIjB4OTYwYThhNjFcIixcbiAgICAgIGhhbmRsZXIgYXMgYW55LFxuICAgICAgZmV0Y2hDb25maWcsXG4gICAgICBwcmVwcm9jZXNzSGFuZGxlcixcbiAgICApO1xuICB9XG5cbiAgb25DYWxsU2V0U21hcnRDb252ZXJ0KFxuICAgIGhhbmRsZXI6IChcbiAgICAgIGNhbGw6IFNldFNtYXJ0Q29udmVydENhbGxUcmFjZSxcbiAgICAgIGN0eDogUGVucGllU3Rha2luZ0NvbnRleHQsXG4gICAgKSA9PiB2b2lkLFxuICAgIGZldGNoQ29uZmlnPzogUGFydGlhbDxFdGhGZXRjaENvbmZpZz4sXG4gICAgcHJlcHJvY2Vzc0hhbmRsZXI/OiAoXG4gICAgICBjYWxsOiBTZXRTbWFydENvbnZlcnRDYWxsVHJhY2UsXG4gICAgICBjdHg6IFBlbnBpZVN0YWtpbmdDb250ZXh0LFxuICAgICkgPT4gUHJvbWlzZTxQcmVwcm9jZXNzUmVzdWx0PixcbiAgKTogdGhpcyB7XG4gICAgcmV0dXJuIHN1cGVyLm9uRXRoVHJhY2UoXG4gICAgICBcIjB4NjIxOTBmZGVcIixcbiAgICAgIGhhbmRsZXIgYXMgYW55LFxuICAgICAgZmV0Y2hDb25maWcsXG4gICAgICBwcmVwcm9jZXNzSGFuZGxlcixcbiAgICApO1xuICB9XG5cbiAgb25DYWxsU2V0Vm90ZShcbiAgICBoYW5kbGVyOiAoY2FsbDogU2V0Vm90ZUNhbGxUcmFjZSwgY3R4OiBQZW5waWVTdGFraW5nQ29udGV4dCkgPT4gdm9pZCxcbiAgICBmZXRjaENvbmZpZz86IFBhcnRpYWw8RXRoRmV0Y2hDb25maWc+LFxuICAgIHByZXByb2Nlc3NIYW5kbGVyPzogKFxuICAgICAgY2FsbDogU2V0Vm90ZUNhbGxUcmFjZSxcbiAgICAgIGN0eDogUGVucGllU3Rha2luZ0NvbnRleHQsXG4gICAgKSA9PiBQcm9taXNlPFByZXByb2Nlc3NSZXN1bHQ+LFxuICApOiB0aGlzIHtcbiAgICByZXR1cm4gc3VwZXIub25FdGhUcmFjZShcbiAgICAgIFwiMHg0MmY4NmRkM1wiLFxuICAgICAgaGFuZGxlciBhcyBhbnksXG4gICAgICBmZXRjaENvbmZpZyxcbiAgICAgIHByZXByb2Nlc3NIYW5kbGVyLFxuICAgICk7XG4gIH1cblxuICBvbkNhbGxTZXRWb3RlTWFuYWdlcihcbiAgICBoYW5kbGVyOiAoY2FsbDogU2V0Vm90ZU1hbmFnZXJDYWxsVHJhY2UsIGN0eDogUGVucGllU3Rha2luZ0NvbnRleHQpID0+IHZvaWQsXG4gICAgZmV0Y2hDb25maWc/OiBQYXJ0aWFsPEV0aEZldGNoQ29uZmlnPixcbiAgICBwcmVwcm9jZXNzSGFuZGxlcj86IChcbiAgICAgIGNhbGw6IFNldFZvdGVNYW5hZ2VyQ2FsbFRyYWNlLFxuICAgICAgY3R4OiBQZW5waWVTdGFraW5nQ29udGV4dCxcbiAgICApID0+IFByb21pc2U8UHJlcHJvY2Vzc1Jlc3VsdD4sXG4gICk6IHRoaXMge1xuICAgIHJldHVybiBzdXBlci5vbkV0aFRyYWNlKFxuICAgICAgXCIweGI2N2I2ZGYzXCIsXG4gICAgICBoYW5kbGVyIGFzIGFueSxcbiAgICAgIGZldGNoQ29uZmlnLFxuICAgICAgcHJlcHJvY2Vzc0hhbmRsZXIsXG4gICAgKTtcbiAgfVxuXG4gIG9uQ2FsbFNldG1hc3RlclBlbnBpZShcbiAgICBoYW5kbGVyOiAoXG4gICAgICBjYWxsOiBTZXRtYXN0ZXJQZW5waWVDYWxsVHJhY2UsXG4gICAgICBjdHg6IFBlbnBpZVN0YWtpbmdDb250ZXh0LFxuICAgICkgPT4gdm9pZCxcbiAgICBmZXRjaENvbmZpZz86IFBhcnRpYWw8RXRoRmV0Y2hDb25maWc+LFxuICAgIHByZXByb2Nlc3NIYW5kbGVyPzogKFxuICAgICAgY2FsbDogU2V0bWFzdGVyUGVucGllQ2FsbFRyYWNlLFxuICAgICAgY3R4OiBQZW5waWVTdGFraW5nQ29udGV4dCxcbiAgICApID0+IFByb21pc2U8UHJlcHJvY2Vzc1Jlc3VsdD4sXG4gICk6IHRoaXMge1xuICAgIHJldHVybiBzdXBlci5vbkV0aFRyYWNlKFxuICAgICAgXCIweGI3MDJjNjBjXCIsXG4gICAgICBoYW5kbGVyIGFzIGFueSxcbiAgICAgIGZldGNoQ29uZmlnLFxuICAgICAgcHJlcHJvY2Vzc0hhbmRsZXIsXG4gICAgKTtcbiAgfVxuXG4gIG9uQ2FsbFNtYXJ0UGVuZGxlQ29udmVydChcbiAgICBoYW5kbGVyOiAoXG4gICAgICBjYWxsOiBTbWFydFBlbmRsZUNvbnZlcnRDYWxsVHJhY2UsXG4gICAgICBjdHg6IFBlbnBpZVN0YWtpbmdDb250ZXh0LFxuICAgICkgPT4gdm9pZCxcbiAgICBmZXRjaENvbmZpZz86IFBhcnRpYWw8RXRoRmV0Y2hDb25maWc+LFxuICAgIHByZXByb2Nlc3NIYW5kbGVyPzogKFxuICAgICAgY2FsbDogU21hcnRQZW5kbGVDb252ZXJ0Q2FsbFRyYWNlLFxuICAgICAgY3R4OiBQZW5waWVTdGFraW5nQ29udGV4dCxcbiAgICApID0+IFByb21pc2U8UHJlcHJvY2Vzc1Jlc3VsdD4sXG4gICk6IHRoaXMge1xuICAgIHJldHVybiBzdXBlci5vbkV0aFRyYWNlKFxuICAgICAgXCIweGQ3Yjc3N2EwXCIsXG4gICAgICBoYW5kbGVyIGFzIGFueSxcbiAgICAgIGZldGNoQ29uZmlnLFxuICAgICAgcHJlcHJvY2Vzc0hhbmRsZXIsXG4gICAgKTtcbiAgfVxuXG4gIG9uQ2FsbFRvdGFsUGVuZGxlRmVlKFxuICAgIGhhbmRsZXI6IChjYWxsOiBUb3RhbFBlbmRsZUZlZUNhbGxUcmFjZSwgY3R4OiBQZW5waWVTdGFraW5nQ29udGV4dCkgPT4gdm9pZCxcbiAgICBmZXRjaENvbmZpZz86IFBhcnRpYWw8RXRoRmV0Y2hDb25maWc+LFxuICAgIHByZXByb2Nlc3NIYW5kbGVyPzogKFxuICAgICAgY2FsbDogVG90YWxQZW5kbGVGZWVDYWxsVHJhY2UsXG4gICAgICBjdHg6IFBlbnBpZVN0YWtpbmdDb250ZXh0LFxuICAgICkgPT4gUHJvbWlzZTxQcmVwcm9jZXNzUmVzdWx0PixcbiAgKTogdGhpcyB7XG4gICAgcmV0dXJuIHN1cGVyLm9uRXRoVHJhY2UoXG4gICAgICBcIjB4ZGUzZmNkZTlcIixcbiAgICAgIGhhbmRsZXIgYXMgYW55LFxuICAgICAgZmV0Y2hDb25maWcsXG4gICAgICBwcmVwcm9jZXNzSGFuZGxlcixcbiAgICApO1xuICB9XG5cbiAgb25DYWxsVG90YWxVbmNsYWltZWRFVEgoXG4gICAgaGFuZGxlcjogKFxuICAgICAgY2FsbDogVG90YWxVbmNsYWltZWRFVEhDYWxsVHJhY2UsXG4gICAgICBjdHg6IFBlbnBpZVN0YWtpbmdDb250ZXh0LFxuICAgICkgPT4gdm9pZCxcbiAgICBmZXRjaENvbmZpZz86IFBhcnRpYWw8RXRoRmV0Y2hDb25maWc+LFxuICAgIHByZXByb2Nlc3NIYW5kbGVyPzogKFxuICAgICAgY2FsbDogVG90YWxVbmNsYWltZWRFVEhDYWxsVHJhY2UsXG4gICAgICBjdHg6IFBlbnBpZVN0YWtpbmdDb250ZXh0LFxuICAgICkgPT4gUHJvbWlzZTxQcmVwcm9jZXNzUmVzdWx0PixcbiAgKTogdGhpcyB7XG4gICAgcmV0dXJuIHN1cGVyLm9uRXRoVHJhY2UoXG4gICAgICBcIjB4NjM1MjAyNzRcIixcbiAgICAgIGhhbmRsZXIgYXMgYW55LFxuICAgICAgZmV0Y2hDb25maWcsXG4gICAgICBwcmVwcm9jZXNzSGFuZGxlcixcbiAgICApO1xuICB9XG5cbiAgb25DYWxsVHJhbnNmZXJPd25lcnNoaXAoXG4gICAgaGFuZGxlcjogKFxuICAgICAgY2FsbDogVHJhbnNmZXJPd25lcnNoaXBDYWxsVHJhY2UsXG4gICAgICBjdHg6IFBlbnBpZVN0YWtpbmdDb250ZXh0LFxuICAgICkgPT4gdm9pZCxcbiAgICBmZXRjaENvbmZpZz86IFBhcnRpYWw8RXRoRmV0Y2hDb25maWc+LFxuICAgIHByZXByb2Nlc3NIYW5kbGVyPzogKFxuICAgICAgY2FsbDogVHJhbnNmZXJPd25lcnNoaXBDYWxsVHJhY2UsXG4gICAgICBjdHg6IFBlbnBpZVN0YWtpbmdDb250ZXh0LFxuICAgICkgPT4gUHJvbWlzZTxQcmVwcm9jZXNzUmVzdWx0PixcbiAgKTogdGhpcyB7XG4gICAgcmV0dXJuIHN1cGVyLm9uRXRoVHJhY2UoXG4gICAgICBcIjB4ZjJmZGUzOGJcIixcbiAgICAgIGhhbmRsZXIgYXMgYW55LFxuICAgICAgZmV0Y2hDb25maWcsXG4gICAgICBwcmVwcm9jZXNzSGFuZGxlcixcbiAgICApO1xuICB9XG5cbiAgb25DYWxsVW5wYXVzZShcbiAgICBoYW5kbGVyOiAoY2FsbDogVW5wYXVzZUNhbGxUcmFjZSwgY3R4OiBQZW5waWVTdGFraW5nQ29udGV4dCkgPT4gdm9pZCxcbiAgICBmZXRjaENvbmZpZz86IFBhcnRpYWw8RXRoRmV0Y2hDb25maWc+LFxuICAgIHByZXByb2Nlc3NIYW5kbGVyPzogKFxuICAgICAgY2FsbDogVW5wYXVzZUNhbGxUcmFjZSxcbiAgICAgIGN0eDogUGVucGllU3Rha2luZ0NvbnRleHQsXG4gICAgKSA9PiBQcm9taXNlPFByZXByb2Nlc3NSZXN1bHQ+LFxuICApOiB0aGlzIHtcbiAgICByZXR1cm4gc3VwZXIub25FdGhUcmFjZShcbiAgICAgIFwiMHgzZjRiYTgzYVwiLFxuICAgICAgaGFuZGxlciBhcyBhbnksXG4gICAgICBmZXRjaENvbmZpZyxcbiAgICAgIHByZXByb2Nlc3NIYW5kbGVyLFxuICAgICk7XG4gIH1cblxuICBvbkNhbGxVcGRhdGVNYXJrZXRSZXdhcmRzKFxuICAgIGhhbmRsZXI6IChcbiAgICAgIGNhbGw6IFVwZGF0ZU1hcmtldFJld2FyZHNDYWxsVHJhY2UsXG4gICAgICBjdHg6IFBlbnBpZVN0YWtpbmdDb250ZXh0LFxuICAgICkgPT4gdm9pZCxcbiAgICBmZXRjaENvbmZpZz86IFBhcnRpYWw8RXRoRmV0Y2hDb25maWc+LFxuICAgIHByZXByb2Nlc3NIYW5kbGVyPzogKFxuICAgICAgY2FsbDogVXBkYXRlTWFya2V0UmV3YXJkc0NhbGxUcmFjZSxcbiAgICAgIGN0eDogUGVucGllU3Rha2luZ0NvbnRleHQsXG4gICAgKSA9PiBQcm9taXNlPFByZXByb2Nlc3NSZXN1bHQ+LFxuICApOiB0aGlzIHtcbiAgICByZXR1cm4gc3VwZXIub25FdGhUcmFjZShcbiAgICAgIFwiMHg3OGYxOGJjOFwiLFxuICAgICAgaGFuZGxlciBhcyBhbnksXG4gICAgICBmZXRjaENvbmZpZyxcbiAgICAgIHByZXByb2Nlc3NIYW5kbGVyLFxuICAgICk7XG4gIH1cblxuICBvbkNhbGxVcGRhdGVQb29sSGVscGVyKFxuICAgIGhhbmRsZXI6IChcbiAgICAgIGNhbGw6IFVwZGF0ZVBvb2xIZWxwZXJDYWxsVHJhY2UsXG4gICAgICBjdHg6IFBlbnBpZVN0YWtpbmdDb250ZXh0LFxuICAgICkgPT4gdm9pZCxcbiAgICBmZXRjaENvbmZpZz86IFBhcnRpYWw8RXRoRmV0Y2hDb25maWc+LFxuICAgIHByZXByb2Nlc3NIYW5kbGVyPzogKFxuICAgICAgY2FsbDogVXBkYXRlUG9vbEhlbHBlckNhbGxUcmFjZSxcbiAgICAgIGN0eDogUGVucGllU3Rha2luZ0NvbnRleHQsXG4gICAgKSA9PiBQcm9taXNlPFByZXByb2Nlc3NSZXN1bHQ+LFxuICApOiB0aGlzIHtcbiAgICByZXR1cm4gc3VwZXIub25FdGhUcmFjZShcbiAgICAgIFwiMHgzMmU1MjVmNVwiLFxuICAgICAgaGFuZGxlciBhcyBhbnksXG4gICAgICBmZXRjaENvbmZpZyxcbiAgICAgIHByZXByb2Nlc3NIYW5kbGVyLFxuICAgICk7XG4gIH1cblxuICBvbkNhbGxWZVBlbmRsZShcbiAgICBoYW5kbGVyOiAoY2FsbDogVmVQZW5kbGVDYWxsVHJhY2UsIGN0eDogUGVucGllU3Rha2luZ0NvbnRleHQpID0+IHZvaWQsXG4gICAgZmV0Y2hDb25maWc/OiBQYXJ0aWFsPEV0aEZldGNoQ29uZmlnPixcbiAgICBwcmVwcm9jZXNzSGFuZGxlcj86IChcbiAgICAgIGNhbGw6IFZlUGVuZGxlQ2FsbFRyYWNlLFxuICAgICAgY3R4OiBQZW5waWVTdGFraW5nQ29udGV4dCxcbiAgICApID0+IFByb21pc2U8UHJlcHJvY2Vzc1Jlc3VsdD4sXG4gICk6IHRoaXMge1xuICAgIHJldHVybiBzdXBlci5vbkV0aFRyYWNlKFxuICAgICAgXCIweDgyZGFiYjIxXCIsXG4gICAgICBoYW5kbGVyIGFzIGFueSxcbiAgICAgIGZldGNoQ29uZmlnLFxuICAgICAgcHJlcHJvY2Vzc0hhbmRsZXIsXG4gICAgKTtcbiAgfVxuXG4gIG9uQ2FsbFZlUGVuZGxlSGFydmVzdENhbGxlckZlZShcbiAgICBoYW5kbGVyOiAoXG4gICAgICBjYWxsOiBWZVBlbmRsZUhhcnZlc3RDYWxsZXJGZWVDYWxsVHJhY2UsXG4gICAgICBjdHg6IFBlbnBpZVN0YWtpbmdDb250ZXh0LFxuICAgICkgPT4gdm9pZCxcbiAgICBmZXRjaENvbmZpZz86IFBhcnRpYWw8RXRoRmV0Y2hDb25maWc+LFxuICAgIHByZXByb2Nlc3NIYW5kbGVyPzogKFxuICAgICAgY2FsbDogVmVQZW5kbGVIYXJ2ZXN0Q2FsbGVyRmVlQ2FsbFRyYWNlLFxuICAgICAgY3R4OiBQZW5waWVTdGFraW5nQ29udGV4dCxcbiAgICApID0+IFByb21pc2U8UHJlcHJvY2Vzc1Jlc3VsdD4sXG4gICk6IHRoaXMge1xuICAgIHJldHVybiBzdXBlci5vbkV0aFRyYWNlKFxuICAgICAgXCIweDE2Nzk0OGUwXCIsXG4gICAgICBoYW5kbGVyIGFzIGFueSxcbiAgICAgIGZldGNoQ29uZmlnLFxuICAgICAgcHJlcHJvY2Vzc0hhbmRsZXIsXG4gICAgKTtcbiAgfVxuXG4gIG9uQ2FsbFZvdGUoXG4gICAgaGFuZGxlcjogKGNhbGw6IFZvdGVDYWxsVHJhY2UsIGN0eDogUGVucGllU3Rha2luZ0NvbnRleHQpID0+IHZvaWQsXG4gICAgZmV0Y2hDb25maWc/OiBQYXJ0aWFsPEV0aEZldGNoQ29uZmlnPixcbiAgICBwcmVwcm9jZXNzSGFuZGxlcj86IChcbiAgICAgIGNhbGw6IFZvdGVDYWxsVHJhY2UsXG4gICAgICBjdHg6IFBlbnBpZVN0YWtpbmdDb250ZXh0LFxuICAgICkgPT4gUHJvbWlzZTxQcmVwcm9jZXNzUmVzdWx0PixcbiAgKTogdGhpcyB7XG4gICAgcmV0dXJuIHN1cGVyLm9uRXRoVHJhY2UoXG4gICAgICBcIjB4Njk4NzY2ZWVcIixcbiAgICAgIGhhbmRsZXIgYXMgYW55LFxuICAgICAgZmV0Y2hDb25maWcsXG4gICAgICBwcmVwcm9jZXNzSGFuZGxlcixcbiAgICApO1xuICB9XG5cbiAgb25DYWxsVm90ZU1hbmFnZXIoXG4gICAgaGFuZGxlcjogKGNhbGw6IFZvdGVNYW5hZ2VyQ2FsbFRyYWNlLCBjdHg6IFBlbnBpZVN0YWtpbmdDb250ZXh0KSA9PiB2b2lkLFxuICAgIGZldGNoQ29uZmlnPzogUGFydGlhbDxFdGhGZXRjaENvbmZpZz4sXG4gICAgcHJlcHJvY2Vzc0hhbmRsZXI/OiAoXG4gICAgICBjYWxsOiBWb3RlTWFuYWdlckNhbGxUcmFjZSxcbiAgICAgIGN0eDogUGVucGllU3Rha2luZ0NvbnRleHQsXG4gICAgKSA9PiBQcm9taXNlPFByZXByb2Nlc3NSZXN1bHQ+LFxuICApOiB0aGlzIHtcbiAgICByZXR1cm4gc3VwZXIub25FdGhUcmFjZShcbiAgICAgIFwiMHg0MmMxZTU4N1wiLFxuICAgICAgaGFuZGxlciBhcyBhbnksXG4gICAgICBmZXRjaENvbmZpZyxcbiAgICAgIHByZXByb2Nlc3NIYW5kbGVyLFxuICAgICk7XG4gIH1cblxuICBvbkNhbGxXaXRoZHJhd01hcmtldChcbiAgICBoYW5kbGVyOiAoY2FsbDogV2l0aGRyYXdNYXJrZXRDYWxsVHJhY2UsIGN0eDogUGVucGllU3Rha2luZ0NvbnRleHQpID0+IHZvaWQsXG4gICAgZmV0Y2hDb25maWc/OiBQYXJ0aWFsPEV0aEZldGNoQ29uZmlnPixcbiAgICBwcmVwcm9jZXNzSGFuZGxlcj86IChcbiAgICAgIGNhbGw6IFdpdGhkcmF3TWFya2V0Q2FsbFRyYWNlLFxuICAgICAgY3R4OiBQZW5waWVTdGFraW5nQ29udGV4dCxcbiAgICApID0+IFByb21pc2U8UHJlcHJvY2Vzc1Jlc3VsdD4sXG4gICk6IHRoaXMge1xuICAgIHJldHVybiBzdXBlci5vbkV0aFRyYWNlKFxuICAgICAgXCIweDMxZjYxMjU0XCIsXG4gICAgICBoYW5kbGVyIGFzIGFueSxcbiAgICAgIGZldGNoQ29uZmlnLFxuICAgICAgcHJlcHJvY2Vzc0hhbmRsZXIsXG4gICAgKTtcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgZmlsdGVycyA9IHtcbiAgICBBZGRQZW5kbGVGZWUoXG4gICAgICBfdG8/OiBudWxsLFxuICAgICAgX3ZhbHVlPzogbnVsbCxcbiAgICAgIF9pc01QRU5ETEU/OiBudWxsLFxuICAgICAgX2lzQWRkcmVzcz86IG51bGwsXG4gICAgKTogQWRkUGVuZGxlRmVlRXZlbnRGaWx0ZXIge1xuICAgICAgcmV0dXJuIHRlbXBsYXRlQ29udHJhY3QuZmlsdGVyc1tcbiAgICAgICAgXCJBZGRQZW5kbGVGZWUoYWRkcmVzcyx1aW50MjU2LGJvb2wsYm9vbClcIlxuICAgICAgXShfdG8sIF92YWx1ZSwgX2lzTVBFTkRMRSwgX2lzQWRkcmVzcyk7XG4gICAgfSxcbiAgICBCcmliZU1hbmFnZXJFT0FVcGRhdGVkKFxuICAgICAgX29sZEJyaWJlTWFuYWdlckVPQT86IG51bGwsXG4gICAgICBfYnJpYmVNYW5hZ2VyRU9BPzogbnVsbCxcbiAgICApOiBCcmliZU1hbmFnZXJFT0FVcGRhdGVkRXZlbnRGaWx0ZXIge1xuICAgICAgcmV0dXJuIHRlbXBsYXRlQ29udHJhY3QuZmlsdGVyc1tcbiAgICAgICAgXCJCcmliZU1hbmFnZXJFT0FVcGRhdGVkKGFkZHJlc3MsYWRkcmVzcylcIlxuICAgICAgXShfb2xkQnJpYmVNYW5hZ2VyRU9BLCBfYnJpYmVNYW5hZ2VyRU9BKTtcbiAgICB9LFxuICAgIEJyaWJlTWFuYWdlclVwZGF0ZWQoXG4gICAgICBfb2xkQnJpYmVNYW5hZ2VyPzogbnVsbCxcbiAgICAgIF9icmliZU1hbmFnZXI/OiBudWxsLFxuICAgICk6IEJyaWJlTWFuYWdlclVwZGF0ZWRFdmVudEZpbHRlciB7XG4gICAgICByZXR1cm4gdGVtcGxhdGVDb250cmFjdC5maWx0ZXJzW1wiQnJpYmVNYW5hZ2VyVXBkYXRlZChhZGRyZXNzLGFkZHJlc3MpXCJdKFxuICAgICAgICBfb2xkQnJpYmVNYW5hZ2VyLFxuICAgICAgICBfYnJpYmVNYW5hZ2VyLFxuICAgICAgKTtcbiAgICB9LFxuICAgIEluaXRpYWxpemVkKHZlcnNpb24/OiBudWxsKTogSW5pdGlhbGl6ZWRFdmVudEZpbHRlciB7XG4gICAgICByZXR1cm4gdGVtcGxhdGVDb250cmFjdC5maWx0ZXJzW1wiSW5pdGlhbGl6ZWQodWludDgpXCJdKHZlcnNpb24pO1xuICAgIH0sXG4gICAgTmV3TWFya2V0RGVwb3NpdChcbiAgICAgIF91c2VyPzogc3RyaW5nIHwgbnVsbCxcbiAgICAgIF9tYXJrZXQ/OiBzdHJpbmcgfCBudWxsLFxuICAgICAgX2xwQW1vdW50PzogbnVsbCxcbiAgICAgIF9yZWNlcHRUb2tlbj86IHN0cmluZyB8IG51bGwsXG4gICAgICBfcmVjZXB0QW1vdW50PzogbnVsbCxcbiAgICApOiBOZXdNYXJrZXREZXBvc2l0RXZlbnRGaWx0ZXIge1xuICAgICAgcmV0dXJuIHRlbXBsYXRlQ29udHJhY3QuZmlsdGVyc1tcbiAgICAgICAgXCJOZXdNYXJrZXREZXBvc2l0KGFkZHJlc3MsYWRkcmVzcyx1aW50MjU2LGFkZHJlc3MsdWludDI1NilcIlxuICAgICAgXShfdXNlciwgX21hcmtldCwgX2xwQW1vdW50LCBfcmVjZXB0VG9rZW4sIF9yZWNlcHRBbW91bnQpO1xuICAgIH0sXG4gICAgTmV3TWFya2V0V2l0aGRyYXcoXG4gICAgICBfdXNlcj86IHN0cmluZyB8IG51bGwsXG4gICAgICBfbWFya2V0Pzogc3RyaW5nIHwgbnVsbCxcbiAgICAgIF9scEFtb3VudD86IG51bGwsXG4gICAgICBfcmVjZXB0VG9rZW4/OiBzdHJpbmcgfCBudWxsLFxuICAgICAgX3JlY2VwdEFtb3VudD86IG51bGwsXG4gICAgKTogTmV3TWFya2V0V2l0aGRyYXdFdmVudEZpbHRlciB7XG4gICAgICByZXR1cm4gdGVtcGxhdGVDb250cmFjdC5maWx0ZXJzW1xuICAgICAgICBcIk5ld01hcmtldFdpdGhkcmF3KGFkZHJlc3MsYWRkcmVzcyx1aW50MjU2LGFkZHJlc3MsdWludDI1NilcIlxuICAgICAgXShfdXNlciwgX21hcmtldCwgX2xwQW1vdW50LCBfcmVjZXB0VG9rZW4sIF9yZWNlcHRBbW91bnQpO1xuICAgIH0sXG4gICAgT3duZXJzaGlwVHJhbnNmZXJyZWQoXG4gICAgICBwcmV2aW91c093bmVyPzogc3RyaW5nIHwgbnVsbCxcbiAgICAgIG5ld093bmVyPzogc3RyaW5nIHwgbnVsbCxcbiAgICApOiBPd25lcnNoaXBUcmFuc2ZlcnJlZEV2ZW50RmlsdGVyIHtcbiAgICAgIHJldHVybiB0ZW1wbGF0ZUNvbnRyYWN0LmZpbHRlcnNbXCJPd25lcnNoaXBUcmFuc2ZlcnJlZChhZGRyZXNzLGFkZHJlc3MpXCJdKFxuICAgICAgICBwcmV2aW91c093bmVyLFxuICAgICAgICBuZXdPd25lcixcbiAgICAgICk7XG4gICAgfSxcbiAgICBQYXVzZWQoYWNjb3VudD86IG51bGwpOiBQYXVzZWRFdmVudEZpbHRlciB7XG4gICAgICByZXR1cm4gdGVtcGxhdGVDb250cmFjdC5maWx0ZXJzW1wiUGF1c2VkKGFkZHJlc3MpXCJdKGFjY291bnQpO1xuICAgIH0sXG4gICAgUGVuZGxlTG9ja2VkKFxuICAgICAgX2Ftb3VudD86IG51bGwsXG4gICAgICBfbG9ja0RheXM/OiBudWxsLFxuICAgICAgX3ZlUGVuZGxlQWNjdW11bGF0ZWQ/OiBudWxsLFxuICAgICk6IFBlbmRsZUxvY2tlZEV2ZW50RmlsdGVyIHtcbiAgICAgIHJldHVybiB0ZW1wbGF0ZUNvbnRyYWN0LmZpbHRlcnNbXCJQZW5kbGVMb2NrZWQodWludDI1Nix1aW50MjU2LHVpbnQyNTYpXCJdKFxuICAgICAgICBfYW1vdW50LFxuICAgICAgICBfbG9ja0RheXMsXG4gICAgICAgIF92ZVBlbmRsZUFjY3VtdWxhdGVkLFxuICAgICAgKTtcbiAgICB9LFxuICAgIFBvb2xBZGRlZChcbiAgICAgIF9tYXJrZXQ/OiBudWxsLFxuICAgICAgX3Jld2FyZGVyPzogbnVsbCxcbiAgICAgIF9yZWNlaXB0VG9rZW4/OiBudWxsLFxuICAgICk6IFBvb2xBZGRlZEV2ZW50RmlsdGVyIHtcbiAgICAgIHJldHVybiB0ZW1wbGF0ZUNvbnRyYWN0LmZpbHRlcnNbXCJQb29sQWRkZWQoYWRkcmVzcyxhZGRyZXNzLGFkZHJlc3MpXCJdKFxuICAgICAgICBfbWFya2V0LFxuICAgICAgICBfcmV3YXJkZXIsXG4gICAgICAgIF9yZWNlaXB0VG9rZW4sXG4gICAgICApO1xuICAgIH0sXG4gICAgUG9vbEhlbHBlclVwZGF0ZWQoX21hcmtldD86IG51bGwpOiBQb29sSGVscGVyVXBkYXRlZEV2ZW50RmlsdGVyIHtcbiAgICAgIHJldHVybiB0ZW1wbGF0ZUNvbnRyYWN0LmZpbHRlcnNbXCJQb29sSGVscGVyVXBkYXRlZChhZGRyZXNzKVwiXShfbWFya2V0KTtcbiAgICB9LFxuICAgIFBvb2xSZW1vdmVkKF9waWQ/OiBudWxsLCBfbHBUb2tlbj86IG51bGwpOiBQb29sUmVtb3ZlZEV2ZW50RmlsdGVyIHtcbiAgICAgIHJldHVybiB0ZW1wbGF0ZUNvbnRyYWN0LmZpbHRlcnNbXCJQb29sUmVtb3ZlZCh1aW50MjU2LGFkZHJlc3MpXCJdKFxuICAgICAgICBfcGlkLFxuICAgICAgICBfbHBUb2tlbixcbiAgICAgICk7XG4gICAgfSxcbiAgICBSZW1vdmVQZW5kbGVGZWUoXG4gICAgICB2YWx1ZT86IG51bGwsXG4gICAgICB0bz86IG51bGwsXG4gICAgICBfaXNNUEVORExFPzogbnVsbCxcbiAgICAgIF9pc0FkZHJlc3M/OiBudWxsLFxuICAgICk6IFJlbW92ZVBlbmRsZUZlZUV2ZW50RmlsdGVyIHtcbiAgICAgIHJldHVybiB0ZW1wbGF0ZUNvbnRyYWN0LmZpbHRlcnNbXG4gICAgICAgIFwiUmVtb3ZlUGVuZGxlRmVlKHVpbnQyNTYsYWRkcmVzcyxib29sLGJvb2wpXCJcbiAgICAgIF0odmFsdWUsIHRvLCBfaXNNUEVORExFLCBfaXNBZGRyZXNzKTtcbiAgICB9LFxuICAgIFJld2FyZFBhaWRUbyhcbiAgICAgIF9tYXJrZXQ/OiBudWxsLFxuICAgICAgX3RvPzogbnVsbCxcbiAgICAgIF9yZXdhcmRUb2tlbj86IG51bGwsXG4gICAgICBfZmVlQW1vdW50PzogbnVsbCxcbiAgICApOiBSZXdhcmRQYWlkVG9FdmVudEZpbHRlciB7XG4gICAgICByZXR1cm4gdGVtcGxhdGVDb250cmFjdC5maWx0ZXJzW1xuICAgICAgICBcIlJld2FyZFBhaWRUbyhhZGRyZXNzLGFkZHJlc3MsYWRkcmVzcyx1aW50MjU2KVwiXG4gICAgICBdKF9tYXJrZXQsIF90bywgX3Jld2FyZFRva2VuLCBfZmVlQW1vdW50KTtcbiAgICB9LFxuICAgIFNldExvY2tEYXlzKFxuICAgICAgX29sZExvY2tEYXlzPzogbnVsbCxcbiAgICAgIF9uZXdMb2NrRGF5cz86IG51bGwsXG4gICAgKTogU2V0TG9ja0RheXNFdmVudEZpbHRlciB7XG4gICAgICByZXR1cm4gdGVtcGxhdGVDb250cmFjdC5maWx0ZXJzW1wiU2V0TG9ja0RheXModWludDI1Nix1aW50MjU2KVwiXShcbiAgICAgICAgX29sZExvY2tEYXlzLFxuICAgICAgICBfbmV3TG9ja0RheXMsXG4gICAgICApO1xuICAgIH0sXG4gICAgU2V0TVBlbmRsZUNvbnZlcnRvcihcbiAgICAgIF9vbGRtUGVuZGxlQ29udmVydG9yPzogbnVsbCxcbiAgICAgIF9uZXdtUGVuZGxlQ29udmVydG9yPzogbnVsbCxcbiAgICApOiBTZXRNUGVuZGxlQ29udmVydG9yRXZlbnRGaWx0ZXIge1xuICAgICAgcmV0dXJuIHRlbXBsYXRlQ29udHJhY3QuZmlsdGVyc1tcIlNldE1QZW5kbGVDb252ZXJ0b3IoYWRkcmVzcyxhZGRyZXNzKVwiXShcbiAgICAgICAgX29sZG1QZW5kbGVDb252ZXJ0b3IsXG4gICAgICAgIF9uZXdtUGVuZGxlQ29udmVydG9yLFxuICAgICAgKTtcbiAgICB9LFxuICAgIFNldFBlbmRsZUZlZShfdG8/OiBudWxsLCBfdmFsdWU/OiBudWxsKTogU2V0UGVuZGxlRmVlRXZlbnRGaWx0ZXIge1xuICAgICAgcmV0dXJuIHRlbXBsYXRlQ29udHJhY3QuZmlsdGVyc1tcIlNldFBlbmRsZUZlZShhZGRyZXNzLHVpbnQyNTYpXCJdKFxuICAgICAgICBfdG8sXG4gICAgICAgIF92YWx1ZSxcbiAgICAgICk7XG4gICAgfSxcbiAgICBTbWFydFBlbmRsZUNvbnZlcnRVcGRhdGVkKFxuICAgICAgX09sZFNtYXJ0UGVuZGxlQ29udmVydD86IG51bGwsXG4gICAgICBfc21hcnRQZW5kbGVDb252ZXJ0PzogbnVsbCxcbiAgICApOiBTbWFydFBlbmRsZUNvbnZlcnRVcGRhdGVkRXZlbnRGaWx0ZXIge1xuICAgICAgcmV0dXJuIHRlbXBsYXRlQ29udHJhY3QuZmlsdGVyc1tcbiAgICAgICAgXCJTbWFydFBlbmRsZUNvbnZlcnRVcGRhdGVkKGFkZHJlc3MsYWRkcmVzcylcIlxuICAgICAgXShfT2xkU21hcnRQZW5kbGVDb252ZXJ0LCBfc21hcnRQZW5kbGVDb252ZXJ0KTtcbiAgICB9LFxuICAgIFVucGF1c2VkKGFjY291bnQ/OiBudWxsKTogVW5wYXVzZWRFdmVudEZpbHRlciB7XG4gICAgICByZXR1cm4gdGVtcGxhdGVDb250cmFjdC5maWx0ZXJzW1wiVW5wYXVzZWQoYWRkcmVzcylcIl0oYWNjb3VudCk7XG4gICAgfSxcbiAgICBWZVBlbmRsZUhhcnZlc3RlZChcbiAgICAgIF90b3RhbD86IG51bGwsXG4gICAgICBfcG9vbD86IG51bGwsXG4gICAgICBfdG90YWxBbW91bnRzPzogbnVsbCxcbiAgICAgIF9wcm90b2NvbEZlZT86IG51bGwsXG4gICAgICBfY2FsbGVyRmVlPzogbnVsbCxcbiAgICAgIF9yZXN0PzogbnVsbCxcbiAgICApOiBWZVBlbmRsZUhhcnZlc3RlZEV2ZW50RmlsdGVyIHtcbiAgICAgIHJldHVybiB0ZW1wbGF0ZUNvbnRyYWN0LmZpbHRlcnNbXG4gICAgICAgIFwiVmVQZW5kbGVIYXJ2ZXN0ZWQodWludDI1NixhZGRyZXNzW10sdWludDI1NltdLHVpbnQyNTYsdWludDI1Nix1aW50MjU2KVwiXG4gICAgICBdKF90b3RhbCwgX3Bvb2wsIF90b3RhbEFtb3VudHMsIF9wcm90b2NvbEZlZSwgX2NhbGxlckZlZSwgX3Jlc3QpO1xuICAgIH0sXG4gICAgVm90ZU1hbmFnZXJVcGRhdGVkKFxuICAgICAgX29sZFZvdGVNYW5hZ2VyPzogbnVsbCxcbiAgICAgIF92b3RlTWFuYWdlcj86IG51bGwsXG4gICAgKTogVm90ZU1hbmFnZXJVcGRhdGVkRXZlbnRGaWx0ZXIge1xuICAgICAgcmV0dXJuIHRlbXBsYXRlQ29udHJhY3QuZmlsdGVyc1tcIlZvdGVNYW5hZ2VyVXBkYXRlZChhZGRyZXNzLGFkZHJlc3MpXCJdKFxuICAgICAgICBfb2xkVm90ZU1hbmFnZXIsXG4gICAgICAgIF92b3RlTWFuYWdlcixcbiAgICAgICk7XG4gICAgfSxcbiAgICBWb3RlU2V0KFxuICAgICAgX3ZvdGVyPzogbnVsbCxcbiAgICAgIF92ZVBlbmRsZUhhcnZlc3RDYWxsZXJGZWU/OiBudWxsLFxuICAgICAgX2hhcnZlc3RDYWxsZXJQZW5kbGVGZWU/OiBudWxsLFxuICAgICAgX3ZvdGVQcm90b2NvbEZlZT86IG51bGwsXG4gICAgICBfdm90ZUZlZUNvbGxlY3Rvcj86IG51bGwsXG4gICAgKTogVm90ZVNldEV2ZW50RmlsdGVyIHtcbiAgICAgIHJldHVybiB0ZW1wbGF0ZUNvbnRyYWN0LmZpbHRlcnNbXG4gICAgICAgIFwiVm90ZVNldChhZGRyZXNzLHVpbnQyNTYsdWludDI1Nix1aW50MjU2LGFkZHJlc3MpXCJcbiAgICAgIF0oXG4gICAgICAgIF92b3RlcixcbiAgICAgICAgX3ZlUGVuZGxlSGFydmVzdENhbGxlckZlZSxcbiAgICAgICAgX2hhcnZlc3RDYWxsZXJQZW5kbGVGZWUsXG4gICAgICAgIF92b3RlUHJvdG9jb2xGZWUsXG4gICAgICAgIF92b3RlRmVlQ29sbGVjdG9yLFxuICAgICAgKTtcbiAgICB9LFxuICB9O1xuXG4gIHByb3RlY3RlZCBDcmVhdGVCb3VuZENvbnRyYWN0VmlldygpOiBQZW5waWVTdGFraW5nQm91bmRDb250cmFjdFZpZXcge1xuICAgIGNvbnN0IHZpZXcgPSBnZXRQZW5waWVTdGFraW5nQ29udHJhY3QoXG4gICAgICB0aGlzLmNvbmZpZy5uZXR3b3JrLFxuICAgICAgdGhpcy5jb25maWcuYWRkcmVzcyxcbiAgICApO1xuICAgIHJldHVybiBuZXcgUGVucGllU3Rha2luZ0JvdW5kQ29udHJhY3RWaWV3KHRoaXMuY29uZmlnLmFkZHJlc3MsIHZpZXcpO1xuICB9XG5cbiAgcHVibGljIHN0YXRpYyBiaW5kKG9wdGlvbnM6IEJpbmRPcHRpb25zKTogUGVucGllU3Rha2luZ1Byb2Nlc3NvciB7XG4gICAgaWYgKCFvcHRpb25zLm5hbWUpIHtcbiAgICAgIG9wdGlvbnMubmFtZSA9IFwiUGVucGllU3Rha2luZ1wiO1xuICAgIH1cbiAgICBsZXQgcHJvY2Vzc29yID0gZ2V0UHJvY2Vzc29yKG9wdGlvbnMpIGFzIFBlbnBpZVN0YWtpbmdQcm9jZXNzb3I7XG4gICAgaWYgKCFwcm9jZXNzb3IpIHtcbiAgICAgIHByb2Nlc3NvciA9IG5ldyBQZW5waWVTdGFraW5nUHJvY2Vzc29yKG9wdGlvbnMpO1xuICAgICAgYWRkUHJvY2Vzc29yKG9wdGlvbnMsIHByb2Nlc3Nvcik7XG4gICAgfVxuICAgIHJldHVybiBwcm9jZXNzb3I7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIFBlbnBpZVN0YWtpbmdQcm9jZXNzb3JUZW1wbGF0ZSBleHRlbmRzIEJhc2VQcm9jZXNzb3JUZW1wbGF0ZTxcbiAgUGVucGllU3Rha2luZyxcbiAgUGVucGllU3Rha2luZ0JvdW5kQ29udHJhY3RWaWV3XG4+IHtcbiAgYmluZEludGVybmFsKG9wdGlvbnM6IEJpbmRPcHRpb25zKSB7XG4gICAgaWYgKCFvcHRpb25zLm5hbWUpIHtcbiAgICAgIG9wdGlvbnMubmFtZSA9IFwiUGVucGllU3Rha2luZ1wiO1xuICAgIH1cbiAgICBsZXQgcHJvY2Vzc29yID0gZ2V0UHJvY2Vzc29yKG9wdGlvbnMpIGFzIFBlbnBpZVN0YWtpbmdQcm9jZXNzb3I7XG4gICAgaWYgKCFwcm9jZXNzb3IpIHtcbiAgICAgIHByb2Nlc3NvciA9IG5ldyBQZW5waWVTdGFraW5nUHJvY2Vzc29yKG9wdGlvbnMpO1xuICAgICAgYWRkUHJvY2Vzc29yKG9wdGlvbnMsIHByb2Nlc3Nvcik7XG4gICAgfVxuICAgIHJldHVybiBwcm9jZXNzb3I7XG4gIH1cblxuICBvbkV2ZW50QWRkUGVuZGxlRmVlKFxuICAgIGhhbmRsZXI6IChldmVudDogQWRkUGVuZGxlRmVlRXZlbnQsIGN0eDogUGVucGllU3Rha2luZ0NvbnRleHQpID0+IHZvaWQsXG4gICAgZmlsdGVyPzogQWRkUGVuZGxlRmVlRXZlbnRGaWx0ZXIgfCBBZGRQZW5kbGVGZWVFdmVudEZpbHRlcltdLFxuICAgIGZldGNoQ29uZmlnPzogUGFydGlhbDxFdGhGZXRjaENvbmZpZz4sXG4gICAgcHJlcHJvY2Vzc0hhbmRsZXI/OiAoXG4gICAgICBldmVudDogQWRkUGVuZGxlRmVlRXZlbnQsXG4gICAgICBjdHg6IFBlbnBpZVN0YWtpbmdDb250ZXh0LFxuICAgICAgcHJlcHJvY2Vzc1N0b3JlOiB7IFtrOiBzdHJpbmddOiBhbnkgfSxcbiAgICApID0+IFByb21pc2U8UHJlcHJvY2Vzc1Jlc3VsdD4sXG4gICk6IHRoaXMge1xuICAgIGlmICghZmlsdGVyKSB7XG4gICAgICBmaWx0ZXIgPSB0ZW1wbGF0ZUNvbnRyYWN0LmZpbHRlcnNbXG4gICAgICAgIFwiQWRkUGVuZGxlRmVlKGFkZHJlc3MsdWludDI1Nixib29sLGJvb2wpXCJcbiAgICAgIF0obnVsbCwgbnVsbCwgbnVsbCwgbnVsbCk7XG4gICAgfVxuICAgIHJldHVybiBzdXBlci5vbkV0aEV2ZW50KGhhbmRsZXIsIGZpbHRlciEsIGZldGNoQ29uZmlnLCBwcmVwcm9jZXNzSGFuZGxlcik7XG4gIH1cblxuICBvbkV2ZW50QnJpYmVNYW5hZ2VyRU9BVXBkYXRlZChcbiAgICBoYW5kbGVyOiAoXG4gICAgICBldmVudDogQnJpYmVNYW5hZ2VyRU9BVXBkYXRlZEV2ZW50LFxuICAgICAgY3R4OiBQZW5waWVTdGFraW5nQ29udGV4dCxcbiAgICApID0+IHZvaWQsXG4gICAgZmlsdGVyPzpcbiAgICAgIHwgQnJpYmVNYW5hZ2VyRU9BVXBkYXRlZEV2ZW50RmlsdGVyXG4gICAgICB8IEJyaWJlTWFuYWdlckVPQVVwZGF0ZWRFdmVudEZpbHRlcltdLFxuICAgIGZldGNoQ29uZmlnPzogUGFydGlhbDxFdGhGZXRjaENvbmZpZz4sXG4gICAgcHJlcHJvY2Vzc0hhbmRsZXI/OiAoXG4gICAgICBldmVudDogQnJpYmVNYW5hZ2VyRU9BVXBkYXRlZEV2ZW50LFxuICAgICAgY3R4OiBQZW5waWVTdGFraW5nQ29udGV4dCxcbiAgICAgIHByZXByb2Nlc3NTdG9yZTogeyBbazogc3RyaW5nXTogYW55IH0sXG4gICAgKSA9PiBQcm9taXNlPFByZXByb2Nlc3NSZXN1bHQ+LFxuICApOiB0aGlzIHtcbiAgICBpZiAoIWZpbHRlcikge1xuICAgICAgZmlsdGVyID0gdGVtcGxhdGVDb250cmFjdC5maWx0ZXJzW1xuICAgICAgICBcIkJyaWJlTWFuYWdlckVPQVVwZGF0ZWQoYWRkcmVzcyxhZGRyZXNzKVwiXG4gICAgICBdKG51bGwsIG51bGwpO1xuICAgIH1cbiAgICByZXR1cm4gc3VwZXIub25FdGhFdmVudChoYW5kbGVyLCBmaWx0ZXIhLCBmZXRjaENvbmZpZywgcHJlcHJvY2Vzc0hhbmRsZXIpO1xuICB9XG5cbiAgb25FdmVudEJyaWJlTWFuYWdlclVwZGF0ZWQoXG4gICAgaGFuZGxlcjogKFxuICAgICAgZXZlbnQ6IEJyaWJlTWFuYWdlclVwZGF0ZWRFdmVudCxcbiAgICAgIGN0eDogUGVucGllU3Rha2luZ0NvbnRleHQsXG4gICAgKSA9PiB2b2lkLFxuICAgIGZpbHRlcj86IEJyaWJlTWFuYWdlclVwZGF0ZWRFdmVudEZpbHRlciB8IEJyaWJlTWFuYWdlclVwZGF0ZWRFdmVudEZpbHRlcltdLFxuICAgIGZldGNoQ29uZmlnPzogUGFydGlhbDxFdGhGZXRjaENvbmZpZz4sXG4gICAgcHJlcHJvY2Vzc0hhbmRsZXI/OiAoXG4gICAgICBldmVudDogQnJpYmVNYW5hZ2VyVXBkYXRlZEV2ZW50LFxuICAgICAgY3R4OiBQZW5waWVTdGFraW5nQ29udGV4dCxcbiAgICAgIHByZXByb2Nlc3NTdG9yZTogeyBbazogc3RyaW5nXTogYW55IH0sXG4gICAgKSA9PiBQcm9taXNlPFByZXByb2Nlc3NSZXN1bHQ+LFxuICApOiB0aGlzIHtcbiAgICBpZiAoIWZpbHRlcikge1xuICAgICAgZmlsdGVyID0gdGVtcGxhdGVDb250cmFjdC5maWx0ZXJzW1wiQnJpYmVNYW5hZ2VyVXBkYXRlZChhZGRyZXNzLGFkZHJlc3MpXCJdKFxuICAgICAgICBudWxsLFxuICAgICAgICBudWxsLFxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIHN1cGVyLm9uRXRoRXZlbnQoaGFuZGxlciwgZmlsdGVyISwgZmV0Y2hDb25maWcsIHByZXByb2Nlc3NIYW5kbGVyKTtcbiAgfVxuXG4gIG9uRXZlbnRJbml0aWFsaXplZChcbiAgICBoYW5kbGVyOiAoZXZlbnQ6IEluaXRpYWxpemVkRXZlbnQsIGN0eDogUGVucGllU3Rha2luZ0NvbnRleHQpID0+IHZvaWQsXG4gICAgZmlsdGVyPzogSW5pdGlhbGl6ZWRFdmVudEZpbHRlciB8IEluaXRpYWxpemVkRXZlbnRGaWx0ZXJbXSxcbiAgICBmZXRjaENvbmZpZz86IFBhcnRpYWw8RXRoRmV0Y2hDb25maWc+LFxuICAgIHByZXByb2Nlc3NIYW5kbGVyPzogKFxuICAgICAgZXZlbnQ6IEluaXRpYWxpemVkRXZlbnQsXG4gICAgICBjdHg6IFBlbnBpZVN0YWtpbmdDb250ZXh0LFxuICAgICAgcHJlcHJvY2Vzc1N0b3JlOiB7IFtrOiBzdHJpbmddOiBhbnkgfSxcbiAgICApID0+IFByb21pc2U8UHJlcHJvY2Vzc1Jlc3VsdD4sXG4gICk6IHRoaXMge1xuICAgIGlmICghZmlsdGVyKSB7XG4gICAgICBmaWx0ZXIgPSB0ZW1wbGF0ZUNvbnRyYWN0LmZpbHRlcnNbXCJJbml0aWFsaXplZCh1aW50OClcIl0obnVsbCk7XG4gICAgfVxuICAgIHJldHVybiBzdXBlci5vbkV0aEV2ZW50KGhhbmRsZXIsIGZpbHRlciEsIGZldGNoQ29uZmlnLCBwcmVwcm9jZXNzSGFuZGxlcik7XG4gIH1cblxuICBvbkV2ZW50TmV3TWFya2V0RGVwb3NpdChcbiAgICBoYW5kbGVyOiAoZXZlbnQ6IE5ld01hcmtldERlcG9zaXRFdmVudCwgY3R4OiBQZW5waWVTdGFraW5nQ29udGV4dCkgPT4gdm9pZCxcbiAgICBmaWx0ZXI/OiBOZXdNYXJrZXREZXBvc2l0RXZlbnRGaWx0ZXIgfCBOZXdNYXJrZXREZXBvc2l0RXZlbnRGaWx0ZXJbXSxcbiAgICBmZXRjaENvbmZpZz86IFBhcnRpYWw8RXRoRmV0Y2hDb25maWc+LFxuICAgIHByZXByb2Nlc3NIYW5kbGVyPzogKFxuICAgICAgZXZlbnQ6IE5ld01hcmtldERlcG9zaXRFdmVudCxcbiAgICAgIGN0eDogUGVucGllU3Rha2luZ0NvbnRleHQsXG4gICAgICBwcmVwcm9jZXNzU3RvcmU6IHsgW2s6IHN0cmluZ106IGFueSB9LFxuICAgICkgPT4gUHJvbWlzZTxQcmVwcm9jZXNzUmVzdWx0PixcbiAgKTogdGhpcyB7XG4gICAgaWYgKCFmaWx0ZXIpIHtcbiAgICAgIGZpbHRlciA9IHRlbXBsYXRlQ29udHJhY3QuZmlsdGVyc1tcbiAgICAgICAgXCJOZXdNYXJrZXREZXBvc2l0KGFkZHJlc3MsYWRkcmVzcyx1aW50MjU2LGFkZHJlc3MsdWludDI1NilcIlxuICAgICAgXShudWxsLCBudWxsLCBudWxsLCBudWxsLCBudWxsKTtcbiAgICB9XG4gICAgcmV0dXJuIHN1cGVyLm9uRXRoRXZlbnQoaGFuZGxlciwgZmlsdGVyISwgZmV0Y2hDb25maWcsIHByZXByb2Nlc3NIYW5kbGVyKTtcbiAgfVxuXG4gIG9uRXZlbnROZXdNYXJrZXRXaXRoZHJhdyhcbiAgICBoYW5kbGVyOiAoZXZlbnQ6IE5ld01hcmtldFdpdGhkcmF3RXZlbnQsIGN0eDogUGVucGllU3Rha2luZ0NvbnRleHQpID0+IHZvaWQsXG4gICAgZmlsdGVyPzogTmV3TWFya2V0V2l0aGRyYXdFdmVudEZpbHRlciB8IE5ld01hcmtldFdpdGhkcmF3RXZlbnRGaWx0ZXJbXSxcbiAgICBmZXRjaENvbmZpZz86IFBhcnRpYWw8RXRoRmV0Y2hDb25maWc+LFxuICAgIHByZXByb2Nlc3NIYW5kbGVyPzogKFxuICAgICAgZXZlbnQ6IE5ld01hcmtldFdpdGhkcmF3RXZlbnQsXG4gICAgICBjdHg6IFBlbnBpZVN0YWtpbmdDb250ZXh0LFxuICAgICAgcHJlcHJvY2Vzc1N0b3JlOiB7IFtrOiBzdHJpbmddOiBhbnkgfSxcbiAgICApID0+IFByb21pc2U8UHJlcHJvY2Vzc1Jlc3VsdD4sXG4gICk6IHRoaXMge1xuICAgIGlmICghZmlsdGVyKSB7XG4gICAgICBmaWx0ZXIgPSB0ZW1wbGF0ZUNvbnRyYWN0LmZpbHRlcnNbXG4gICAgICAgIFwiTmV3TWFya2V0V2l0aGRyYXcoYWRkcmVzcyxhZGRyZXNzLHVpbnQyNTYsYWRkcmVzcyx1aW50MjU2KVwiXG4gICAgICBdKG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwpO1xuICAgIH1cbiAgICByZXR1cm4gc3VwZXIub25FdGhFdmVudChoYW5kbGVyLCBmaWx0ZXIhLCBmZXRjaENvbmZpZywgcHJlcHJvY2Vzc0hhbmRsZXIpO1xuICB9XG5cbiAgb25FdmVudE93bmVyc2hpcFRyYW5zZmVycmVkKFxuICAgIGhhbmRsZXI6IChcbiAgICAgIGV2ZW50OiBPd25lcnNoaXBUcmFuc2ZlcnJlZEV2ZW50LFxuICAgICAgY3R4OiBQZW5waWVTdGFraW5nQ29udGV4dCxcbiAgICApID0+IHZvaWQsXG4gICAgZmlsdGVyPzpcbiAgICAgIHwgT3duZXJzaGlwVHJhbnNmZXJyZWRFdmVudEZpbHRlclxuICAgICAgfCBPd25lcnNoaXBUcmFuc2ZlcnJlZEV2ZW50RmlsdGVyW10sXG4gICAgZmV0Y2hDb25maWc/OiBQYXJ0aWFsPEV0aEZldGNoQ29uZmlnPixcbiAgICBwcmVwcm9jZXNzSGFuZGxlcj86IChcbiAgICAgIGV2ZW50OiBPd25lcnNoaXBUcmFuc2ZlcnJlZEV2ZW50LFxuICAgICAgY3R4OiBQZW5waWVTdGFraW5nQ29udGV4dCxcbiAgICAgIHByZXByb2Nlc3NTdG9yZTogeyBbazogc3RyaW5nXTogYW55IH0sXG4gICAgKSA9PiBQcm9taXNlPFByZXByb2Nlc3NSZXN1bHQ+LFxuICApOiB0aGlzIHtcbiAgICBpZiAoIWZpbHRlcikge1xuICAgICAgZmlsdGVyID0gdGVtcGxhdGVDb250cmFjdC5maWx0ZXJzW1xuICAgICAgICBcIk93bmVyc2hpcFRyYW5zZmVycmVkKGFkZHJlc3MsYWRkcmVzcylcIlxuICAgICAgXShudWxsLCBudWxsKTtcbiAgICB9XG4gICAgcmV0dXJuIHN1cGVyLm9uRXRoRXZlbnQoaGFuZGxlciwgZmlsdGVyISwgZmV0Y2hDb25maWcsIHByZXByb2Nlc3NIYW5kbGVyKTtcbiAgfVxuXG4gIG9uRXZlbnRQYXVzZWQoXG4gICAgaGFuZGxlcjogKGV2ZW50OiBQYXVzZWRFdmVudCwgY3R4OiBQZW5waWVTdGFraW5nQ29udGV4dCkgPT4gdm9pZCxcbiAgICBmaWx0ZXI/OiBQYXVzZWRFdmVudEZpbHRlciB8IFBhdXNlZEV2ZW50RmlsdGVyW10sXG4gICAgZmV0Y2hDb25maWc/OiBQYXJ0aWFsPEV0aEZldGNoQ29uZmlnPixcbiAgICBwcmVwcm9jZXNzSGFuZGxlcj86IChcbiAgICAgIGV2ZW50OiBQYXVzZWRFdmVudCxcbiAgICAgIGN0eDogUGVucGllU3Rha2luZ0NvbnRleHQsXG4gICAgICBwcmVwcm9jZXNzU3RvcmU6IHsgW2s6IHN0cmluZ106IGFueSB9LFxuICAgICkgPT4gUHJvbWlzZTxQcmVwcm9jZXNzUmVzdWx0PixcbiAgKTogdGhpcyB7XG4gICAgaWYgKCFmaWx0ZXIpIHtcbiAgICAgIGZpbHRlciA9IHRlbXBsYXRlQ29udHJhY3QuZmlsdGVyc1tcIlBhdXNlZChhZGRyZXNzKVwiXShudWxsKTtcbiAgICB9XG4gICAgcmV0dXJuIHN1cGVyLm9uRXRoRXZlbnQoaGFuZGxlciwgZmlsdGVyISwgZmV0Y2hDb25maWcsIHByZXByb2Nlc3NIYW5kbGVyKTtcbiAgfVxuXG4gIG9uRXZlbnRQZW5kbGVMb2NrZWQoXG4gICAgaGFuZGxlcjogKGV2ZW50OiBQZW5kbGVMb2NrZWRFdmVudCwgY3R4OiBQZW5waWVTdGFraW5nQ29udGV4dCkgPT4gdm9pZCxcbiAgICBmaWx0ZXI/OiBQZW5kbGVMb2NrZWRFdmVudEZpbHRlciB8IFBlbmRsZUxvY2tlZEV2ZW50RmlsdGVyW10sXG4gICAgZmV0Y2hDb25maWc/OiBQYXJ0aWFsPEV0aEZldGNoQ29uZmlnPixcbiAgICBwcmVwcm9jZXNzSGFuZGxlcj86IChcbiAgICAgIGV2ZW50OiBQZW5kbGVMb2NrZWRFdmVudCxcbiAgICAgIGN0eDogUGVucGllU3Rha2luZ0NvbnRleHQsXG4gICAgICBwcmVwcm9jZXNzU3RvcmU6IHsgW2s6IHN0cmluZ106IGFueSB9LFxuICAgICkgPT4gUHJvbWlzZTxQcmVwcm9jZXNzUmVzdWx0PixcbiAgKTogdGhpcyB7XG4gICAgaWYgKCFmaWx0ZXIpIHtcbiAgICAgIGZpbHRlciA9IHRlbXBsYXRlQ29udHJhY3QuZmlsdGVyc1tcbiAgICAgICAgXCJQZW5kbGVMb2NrZWQodWludDI1Nix1aW50MjU2LHVpbnQyNTYpXCJcbiAgICAgIF0obnVsbCwgbnVsbCwgbnVsbCk7XG4gICAgfVxuICAgIHJldHVybiBzdXBlci5vbkV0aEV2ZW50KGhhbmRsZXIsIGZpbHRlciEsIGZldGNoQ29uZmlnLCBwcmVwcm9jZXNzSGFuZGxlcik7XG4gIH1cblxuICBvbkV2ZW50UG9vbEFkZGVkKFxuICAgIGhhbmRsZXI6IChldmVudDogUG9vbEFkZGVkRXZlbnQsIGN0eDogUGVucGllU3Rha2luZ0NvbnRleHQpID0+IHZvaWQsXG4gICAgZmlsdGVyPzogUG9vbEFkZGVkRXZlbnRGaWx0ZXIgfCBQb29sQWRkZWRFdmVudEZpbHRlcltdLFxuICAgIGZldGNoQ29uZmlnPzogUGFydGlhbDxFdGhGZXRjaENvbmZpZz4sXG4gICAgcHJlcHJvY2Vzc0hhbmRsZXI/OiAoXG4gICAgICBldmVudDogUG9vbEFkZGVkRXZlbnQsXG4gICAgICBjdHg6IFBlbnBpZVN0YWtpbmdDb250ZXh0LFxuICAgICAgcHJlcHJvY2Vzc1N0b3JlOiB7IFtrOiBzdHJpbmddOiBhbnkgfSxcbiAgICApID0+IFByb21pc2U8UHJlcHJvY2Vzc1Jlc3VsdD4sXG4gICk6IHRoaXMge1xuICAgIGlmICghZmlsdGVyKSB7XG4gICAgICBmaWx0ZXIgPSB0ZW1wbGF0ZUNvbnRyYWN0LmZpbHRlcnNbXCJQb29sQWRkZWQoYWRkcmVzcyxhZGRyZXNzLGFkZHJlc3MpXCJdKFxuICAgICAgICBudWxsLFxuICAgICAgICBudWxsLFxuICAgICAgICBudWxsLFxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIHN1cGVyLm9uRXRoRXZlbnQoaGFuZGxlciwgZmlsdGVyISwgZmV0Y2hDb25maWcsIHByZXByb2Nlc3NIYW5kbGVyKTtcbiAgfVxuXG4gIG9uRXZlbnRQb29sSGVscGVyVXBkYXRlZChcbiAgICBoYW5kbGVyOiAoZXZlbnQ6IFBvb2xIZWxwZXJVcGRhdGVkRXZlbnQsIGN0eDogUGVucGllU3Rha2luZ0NvbnRleHQpID0+IHZvaWQsXG4gICAgZmlsdGVyPzogUG9vbEhlbHBlclVwZGF0ZWRFdmVudEZpbHRlciB8IFBvb2xIZWxwZXJVcGRhdGVkRXZlbnRGaWx0ZXJbXSxcbiAgICBmZXRjaENvbmZpZz86IFBhcnRpYWw8RXRoRmV0Y2hDb25maWc+LFxuICAgIHByZXByb2Nlc3NIYW5kbGVyPzogKFxuICAgICAgZXZlbnQ6IFBvb2xIZWxwZXJVcGRhdGVkRXZlbnQsXG4gICAgICBjdHg6IFBlbnBpZVN0YWtpbmdDb250ZXh0LFxuICAgICAgcHJlcHJvY2Vzc1N0b3JlOiB7IFtrOiBzdHJpbmddOiBhbnkgfSxcbiAgICApID0+IFByb21pc2U8UHJlcHJvY2Vzc1Jlc3VsdD4sXG4gICk6IHRoaXMge1xuICAgIGlmICghZmlsdGVyKSB7XG4gICAgICBmaWx0ZXIgPSB0ZW1wbGF0ZUNvbnRyYWN0LmZpbHRlcnNbXCJQb29sSGVscGVyVXBkYXRlZChhZGRyZXNzKVwiXShudWxsKTtcbiAgICB9XG4gICAgcmV0dXJuIHN1cGVyLm9uRXRoRXZlbnQoaGFuZGxlciwgZmlsdGVyISwgZmV0Y2hDb25maWcsIHByZXByb2Nlc3NIYW5kbGVyKTtcbiAgfVxuXG4gIG9uRXZlbnRQb29sUmVtb3ZlZChcbiAgICBoYW5kbGVyOiAoZXZlbnQ6IFBvb2xSZW1vdmVkRXZlbnQsIGN0eDogUGVucGllU3Rha2luZ0NvbnRleHQpID0+IHZvaWQsXG4gICAgZmlsdGVyPzogUG9vbFJlbW92ZWRFdmVudEZpbHRlciB8IFBvb2xSZW1vdmVkRXZlbnRGaWx0ZXJbXSxcbiAgICBmZXRjaENvbmZpZz86IFBhcnRpYWw8RXRoRmV0Y2hDb25maWc+LFxuICAgIHByZXByb2Nlc3NIYW5kbGVyPzogKFxuICAgICAgZXZlbnQ6IFBvb2xSZW1vdmVkRXZlbnQsXG4gICAgICBjdHg6IFBlbnBpZVN0YWtpbmdDb250ZXh0LFxuICAgICAgcHJlcHJvY2Vzc1N0b3JlOiB7IFtrOiBzdHJpbmddOiBhbnkgfSxcbiAgICApID0+IFByb21pc2U8UHJlcHJvY2Vzc1Jlc3VsdD4sXG4gICk6IHRoaXMge1xuICAgIGlmICghZmlsdGVyKSB7XG4gICAgICBmaWx0ZXIgPSB0ZW1wbGF0ZUNvbnRyYWN0LmZpbHRlcnNbXCJQb29sUmVtb3ZlZCh1aW50MjU2LGFkZHJlc3MpXCJdKFxuICAgICAgICBudWxsLFxuICAgICAgICBudWxsLFxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIHN1cGVyLm9uRXRoRXZlbnQoaGFuZGxlciwgZmlsdGVyISwgZmV0Y2hDb25maWcsIHByZXByb2Nlc3NIYW5kbGVyKTtcbiAgfVxuXG4gIG9uRXZlbnRSZW1vdmVQZW5kbGVGZWUoXG4gICAgaGFuZGxlcjogKGV2ZW50OiBSZW1vdmVQZW5kbGVGZWVFdmVudCwgY3R4OiBQZW5waWVTdGFraW5nQ29udGV4dCkgPT4gdm9pZCxcbiAgICBmaWx0ZXI/OiBSZW1vdmVQZW5kbGVGZWVFdmVudEZpbHRlciB8IFJlbW92ZVBlbmRsZUZlZUV2ZW50RmlsdGVyW10sXG4gICAgZmV0Y2hDb25maWc/OiBQYXJ0aWFsPEV0aEZldGNoQ29uZmlnPixcbiAgICBwcmVwcm9jZXNzSGFuZGxlcj86IChcbiAgICAgIGV2ZW50OiBSZW1vdmVQZW5kbGVGZWVFdmVudCxcbiAgICAgIGN0eDogUGVucGllU3Rha2luZ0NvbnRleHQsXG4gICAgICBwcmVwcm9jZXNzU3RvcmU6IHsgW2s6IHN0cmluZ106IGFueSB9LFxuICAgICkgPT4gUHJvbWlzZTxQcmVwcm9jZXNzUmVzdWx0PixcbiAgKTogdGhpcyB7XG4gICAgaWYgKCFmaWx0ZXIpIHtcbiAgICAgIGZpbHRlciA9IHRlbXBsYXRlQ29udHJhY3QuZmlsdGVyc1tcbiAgICAgICAgXCJSZW1vdmVQZW5kbGVGZWUodWludDI1NixhZGRyZXNzLGJvb2wsYm9vbClcIlxuICAgICAgXShudWxsLCBudWxsLCBudWxsLCBudWxsKTtcbiAgICB9XG4gICAgcmV0dXJuIHN1cGVyLm9uRXRoRXZlbnQoaGFuZGxlciwgZmlsdGVyISwgZmV0Y2hDb25maWcsIHByZXByb2Nlc3NIYW5kbGVyKTtcbiAgfVxuXG4gIG9uRXZlbnRSZXdhcmRQYWlkVG8oXG4gICAgaGFuZGxlcjogKGV2ZW50OiBSZXdhcmRQYWlkVG9FdmVudCwgY3R4OiBQZW5waWVTdGFraW5nQ29udGV4dCkgPT4gdm9pZCxcbiAgICBmaWx0ZXI/OiBSZXdhcmRQYWlkVG9FdmVudEZpbHRlciB8IFJld2FyZFBhaWRUb0V2ZW50RmlsdGVyW10sXG4gICAgZmV0Y2hDb25maWc/OiBQYXJ0aWFsPEV0aEZldGNoQ29uZmlnPixcbiAgICBwcmVwcm9jZXNzSGFuZGxlcj86IChcbiAgICAgIGV2ZW50OiBSZXdhcmRQYWlkVG9FdmVudCxcbiAgICAgIGN0eDogUGVucGllU3Rha2luZ0NvbnRleHQsXG4gICAgICBwcmVwcm9jZXNzU3RvcmU6IHsgW2s6IHN0cmluZ106IGFueSB9LFxuICAgICkgPT4gUHJvbWlzZTxQcmVwcm9jZXNzUmVzdWx0PixcbiAgKTogdGhpcyB7XG4gICAgaWYgKCFmaWx0ZXIpIHtcbiAgICAgIGZpbHRlciA9IHRlbXBsYXRlQ29udHJhY3QuZmlsdGVyc1tcbiAgICAgICAgXCJSZXdhcmRQYWlkVG8oYWRkcmVzcyxhZGRyZXNzLGFkZHJlc3MsdWludDI1NilcIlxuICAgICAgXShudWxsLCBudWxsLCBudWxsLCBudWxsKTtcbiAgICB9XG4gICAgcmV0dXJuIHN1cGVyLm9uRXRoRXZlbnQoaGFuZGxlciwgZmlsdGVyISwgZmV0Y2hDb25maWcsIHByZXByb2Nlc3NIYW5kbGVyKTtcbiAgfVxuXG4gIG9uRXZlbnRTZXRMb2NrRGF5cyhcbiAgICBoYW5kbGVyOiAoZXZlbnQ6IFNldExvY2tEYXlzRXZlbnQsIGN0eDogUGVucGllU3Rha2luZ0NvbnRleHQpID0+IHZvaWQsXG4gICAgZmlsdGVyPzogU2V0TG9ja0RheXNFdmVudEZpbHRlciB8IFNldExvY2tEYXlzRXZlbnRGaWx0ZXJbXSxcbiAgICBmZXRjaENvbmZpZz86IFBhcnRpYWw8RXRoRmV0Y2hDb25maWc+LFxuICAgIHByZXByb2Nlc3NIYW5kbGVyPzogKFxuICAgICAgZXZlbnQ6IFNldExvY2tEYXlzRXZlbnQsXG4gICAgICBjdHg6IFBlbnBpZVN0YWtpbmdDb250ZXh0LFxuICAgICAgcHJlcHJvY2Vzc1N0b3JlOiB7IFtrOiBzdHJpbmddOiBhbnkgfSxcbiAgICApID0+IFByb21pc2U8UHJlcHJvY2Vzc1Jlc3VsdD4sXG4gICk6IHRoaXMge1xuICAgIGlmICghZmlsdGVyKSB7XG4gICAgICBmaWx0ZXIgPSB0ZW1wbGF0ZUNvbnRyYWN0LmZpbHRlcnNbXCJTZXRMb2NrRGF5cyh1aW50MjU2LHVpbnQyNTYpXCJdKFxuICAgICAgICBudWxsLFxuICAgICAgICBudWxsLFxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIHN1cGVyLm9uRXRoRXZlbnQoaGFuZGxlciwgZmlsdGVyISwgZmV0Y2hDb25maWcsIHByZXByb2Nlc3NIYW5kbGVyKTtcbiAgfVxuXG4gIG9uRXZlbnRTZXRNUGVuZGxlQ29udmVydG9yKFxuICAgIGhhbmRsZXI6IChcbiAgICAgIGV2ZW50OiBTZXRNUGVuZGxlQ29udmVydG9yRXZlbnQsXG4gICAgICBjdHg6IFBlbnBpZVN0YWtpbmdDb250ZXh0LFxuICAgICkgPT4gdm9pZCxcbiAgICBmaWx0ZXI/OiBTZXRNUGVuZGxlQ29udmVydG9yRXZlbnRGaWx0ZXIgfCBTZXRNUGVuZGxlQ29udmVydG9yRXZlbnRGaWx0ZXJbXSxcbiAgICBmZXRjaENvbmZpZz86IFBhcnRpYWw8RXRoRmV0Y2hDb25maWc+LFxuICAgIHByZXByb2Nlc3NIYW5kbGVyPzogKFxuICAgICAgZXZlbnQ6IFNldE1QZW5kbGVDb252ZXJ0b3JFdmVudCxcbiAgICAgIGN0eDogUGVucGllU3Rha2luZ0NvbnRleHQsXG4gICAgICBwcmVwcm9jZXNzU3RvcmU6IHsgW2s6IHN0cmluZ106IGFueSB9LFxuICAgICkgPT4gUHJvbWlzZTxQcmVwcm9jZXNzUmVzdWx0PixcbiAgKTogdGhpcyB7XG4gICAgaWYgKCFmaWx0ZXIpIHtcbiAgICAgIGZpbHRlciA9IHRlbXBsYXRlQ29udHJhY3QuZmlsdGVyc1tcIlNldE1QZW5kbGVDb252ZXJ0b3IoYWRkcmVzcyxhZGRyZXNzKVwiXShcbiAgICAgICAgbnVsbCxcbiAgICAgICAgbnVsbCxcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiBzdXBlci5vbkV0aEV2ZW50KGhhbmRsZXIsIGZpbHRlciEsIGZldGNoQ29uZmlnLCBwcmVwcm9jZXNzSGFuZGxlcik7XG4gIH1cblxuICBvbkV2ZW50U2V0UGVuZGxlRmVlKFxuICAgIGhhbmRsZXI6IChldmVudDogU2V0UGVuZGxlRmVlRXZlbnQsIGN0eDogUGVucGllU3Rha2luZ0NvbnRleHQpID0+IHZvaWQsXG4gICAgZmlsdGVyPzogU2V0UGVuZGxlRmVlRXZlbnRGaWx0ZXIgfCBTZXRQZW5kbGVGZWVFdmVudEZpbHRlcltdLFxuICAgIGZldGNoQ29uZmlnPzogUGFydGlhbDxFdGhGZXRjaENvbmZpZz4sXG4gICAgcHJlcHJvY2Vzc0hhbmRsZXI/OiAoXG4gICAgICBldmVudDogU2V0UGVuZGxlRmVlRXZlbnQsXG4gICAgICBjdHg6IFBlbnBpZVN0YWtpbmdDb250ZXh0LFxuICAgICAgcHJlcHJvY2Vzc1N0b3JlOiB7IFtrOiBzdHJpbmddOiBhbnkgfSxcbiAgICApID0+IFByb21pc2U8UHJlcHJvY2Vzc1Jlc3VsdD4sXG4gICk6IHRoaXMge1xuICAgIGlmICghZmlsdGVyKSB7XG4gICAgICBmaWx0ZXIgPSB0ZW1wbGF0ZUNvbnRyYWN0LmZpbHRlcnNbXCJTZXRQZW5kbGVGZWUoYWRkcmVzcyx1aW50MjU2KVwiXShcbiAgICAgICAgbnVsbCxcbiAgICAgICAgbnVsbCxcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiBzdXBlci5vbkV0aEV2ZW50KGhhbmRsZXIsIGZpbHRlciEsIGZldGNoQ29uZmlnLCBwcmVwcm9jZXNzSGFuZGxlcik7XG4gIH1cblxuICBvbkV2ZW50U21hcnRQZW5kbGVDb252ZXJ0VXBkYXRlZChcbiAgICBoYW5kbGVyOiAoXG4gICAgICBldmVudDogU21hcnRQZW5kbGVDb252ZXJ0VXBkYXRlZEV2ZW50LFxuICAgICAgY3R4OiBQZW5waWVTdGFraW5nQ29udGV4dCxcbiAgICApID0+IHZvaWQsXG4gICAgZmlsdGVyPzpcbiAgICAgIHwgU21hcnRQZW5kbGVDb252ZXJ0VXBkYXRlZEV2ZW50RmlsdGVyXG4gICAgICB8IFNtYXJ0UGVuZGxlQ29udmVydFVwZGF0ZWRFdmVudEZpbHRlcltdLFxuICAgIGZldGNoQ29uZmlnPzogUGFydGlhbDxFdGhGZXRjaENvbmZpZz4sXG4gICAgcHJlcHJvY2Vzc0hhbmRsZXI/OiAoXG4gICAgICBldmVudDogU21hcnRQZW5kbGVDb252ZXJ0VXBkYXRlZEV2ZW50LFxuICAgICAgY3R4OiBQZW5waWVTdGFraW5nQ29udGV4dCxcbiAgICAgIHByZXByb2Nlc3NTdG9yZTogeyBbazogc3RyaW5nXTogYW55IH0sXG4gICAgKSA9PiBQcm9taXNlPFByZXByb2Nlc3NSZXN1bHQ+LFxuICApOiB0aGlzIHtcbiAgICBpZiAoIWZpbHRlcikge1xuICAgICAgZmlsdGVyID0gdGVtcGxhdGVDb250cmFjdC5maWx0ZXJzW1xuICAgICAgICBcIlNtYXJ0UGVuZGxlQ29udmVydFVwZGF0ZWQoYWRkcmVzcyxhZGRyZXNzKVwiXG4gICAgICBdKG51bGwsIG51bGwpO1xuICAgIH1cbiAgICByZXR1cm4gc3VwZXIub25FdGhFdmVudChoYW5kbGVyLCBmaWx0ZXIhLCBmZXRjaENvbmZpZywgcHJlcHJvY2Vzc0hhbmRsZXIpO1xuICB9XG5cbiAgb25FdmVudFVucGF1c2VkKFxuICAgIGhhbmRsZXI6IChldmVudDogVW5wYXVzZWRFdmVudCwgY3R4OiBQZW5waWVTdGFraW5nQ29udGV4dCkgPT4gdm9pZCxcbiAgICBmaWx0ZXI/OiBVbnBhdXNlZEV2ZW50RmlsdGVyIHwgVW5wYXVzZWRFdmVudEZpbHRlcltdLFxuICAgIGZldGNoQ29uZmlnPzogUGFydGlhbDxFdGhGZXRjaENvbmZpZz4sXG4gICAgcHJlcHJvY2Vzc0hhbmRsZXI/OiAoXG4gICAgICBldmVudDogVW5wYXVzZWRFdmVudCxcbiAgICAgIGN0eDogUGVucGllU3Rha2luZ0NvbnRleHQsXG4gICAgICBwcmVwcm9jZXNzU3RvcmU6IHsgW2s6IHN0cmluZ106IGFueSB9LFxuICAgICkgPT4gUHJvbWlzZTxQcmVwcm9jZXNzUmVzdWx0PixcbiAgKTogdGhpcyB7XG4gICAgaWYgKCFmaWx0ZXIpIHtcbiAgICAgIGZpbHRlciA9IHRlbXBsYXRlQ29udHJhY3QuZmlsdGVyc1tcIlVucGF1c2VkKGFkZHJlc3MpXCJdKG51bGwpO1xuICAgIH1cbiAgICByZXR1cm4gc3VwZXIub25FdGhFdmVudChoYW5kbGVyLCBmaWx0ZXIhLCBmZXRjaENvbmZpZywgcHJlcHJvY2Vzc0hhbmRsZXIpO1xuICB9XG5cbiAgb25FdmVudFZlUGVuZGxlSGFydmVzdGVkKFxuICAgIGhhbmRsZXI6IChldmVudDogVmVQZW5kbGVIYXJ2ZXN0ZWRFdmVudCwgY3R4OiBQZW5waWVTdGFraW5nQ29udGV4dCkgPT4gdm9pZCxcbiAgICBmaWx0ZXI/OiBWZVBlbmRsZUhhcnZlc3RlZEV2ZW50RmlsdGVyIHwgVmVQZW5kbGVIYXJ2ZXN0ZWRFdmVudEZpbHRlcltdLFxuICAgIGZldGNoQ29uZmlnPzogUGFydGlhbDxFdGhGZXRjaENvbmZpZz4sXG4gICAgcHJlcHJvY2Vzc0hhbmRsZXI/OiAoXG4gICAgICBldmVudDogVmVQZW5kbGVIYXJ2ZXN0ZWRFdmVudCxcbiAgICAgIGN0eDogUGVucGllU3Rha2luZ0NvbnRleHQsXG4gICAgICBwcmVwcm9jZXNzU3RvcmU6IHsgW2s6IHN0cmluZ106IGFueSB9LFxuICAgICkgPT4gUHJvbWlzZTxQcmVwcm9jZXNzUmVzdWx0PixcbiAgKTogdGhpcyB7XG4gICAgaWYgKCFmaWx0ZXIpIHtcbiAgICAgIGZpbHRlciA9IHRlbXBsYXRlQ29udHJhY3QuZmlsdGVyc1tcbiAgICAgICAgXCJWZVBlbmRsZUhhcnZlc3RlZCh1aW50MjU2LGFkZHJlc3NbXSx1aW50MjU2W10sdWludDI1Nix1aW50MjU2LHVpbnQyNTYpXCJcbiAgICAgIF0obnVsbCwgbnVsbCwgbnVsbCwgbnVsbCwgbnVsbCwgbnVsbCk7XG4gICAgfVxuICAgIHJldHVybiBzdXBlci5vbkV0aEV2ZW50KGhhbmRsZXIsIGZpbHRlciEsIGZldGNoQ29uZmlnLCBwcmVwcm9jZXNzSGFuZGxlcik7XG4gIH1cblxuICBvbkV2ZW50Vm90ZU1hbmFnZXJVcGRhdGVkKFxuICAgIGhhbmRsZXI6IChcbiAgICAgIGV2ZW50OiBWb3RlTWFuYWdlclVwZGF0ZWRFdmVudCxcbiAgICAgIGN0eDogUGVucGllU3Rha2luZ0NvbnRleHQsXG4gICAgKSA9PiB2b2lkLFxuICAgIGZpbHRlcj86IFZvdGVNYW5hZ2VyVXBkYXRlZEV2ZW50RmlsdGVyIHwgVm90ZU1hbmFnZXJVcGRhdGVkRXZlbnRGaWx0ZXJbXSxcbiAgICBmZXRjaENvbmZpZz86IFBhcnRpYWw8RXRoRmV0Y2hDb25maWc+LFxuICAgIHByZXByb2Nlc3NIYW5kbGVyPzogKFxuICAgICAgZXZlbnQ6IFZvdGVNYW5hZ2VyVXBkYXRlZEV2ZW50LFxuICAgICAgY3R4OiBQZW5waWVTdGFraW5nQ29udGV4dCxcbiAgICAgIHByZXByb2Nlc3NTdG9yZTogeyBbazogc3RyaW5nXTogYW55IH0sXG4gICAgKSA9PiBQcm9taXNlPFByZXByb2Nlc3NSZXN1bHQ+LFxuICApOiB0aGlzIHtcbiAgICBpZiAoIWZpbHRlcikge1xuICAgICAgZmlsdGVyID0gdGVtcGxhdGVDb250cmFjdC5maWx0ZXJzW1wiVm90ZU1hbmFnZXJVcGRhdGVkKGFkZHJlc3MsYWRkcmVzcylcIl0oXG4gICAgICAgIG51bGwsXG4gICAgICAgIG51bGwsXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gc3VwZXIub25FdGhFdmVudChoYW5kbGVyLCBmaWx0ZXIhLCBmZXRjaENvbmZpZywgcHJlcHJvY2Vzc0hhbmRsZXIpO1xuICB9XG5cbiAgb25FdmVudFZvdGVTZXQoXG4gICAgaGFuZGxlcjogKGV2ZW50OiBWb3RlU2V0RXZlbnQsIGN0eDogUGVucGllU3Rha2luZ0NvbnRleHQpID0+IHZvaWQsXG4gICAgZmlsdGVyPzogVm90ZVNldEV2ZW50RmlsdGVyIHwgVm90ZVNldEV2ZW50RmlsdGVyW10sXG4gICAgZmV0Y2hDb25maWc/OiBQYXJ0aWFsPEV0aEZldGNoQ29uZmlnPixcbiAgICBwcmVwcm9jZXNzSGFuZGxlcj86IChcbiAgICAgIGV2ZW50OiBWb3RlU2V0RXZlbnQsXG4gICAgICBjdHg6IFBlbnBpZVN0YWtpbmdDb250ZXh0LFxuICAgICAgcHJlcHJvY2Vzc1N0b3JlOiB7IFtrOiBzdHJpbmddOiBhbnkgfSxcbiAgICApID0+IFByb21pc2U8UHJlcHJvY2Vzc1Jlc3VsdD4sXG4gICk6IHRoaXMge1xuICAgIGlmICghZmlsdGVyKSB7XG4gICAgICBmaWx0ZXIgPSB0ZW1wbGF0ZUNvbnRyYWN0LmZpbHRlcnNbXG4gICAgICAgIFwiVm90ZVNldChhZGRyZXNzLHVpbnQyNTYsdWludDI1Nix1aW50MjU2LGFkZHJlc3MpXCJcbiAgICAgIF0obnVsbCwgbnVsbCwgbnVsbCwgbnVsbCwgbnVsbCk7XG4gICAgfVxuICAgIHJldHVybiBzdXBlci5vbkV0aEV2ZW50KGhhbmRsZXIsIGZpbHRlciEsIGZldGNoQ29uZmlnLCBwcmVwcm9jZXNzSGFuZGxlcik7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFBlbnBpZVN0YWtpbmdDb250cmFjdChcbiAgY2hhaW5JZDogRXRoQ2hhaW5JZCxcbiAgYWRkcmVzczogc3RyaW5nLFxuKTogUGVucGllU3Rha2luZ0NvbnRyYWN0VmlldyB7XG4gIGxldCBjb250cmFjdCA9IGdldENvbnRyYWN0QnlBQkkoXG4gICAgXCJQZW5waWVTdGFraW5nXCIsXG4gICAgYWRkcmVzcyxcbiAgICBjaGFpbklkLFxuICApIGFzIFBlbnBpZVN0YWtpbmdDb250cmFjdFZpZXc7XG4gIGlmICghY29udHJhY3QpIHtcbiAgICBjb25zdCByYXdDb250cmFjdCA9IFBlbnBpZVN0YWtpbmdfX2ZhY3RvcnkuY29ubmVjdChcbiAgICAgIGFkZHJlc3MsXG4gICAgICBnZXRQcm92aWRlcihjaGFpbklkKSxcbiAgICApO1xuICAgIGNvbnRyYWN0ID0gbmV3IFBlbnBpZVN0YWtpbmdDb250cmFjdFZpZXcocmF3Q29udHJhY3QpO1xuICAgIGFkZENvbnRyYWN0QnlBQkkoXCJQZW5waWVTdGFraW5nXCIsIGFkZHJlc3MsIGNoYWluSWQsIGNvbnRyYWN0KTtcbiAgfVxuICByZXR1cm4gY29udHJhY3Q7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRQZW5waWVTdGFraW5nQ29udHJhY3RPbkNvbnRleHQoXG4gIGNvbnRleHQ6IEV0aENvbnRleHQsXG4gIGFkZHJlc3M6IHN0cmluZyxcbik6IFBlbnBpZVN0YWtpbmdCb3VuZENvbnRyYWN0VmlldyB7XG4gIGNvbnN0IHZpZXcgPSBnZXRQZW5waWVTdGFraW5nQ29udHJhY3QoY29udGV4dC5nZXRDaGFpbklkKCksIGFkZHJlc3MpO1xuICBjb25zdCBib3VuZFZpZXcgPSBuZXcgUGVucGllU3Rha2luZ0JvdW5kQ29udHJhY3RWaWV3KGFkZHJlc3MsIHZpZXcpO1xuICBib3VuZFZpZXcuY29udGV4dCA9IGNvbnRleHQ7XG4gIGlmIChib3VuZFZpZXcuY2FsbFN0YXRpYykge1xuICAgIGJvdW5kVmlldy5jYWxsU3RhdGljLmNvbnRleHQgPSBjb250ZXh0O1xuICB9XG4gIHJldHVybiBib3VuZFZpZXc7XG59XG4iLCAiLyogQXV0b2dlbmVyYXRlZCBmaWxlLiBEbyBub3QgZWRpdCBtYW51YWxseS4gKi9cbi8qIHRzbGludDpkaXNhYmxlICovXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xuaW1wb3J0IHsgTG9nUGFyYW1zIH0gZnJvbSBcImV0aGVycy9wcm92aWRlcnNcIjtcbmltcG9ydCB7IEV0aENoYWluSWQgfSBmcm9tIFwiQHNlbnRpby9zZGsvZXRoXCI7XG5pbXBvcnQge1xuICBBZGRQZW5kbGVGZWVFdmVudE9iamVjdCxcbiAgQnJpYmVNYW5hZ2VyRU9BVXBkYXRlZEV2ZW50T2JqZWN0LFxuICBCcmliZU1hbmFnZXJVcGRhdGVkRXZlbnRPYmplY3QsXG4gIEluaXRpYWxpemVkRXZlbnRPYmplY3QsXG4gIE5ld01hcmtldERlcG9zaXRFdmVudE9iamVjdCxcbiAgTmV3TWFya2V0V2l0aGRyYXdFdmVudE9iamVjdCxcbiAgT3duZXJzaGlwVHJhbnNmZXJyZWRFdmVudE9iamVjdCxcbiAgUGF1c2VkRXZlbnRPYmplY3QsXG4gIFBlbmRsZUxvY2tlZEV2ZW50T2JqZWN0LFxuICBQb29sQWRkZWRFdmVudE9iamVjdCxcbiAgUG9vbEhlbHBlclVwZGF0ZWRFdmVudE9iamVjdCxcbiAgUG9vbFJlbW92ZWRFdmVudE9iamVjdCxcbiAgUmVtb3ZlUGVuZGxlRmVlRXZlbnRPYmplY3QsXG4gIFJld2FyZFBhaWRUb0V2ZW50T2JqZWN0LFxuICBTZXRMb2NrRGF5c0V2ZW50T2JqZWN0LFxuICBTZXRNUGVuZGxlQ29udmVydG9yRXZlbnRPYmplY3QsXG4gIFNldFBlbmRsZUZlZUV2ZW50T2JqZWN0LFxuICBTbWFydFBlbmRsZUNvbnZlcnRVcGRhdGVkRXZlbnRPYmplY3QsXG4gIFVucGF1c2VkRXZlbnRPYmplY3QsXG4gIFZlUGVuZGxlSGFydmVzdGVkRXZlbnRPYmplY3QsXG4gIFZvdGVNYW5hZ2VyVXBkYXRlZEV2ZW50T2JqZWN0LFxuICBWb3RlU2V0RXZlbnRPYmplY3QsXG59IGZyb20gXCIuL1BlbnBpZVN0YWtpbmcuanNcIjtcbmltcG9ydCB7IGdldFBlbnBpZVN0YWtpbmdDb250cmFjdCB9IGZyb20gXCIuL3BlbnBpZXN0YWtpbmctcHJvY2Vzc29yLmpzXCI7XG5jb25zdCBtb2NrRmllbGQgPSB7XG4gIGJsb2NrSGFzaDpcbiAgICBcIjB4MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMFwiLFxuICBibG9ja051bWJlcjogMCxcbiAgbG9nSW5kZXg6IDAsXG4gIHJlbW92ZWQ6IGZhbHNlLFxuICB0cmFuc2FjdGlvbkhhc2g6XG4gICAgXCIweDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDBcIixcbiAgdHJhbnNhY3Rpb25JbmRleDogMCxcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBtb2NrQWRkUGVuZGxlRmVlTG9nKFxuICBjb250cmFjdEFkZHJlc3M6IHN0cmluZyxcbiAgZXZlbnQ6IEFkZFBlbmRsZUZlZUV2ZW50T2JqZWN0LFxuKTogTG9nUGFyYW1zIHtcbiAgY29uc3QgY29udHJhY3QgPSBnZXRQZW5waWVTdGFraW5nQ29udHJhY3QoXG4gICAgRXRoQ2hhaW5JZC5FVEhFUkVVTSxcbiAgICBjb250cmFjdEFkZHJlc3MsXG4gICk7XG4gIGNvbnN0IGVuY29kZWRMb2cgPSBjb250cmFjdC5yYXdDb250cmFjdC5pbnRlcmZhY2UuZW5jb2RlRXZlbnRMb2coXG4gICAgXCJBZGRQZW5kbGVGZWUoYWRkcmVzcyx1aW50MjU2LGJvb2wsYm9vbClcIixcbiAgICBbZXZlbnQuX3RvLCBldmVudC5fdmFsdWUsIGV2ZW50Ll9pc01QRU5ETEUsIGV2ZW50Ll9pc0FkZHJlc3NdLFxuICApO1xuICByZXR1cm4ge1xuICAgIC4uLm1vY2tGaWVsZCxcbiAgICBpbmRleDogMCxcbiAgICBhZGRyZXNzOiBjb250cmFjdEFkZHJlc3MsXG4gICAgZGF0YTogZW5jb2RlZExvZy5kYXRhLFxuICAgIHRvcGljczogZW5jb2RlZExvZy50b3BpY3MsXG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtb2NrQnJpYmVNYW5hZ2VyRU9BVXBkYXRlZExvZyhcbiAgY29udHJhY3RBZGRyZXNzOiBzdHJpbmcsXG4gIGV2ZW50OiBCcmliZU1hbmFnZXJFT0FVcGRhdGVkRXZlbnRPYmplY3QsXG4pOiBMb2dQYXJhbXMge1xuICBjb25zdCBjb250cmFjdCA9IGdldFBlbnBpZVN0YWtpbmdDb250cmFjdChcbiAgICBFdGhDaGFpbklkLkVUSEVSRVVNLFxuICAgIGNvbnRyYWN0QWRkcmVzcyxcbiAgKTtcbiAgY29uc3QgZW5jb2RlZExvZyA9IGNvbnRyYWN0LnJhd0NvbnRyYWN0LmludGVyZmFjZS5lbmNvZGVFdmVudExvZyhcbiAgICBcIkJyaWJlTWFuYWdlckVPQVVwZGF0ZWQoYWRkcmVzcyxhZGRyZXNzKVwiLFxuICAgIFtldmVudC5fb2xkQnJpYmVNYW5hZ2VyRU9BLCBldmVudC5fYnJpYmVNYW5hZ2VyRU9BXSxcbiAgKTtcbiAgcmV0dXJuIHtcbiAgICAuLi5tb2NrRmllbGQsXG4gICAgaW5kZXg6IDAsXG4gICAgYWRkcmVzczogY29udHJhY3RBZGRyZXNzLFxuICAgIGRhdGE6IGVuY29kZWRMb2cuZGF0YSxcbiAgICB0b3BpY3M6IGVuY29kZWRMb2cudG9waWNzLFxuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbW9ja0JyaWJlTWFuYWdlclVwZGF0ZWRMb2coXG4gIGNvbnRyYWN0QWRkcmVzczogc3RyaW5nLFxuICBldmVudDogQnJpYmVNYW5hZ2VyVXBkYXRlZEV2ZW50T2JqZWN0LFxuKTogTG9nUGFyYW1zIHtcbiAgY29uc3QgY29udHJhY3QgPSBnZXRQZW5waWVTdGFraW5nQ29udHJhY3QoXG4gICAgRXRoQ2hhaW5JZC5FVEhFUkVVTSxcbiAgICBjb250cmFjdEFkZHJlc3MsXG4gICk7XG4gIGNvbnN0IGVuY29kZWRMb2cgPSBjb250cmFjdC5yYXdDb250cmFjdC5pbnRlcmZhY2UuZW5jb2RlRXZlbnRMb2coXG4gICAgXCJCcmliZU1hbmFnZXJVcGRhdGVkKGFkZHJlc3MsYWRkcmVzcylcIixcbiAgICBbZXZlbnQuX29sZEJyaWJlTWFuYWdlciwgZXZlbnQuX2JyaWJlTWFuYWdlcl0sXG4gICk7XG4gIHJldHVybiB7XG4gICAgLi4ubW9ja0ZpZWxkLFxuICAgIGluZGV4OiAwLFxuICAgIGFkZHJlc3M6IGNvbnRyYWN0QWRkcmVzcyxcbiAgICBkYXRhOiBlbmNvZGVkTG9nLmRhdGEsXG4gICAgdG9waWNzOiBlbmNvZGVkTG9nLnRvcGljcyxcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1vY2tJbml0aWFsaXplZExvZyhcbiAgY29udHJhY3RBZGRyZXNzOiBzdHJpbmcsXG4gIGV2ZW50OiBJbml0aWFsaXplZEV2ZW50T2JqZWN0LFxuKTogTG9nUGFyYW1zIHtcbiAgY29uc3QgY29udHJhY3QgPSBnZXRQZW5waWVTdGFraW5nQ29udHJhY3QoXG4gICAgRXRoQ2hhaW5JZC5FVEhFUkVVTSxcbiAgICBjb250cmFjdEFkZHJlc3MsXG4gICk7XG4gIGNvbnN0IGVuY29kZWRMb2cgPSBjb250cmFjdC5yYXdDb250cmFjdC5pbnRlcmZhY2UuZW5jb2RlRXZlbnRMb2coXG4gICAgXCJJbml0aWFsaXplZCh1aW50OClcIixcbiAgICBbZXZlbnQudmVyc2lvbl0sXG4gICk7XG4gIHJldHVybiB7XG4gICAgLi4ubW9ja0ZpZWxkLFxuICAgIGluZGV4OiAwLFxuICAgIGFkZHJlc3M6IGNvbnRyYWN0QWRkcmVzcyxcbiAgICBkYXRhOiBlbmNvZGVkTG9nLmRhdGEsXG4gICAgdG9waWNzOiBlbmNvZGVkTG9nLnRvcGljcyxcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1vY2tOZXdNYXJrZXREZXBvc2l0TG9nKFxuICBjb250cmFjdEFkZHJlc3M6IHN0cmluZyxcbiAgZXZlbnQ6IE5ld01hcmtldERlcG9zaXRFdmVudE9iamVjdCxcbik6IExvZ1BhcmFtcyB7XG4gIGNvbnN0IGNvbnRyYWN0ID0gZ2V0UGVucGllU3Rha2luZ0NvbnRyYWN0KFxuICAgIEV0aENoYWluSWQuRVRIRVJFVU0sXG4gICAgY29udHJhY3RBZGRyZXNzLFxuICApO1xuICBjb25zdCBlbmNvZGVkTG9nID0gY29udHJhY3QucmF3Q29udHJhY3QuaW50ZXJmYWNlLmVuY29kZUV2ZW50TG9nKFxuICAgIFwiTmV3TWFya2V0RGVwb3NpdChhZGRyZXNzLGFkZHJlc3MsdWludDI1NixhZGRyZXNzLHVpbnQyNTYpXCIsXG4gICAgW1xuICAgICAgZXZlbnQuX3VzZXIsXG4gICAgICBldmVudC5fbWFya2V0LFxuICAgICAgZXZlbnQuX2xwQW1vdW50LFxuICAgICAgZXZlbnQuX3JlY2VwdFRva2VuLFxuICAgICAgZXZlbnQuX3JlY2VwdEFtb3VudCxcbiAgICBdLFxuICApO1xuICByZXR1cm4ge1xuICAgIC4uLm1vY2tGaWVsZCxcbiAgICBpbmRleDogMCxcbiAgICBhZGRyZXNzOiBjb250cmFjdEFkZHJlc3MsXG4gICAgZGF0YTogZW5jb2RlZExvZy5kYXRhLFxuICAgIHRvcGljczogZW5jb2RlZExvZy50b3BpY3MsXG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtb2NrTmV3TWFya2V0V2l0aGRyYXdMb2coXG4gIGNvbnRyYWN0QWRkcmVzczogc3RyaW5nLFxuICBldmVudDogTmV3TWFya2V0V2l0aGRyYXdFdmVudE9iamVjdCxcbik6IExvZ1BhcmFtcyB7XG4gIGNvbnN0IGNvbnRyYWN0ID0gZ2V0UGVucGllU3Rha2luZ0NvbnRyYWN0KFxuICAgIEV0aENoYWluSWQuRVRIRVJFVU0sXG4gICAgY29udHJhY3RBZGRyZXNzLFxuICApO1xuICBjb25zdCBlbmNvZGVkTG9nID0gY29udHJhY3QucmF3Q29udHJhY3QuaW50ZXJmYWNlLmVuY29kZUV2ZW50TG9nKFxuICAgIFwiTmV3TWFya2V0V2l0aGRyYXcoYWRkcmVzcyxhZGRyZXNzLHVpbnQyNTYsYWRkcmVzcyx1aW50MjU2KVwiLFxuICAgIFtcbiAgICAgIGV2ZW50Ll91c2VyLFxuICAgICAgZXZlbnQuX21hcmtldCxcbiAgICAgIGV2ZW50Ll9scEFtb3VudCxcbiAgICAgIGV2ZW50Ll9yZWNlcHRUb2tlbixcbiAgICAgIGV2ZW50Ll9yZWNlcHRBbW91bnQsXG4gICAgXSxcbiAgKTtcbiAgcmV0dXJuIHtcbiAgICAuLi5tb2NrRmllbGQsXG4gICAgaW5kZXg6IDAsXG4gICAgYWRkcmVzczogY29udHJhY3RBZGRyZXNzLFxuICAgIGRhdGE6IGVuY29kZWRMb2cuZGF0YSxcbiAgICB0b3BpY3M6IGVuY29kZWRMb2cudG9waWNzLFxuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbW9ja093bmVyc2hpcFRyYW5zZmVycmVkTG9nKFxuICBjb250cmFjdEFkZHJlc3M6IHN0cmluZyxcbiAgZXZlbnQ6IE93bmVyc2hpcFRyYW5zZmVycmVkRXZlbnRPYmplY3QsXG4pOiBMb2dQYXJhbXMge1xuICBjb25zdCBjb250cmFjdCA9IGdldFBlbnBpZVN0YWtpbmdDb250cmFjdChcbiAgICBFdGhDaGFpbklkLkVUSEVSRVVNLFxuICAgIGNvbnRyYWN0QWRkcmVzcyxcbiAgKTtcbiAgY29uc3QgZW5jb2RlZExvZyA9IGNvbnRyYWN0LnJhd0NvbnRyYWN0LmludGVyZmFjZS5lbmNvZGVFdmVudExvZyhcbiAgICBcIk93bmVyc2hpcFRyYW5zZmVycmVkKGFkZHJlc3MsYWRkcmVzcylcIixcbiAgICBbZXZlbnQucHJldmlvdXNPd25lciwgZXZlbnQubmV3T3duZXJdLFxuICApO1xuICByZXR1cm4ge1xuICAgIC4uLm1vY2tGaWVsZCxcbiAgICBpbmRleDogMCxcbiAgICBhZGRyZXNzOiBjb250cmFjdEFkZHJlc3MsXG4gICAgZGF0YTogZW5jb2RlZExvZy5kYXRhLFxuICAgIHRvcGljczogZW5jb2RlZExvZy50b3BpY3MsXG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtb2NrUGF1c2VkTG9nKFxuICBjb250cmFjdEFkZHJlc3M6IHN0cmluZyxcbiAgZXZlbnQ6IFBhdXNlZEV2ZW50T2JqZWN0LFxuKTogTG9nUGFyYW1zIHtcbiAgY29uc3QgY29udHJhY3QgPSBnZXRQZW5waWVTdGFraW5nQ29udHJhY3QoXG4gICAgRXRoQ2hhaW5JZC5FVEhFUkVVTSxcbiAgICBjb250cmFjdEFkZHJlc3MsXG4gICk7XG4gIGNvbnN0IGVuY29kZWRMb2cgPSBjb250cmFjdC5yYXdDb250cmFjdC5pbnRlcmZhY2UuZW5jb2RlRXZlbnRMb2coXG4gICAgXCJQYXVzZWQoYWRkcmVzcylcIixcbiAgICBbZXZlbnQuYWNjb3VudF0sXG4gICk7XG4gIHJldHVybiB7XG4gICAgLi4ubW9ja0ZpZWxkLFxuICAgIGluZGV4OiAwLFxuICAgIGFkZHJlc3M6IGNvbnRyYWN0QWRkcmVzcyxcbiAgICBkYXRhOiBlbmNvZGVkTG9nLmRhdGEsXG4gICAgdG9waWNzOiBlbmNvZGVkTG9nLnRvcGljcyxcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1vY2tQZW5kbGVMb2NrZWRMb2coXG4gIGNvbnRyYWN0QWRkcmVzczogc3RyaW5nLFxuICBldmVudDogUGVuZGxlTG9ja2VkRXZlbnRPYmplY3QsXG4pOiBMb2dQYXJhbXMge1xuICBjb25zdCBjb250cmFjdCA9IGdldFBlbnBpZVN0YWtpbmdDb250cmFjdChcbiAgICBFdGhDaGFpbklkLkVUSEVSRVVNLFxuICAgIGNvbnRyYWN0QWRkcmVzcyxcbiAgKTtcbiAgY29uc3QgZW5jb2RlZExvZyA9IGNvbnRyYWN0LnJhd0NvbnRyYWN0LmludGVyZmFjZS5lbmNvZGVFdmVudExvZyhcbiAgICBcIlBlbmRsZUxvY2tlZCh1aW50MjU2LHVpbnQyNTYsdWludDI1NilcIixcbiAgICBbZXZlbnQuX2Ftb3VudCwgZXZlbnQuX2xvY2tEYXlzLCBldmVudC5fdmVQZW5kbGVBY2N1bXVsYXRlZF0sXG4gICk7XG4gIHJldHVybiB7XG4gICAgLi4ubW9ja0ZpZWxkLFxuICAgIGluZGV4OiAwLFxuICAgIGFkZHJlc3M6IGNvbnRyYWN0QWRkcmVzcyxcbiAgICBkYXRhOiBlbmNvZGVkTG9nLmRhdGEsXG4gICAgdG9waWNzOiBlbmNvZGVkTG9nLnRvcGljcyxcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1vY2tQb29sQWRkZWRMb2coXG4gIGNvbnRyYWN0QWRkcmVzczogc3RyaW5nLFxuICBldmVudDogUG9vbEFkZGVkRXZlbnRPYmplY3QsXG4pOiBMb2dQYXJhbXMge1xuICBjb25zdCBjb250cmFjdCA9IGdldFBlbnBpZVN0YWtpbmdDb250cmFjdChcbiAgICBFdGhDaGFpbklkLkVUSEVSRVVNLFxuICAgIGNvbnRyYWN0QWRkcmVzcyxcbiAgKTtcbiAgY29uc3QgZW5jb2RlZExvZyA9IGNvbnRyYWN0LnJhd0NvbnRyYWN0LmludGVyZmFjZS5lbmNvZGVFdmVudExvZyhcbiAgICBcIlBvb2xBZGRlZChhZGRyZXNzLGFkZHJlc3MsYWRkcmVzcylcIixcbiAgICBbZXZlbnQuX21hcmtldCwgZXZlbnQuX3Jld2FyZGVyLCBldmVudC5fcmVjZWlwdFRva2VuXSxcbiAgKTtcbiAgcmV0dXJuIHtcbiAgICAuLi5tb2NrRmllbGQsXG4gICAgaW5kZXg6IDAsXG4gICAgYWRkcmVzczogY29udHJhY3RBZGRyZXNzLFxuICAgIGRhdGE6IGVuY29kZWRMb2cuZGF0YSxcbiAgICB0b3BpY3M6IGVuY29kZWRMb2cudG9waWNzLFxuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbW9ja1Bvb2xIZWxwZXJVcGRhdGVkTG9nKFxuICBjb250cmFjdEFkZHJlc3M6IHN0cmluZyxcbiAgZXZlbnQ6IFBvb2xIZWxwZXJVcGRhdGVkRXZlbnRPYmplY3QsXG4pOiBMb2dQYXJhbXMge1xuICBjb25zdCBjb250cmFjdCA9IGdldFBlbnBpZVN0YWtpbmdDb250cmFjdChcbiAgICBFdGhDaGFpbklkLkVUSEVSRVVNLFxuICAgIGNvbnRyYWN0QWRkcmVzcyxcbiAgKTtcbiAgY29uc3QgZW5jb2RlZExvZyA9IGNvbnRyYWN0LnJhd0NvbnRyYWN0LmludGVyZmFjZS5lbmNvZGVFdmVudExvZyhcbiAgICBcIlBvb2xIZWxwZXJVcGRhdGVkKGFkZHJlc3MpXCIsXG4gICAgW2V2ZW50Ll9tYXJrZXRdLFxuICApO1xuICByZXR1cm4ge1xuICAgIC4uLm1vY2tGaWVsZCxcbiAgICBpbmRleDogMCxcbiAgICBhZGRyZXNzOiBjb250cmFjdEFkZHJlc3MsXG4gICAgZGF0YTogZW5jb2RlZExvZy5kYXRhLFxuICAgIHRvcGljczogZW5jb2RlZExvZy50b3BpY3MsXG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtb2NrUG9vbFJlbW92ZWRMb2coXG4gIGNvbnRyYWN0QWRkcmVzczogc3RyaW5nLFxuICBldmVudDogUG9vbFJlbW92ZWRFdmVudE9iamVjdCxcbik6IExvZ1BhcmFtcyB7XG4gIGNvbnN0IGNvbnRyYWN0ID0gZ2V0UGVucGllU3Rha2luZ0NvbnRyYWN0KFxuICAgIEV0aENoYWluSWQuRVRIRVJFVU0sXG4gICAgY29udHJhY3RBZGRyZXNzLFxuICApO1xuICBjb25zdCBlbmNvZGVkTG9nID0gY29udHJhY3QucmF3Q29udHJhY3QuaW50ZXJmYWNlLmVuY29kZUV2ZW50TG9nKFxuICAgIFwiUG9vbFJlbW92ZWQodWludDI1NixhZGRyZXNzKVwiLFxuICAgIFtldmVudC5fcGlkLCBldmVudC5fbHBUb2tlbl0sXG4gICk7XG4gIHJldHVybiB7XG4gICAgLi4ubW9ja0ZpZWxkLFxuICAgIGluZGV4OiAwLFxuICAgIGFkZHJlc3M6IGNvbnRyYWN0QWRkcmVzcyxcbiAgICBkYXRhOiBlbmNvZGVkTG9nLmRhdGEsXG4gICAgdG9waWNzOiBlbmNvZGVkTG9nLnRvcGljcyxcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1vY2tSZW1vdmVQZW5kbGVGZWVMb2coXG4gIGNvbnRyYWN0QWRkcmVzczogc3RyaW5nLFxuICBldmVudDogUmVtb3ZlUGVuZGxlRmVlRXZlbnRPYmplY3QsXG4pOiBMb2dQYXJhbXMge1xuICBjb25zdCBjb250cmFjdCA9IGdldFBlbnBpZVN0YWtpbmdDb250cmFjdChcbiAgICBFdGhDaGFpbklkLkVUSEVSRVVNLFxuICAgIGNvbnRyYWN0QWRkcmVzcyxcbiAgKTtcbiAgY29uc3QgZW5jb2RlZExvZyA9IGNvbnRyYWN0LnJhd0NvbnRyYWN0LmludGVyZmFjZS5lbmNvZGVFdmVudExvZyhcbiAgICBcIlJlbW92ZVBlbmRsZUZlZSh1aW50MjU2LGFkZHJlc3MsYm9vbCxib29sKVwiLFxuICAgIFtldmVudC52YWx1ZSwgZXZlbnQudG8sIGV2ZW50Ll9pc01QRU5ETEUsIGV2ZW50Ll9pc0FkZHJlc3NdLFxuICApO1xuICByZXR1cm4ge1xuICAgIC4uLm1vY2tGaWVsZCxcbiAgICBpbmRleDogMCxcbiAgICBhZGRyZXNzOiBjb250cmFjdEFkZHJlc3MsXG4gICAgZGF0YTogZW5jb2RlZExvZy5kYXRhLFxuICAgIHRvcGljczogZW5jb2RlZExvZy50b3BpY3MsXG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtb2NrUmV3YXJkUGFpZFRvTG9nKFxuICBjb250cmFjdEFkZHJlc3M6IHN0cmluZyxcbiAgZXZlbnQ6IFJld2FyZFBhaWRUb0V2ZW50T2JqZWN0LFxuKTogTG9nUGFyYW1zIHtcbiAgY29uc3QgY29udHJhY3QgPSBnZXRQZW5waWVTdGFraW5nQ29udHJhY3QoXG4gICAgRXRoQ2hhaW5JZC5FVEhFUkVVTSxcbiAgICBjb250cmFjdEFkZHJlc3MsXG4gICk7XG4gIGNvbnN0IGVuY29kZWRMb2cgPSBjb250cmFjdC5yYXdDb250cmFjdC5pbnRlcmZhY2UuZW5jb2RlRXZlbnRMb2coXG4gICAgXCJSZXdhcmRQYWlkVG8oYWRkcmVzcyxhZGRyZXNzLGFkZHJlc3MsdWludDI1NilcIixcbiAgICBbZXZlbnQuX21hcmtldCwgZXZlbnQuX3RvLCBldmVudC5fcmV3YXJkVG9rZW4sIGV2ZW50Ll9mZWVBbW91bnRdLFxuICApO1xuICByZXR1cm4ge1xuICAgIC4uLm1vY2tGaWVsZCxcbiAgICBpbmRleDogMCxcbiAgICBhZGRyZXNzOiBjb250cmFjdEFkZHJlc3MsXG4gICAgZGF0YTogZW5jb2RlZExvZy5kYXRhLFxuICAgIHRvcGljczogZW5jb2RlZExvZy50b3BpY3MsXG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtb2NrU2V0TG9ja0RheXNMb2coXG4gIGNvbnRyYWN0QWRkcmVzczogc3RyaW5nLFxuICBldmVudDogU2V0TG9ja0RheXNFdmVudE9iamVjdCxcbik6IExvZ1BhcmFtcyB7XG4gIGNvbnN0IGNvbnRyYWN0ID0gZ2V0UGVucGllU3Rha2luZ0NvbnRyYWN0KFxuICAgIEV0aENoYWluSWQuRVRIRVJFVU0sXG4gICAgY29udHJhY3RBZGRyZXNzLFxuICApO1xuICBjb25zdCBlbmNvZGVkTG9nID0gY29udHJhY3QucmF3Q29udHJhY3QuaW50ZXJmYWNlLmVuY29kZUV2ZW50TG9nKFxuICAgIFwiU2V0TG9ja0RheXModWludDI1Nix1aW50MjU2KVwiLFxuICAgIFtldmVudC5fb2xkTG9ja0RheXMsIGV2ZW50Ll9uZXdMb2NrRGF5c10sXG4gICk7XG4gIHJldHVybiB7XG4gICAgLi4ubW9ja0ZpZWxkLFxuICAgIGluZGV4OiAwLFxuICAgIGFkZHJlc3M6IGNvbnRyYWN0QWRkcmVzcyxcbiAgICBkYXRhOiBlbmNvZGVkTG9nLmRhdGEsXG4gICAgdG9waWNzOiBlbmNvZGVkTG9nLnRvcGljcyxcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1vY2tTZXRNUGVuZGxlQ29udmVydG9yTG9nKFxuICBjb250cmFjdEFkZHJlc3M6IHN0cmluZyxcbiAgZXZlbnQ6IFNldE1QZW5kbGVDb252ZXJ0b3JFdmVudE9iamVjdCxcbik6IExvZ1BhcmFtcyB7XG4gIGNvbnN0IGNvbnRyYWN0ID0gZ2V0UGVucGllU3Rha2luZ0NvbnRyYWN0KFxuICAgIEV0aENoYWluSWQuRVRIRVJFVU0sXG4gICAgY29udHJhY3RBZGRyZXNzLFxuICApO1xuICBjb25zdCBlbmNvZGVkTG9nID0gY29udHJhY3QucmF3Q29udHJhY3QuaW50ZXJmYWNlLmVuY29kZUV2ZW50TG9nKFxuICAgIFwiU2V0TVBlbmRsZUNvbnZlcnRvcihhZGRyZXNzLGFkZHJlc3MpXCIsXG4gICAgW2V2ZW50Ll9vbGRtUGVuZGxlQ29udmVydG9yLCBldmVudC5fbmV3bVBlbmRsZUNvbnZlcnRvcl0sXG4gICk7XG4gIHJldHVybiB7XG4gICAgLi4ubW9ja0ZpZWxkLFxuICAgIGluZGV4OiAwLFxuICAgIGFkZHJlc3M6IGNvbnRyYWN0QWRkcmVzcyxcbiAgICBkYXRhOiBlbmNvZGVkTG9nLmRhdGEsXG4gICAgdG9waWNzOiBlbmNvZGVkTG9nLnRvcGljcyxcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1vY2tTZXRQZW5kbGVGZWVMb2coXG4gIGNvbnRyYWN0QWRkcmVzczogc3RyaW5nLFxuICBldmVudDogU2V0UGVuZGxlRmVlRXZlbnRPYmplY3QsXG4pOiBMb2dQYXJhbXMge1xuICBjb25zdCBjb250cmFjdCA9IGdldFBlbnBpZVN0YWtpbmdDb250cmFjdChcbiAgICBFdGhDaGFpbklkLkVUSEVSRVVNLFxuICAgIGNvbnRyYWN0QWRkcmVzcyxcbiAgKTtcbiAgY29uc3QgZW5jb2RlZExvZyA9IGNvbnRyYWN0LnJhd0NvbnRyYWN0LmludGVyZmFjZS5lbmNvZGVFdmVudExvZyhcbiAgICBcIlNldFBlbmRsZUZlZShhZGRyZXNzLHVpbnQyNTYpXCIsXG4gICAgW2V2ZW50Ll90bywgZXZlbnQuX3ZhbHVlXSxcbiAgKTtcbiAgcmV0dXJuIHtcbiAgICAuLi5tb2NrRmllbGQsXG4gICAgaW5kZXg6IDAsXG4gICAgYWRkcmVzczogY29udHJhY3RBZGRyZXNzLFxuICAgIGRhdGE6IGVuY29kZWRMb2cuZGF0YSxcbiAgICB0b3BpY3M6IGVuY29kZWRMb2cudG9waWNzLFxuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbW9ja1NtYXJ0UGVuZGxlQ29udmVydFVwZGF0ZWRMb2coXG4gIGNvbnRyYWN0QWRkcmVzczogc3RyaW5nLFxuICBldmVudDogU21hcnRQZW5kbGVDb252ZXJ0VXBkYXRlZEV2ZW50T2JqZWN0LFxuKTogTG9nUGFyYW1zIHtcbiAgY29uc3QgY29udHJhY3QgPSBnZXRQZW5waWVTdGFraW5nQ29udHJhY3QoXG4gICAgRXRoQ2hhaW5JZC5FVEhFUkVVTSxcbiAgICBjb250cmFjdEFkZHJlc3MsXG4gICk7XG4gIGNvbnN0IGVuY29kZWRMb2cgPSBjb250cmFjdC5yYXdDb250cmFjdC5pbnRlcmZhY2UuZW5jb2RlRXZlbnRMb2coXG4gICAgXCJTbWFydFBlbmRsZUNvbnZlcnRVcGRhdGVkKGFkZHJlc3MsYWRkcmVzcylcIixcbiAgICBbZXZlbnQuX09sZFNtYXJ0UGVuZGxlQ29udmVydCwgZXZlbnQuX3NtYXJ0UGVuZGxlQ29udmVydF0sXG4gICk7XG4gIHJldHVybiB7XG4gICAgLi4ubW9ja0ZpZWxkLFxuICAgIGluZGV4OiAwLFxuICAgIGFkZHJlc3M6IGNvbnRyYWN0QWRkcmVzcyxcbiAgICBkYXRhOiBlbmNvZGVkTG9nLmRhdGEsXG4gICAgdG9waWNzOiBlbmNvZGVkTG9nLnRvcGljcyxcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1vY2tVbnBhdXNlZExvZyhcbiAgY29udHJhY3RBZGRyZXNzOiBzdHJpbmcsXG4gIGV2ZW50OiBVbnBhdXNlZEV2ZW50T2JqZWN0LFxuKTogTG9nUGFyYW1zIHtcbiAgY29uc3QgY29udHJhY3QgPSBnZXRQZW5waWVTdGFraW5nQ29udHJhY3QoXG4gICAgRXRoQ2hhaW5JZC5FVEhFUkVVTSxcbiAgICBjb250cmFjdEFkZHJlc3MsXG4gICk7XG4gIGNvbnN0IGVuY29kZWRMb2cgPSBjb250cmFjdC5yYXdDb250cmFjdC5pbnRlcmZhY2UuZW5jb2RlRXZlbnRMb2coXG4gICAgXCJVbnBhdXNlZChhZGRyZXNzKVwiLFxuICAgIFtldmVudC5hY2NvdW50XSxcbiAgKTtcbiAgcmV0dXJuIHtcbiAgICAuLi5tb2NrRmllbGQsXG4gICAgaW5kZXg6IDAsXG4gICAgYWRkcmVzczogY29udHJhY3RBZGRyZXNzLFxuICAgIGRhdGE6IGVuY29kZWRMb2cuZGF0YSxcbiAgICB0b3BpY3M6IGVuY29kZWRMb2cudG9waWNzLFxuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbW9ja1ZlUGVuZGxlSGFydmVzdGVkTG9nKFxuICBjb250cmFjdEFkZHJlc3M6IHN0cmluZyxcbiAgZXZlbnQ6IFZlUGVuZGxlSGFydmVzdGVkRXZlbnRPYmplY3QsXG4pOiBMb2dQYXJhbXMge1xuICBjb25zdCBjb250cmFjdCA9IGdldFBlbnBpZVN0YWtpbmdDb250cmFjdChcbiAgICBFdGhDaGFpbklkLkVUSEVSRVVNLFxuICAgIGNvbnRyYWN0QWRkcmVzcyxcbiAgKTtcbiAgY29uc3QgZW5jb2RlZExvZyA9IGNvbnRyYWN0LnJhd0NvbnRyYWN0LmludGVyZmFjZS5lbmNvZGVFdmVudExvZyhcbiAgICBcIlZlUGVuZGxlSGFydmVzdGVkKHVpbnQyNTYsYWRkcmVzc1tdLHVpbnQyNTZbXSx1aW50MjU2LHVpbnQyNTYsdWludDI1NilcIixcbiAgICBbXG4gICAgICBldmVudC5fdG90YWwsXG4gICAgICBldmVudC5fcG9vbCxcbiAgICAgIGV2ZW50Ll90b3RhbEFtb3VudHMsXG4gICAgICBldmVudC5fcHJvdG9jb2xGZWUsXG4gICAgICBldmVudC5fY2FsbGVyRmVlLFxuICAgICAgZXZlbnQuX3Jlc3QsXG4gICAgXSxcbiAgKTtcbiAgcmV0dXJuIHtcbiAgICAuLi5tb2NrRmllbGQsXG4gICAgaW5kZXg6IDAsXG4gICAgYWRkcmVzczogY29udHJhY3RBZGRyZXNzLFxuICAgIGRhdGE6IGVuY29kZWRMb2cuZGF0YSxcbiAgICB0b3BpY3M6IGVuY29kZWRMb2cudG9waWNzLFxuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbW9ja1ZvdGVNYW5hZ2VyVXBkYXRlZExvZyhcbiAgY29udHJhY3RBZGRyZXNzOiBzdHJpbmcsXG4gIGV2ZW50OiBWb3RlTWFuYWdlclVwZGF0ZWRFdmVudE9iamVjdCxcbik6IExvZ1BhcmFtcyB7XG4gIGNvbnN0IGNvbnRyYWN0ID0gZ2V0UGVucGllU3Rha2luZ0NvbnRyYWN0KFxuICAgIEV0aENoYWluSWQuRVRIRVJFVU0sXG4gICAgY29udHJhY3RBZGRyZXNzLFxuICApO1xuICBjb25zdCBlbmNvZGVkTG9nID0gY29udHJhY3QucmF3Q29udHJhY3QuaW50ZXJmYWNlLmVuY29kZUV2ZW50TG9nKFxuICAgIFwiVm90ZU1hbmFnZXJVcGRhdGVkKGFkZHJlc3MsYWRkcmVzcylcIixcbiAgICBbZXZlbnQuX29sZFZvdGVNYW5hZ2VyLCBldmVudC5fdm90ZU1hbmFnZXJdLFxuICApO1xuICByZXR1cm4ge1xuICAgIC4uLm1vY2tGaWVsZCxcbiAgICBpbmRleDogMCxcbiAgICBhZGRyZXNzOiBjb250cmFjdEFkZHJlc3MsXG4gICAgZGF0YTogZW5jb2RlZExvZy5kYXRhLFxuICAgIHRvcGljczogZW5jb2RlZExvZy50b3BpY3MsXG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtb2NrVm90ZVNldExvZyhcbiAgY29udHJhY3RBZGRyZXNzOiBzdHJpbmcsXG4gIGV2ZW50OiBWb3RlU2V0RXZlbnRPYmplY3QsXG4pOiBMb2dQYXJhbXMge1xuICBjb25zdCBjb250cmFjdCA9IGdldFBlbnBpZVN0YWtpbmdDb250cmFjdChcbiAgICBFdGhDaGFpbklkLkVUSEVSRVVNLFxuICAgIGNvbnRyYWN0QWRkcmVzcyxcbiAgKTtcbiAgY29uc3QgZW5jb2RlZExvZyA9IGNvbnRyYWN0LnJhd0NvbnRyYWN0LmludGVyZmFjZS5lbmNvZGVFdmVudExvZyhcbiAgICBcIlZvdGVTZXQoYWRkcmVzcyx1aW50MjU2LHVpbnQyNTYsdWludDI1NixhZGRyZXNzKVwiLFxuICAgIFtcbiAgICAgIGV2ZW50Ll92b3RlcixcbiAgICAgIGV2ZW50Ll92ZVBlbmRsZUhhcnZlc3RDYWxsZXJGZWUsXG4gICAgICBldmVudC5faGFydmVzdENhbGxlclBlbmRsZUZlZSxcbiAgICAgIGV2ZW50Ll92b3RlUHJvdG9jb2xGZWUsXG4gICAgICBldmVudC5fdm90ZUZlZUNvbGxlY3RvcixcbiAgICBdLFxuICApO1xuICByZXR1cm4ge1xuICAgIC4uLm1vY2tGaWVsZCxcbiAgICBpbmRleDogMCxcbiAgICBhZGRyZXNzOiBjb250cmFjdEFkZHJlc3MsXG4gICAgZGF0YTogZW5jb2RlZExvZy5kYXRhLFxuICAgIHRvcGljczogZW5jb2RlZExvZy50b3BpY3MsXG4gIH07XG59XG4iLCAiLyogQXV0b2dlbmVyYXRlZCBmaWxlLiBEbyBub3QgZWRpdCBtYW51YWxseS4gKi9cbi8qIHRzbGludDpkaXNhYmxlICovXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xuaW1wb3J0IHsgQmlnTnVtYmVyaXNoLCBPdmVycmlkZXMgfSBmcm9tIFwiZXRoZXJzXCI7XG5pbXBvcnQge1xuICBhZGRDb250cmFjdEJ5QUJJLFxuICBnZXRDb250cmFjdEJ5QUJJLFxuICBhZGRQcm9jZXNzb3IsXG4gIGdldFByb2Nlc3NvcixcbiAgZ2V0UHJvdmlkZXIsXG4gIHRyYW5zZm9ybUV0aGVyRXJyb3IsXG4gIEJpbmRPcHRpb25zLFxuICBCYXNlUHJvY2Vzc29yLFxuICBCYXNlUHJvY2Vzc29yVGVtcGxhdGUsXG4gIEJvdW5kQ29udHJhY3RWaWV3LFxuICBDb250cmFjdENvbnRleHQsXG4gIENvbnRyYWN0VmlldyxcbiAgRHVtbXlQcm92aWRlcixcbiAgRXRoQ2hhaW5JZCxcbiAgVHlwZWRDYWxsVHJhY2UsXG4gIEV0aENvbnRleHQsXG4gIEV0aEZldGNoQ29uZmlnLFxuICBQcmVwcm9jZXNzUmVzdWx0LFxuICBlbmNvZGVDYWxsRGF0YSxcbn0gZnJvbSBcIkBzZW50aW8vc2RrL2V0aFwiO1xuaW1wb3J0IHsgRXRoQ2FsbFBhcmFtLCBFdGhDYWxsQ29udGV4dCwgUHJlcGFyZWREYXRhIH0gZnJvbSBcIkBzZW50aW8vcHJvdG9zXCI7XG5cbmltcG9ydCB7IFN0YW5kYXJkaXplZFlpZWxkX19mYWN0b3J5IH0gZnJvbSBcIi4vaW5kZXguanNcIjtcbmltcG9ydCB7XG4gIFN0YW5kYXJkaXplZFlpZWxkLFxuICBBcHByb3ZhbEV2ZW50LFxuICBBcHByb3ZhbEV2ZW50RmlsdGVyLFxuICBDbGFpbVJld2FyZHNFdmVudCxcbiAgQ2xhaW1SZXdhcmRzRXZlbnRGaWx0ZXIsXG4gIERlcG9zaXRFdmVudCxcbiAgRGVwb3NpdEV2ZW50RmlsdGVyLFxuICBSZWRlZW1FdmVudCxcbiAgUmVkZWVtRXZlbnRGaWx0ZXIsXG4gIFRyYW5zZmVyRXZlbnQsXG4gIFRyYW5zZmVyRXZlbnRGaWx0ZXIsXG59IGZyb20gXCIuL1N0YW5kYXJkaXplZFlpZWxkLmpzXCI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgQWNjcnVlZFJld2FyZHNDYWxsT2JqZWN0IHtcbiAgdXNlcjogc3RyaW5nO1xufVxuXG5leHBvcnQgdHlwZSBBY2NydWVkUmV3YXJkc0NhbGxUcmFjZSA9IFR5cGVkQ2FsbFRyYWNlPFxuICBbc3RyaW5nXSxcbiAgQWNjcnVlZFJld2FyZHNDYWxsT2JqZWN0XG4+O1xuXG5leHBvcnQgaW50ZXJmYWNlIEFsbG93YW5jZUNhbGxPYmplY3Qge1xuICBvd25lcjogc3RyaW5nO1xuICBzcGVuZGVyOiBzdHJpbmc7XG59XG5cbmV4cG9ydCB0eXBlIEFsbG93YW5jZUNhbGxUcmFjZSA9IFR5cGVkQ2FsbFRyYWNlPFxuICBbc3RyaW5nLCBzdHJpbmddLFxuICBBbGxvd2FuY2VDYWxsT2JqZWN0XG4+O1xuXG5leHBvcnQgaW50ZXJmYWNlIEFwcHJvdmVDYWxsT2JqZWN0IHtcbiAgc3BlbmRlcjogc3RyaW5nO1xuICBhbW91bnQ6IGJpZ2ludDtcbn1cblxuZXhwb3J0IHR5cGUgQXBwcm92ZUNhbGxUcmFjZSA9IFR5cGVkQ2FsbFRyYWNlPFxuICBbc3RyaW5nLCBiaWdpbnRdLFxuICBBcHByb3ZlQ2FsbE9iamVjdFxuPjtcblxuZXhwb3J0IGludGVyZmFjZSBBc3NldEluZm9DYWxsT2JqZWN0IHt9XG5cbmV4cG9ydCB0eXBlIEFzc2V0SW5mb0NhbGxUcmFjZSA9IFR5cGVkQ2FsbFRyYWNlPFtdLCBBc3NldEluZm9DYWxsT2JqZWN0PjtcblxuZXhwb3J0IGludGVyZmFjZSBCYWxhbmNlT2ZDYWxsT2JqZWN0IHtcbiAgYWNjb3VudDogc3RyaW5nO1xufVxuXG5leHBvcnQgdHlwZSBCYWxhbmNlT2ZDYWxsVHJhY2UgPSBUeXBlZENhbGxUcmFjZTxbc3RyaW5nXSwgQmFsYW5jZU9mQ2FsbE9iamVjdD47XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ2xhaW1SZXdhcmRzQ2FsbE9iamVjdCB7XG4gIHVzZXI6IHN0cmluZztcbn1cblxuZXhwb3J0IHR5cGUgQ2xhaW1SZXdhcmRzQ2FsbFRyYWNlID0gVHlwZWRDYWxsVHJhY2U8XG4gIFtzdHJpbmddLFxuICBDbGFpbVJld2FyZHNDYWxsT2JqZWN0XG4+O1xuXG5leHBvcnQgaW50ZXJmYWNlIERlY2ltYWxzQ2FsbE9iamVjdCB7fVxuXG5leHBvcnQgdHlwZSBEZWNpbWFsc0NhbGxUcmFjZSA9IFR5cGVkQ2FsbFRyYWNlPFtdLCBEZWNpbWFsc0NhbGxPYmplY3Q+O1xuXG5leHBvcnQgaW50ZXJmYWNlIERlcG9zaXRDYWxsT2JqZWN0IHtcbiAgcmVjZWl2ZXI6IHN0cmluZztcbiAgdG9rZW5Jbjogc3RyaW5nO1xuICBhbW91bnRUb2tlblRvRGVwb3NpdDogYmlnaW50O1xuICBtaW5TaGFyZXNPdXQ6IGJpZ2ludDtcbn1cblxuZXhwb3J0IHR5cGUgRGVwb3NpdENhbGxUcmFjZSA9IFR5cGVkQ2FsbFRyYWNlPFxuICBbc3RyaW5nLCBzdHJpbmcsIGJpZ2ludCwgYmlnaW50XSxcbiAgRGVwb3NpdENhbGxPYmplY3Rcbj47XG5cbmV4cG9ydCBpbnRlcmZhY2UgRXhjaGFuZ2VSYXRlQ2FsbE9iamVjdCB7fVxuXG5leHBvcnQgdHlwZSBFeGNoYW5nZVJhdGVDYWxsVHJhY2UgPSBUeXBlZENhbGxUcmFjZTxbXSwgRXhjaGFuZ2VSYXRlQ2FsbE9iamVjdD47XG5cbmV4cG9ydCBpbnRlcmZhY2UgR2V0UmV3YXJkVG9rZW5zQ2FsbE9iamVjdCB7fVxuXG5leHBvcnQgdHlwZSBHZXRSZXdhcmRUb2tlbnNDYWxsVHJhY2UgPSBUeXBlZENhbGxUcmFjZTxcbiAgW10sXG4gIEdldFJld2FyZFRva2Vuc0NhbGxPYmplY3Rcbj47XG5cbmV4cG9ydCBpbnRlcmZhY2UgR2V0VG9rZW5zSW5DYWxsT2JqZWN0IHt9XG5cbmV4cG9ydCB0eXBlIEdldFRva2Vuc0luQ2FsbFRyYWNlID0gVHlwZWRDYWxsVHJhY2U8W10sIEdldFRva2Vuc0luQ2FsbE9iamVjdD47XG5cbmV4cG9ydCBpbnRlcmZhY2UgR2V0VG9rZW5zT3V0Q2FsbE9iamVjdCB7fVxuXG5leHBvcnQgdHlwZSBHZXRUb2tlbnNPdXRDYWxsVHJhY2UgPSBUeXBlZENhbGxUcmFjZTxbXSwgR2V0VG9rZW5zT3V0Q2FsbE9iamVjdD47XG5cbmV4cG9ydCBpbnRlcmZhY2UgSXNWYWxpZFRva2VuSW5DYWxsT2JqZWN0IHtcbiAgdG9rZW46IHN0cmluZztcbn1cblxuZXhwb3J0IHR5cGUgSXNWYWxpZFRva2VuSW5DYWxsVHJhY2UgPSBUeXBlZENhbGxUcmFjZTxcbiAgW3N0cmluZ10sXG4gIElzVmFsaWRUb2tlbkluQ2FsbE9iamVjdFxuPjtcblxuZXhwb3J0IGludGVyZmFjZSBJc1ZhbGlkVG9rZW5PdXRDYWxsT2JqZWN0IHtcbiAgdG9rZW46IHN0cmluZztcbn1cblxuZXhwb3J0IHR5cGUgSXNWYWxpZFRva2VuT3V0Q2FsbFRyYWNlID0gVHlwZWRDYWxsVHJhY2U8XG4gIFtzdHJpbmddLFxuICBJc1ZhbGlkVG9rZW5PdXRDYWxsT2JqZWN0XG4+O1xuXG5leHBvcnQgaW50ZXJmYWNlIE5hbWVDYWxsT2JqZWN0IHt9XG5cbmV4cG9ydCB0eXBlIE5hbWVDYWxsVHJhY2UgPSBUeXBlZENhbGxUcmFjZTxbXSwgTmFtZUNhbGxPYmplY3Q+O1xuXG5leHBvcnQgaW50ZXJmYWNlIFByZXZpZXdEZXBvc2l0Q2FsbE9iamVjdCB7XG4gIHRva2VuSW46IHN0cmluZztcbiAgYW1vdW50VG9rZW5Ub0RlcG9zaXQ6IGJpZ2ludDtcbn1cblxuZXhwb3J0IHR5cGUgUHJldmlld0RlcG9zaXRDYWxsVHJhY2UgPSBUeXBlZENhbGxUcmFjZTxcbiAgW3N0cmluZywgYmlnaW50XSxcbiAgUHJldmlld0RlcG9zaXRDYWxsT2JqZWN0XG4+O1xuXG5leHBvcnQgaW50ZXJmYWNlIFByZXZpZXdSZWRlZW1DYWxsT2JqZWN0IHtcbiAgdG9rZW5PdXQ6IHN0cmluZztcbiAgYW1vdW50U2hhcmVzVG9SZWRlZW06IGJpZ2ludDtcbn1cblxuZXhwb3J0IHR5cGUgUHJldmlld1JlZGVlbUNhbGxUcmFjZSA9IFR5cGVkQ2FsbFRyYWNlPFxuICBbc3RyaW5nLCBiaWdpbnRdLFxuICBQcmV2aWV3UmVkZWVtQ2FsbE9iamVjdFxuPjtcblxuZXhwb3J0IGludGVyZmFjZSBSZWRlZW1DYWxsT2JqZWN0IHtcbiAgcmVjZWl2ZXI6IHN0cmluZztcbiAgYW1vdW50U2hhcmVzVG9SZWRlZW06IGJpZ2ludDtcbiAgdG9rZW5PdXQ6IHN0cmluZztcbiAgbWluVG9rZW5PdXQ6IGJpZ2ludDtcbiAgYnVybkZyb21JbnRlcm5hbEJhbGFuY2U6IGJvb2xlYW47XG59XG5cbmV4cG9ydCB0eXBlIFJlZGVlbUNhbGxUcmFjZSA9IFR5cGVkQ2FsbFRyYWNlPFxuICBbc3RyaW5nLCBiaWdpbnQsIHN0cmluZywgYmlnaW50LCBib29sZWFuXSxcbiAgUmVkZWVtQ2FsbE9iamVjdFxuPjtcblxuZXhwb3J0IGludGVyZmFjZSBSZXdhcmRJbmRleGVzQ3VycmVudENhbGxPYmplY3Qge31cblxuZXhwb3J0IHR5cGUgUmV3YXJkSW5kZXhlc0N1cnJlbnRDYWxsVHJhY2UgPSBUeXBlZENhbGxUcmFjZTxcbiAgW10sXG4gIFJld2FyZEluZGV4ZXNDdXJyZW50Q2FsbE9iamVjdFxuPjtcblxuZXhwb3J0IGludGVyZmFjZSBSZXdhcmRJbmRleGVzU3RvcmVkQ2FsbE9iamVjdCB7fVxuXG5leHBvcnQgdHlwZSBSZXdhcmRJbmRleGVzU3RvcmVkQ2FsbFRyYWNlID0gVHlwZWRDYWxsVHJhY2U8XG4gIFtdLFxuICBSZXdhcmRJbmRleGVzU3RvcmVkQ2FsbE9iamVjdFxuPjtcblxuZXhwb3J0IGludGVyZmFjZSBTeW1ib2xDYWxsT2JqZWN0IHt9XG5cbmV4cG9ydCB0eXBlIFN5bWJvbENhbGxUcmFjZSA9IFR5cGVkQ2FsbFRyYWNlPFtdLCBTeW1ib2xDYWxsT2JqZWN0PjtcblxuZXhwb3J0IGludGVyZmFjZSBUb3RhbFN1cHBseUNhbGxPYmplY3Qge31cblxuZXhwb3J0IHR5cGUgVG90YWxTdXBwbHlDYWxsVHJhY2UgPSBUeXBlZENhbGxUcmFjZTxbXSwgVG90YWxTdXBwbHlDYWxsT2JqZWN0PjtcblxuZXhwb3J0IGludGVyZmFjZSBUcmFuc2ZlckNhbGxPYmplY3Qge1xuICB0bzogc3RyaW5nO1xuICBhbW91bnQ6IGJpZ2ludDtcbn1cblxuZXhwb3J0IHR5cGUgVHJhbnNmZXJDYWxsVHJhY2UgPSBUeXBlZENhbGxUcmFjZTxcbiAgW3N0cmluZywgYmlnaW50XSxcbiAgVHJhbnNmZXJDYWxsT2JqZWN0XG4+O1xuXG5leHBvcnQgaW50ZXJmYWNlIFRyYW5zZmVyRnJvbUNhbGxPYmplY3Qge1xuICBmcm9tOiBzdHJpbmc7XG4gIHRvOiBzdHJpbmc7XG4gIGFtb3VudDogYmlnaW50O1xufVxuXG5leHBvcnQgdHlwZSBUcmFuc2ZlckZyb21DYWxsVHJhY2UgPSBUeXBlZENhbGxUcmFjZTxcbiAgW3N0cmluZywgc3RyaW5nLCBiaWdpbnRdLFxuICBUcmFuc2ZlckZyb21DYWxsT2JqZWN0XG4+O1xuXG5leHBvcnQgaW50ZXJmYWNlIFlpZWxkVG9rZW5DYWxsT2JqZWN0IHt9XG5cbmV4cG9ydCB0eXBlIFlpZWxkVG9rZW5DYWxsVHJhY2UgPSBUeXBlZENhbGxUcmFjZTxbXSwgWWllbGRUb2tlbkNhbGxPYmplY3Q+O1xuXG5jb25zdCB0ZW1wbGF0ZUNvbnRyYWN0ID0gU3RhbmRhcmRpemVkWWllbGRfX2ZhY3RvcnkuY29ubmVjdChcbiAgXCIweDBcIixcbiAgRHVtbXlQcm92aWRlcixcbik7XG5cbmV4cG9ydCBjbGFzcyBTdGFuZGFyZGl6ZWRZaWVsZENvbnRyYWN0VmlldyBleHRlbmRzIENvbnRyYWN0VmlldzxTdGFuZGFyZGl6ZWRZaWVsZD4ge1xuICBjb25zdHJ1Y3Rvcihjb250cmFjdDogU3RhbmRhcmRpemVkWWllbGQpIHtcbiAgICBzdXBlcihjb250cmFjdCk7XG4gICAgdGhpcy5jYWxsU3RhdGljLmNvbnRyYWN0ID0gY29udHJhY3Q7XG4gIH1cblxuICBhc3luYyBhY2NydWVkUmV3YXJkcyhcbiAgICB1c2VyOiBzdHJpbmcsXG4gICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzLFxuICAgIHByZXBhcmVkRGF0YT86IFByZXBhcmVkRGF0YSxcbiAgICBldGhDYWxsQ29udGV4dD86IEV0aENhbGxDb250ZXh0LFxuICApOiBQcm9taXNlPGJpZ2ludFtdPiB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBhd2FpdCB0aGlzLmNvbnRyYWN0LmdldEZ1bmN0aW9uKFwiYWNjcnVlZFJld2FyZHMoYWRkcmVzcylcIikoXG4gICAgICAgIHVzZXIsXG4gICAgICAgIG92ZXJyaWRlcyB8fCB7fSxcbiAgICAgICk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgY29uc3Qgc3RhY2sgPSBuZXcgRXJyb3IoKS5zdGFjaztcbiAgICAgIHRocm93IHRyYW5zZm9ybUV0aGVyRXJyb3IoZSwgdW5kZWZpbmVkLCBzdGFjayk7XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgYWxsb3dhbmNlKFxuICAgIG93bmVyOiBzdHJpbmcsXG4gICAgc3BlbmRlcjogc3RyaW5nLFxuICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlcyxcbiAgICBwcmVwYXJlZERhdGE/OiBQcmVwYXJlZERhdGEsXG4gICAgZXRoQ2FsbENvbnRleHQ/OiBFdGhDYWxsQ29udGV4dCxcbiAgKTogUHJvbWlzZTxiaWdpbnQ+IHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuY29udHJhY3QuZ2V0RnVuY3Rpb24oXCJhbGxvd2FuY2UoYWRkcmVzcyxhZGRyZXNzKVwiKShcbiAgICAgICAgb3duZXIsXG4gICAgICAgIHNwZW5kZXIsXG4gICAgICAgIG92ZXJyaWRlcyB8fCB7fSxcbiAgICAgICk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgY29uc3Qgc3RhY2sgPSBuZXcgRXJyb3IoKS5zdGFjaztcbiAgICAgIHRocm93IHRyYW5zZm9ybUV0aGVyRXJyb3IoZSwgdW5kZWZpbmVkLCBzdGFjayk7XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgYXNzZXRJbmZvKFxuICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlcyxcbiAgICBwcmVwYXJlZERhdGE/OiBQcmVwYXJlZERhdGEsXG4gICAgZXRoQ2FsbENvbnRleHQ/OiBFdGhDYWxsQ29udGV4dCxcbiAgKTogUHJvbWlzZTxcbiAgICBbYmlnaW50LCBzdHJpbmcsIGJpZ2ludF0gJiB7XG4gICAgICBhc3NldFR5cGU6IGJpZ2ludDtcbiAgICAgIGFzc2V0QWRkcmVzczogc3RyaW5nO1xuICAgICAgYXNzZXREZWNpbWFsczogYmlnaW50O1xuICAgIH1cbiAgPiB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBhd2FpdCB0aGlzLmNvbnRyYWN0LmdldEZ1bmN0aW9uKFwiYXNzZXRJbmZvKClcIikob3ZlcnJpZGVzIHx8IHt9KTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBjb25zdCBzdGFjayA9IG5ldyBFcnJvcigpLnN0YWNrO1xuICAgICAgdGhyb3cgdHJhbnNmb3JtRXRoZXJFcnJvcihlLCB1bmRlZmluZWQsIHN0YWNrKTtcbiAgICB9XG4gIH1cblxuICBhc3luYyBiYWxhbmNlT2YoXG4gICAgYWNjb3VudDogc3RyaW5nLFxuICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlcyxcbiAgICBwcmVwYXJlZERhdGE/OiBQcmVwYXJlZERhdGEsXG4gICAgZXRoQ2FsbENvbnRleHQ/OiBFdGhDYWxsQ29udGV4dCxcbiAgKTogUHJvbWlzZTxiaWdpbnQ+IHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuY29udHJhY3QuZ2V0RnVuY3Rpb24oXCJiYWxhbmNlT2YoYWRkcmVzcylcIikoXG4gICAgICAgIGFjY291bnQsXG4gICAgICAgIG92ZXJyaWRlcyB8fCB7fSxcbiAgICAgICk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgY29uc3Qgc3RhY2sgPSBuZXcgRXJyb3IoKS5zdGFjaztcbiAgICAgIHRocm93IHRyYW5zZm9ybUV0aGVyRXJyb3IoZSwgdW5kZWZpbmVkLCBzdGFjayk7XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgZGVjaW1hbHMoXG4gICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzLFxuICAgIHByZXBhcmVkRGF0YT86IFByZXBhcmVkRGF0YSxcbiAgICBldGhDYWxsQ29udGV4dD86IEV0aENhbGxDb250ZXh0LFxuICApOiBQcm9taXNlPGJpZ2ludD4ge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gYXdhaXQgdGhpcy5jb250cmFjdC5nZXRGdW5jdGlvbihcImRlY2ltYWxzKClcIikob3ZlcnJpZGVzIHx8IHt9KTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBjb25zdCBzdGFjayA9IG5ldyBFcnJvcigpLnN0YWNrO1xuICAgICAgdGhyb3cgdHJhbnNmb3JtRXRoZXJFcnJvcihlLCB1bmRlZmluZWQsIHN0YWNrKTtcbiAgICB9XG4gIH1cblxuICBhc3luYyBleGNoYW5nZVJhdGUoXG4gICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzLFxuICAgIHByZXBhcmVkRGF0YT86IFByZXBhcmVkRGF0YSxcbiAgICBldGhDYWxsQ29udGV4dD86IEV0aENhbGxDb250ZXh0LFxuICApOiBQcm9taXNlPGJpZ2ludD4ge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gYXdhaXQgdGhpcy5jb250cmFjdC5nZXRGdW5jdGlvbihcImV4Y2hhbmdlUmF0ZSgpXCIpKG92ZXJyaWRlcyB8fCB7fSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgY29uc3Qgc3RhY2sgPSBuZXcgRXJyb3IoKS5zdGFjaztcbiAgICAgIHRocm93IHRyYW5zZm9ybUV0aGVyRXJyb3IoZSwgdW5kZWZpbmVkLCBzdGFjayk7XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgZ2V0UmV3YXJkVG9rZW5zKFxuICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlcyxcbiAgICBwcmVwYXJlZERhdGE/OiBQcmVwYXJlZERhdGEsXG4gICAgZXRoQ2FsbENvbnRleHQ/OiBFdGhDYWxsQ29udGV4dCxcbiAgKTogUHJvbWlzZTxzdHJpbmdbXT4ge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gYXdhaXQgdGhpcy5jb250cmFjdC5nZXRGdW5jdGlvbihcImdldFJld2FyZFRva2VucygpXCIpKFxuICAgICAgICBvdmVycmlkZXMgfHwge30sXG4gICAgICApO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGNvbnN0IHN0YWNrID0gbmV3IEVycm9yKCkuc3RhY2s7XG4gICAgICB0aHJvdyB0cmFuc2Zvcm1FdGhlckVycm9yKGUsIHVuZGVmaW5lZCwgc3RhY2spO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIGdldFRva2Vuc0luKFxuICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlcyxcbiAgICBwcmVwYXJlZERhdGE/OiBQcmVwYXJlZERhdGEsXG4gICAgZXRoQ2FsbENvbnRleHQ/OiBFdGhDYWxsQ29udGV4dCxcbiAgKTogUHJvbWlzZTxzdHJpbmdbXT4ge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gYXdhaXQgdGhpcy5jb250cmFjdC5nZXRGdW5jdGlvbihcImdldFRva2Vuc0luKClcIikob3ZlcnJpZGVzIHx8IHt9KTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBjb25zdCBzdGFjayA9IG5ldyBFcnJvcigpLnN0YWNrO1xuICAgICAgdGhyb3cgdHJhbnNmb3JtRXRoZXJFcnJvcihlLCB1bmRlZmluZWQsIHN0YWNrKTtcbiAgICB9XG4gIH1cblxuICBhc3luYyBnZXRUb2tlbnNPdXQoXG4gICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzLFxuICAgIHByZXBhcmVkRGF0YT86IFByZXBhcmVkRGF0YSxcbiAgICBldGhDYWxsQ29udGV4dD86IEV0aENhbGxDb250ZXh0LFxuICApOiBQcm9taXNlPHN0cmluZ1tdPiB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBhd2FpdCB0aGlzLmNvbnRyYWN0LmdldEZ1bmN0aW9uKFwiZ2V0VG9rZW5zT3V0KClcIikob3ZlcnJpZGVzIHx8IHt9KTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBjb25zdCBzdGFjayA9IG5ldyBFcnJvcigpLnN0YWNrO1xuICAgICAgdGhyb3cgdHJhbnNmb3JtRXRoZXJFcnJvcihlLCB1bmRlZmluZWQsIHN0YWNrKTtcbiAgICB9XG4gIH1cblxuICBhc3luYyBpc1ZhbGlkVG9rZW5JbihcbiAgICB0b2tlbjogc3RyaW5nLFxuICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlcyxcbiAgICBwcmVwYXJlZERhdGE/OiBQcmVwYXJlZERhdGEsXG4gICAgZXRoQ2FsbENvbnRleHQ/OiBFdGhDYWxsQ29udGV4dCxcbiAgKTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBhd2FpdCB0aGlzLmNvbnRyYWN0LmdldEZ1bmN0aW9uKFwiaXNWYWxpZFRva2VuSW4oYWRkcmVzcylcIikoXG4gICAgICAgIHRva2VuLFxuICAgICAgICBvdmVycmlkZXMgfHwge30sXG4gICAgICApO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGNvbnN0IHN0YWNrID0gbmV3IEVycm9yKCkuc3RhY2s7XG4gICAgICB0aHJvdyB0cmFuc2Zvcm1FdGhlckVycm9yKGUsIHVuZGVmaW5lZCwgc3RhY2spO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIGlzVmFsaWRUb2tlbk91dChcbiAgICB0b2tlbjogc3RyaW5nLFxuICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlcyxcbiAgICBwcmVwYXJlZERhdGE/OiBQcmVwYXJlZERhdGEsXG4gICAgZXRoQ2FsbENvbnRleHQ/OiBFdGhDYWxsQ29udGV4dCxcbiAgKTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBhd2FpdCB0aGlzLmNvbnRyYWN0LmdldEZ1bmN0aW9uKFwiaXNWYWxpZFRva2VuT3V0KGFkZHJlc3MpXCIpKFxuICAgICAgICB0b2tlbixcbiAgICAgICAgb3ZlcnJpZGVzIHx8IHt9LFxuICAgICAgKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBjb25zdCBzdGFjayA9IG5ldyBFcnJvcigpLnN0YWNrO1xuICAgICAgdGhyb3cgdHJhbnNmb3JtRXRoZXJFcnJvcihlLCB1bmRlZmluZWQsIHN0YWNrKTtcbiAgICB9XG4gIH1cblxuICBhc3luYyBuYW1lKFxuICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlcyxcbiAgICBwcmVwYXJlZERhdGE/OiBQcmVwYXJlZERhdGEsXG4gICAgZXRoQ2FsbENvbnRleHQ/OiBFdGhDYWxsQ29udGV4dCxcbiAgKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuY29udHJhY3QuZ2V0RnVuY3Rpb24oXCJuYW1lKClcIikob3ZlcnJpZGVzIHx8IHt9KTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBjb25zdCBzdGFjayA9IG5ldyBFcnJvcigpLnN0YWNrO1xuICAgICAgdGhyb3cgdHJhbnNmb3JtRXRoZXJFcnJvcihlLCB1bmRlZmluZWQsIHN0YWNrKTtcbiAgICB9XG4gIH1cblxuICBhc3luYyBwcmV2aWV3RGVwb3NpdChcbiAgICB0b2tlbkluOiBzdHJpbmcsXG4gICAgYW1vdW50VG9rZW5Ub0RlcG9zaXQ6IEJpZ051bWJlcmlzaCxcbiAgICBvdmVycmlkZXM/OiBPdmVycmlkZXMsXG4gICAgcHJlcGFyZWREYXRhPzogUHJlcGFyZWREYXRhLFxuICAgIGV0aENhbGxDb250ZXh0PzogRXRoQ2FsbENvbnRleHQsXG4gICk6IFByb21pc2U8YmlnaW50PiB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBhd2FpdCB0aGlzLmNvbnRyYWN0LmdldEZ1bmN0aW9uKFwicHJldmlld0RlcG9zaXQoYWRkcmVzcyx1aW50MjU2KVwiKShcbiAgICAgICAgdG9rZW5JbixcbiAgICAgICAgYW1vdW50VG9rZW5Ub0RlcG9zaXQsXG4gICAgICAgIG92ZXJyaWRlcyB8fCB7fSxcbiAgICAgICk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgY29uc3Qgc3RhY2sgPSBuZXcgRXJyb3IoKS5zdGFjaztcbiAgICAgIHRocm93IHRyYW5zZm9ybUV0aGVyRXJyb3IoZSwgdW5kZWZpbmVkLCBzdGFjayk7XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgcHJldmlld1JlZGVlbShcbiAgICB0b2tlbk91dDogc3RyaW5nLFxuICAgIGFtb3VudFNoYXJlc1RvUmVkZWVtOiBCaWdOdW1iZXJpc2gsXG4gICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzLFxuICAgIHByZXBhcmVkRGF0YT86IFByZXBhcmVkRGF0YSxcbiAgICBldGhDYWxsQ29udGV4dD86IEV0aENhbGxDb250ZXh0LFxuICApOiBQcm9taXNlPGJpZ2ludD4ge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gYXdhaXQgdGhpcy5jb250cmFjdC5nZXRGdW5jdGlvbihcInByZXZpZXdSZWRlZW0oYWRkcmVzcyx1aW50MjU2KVwiKShcbiAgICAgICAgdG9rZW5PdXQsXG4gICAgICAgIGFtb3VudFNoYXJlc1RvUmVkZWVtLFxuICAgICAgICBvdmVycmlkZXMgfHwge30sXG4gICAgICApO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGNvbnN0IHN0YWNrID0gbmV3IEVycm9yKCkuc3RhY2s7XG4gICAgICB0aHJvdyB0cmFuc2Zvcm1FdGhlckVycm9yKGUsIHVuZGVmaW5lZCwgc3RhY2spO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIHJld2FyZEluZGV4ZXNTdG9yZWQoXG4gICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzLFxuICAgIHByZXBhcmVkRGF0YT86IFByZXBhcmVkRGF0YSxcbiAgICBldGhDYWxsQ29udGV4dD86IEV0aENhbGxDb250ZXh0LFxuICApOiBQcm9taXNlPGJpZ2ludFtdPiB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBhd2FpdCB0aGlzLmNvbnRyYWN0LmdldEZ1bmN0aW9uKFwicmV3YXJkSW5kZXhlc1N0b3JlZCgpXCIpKFxuICAgICAgICBvdmVycmlkZXMgfHwge30sXG4gICAgICApO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGNvbnN0IHN0YWNrID0gbmV3IEVycm9yKCkuc3RhY2s7XG4gICAgICB0aHJvdyB0cmFuc2Zvcm1FdGhlckVycm9yKGUsIHVuZGVmaW5lZCwgc3RhY2spO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIHN5bWJvbChcbiAgICBvdmVycmlkZXM/OiBPdmVycmlkZXMsXG4gICAgcHJlcGFyZWREYXRhPzogUHJlcGFyZWREYXRhLFxuICAgIGV0aENhbGxDb250ZXh0PzogRXRoQ2FsbENvbnRleHQsXG4gICk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBhd2FpdCB0aGlzLmNvbnRyYWN0LmdldEZ1bmN0aW9uKFwic3ltYm9sKClcIikob3ZlcnJpZGVzIHx8IHt9KTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBjb25zdCBzdGFjayA9IG5ldyBFcnJvcigpLnN0YWNrO1xuICAgICAgdGhyb3cgdHJhbnNmb3JtRXRoZXJFcnJvcihlLCB1bmRlZmluZWQsIHN0YWNrKTtcbiAgICB9XG4gIH1cblxuICBhc3luYyB0b3RhbFN1cHBseShcbiAgICBvdmVycmlkZXM/OiBPdmVycmlkZXMsXG4gICAgcHJlcGFyZWREYXRhPzogUHJlcGFyZWREYXRhLFxuICAgIGV0aENhbGxDb250ZXh0PzogRXRoQ2FsbENvbnRleHQsXG4gICk6IFByb21pc2U8YmlnaW50PiB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBhd2FpdCB0aGlzLmNvbnRyYWN0LmdldEZ1bmN0aW9uKFwidG90YWxTdXBwbHkoKVwiKShvdmVycmlkZXMgfHwge30pO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGNvbnN0IHN0YWNrID0gbmV3IEVycm9yKCkuc3RhY2s7XG4gICAgICB0aHJvdyB0cmFuc2Zvcm1FdGhlckVycm9yKGUsIHVuZGVmaW5lZCwgc3RhY2spO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIHlpZWxkVG9rZW4oXG4gICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzLFxuICAgIHByZXBhcmVkRGF0YT86IFByZXBhcmVkRGF0YSxcbiAgICBldGhDYWxsQ29udGV4dD86IEV0aENhbGxDb250ZXh0LFxuICApOiBQcm9taXNlPHN0cmluZz4ge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gYXdhaXQgdGhpcy5jb250cmFjdC5nZXRGdW5jdGlvbihcInlpZWxkVG9rZW4oKVwiKShvdmVycmlkZXMgfHwge30pO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGNvbnN0IHN0YWNrID0gbmV3IEVycm9yKCkuc3RhY2s7XG4gICAgICB0aHJvdyB0cmFuc2Zvcm1FdGhlckVycm9yKGUsIHVuZGVmaW5lZCwgc3RhY2spO1xuICAgIH1cbiAgfVxuXG4gIGNhbGxTdGF0aWMgPSB7XG4gICAgY29udHJhY3Q6IHRoaXMuY29udHJhY3QsXG5cbiAgICBhc3luYyBhcHByb3ZlKFxuICAgICAgc3BlbmRlcjogc3RyaW5nLFxuICAgICAgYW1vdW50OiBCaWdOdW1iZXJpc2gsXG4gICAgICBvdmVycmlkZXM/OiBPdmVycmlkZXMsXG4gICAgICBwcmVwYXJlZERhdGE/OiBQcmVwYXJlZERhdGEsXG4gICAgICBldGhDYWxsQ29udGV4dD86IEV0aENhbGxDb250ZXh0LFxuICAgICk6IFByb21pc2U8Ym9vbGVhbj4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuY29udHJhY3RcbiAgICAgICAgICAuZ2V0RnVuY3Rpb24oXCJhcHByb3ZlKGFkZHJlc3MsdWludDI1NilcIilcbiAgICAgICAgICAuc3RhdGljQ2FsbChzcGVuZGVyLCBhbW91bnQsIG92ZXJyaWRlcyB8fCB7fSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNvbnN0IHN0YWNrID0gbmV3IEVycm9yKCkuc3RhY2s7XG4gICAgICAgIHRocm93IHRyYW5zZm9ybUV0aGVyRXJyb3IoZSwgdW5kZWZpbmVkLCBzdGFjayk7XG4gICAgICB9XG4gICAgfSxcbiAgICBhc3luYyBjbGFpbVJld2FyZHMoXG4gICAgICB1c2VyOiBzdHJpbmcsXG4gICAgICBvdmVycmlkZXM/OiBPdmVycmlkZXMsXG4gICAgICBwcmVwYXJlZERhdGE/OiBQcmVwYXJlZERhdGEsXG4gICAgICBldGhDYWxsQ29udGV4dD86IEV0aENhbGxDb250ZXh0LFxuICAgICk6IFByb21pc2U8YmlnaW50W10+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLmNvbnRyYWN0XG4gICAgICAgICAgLmdldEZ1bmN0aW9uKFwiY2xhaW1SZXdhcmRzKGFkZHJlc3MpXCIpXG4gICAgICAgICAgLnN0YXRpY0NhbGwodXNlciwgb3ZlcnJpZGVzIHx8IHt9KTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY29uc3Qgc3RhY2sgPSBuZXcgRXJyb3IoKS5zdGFjaztcbiAgICAgICAgdGhyb3cgdHJhbnNmb3JtRXRoZXJFcnJvcihlLCB1bmRlZmluZWQsIHN0YWNrKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGFzeW5jIGRlcG9zaXQoXG4gICAgICByZWNlaXZlcjogc3RyaW5nLFxuICAgICAgdG9rZW5Jbjogc3RyaW5nLFxuICAgICAgYW1vdW50VG9rZW5Ub0RlcG9zaXQ6IEJpZ051bWJlcmlzaCxcbiAgICAgIG1pblNoYXJlc091dDogQmlnTnVtYmVyaXNoLFxuICAgICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzLFxuICAgICAgcHJlcGFyZWREYXRhPzogUHJlcGFyZWREYXRhLFxuICAgICAgZXRoQ2FsbENvbnRleHQ/OiBFdGhDYWxsQ29udGV4dCxcbiAgICApOiBQcm9taXNlPGJpZ2ludD4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuY29udHJhY3RcbiAgICAgICAgICAuZ2V0RnVuY3Rpb24oXCJkZXBvc2l0KGFkZHJlc3MsYWRkcmVzcyx1aW50MjU2LHVpbnQyNTYpXCIpXG4gICAgICAgICAgLnN0YXRpY0NhbGwoXG4gICAgICAgICAgICByZWNlaXZlcixcbiAgICAgICAgICAgIHRva2VuSW4sXG4gICAgICAgICAgICBhbW91bnRUb2tlblRvRGVwb3NpdCxcbiAgICAgICAgICAgIG1pblNoYXJlc091dCxcbiAgICAgICAgICAgIG92ZXJyaWRlcyB8fCB7fSxcbiAgICAgICAgICApO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjb25zdCBzdGFjayA9IG5ldyBFcnJvcigpLnN0YWNrO1xuICAgICAgICB0aHJvdyB0cmFuc2Zvcm1FdGhlckVycm9yKGUsIHVuZGVmaW5lZCwgc3RhY2spO1xuICAgICAgfVxuICAgIH0sXG4gICAgYXN5bmMgcmVkZWVtKFxuICAgICAgcmVjZWl2ZXI6IHN0cmluZyxcbiAgICAgIGFtb3VudFNoYXJlc1RvUmVkZWVtOiBCaWdOdW1iZXJpc2gsXG4gICAgICB0b2tlbk91dDogc3RyaW5nLFxuICAgICAgbWluVG9rZW5PdXQ6IEJpZ051bWJlcmlzaCxcbiAgICAgIGJ1cm5Gcm9tSW50ZXJuYWxCYWxhbmNlOiBib29sZWFuLFxuICAgICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzLFxuICAgICAgcHJlcGFyZWREYXRhPzogUHJlcGFyZWREYXRhLFxuICAgICAgZXRoQ2FsbENvbnRleHQ/OiBFdGhDYWxsQ29udGV4dCxcbiAgICApOiBQcm9taXNlPGJpZ2ludD4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuY29udHJhY3RcbiAgICAgICAgICAuZ2V0RnVuY3Rpb24oXCJyZWRlZW0oYWRkcmVzcyx1aW50MjU2LGFkZHJlc3MsdWludDI1Nixib29sKVwiKVxuICAgICAgICAgIC5zdGF0aWNDYWxsKFxuICAgICAgICAgICAgcmVjZWl2ZXIsXG4gICAgICAgICAgICBhbW91bnRTaGFyZXNUb1JlZGVlbSxcbiAgICAgICAgICAgIHRva2VuT3V0LFxuICAgICAgICAgICAgbWluVG9rZW5PdXQsXG4gICAgICAgICAgICBidXJuRnJvbUludGVybmFsQmFsYW5jZSxcbiAgICAgICAgICAgIG92ZXJyaWRlcyB8fCB7fSxcbiAgICAgICAgICApO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjb25zdCBzdGFjayA9IG5ldyBFcnJvcigpLnN0YWNrO1xuICAgICAgICB0aHJvdyB0cmFuc2Zvcm1FdGhlckVycm9yKGUsIHVuZGVmaW5lZCwgc3RhY2spO1xuICAgICAgfVxuICAgIH0sXG4gICAgYXN5bmMgcmV3YXJkSW5kZXhlc0N1cnJlbnQoXG4gICAgICBvdmVycmlkZXM/OiBPdmVycmlkZXMsXG4gICAgICBwcmVwYXJlZERhdGE/OiBQcmVwYXJlZERhdGEsXG4gICAgICBldGhDYWxsQ29udGV4dD86IEV0aENhbGxDb250ZXh0LFxuICAgICk6IFByb21pc2U8YmlnaW50W10+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLmNvbnRyYWN0XG4gICAgICAgICAgLmdldEZ1bmN0aW9uKFwicmV3YXJkSW5kZXhlc0N1cnJlbnQoKVwiKVxuICAgICAgICAgIC5zdGF0aWNDYWxsKG92ZXJyaWRlcyB8fCB7fSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNvbnN0IHN0YWNrID0gbmV3IEVycm9yKCkuc3RhY2s7XG4gICAgICAgIHRocm93IHRyYW5zZm9ybUV0aGVyRXJyb3IoZSwgdW5kZWZpbmVkLCBzdGFjayk7XG4gICAgICB9XG4gICAgfSxcbiAgICBhc3luYyB0cmFuc2ZlcihcbiAgICAgIHRvOiBzdHJpbmcsXG4gICAgICBhbW91bnQ6IEJpZ051bWJlcmlzaCxcbiAgICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlcyxcbiAgICAgIHByZXBhcmVkRGF0YT86IFByZXBhcmVkRGF0YSxcbiAgICAgIGV0aENhbGxDb250ZXh0PzogRXRoQ2FsbENvbnRleHQsXG4gICAgKTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5jb250cmFjdFxuICAgICAgICAgIC5nZXRGdW5jdGlvbihcInRyYW5zZmVyKGFkZHJlc3MsdWludDI1NilcIilcbiAgICAgICAgICAuc3RhdGljQ2FsbCh0bywgYW1vdW50LCBvdmVycmlkZXMgfHwge30pO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjb25zdCBzdGFjayA9IG5ldyBFcnJvcigpLnN0YWNrO1xuICAgICAgICB0aHJvdyB0cmFuc2Zvcm1FdGhlckVycm9yKGUsIHVuZGVmaW5lZCwgc3RhY2spO1xuICAgICAgfVxuICAgIH0sXG4gICAgYXN5bmMgdHJhbnNmZXJGcm9tKFxuICAgICAgZnJvbTogc3RyaW5nLFxuICAgICAgdG86IHN0cmluZyxcbiAgICAgIGFtb3VudDogQmlnTnVtYmVyaXNoLFxuICAgICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzLFxuICAgICAgcHJlcGFyZWREYXRhPzogUHJlcGFyZWREYXRhLFxuICAgICAgZXRoQ2FsbENvbnRleHQ/OiBFdGhDYWxsQ29udGV4dCxcbiAgICApOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLmNvbnRyYWN0XG4gICAgICAgICAgLmdldEZ1bmN0aW9uKFwidHJhbnNmZXJGcm9tKGFkZHJlc3MsYWRkcmVzcyx1aW50MjU2KVwiKVxuICAgICAgICAgIC5zdGF0aWNDYWxsKGZyb20sIHRvLCBhbW91bnQsIG92ZXJyaWRlcyB8fCB7fSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNvbnN0IHN0YWNrID0gbmV3IEVycm9yKCkuc3RhY2s7XG4gICAgICAgIHRocm93IHRyYW5zZm9ybUV0aGVyRXJyb3IoZSwgdW5kZWZpbmVkLCBzdGFjayk7XG4gICAgICB9XG4gICAgfSxcbiAgfTtcblxuICBlbmNvZGVDYWxsID0ge1xuICAgIGFjY3J1ZWRSZXdhcmRzKHVzZXI6IHN0cmluZywgY2FsbENvbnRleHQ6IEV0aENhbGxDb250ZXh0KTogRXRoQ2FsbFBhcmFtIHtcbiAgICAgIHJldHVybiBlbmNvZGVDYWxsRGF0YShcbiAgICAgICAgY2FsbENvbnRleHQsXG4gICAgICAgIFwiYWNjcnVlZFJld2FyZHNcIixcbiAgICAgICAgXCJmdW5jdGlvbiBhY2NydWVkUmV3YXJkcyhhZGRyZXNzKVwiLFxuICAgICAgICBbdXNlcl0sXG4gICAgICApO1xuICAgIH0sXG4gICAgYWxsb3dhbmNlKFxuICAgICAgb3duZXI6IHN0cmluZyxcbiAgICAgIHNwZW5kZXI6IHN0cmluZyxcbiAgICAgIGNhbGxDb250ZXh0OiBFdGhDYWxsQ29udGV4dCxcbiAgICApOiBFdGhDYWxsUGFyYW0ge1xuICAgICAgcmV0dXJuIGVuY29kZUNhbGxEYXRhKFxuICAgICAgICBjYWxsQ29udGV4dCxcbiAgICAgICAgXCJhbGxvd2FuY2VcIixcbiAgICAgICAgXCJmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyxhZGRyZXNzKVwiLFxuICAgICAgICBbb3duZXIsIHNwZW5kZXJdLFxuICAgICAgKTtcbiAgICB9LFxuICAgIGFwcHJvdmUoXG4gICAgICBzcGVuZGVyOiBzdHJpbmcsXG4gICAgICBhbW91bnQ6IEJpZ051bWJlcmlzaCxcbiAgICAgIGNhbGxDb250ZXh0OiBFdGhDYWxsQ29udGV4dCxcbiAgICApOiBFdGhDYWxsUGFyYW0ge1xuICAgICAgcmV0dXJuIGVuY29kZUNhbGxEYXRhKFxuICAgICAgICBjYWxsQ29udGV4dCxcbiAgICAgICAgXCJhcHByb3ZlXCIsXG4gICAgICAgIFwiZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzLHVpbnQyNTYpXCIsXG4gICAgICAgIFtzcGVuZGVyLCBhbW91bnRdLFxuICAgICAgKTtcbiAgICB9LFxuICAgIGFzc2V0SW5mbyhjYWxsQ29udGV4dDogRXRoQ2FsbENvbnRleHQpOiBFdGhDYWxsUGFyYW0ge1xuICAgICAgcmV0dXJuIGVuY29kZUNhbGxEYXRhKFxuICAgICAgICBjYWxsQ29udGV4dCxcbiAgICAgICAgXCJhc3NldEluZm9cIixcbiAgICAgICAgXCJmdW5jdGlvbiBhc3NldEluZm8oKVwiLFxuICAgICAgICBbXSxcbiAgICAgICk7XG4gICAgfSxcbiAgICBiYWxhbmNlT2YoYWNjb3VudDogc3RyaW5nLCBjYWxsQ29udGV4dDogRXRoQ2FsbENvbnRleHQpOiBFdGhDYWxsUGFyYW0ge1xuICAgICAgcmV0dXJuIGVuY29kZUNhbGxEYXRhKFxuICAgICAgICBjYWxsQ29udGV4dCxcbiAgICAgICAgXCJiYWxhbmNlT2ZcIixcbiAgICAgICAgXCJmdW5jdGlvbiBiYWxhbmNlT2YoYWRkcmVzcylcIixcbiAgICAgICAgW2FjY291bnRdLFxuICAgICAgKTtcbiAgICB9LFxuICAgIGNsYWltUmV3YXJkcyh1c2VyOiBzdHJpbmcsIGNhbGxDb250ZXh0OiBFdGhDYWxsQ29udGV4dCk6IEV0aENhbGxQYXJhbSB7XG4gICAgICByZXR1cm4gZW5jb2RlQ2FsbERhdGEoXG4gICAgICAgIGNhbGxDb250ZXh0LFxuICAgICAgICBcImNsYWltUmV3YXJkc1wiLFxuICAgICAgICBcImZ1bmN0aW9uIGNsYWltUmV3YXJkcyhhZGRyZXNzKVwiLFxuICAgICAgICBbdXNlcl0sXG4gICAgICApO1xuICAgIH0sXG4gICAgZGVjaW1hbHMoY2FsbENvbnRleHQ6IEV0aENhbGxDb250ZXh0KTogRXRoQ2FsbFBhcmFtIHtcbiAgICAgIHJldHVybiBlbmNvZGVDYWxsRGF0YShjYWxsQ29udGV4dCwgXCJkZWNpbWFsc1wiLCBcImZ1bmN0aW9uIGRlY2ltYWxzKClcIiwgW10pO1xuICAgIH0sXG4gICAgZGVwb3NpdChcbiAgICAgIHJlY2VpdmVyOiBzdHJpbmcsXG4gICAgICB0b2tlbkluOiBzdHJpbmcsXG4gICAgICBhbW91bnRUb2tlblRvRGVwb3NpdDogQmlnTnVtYmVyaXNoLFxuICAgICAgbWluU2hhcmVzT3V0OiBCaWdOdW1iZXJpc2gsXG4gICAgICBjYWxsQ29udGV4dDogRXRoQ2FsbENvbnRleHQsXG4gICAgKTogRXRoQ2FsbFBhcmFtIHtcbiAgICAgIHJldHVybiBlbmNvZGVDYWxsRGF0YShcbiAgICAgICAgY2FsbENvbnRleHQsXG4gICAgICAgIFwiZGVwb3NpdFwiLFxuICAgICAgICBcImZ1bmN0aW9uIGRlcG9zaXQoYWRkcmVzcyxhZGRyZXNzLHVpbnQyNTYsdWludDI1NilcIixcbiAgICAgICAgW3JlY2VpdmVyLCB0b2tlbkluLCBhbW91bnRUb2tlblRvRGVwb3NpdCwgbWluU2hhcmVzT3V0XSxcbiAgICAgICk7XG4gICAgfSxcbiAgICBleGNoYW5nZVJhdGUoY2FsbENvbnRleHQ6IEV0aENhbGxDb250ZXh0KTogRXRoQ2FsbFBhcmFtIHtcbiAgICAgIHJldHVybiBlbmNvZGVDYWxsRGF0YShcbiAgICAgICAgY2FsbENvbnRleHQsXG4gICAgICAgIFwiZXhjaGFuZ2VSYXRlXCIsXG4gICAgICAgIFwiZnVuY3Rpb24gZXhjaGFuZ2VSYXRlKClcIixcbiAgICAgICAgW10sXG4gICAgICApO1xuICAgIH0sXG4gICAgZ2V0UmV3YXJkVG9rZW5zKGNhbGxDb250ZXh0OiBFdGhDYWxsQ29udGV4dCk6IEV0aENhbGxQYXJhbSB7XG4gICAgICByZXR1cm4gZW5jb2RlQ2FsbERhdGEoXG4gICAgICAgIGNhbGxDb250ZXh0LFxuICAgICAgICBcImdldFJld2FyZFRva2Vuc1wiLFxuICAgICAgICBcImZ1bmN0aW9uIGdldFJld2FyZFRva2VucygpXCIsXG4gICAgICAgIFtdLFxuICAgICAgKTtcbiAgICB9LFxuICAgIGdldFRva2Vuc0luKGNhbGxDb250ZXh0OiBFdGhDYWxsQ29udGV4dCk6IEV0aENhbGxQYXJhbSB7XG4gICAgICByZXR1cm4gZW5jb2RlQ2FsbERhdGEoXG4gICAgICAgIGNhbGxDb250ZXh0LFxuICAgICAgICBcImdldFRva2Vuc0luXCIsXG4gICAgICAgIFwiZnVuY3Rpb24gZ2V0VG9rZW5zSW4oKVwiLFxuICAgICAgICBbXSxcbiAgICAgICk7XG4gICAgfSxcbiAgICBnZXRUb2tlbnNPdXQoY2FsbENvbnRleHQ6IEV0aENhbGxDb250ZXh0KTogRXRoQ2FsbFBhcmFtIHtcbiAgICAgIHJldHVybiBlbmNvZGVDYWxsRGF0YShcbiAgICAgICAgY2FsbENvbnRleHQsXG4gICAgICAgIFwiZ2V0VG9rZW5zT3V0XCIsXG4gICAgICAgIFwiZnVuY3Rpb24gZ2V0VG9rZW5zT3V0KClcIixcbiAgICAgICAgW10sXG4gICAgICApO1xuICAgIH0sXG4gICAgaXNWYWxpZFRva2VuSW4odG9rZW46IHN0cmluZywgY2FsbENvbnRleHQ6IEV0aENhbGxDb250ZXh0KTogRXRoQ2FsbFBhcmFtIHtcbiAgICAgIHJldHVybiBlbmNvZGVDYWxsRGF0YShcbiAgICAgICAgY2FsbENvbnRleHQsXG4gICAgICAgIFwiaXNWYWxpZFRva2VuSW5cIixcbiAgICAgICAgXCJmdW5jdGlvbiBpc1ZhbGlkVG9rZW5JbihhZGRyZXNzKVwiLFxuICAgICAgICBbdG9rZW5dLFxuICAgICAgKTtcbiAgICB9LFxuICAgIGlzVmFsaWRUb2tlbk91dCh0b2tlbjogc3RyaW5nLCBjYWxsQ29udGV4dDogRXRoQ2FsbENvbnRleHQpOiBFdGhDYWxsUGFyYW0ge1xuICAgICAgcmV0dXJuIGVuY29kZUNhbGxEYXRhKFxuICAgICAgICBjYWxsQ29udGV4dCxcbiAgICAgICAgXCJpc1ZhbGlkVG9rZW5PdXRcIixcbiAgICAgICAgXCJmdW5jdGlvbiBpc1ZhbGlkVG9rZW5PdXQoYWRkcmVzcylcIixcbiAgICAgICAgW3Rva2VuXSxcbiAgICAgICk7XG4gICAgfSxcbiAgICBuYW1lKGNhbGxDb250ZXh0OiBFdGhDYWxsQ29udGV4dCk6IEV0aENhbGxQYXJhbSB7XG4gICAgICByZXR1cm4gZW5jb2RlQ2FsbERhdGEoY2FsbENvbnRleHQsIFwibmFtZVwiLCBcImZ1bmN0aW9uIG5hbWUoKVwiLCBbXSk7XG4gICAgfSxcbiAgICBwcmV2aWV3RGVwb3NpdChcbiAgICAgIHRva2VuSW46IHN0cmluZyxcbiAgICAgIGFtb3VudFRva2VuVG9EZXBvc2l0OiBCaWdOdW1iZXJpc2gsXG4gICAgICBjYWxsQ29udGV4dDogRXRoQ2FsbENvbnRleHQsXG4gICAgKTogRXRoQ2FsbFBhcmFtIHtcbiAgICAgIHJldHVybiBlbmNvZGVDYWxsRGF0YShcbiAgICAgICAgY2FsbENvbnRleHQsXG4gICAgICAgIFwicHJldmlld0RlcG9zaXRcIixcbiAgICAgICAgXCJmdW5jdGlvbiBwcmV2aWV3RGVwb3NpdChhZGRyZXNzLHVpbnQyNTYpXCIsXG4gICAgICAgIFt0b2tlbkluLCBhbW91bnRUb2tlblRvRGVwb3NpdF0sXG4gICAgICApO1xuICAgIH0sXG4gICAgcHJldmlld1JlZGVlbShcbiAgICAgIHRva2VuT3V0OiBzdHJpbmcsXG4gICAgICBhbW91bnRTaGFyZXNUb1JlZGVlbTogQmlnTnVtYmVyaXNoLFxuICAgICAgY2FsbENvbnRleHQ6IEV0aENhbGxDb250ZXh0LFxuICAgICk6IEV0aENhbGxQYXJhbSB7XG4gICAgICByZXR1cm4gZW5jb2RlQ2FsbERhdGEoXG4gICAgICAgIGNhbGxDb250ZXh0LFxuICAgICAgICBcInByZXZpZXdSZWRlZW1cIixcbiAgICAgICAgXCJmdW5jdGlvbiBwcmV2aWV3UmVkZWVtKGFkZHJlc3MsdWludDI1NilcIixcbiAgICAgICAgW3Rva2VuT3V0LCBhbW91bnRTaGFyZXNUb1JlZGVlbV0sXG4gICAgICApO1xuICAgIH0sXG4gICAgcmVkZWVtKFxuICAgICAgcmVjZWl2ZXI6IHN0cmluZyxcbiAgICAgIGFtb3VudFNoYXJlc1RvUmVkZWVtOiBCaWdOdW1iZXJpc2gsXG4gICAgICB0b2tlbk91dDogc3RyaW5nLFxuICAgICAgbWluVG9rZW5PdXQ6IEJpZ051bWJlcmlzaCxcbiAgICAgIGJ1cm5Gcm9tSW50ZXJuYWxCYWxhbmNlOiBib29sZWFuLFxuICAgICAgY2FsbENvbnRleHQ6IEV0aENhbGxDb250ZXh0LFxuICAgICk6IEV0aENhbGxQYXJhbSB7XG4gICAgICByZXR1cm4gZW5jb2RlQ2FsbERhdGEoXG4gICAgICAgIGNhbGxDb250ZXh0LFxuICAgICAgICBcInJlZGVlbVwiLFxuICAgICAgICBcImZ1bmN0aW9uIHJlZGVlbShhZGRyZXNzLHVpbnQyNTYsYWRkcmVzcyx1aW50MjU2LGJvb2wpXCIsXG4gICAgICAgIFtcbiAgICAgICAgICByZWNlaXZlcixcbiAgICAgICAgICBhbW91bnRTaGFyZXNUb1JlZGVlbSxcbiAgICAgICAgICB0b2tlbk91dCxcbiAgICAgICAgICBtaW5Ub2tlbk91dCxcbiAgICAgICAgICBidXJuRnJvbUludGVybmFsQmFsYW5jZSxcbiAgICAgICAgXSxcbiAgICAgICk7XG4gICAgfSxcbiAgICByZXdhcmRJbmRleGVzQ3VycmVudChjYWxsQ29udGV4dDogRXRoQ2FsbENvbnRleHQpOiBFdGhDYWxsUGFyYW0ge1xuICAgICAgcmV0dXJuIGVuY29kZUNhbGxEYXRhKFxuICAgICAgICBjYWxsQ29udGV4dCxcbiAgICAgICAgXCJyZXdhcmRJbmRleGVzQ3VycmVudFwiLFxuICAgICAgICBcImZ1bmN0aW9uIHJld2FyZEluZGV4ZXNDdXJyZW50KClcIixcbiAgICAgICAgW10sXG4gICAgICApO1xuICAgIH0sXG4gICAgcmV3YXJkSW5kZXhlc1N0b3JlZChjYWxsQ29udGV4dDogRXRoQ2FsbENvbnRleHQpOiBFdGhDYWxsUGFyYW0ge1xuICAgICAgcmV0dXJuIGVuY29kZUNhbGxEYXRhKFxuICAgICAgICBjYWxsQ29udGV4dCxcbiAgICAgICAgXCJyZXdhcmRJbmRleGVzU3RvcmVkXCIsXG4gICAgICAgIFwiZnVuY3Rpb24gcmV3YXJkSW5kZXhlc1N0b3JlZCgpXCIsXG4gICAgICAgIFtdLFxuICAgICAgKTtcbiAgICB9LFxuICAgIHN5bWJvbChjYWxsQ29udGV4dDogRXRoQ2FsbENvbnRleHQpOiBFdGhDYWxsUGFyYW0ge1xuICAgICAgcmV0dXJuIGVuY29kZUNhbGxEYXRhKGNhbGxDb250ZXh0LCBcInN5bWJvbFwiLCBcImZ1bmN0aW9uIHN5bWJvbCgpXCIsIFtdKTtcbiAgICB9LFxuICAgIHRvdGFsU3VwcGx5KGNhbGxDb250ZXh0OiBFdGhDYWxsQ29udGV4dCk6IEV0aENhbGxQYXJhbSB7XG4gICAgICByZXR1cm4gZW5jb2RlQ2FsbERhdGEoXG4gICAgICAgIGNhbGxDb250ZXh0LFxuICAgICAgICBcInRvdGFsU3VwcGx5XCIsXG4gICAgICAgIFwiZnVuY3Rpb24gdG90YWxTdXBwbHkoKVwiLFxuICAgICAgICBbXSxcbiAgICAgICk7XG4gICAgfSxcbiAgICB0cmFuc2ZlcihcbiAgICAgIHRvOiBzdHJpbmcsXG4gICAgICBhbW91bnQ6IEJpZ051bWJlcmlzaCxcbiAgICAgIGNhbGxDb250ZXh0OiBFdGhDYWxsQ29udGV4dCxcbiAgICApOiBFdGhDYWxsUGFyYW0ge1xuICAgICAgcmV0dXJuIGVuY29kZUNhbGxEYXRhKFxuICAgICAgICBjYWxsQ29udGV4dCxcbiAgICAgICAgXCJ0cmFuc2ZlclwiLFxuICAgICAgICBcImZ1bmN0aW9uIHRyYW5zZmVyKGFkZHJlc3MsdWludDI1NilcIixcbiAgICAgICAgW3RvLCBhbW91bnRdLFxuICAgICAgKTtcbiAgICB9LFxuICAgIHRyYW5zZmVyRnJvbShcbiAgICAgIGZyb206IHN0cmluZyxcbiAgICAgIHRvOiBzdHJpbmcsXG4gICAgICBhbW91bnQ6IEJpZ051bWJlcmlzaCxcbiAgICAgIGNhbGxDb250ZXh0OiBFdGhDYWxsQ29udGV4dCxcbiAgICApOiBFdGhDYWxsUGFyYW0ge1xuICAgICAgcmV0dXJuIGVuY29kZUNhbGxEYXRhKFxuICAgICAgICBjYWxsQ29udGV4dCxcbiAgICAgICAgXCJ0cmFuc2ZlckZyb21cIixcbiAgICAgICAgXCJmdW5jdGlvbiB0cmFuc2ZlckZyb20oYWRkcmVzcyxhZGRyZXNzLHVpbnQyNTYpXCIsXG4gICAgICAgIFtmcm9tLCB0bywgYW1vdW50XSxcbiAgICAgICk7XG4gICAgfSxcbiAgICB5aWVsZFRva2VuKGNhbGxDb250ZXh0OiBFdGhDYWxsQ29udGV4dCk6IEV0aENhbGxQYXJhbSB7XG4gICAgICByZXR1cm4gZW5jb2RlQ2FsbERhdGEoXG4gICAgICAgIGNhbGxDb250ZXh0LFxuICAgICAgICBcInlpZWxkVG9rZW5cIixcbiAgICAgICAgXCJmdW5jdGlvbiB5aWVsZFRva2VuKClcIixcbiAgICAgICAgW10sXG4gICAgICApO1xuICAgIH0sXG4gIH07XG59XG5cbmV4cG9ydCBjbGFzcyBTdGFuZGFyZGl6ZWRZaWVsZEJvdW5kQ29udHJhY3RWaWV3IGV4dGVuZHMgQm91bmRDb250cmFjdFZpZXc8XG4gIFN0YW5kYXJkaXplZFlpZWxkLFxuICBTdGFuZGFyZGl6ZWRZaWVsZENvbnRyYWN0Vmlld1xuPiB7XG4gIGFzeW5jIGFjY3J1ZWRSZXdhcmRzKHVzZXI6IHN0cmluZywgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzKTogUHJvbWlzZTxiaWdpbnRbXT4ge1xuICAgIHJldHVybiBhd2FpdCB0aGlzLnZpZXcuYWNjcnVlZFJld2FyZHMoXG4gICAgICB1c2VyLFxuICAgICAge1xuICAgICAgICBibG9ja1RhZzogdGhpcy5jb250ZXh0LmJsb2NrTnVtYmVyLFxuICAgICAgICAuLi5vdmVycmlkZXMsXG4gICAgICB9LFxuICAgICAgdGhpcy5jb250ZXh0LnByZXBhcmVkRGF0YSxcbiAgICAgIHRoaXMuY29udGV4dC5nZXRFdGhDYWxsQ29udGV4dCgpLFxuICAgICk7XG4gIH1cblxuICBhc3luYyBhbGxvd2FuY2UoXG4gICAgb3duZXI6IHN0cmluZyxcbiAgICBzcGVuZGVyOiBzdHJpbmcsXG4gICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzLFxuICApOiBQcm9taXNlPGJpZ2ludD4ge1xuICAgIHJldHVybiBhd2FpdCB0aGlzLnZpZXcuYWxsb3dhbmNlKFxuICAgICAgb3duZXIsXG4gICAgICBzcGVuZGVyLFxuICAgICAge1xuICAgICAgICBibG9ja1RhZzogdGhpcy5jb250ZXh0LmJsb2NrTnVtYmVyLFxuICAgICAgICAuLi5vdmVycmlkZXMsXG4gICAgICB9LFxuICAgICAgdGhpcy5jb250ZXh0LnByZXBhcmVkRGF0YSxcbiAgICAgIHRoaXMuY29udGV4dC5nZXRFdGhDYWxsQ29udGV4dCgpLFxuICAgICk7XG4gIH1cblxuICBhc3luYyBhc3NldEluZm8oXG4gICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzLFxuICApOiBQcm9taXNlPFxuICAgIFtiaWdpbnQsIHN0cmluZywgYmlnaW50XSAmIHtcbiAgICAgIGFzc2V0VHlwZTogYmlnaW50O1xuICAgICAgYXNzZXRBZGRyZXNzOiBzdHJpbmc7XG4gICAgICBhc3NldERlY2ltYWxzOiBiaWdpbnQ7XG4gICAgfVxuICA+IHtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy52aWV3LmFzc2V0SW5mbyhcbiAgICAgIHtcbiAgICAgICAgYmxvY2tUYWc6IHRoaXMuY29udGV4dC5ibG9ja051bWJlcixcbiAgICAgICAgLi4ub3ZlcnJpZGVzLFxuICAgICAgfSxcbiAgICAgIHRoaXMuY29udGV4dC5wcmVwYXJlZERhdGEsXG4gICAgICB0aGlzLmNvbnRleHQuZ2V0RXRoQ2FsbENvbnRleHQoKSxcbiAgICApO1xuICB9XG5cbiAgYXN5bmMgYmFsYW5jZU9mKGFjY291bnQ6IHN0cmluZywgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzKTogUHJvbWlzZTxiaWdpbnQ+IHtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy52aWV3LmJhbGFuY2VPZihcbiAgICAgIGFjY291bnQsXG4gICAgICB7XG4gICAgICAgIGJsb2NrVGFnOiB0aGlzLmNvbnRleHQuYmxvY2tOdW1iZXIsXG4gICAgICAgIC4uLm92ZXJyaWRlcyxcbiAgICAgIH0sXG4gICAgICB0aGlzLmNvbnRleHQucHJlcGFyZWREYXRhLFxuICAgICAgdGhpcy5jb250ZXh0LmdldEV0aENhbGxDb250ZXh0KCksXG4gICAgKTtcbiAgfVxuXG4gIGFzeW5jIGRlY2ltYWxzKG92ZXJyaWRlcz86IE92ZXJyaWRlcyk6IFByb21pc2U8YmlnaW50PiB7XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMudmlldy5kZWNpbWFscyhcbiAgICAgIHtcbiAgICAgICAgYmxvY2tUYWc6IHRoaXMuY29udGV4dC5ibG9ja051bWJlcixcbiAgICAgICAgLi4ub3ZlcnJpZGVzLFxuICAgICAgfSxcbiAgICAgIHRoaXMuY29udGV4dC5wcmVwYXJlZERhdGEsXG4gICAgICB0aGlzLmNvbnRleHQuZ2V0RXRoQ2FsbENvbnRleHQoKSxcbiAgICApO1xuICB9XG5cbiAgYXN5bmMgZXhjaGFuZ2VSYXRlKG92ZXJyaWRlcz86IE92ZXJyaWRlcyk6IFByb21pc2U8YmlnaW50PiB7XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMudmlldy5leGNoYW5nZVJhdGUoXG4gICAgICB7XG4gICAgICAgIGJsb2NrVGFnOiB0aGlzLmNvbnRleHQuYmxvY2tOdW1iZXIsXG4gICAgICAgIC4uLm92ZXJyaWRlcyxcbiAgICAgIH0sXG4gICAgICB0aGlzLmNvbnRleHQucHJlcGFyZWREYXRhLFxuICAgICAgdGhpcy5jb250ZXh0LmdldEV0aENhbGxDb250ZXh0KCksXG4gICAgKTtcbiAgfVxuXG4gIGFzeW5jIGdldFJld2FyZFRva2VucyhvdmVycmlkZXM/OiBPdmVycmlkZXMpOiBQcm9taXNlPHN0cmluZ1tdPiB7XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMudmlldy5nZXRSZXdhcmRUb2tlbnMoXG4gICAgICB7XG4gICAgICAgIGJsb2NrVGFnOiB0aGlzLmNvbnRleHQuYmxvY2tOdW1iZXIsXG4gICAgICAgIC4uLm92ZXJyaWRlcyxcbiAgICAgIH0sXG4gICAgICB0aGlzLmNvbnRleHQucHJlcGFyZWREYXRhLFxuICAgICAgdGhpcy5jb250ZXh0LmdldEV0aENhbGxDb250ZXh0KCksXG4gICAgKTtcbiAgfVxuXG4gIGFzeW5jIGdldFRva2Vuc0luKG92ZXJyaWRlcz86IE92ZXJyaWRlcyk6IFByb21pc2U8c3RyaW5nW10+IHtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy52aWV3LmdldFRva2Vuc0luKFxuICAgICAge1xuICAgICAgICBibG9ja1RhZzogdGhpcy5jb250ZXh0LmJsb2NrTnVtYmVyLFxuICAgICAgICAuLi5vdmVycmlkZXMsXG4gICAgICB9LFxuICAgICAgdGhpcy5jb250ZXh0LnByZXBhcmVkRGF0YSxcbiAgICAgIHRoaXMuY29udGV4dC5nZXRFdGhDYWxsQ29udGV4dCgpLFxuICAgICk7XG4gIH1cblxuICBhc3luYyBnZXRUb2tlbnNPdXQob3ZlcnJpZGVzPzogT3ZlcnJpZGVzKTogUHJvbWlzZTxzdHJpbmdbXT4ge1xuICAgIHJldHVybiBhd2FpdCB0aGlzLnZpZXcuZ2V0VG9rZW5zT3V0KFxuICAgICAge1xuICAgICAgICBibG9ja1RhZzogdGhpcy5jb250ZXh0LmJsb2NrTnVtYmVyLFxuICAgICAgICAuLi5vdmVycmlkZXMsXG4gICAgICB9LFxuICAgICAgdGhpcy5jb250ZXh0LnByZXBhcmVkRGF0YSxcbiAgICAgIHRoaXMuY29udGV4dC5nZXRFdGhDYWxsQ29udGV4dCgpLFxuICAgICk7XG4gIH1cblxuICBhc3luYyBpc1ZhbGlkVG9rZW5Jbih0b2tlbjogc3RyaW5nLCBvdmVycmlkZXM/OiBPdmVycmlkZXMpOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy52aWV3LmlzVmFsaWRUb2tlbkluKFxuICAgICAgdG9rZW4sXG4gICAgICB7XG4gICAgICAgIGJsb2NrVGFnOiB0aGlzLmNvbnRleHQuYmxvY2tOdW1iZXIsXG4gICAgICAgIC4uLm92ZXJyaWRlcyxcbiAgICAgIH0sXG4gICAgICB0aGlzLmNvbnRleHQucHJlcGFyZWREYXRhLFxuICAgICAgdGhpcy5jb250ZXh0LmdldEV0aENhbGxDb250ZXh0KCksXG4gICAgKTtcbiAgfVxuXG4gIGFzeW5jIGlzVmFsaWRUb2tlbk91dChcbiAgICB0b2tlbjogc3RyaW5nLFxuICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlcyxcbiAgKTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMudmlldy5pc1ZhbGlkVG9rZW5PdXQoXG4gICAgICB0b2tlbixcbiAgICAgIHtcbiAgICAgICAgYmxvY2tUYWc6IHRoaXMuY29udGV4dC5ibG9ja051bWJlcixcbiAgICAgICAgLi4ub3ZlcnJpZGVzLFxuICAgICAgfSxcbiAgICAgIHRoaXMuY29udGV4dC5wcmVwYXJlZERhdGEsXG4gICAgICB0aGlzLmNvbnRleHQuZ2V0RXRoQ2FsbENvbnRleHQoKSxcbiAgICApO1xuICB9XG5cbiAgYXN5bmMgbmFtZShvdmVycmlkZXM/OiBPdmVycmlkZXMpOiBQcm9taXNlPHN0cmluZz4ge1xuICAgIHJldHVybiBhd2FpdCB0aGlzLnZpZXcubmFtZShcbiAgICAgIHtcbiAgICAgICAgYmxvY2tUYWc6IHRoaXMuY29udGV4dC5ibG9ja051bWJlcixcbiAgICAgICAgLi4ub3ZlcnJpZGVzLFxuICAgICAgfSxcbiAgICAgIHRoaXMuY29udGV4dC5wcmVwYXJlZERhdGEsXG4gICAgICB0aGlzLmNvbnRleHQuZ2V0RXRoQ2FsbENvbnRleHQoKSxcbiAgICApO1xuICB9XG5cbiAgYXN5bmMgcHJldmlld0RlcG9zaXQoXG4gICAgdG9rZW5Jbjogc3RyaW5nLFxuICAgIGFtb3VudFRva2VuVG9EZXBvc2l0OiBCaWdOdW1iZXJpc2gsXG4gICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzLFxuICApOiBQcm9taXNlPGJpZ2ludD4ge1xuICAgIHJldHVybiBhd2FpdCB0aGlzLnZpZXcucHJldmlld0RlcG9zaXQoXG4gICAgICB0b2tlbkluLFxuICAgICAgYW1vdW50VG9rZW5Ub0RlcG9zaXQsXG4gICAgICB7XG4gICAgICAgIGJsb2NrVGFnOiB0aGlzLmNvbnRleHQuYmxvY2tOdW1iZXIsXG4gICAgICAgIC4uLm92ZXJyaWRlcyxcbiAgICAgIH0sXG4gICAgICB0aGlzLmNvbnRleHQucHJlcGFyZWREYXRhLFxuICAgICAgdGhpcy5jb250ZXh0LmdldEV0aENhbGxDb250ZXh0KCksXG4gICAgKTtcbiAgfVxuXG4gIGFzeW5jIHByZXZpZXdSZWRlZW0oXG4gICAgdG9rZW5PdXQ6IHN0cmluZyxcbiAgICBhbW91bnRTaGFyZXNUb1JlZGVlbTogQmlnTnVtYmVyaXNoLFxuICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlcyxcbiAgKTogUHJvbWlzZTxiaWdpbnQ+IHtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy52aWV3LnByZXZpZXdSZWRlZW0oXG4gICAgICB0b2tlbk91dCxcbiAgICAgIGFtb3VudFNoYXJlc1RvUmVkZWVtLFxuICAgICAge1xuICAgICAgICBibG9ja1RhZzogdGhpcy5jb250ZXh0LmJsb2NrTnVtYmVyLFxuICAgICAgICAuLi5vdmVycmlkZXMsXG4gICAgICB9LFxuICAgICAgdGhpcy5jb250ZXh0LnByZXBhcmVkRGF0YSxcbiAgICAgIHRoaXMuY29udGV4dC5nZXRFdGhDYWxsQ29udGV4dCgpLFxuICAgICk7XG4gIH1cblxuICBhc3luYyByZXdhcmRJbmRleGVzU3RvcmVkKG92ZXJyaWRlcz86IE92ZXJyaWRlcyk6IFByb21pc2U8YmlnaW50W10+IHtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy52aWV3LnJld2FyZEluZGV4ZXNTdG9yZWQoXG4gICAgICB7XG4gICAgICAgIGJsb2NrVGFnOiB0aGlzLmNvbnRleHQuYmxvY2tOdW1iZXIsXG4gICAgICAgIC4uLm92ZXJyaWRlcyxcbiAgICAgIH0sXG4gICAgICB0aGlzLmNvbnRleHQucHJlcGFyZWREYXRhLFxuICAgICAgdGhpcy5jb250ZXh0LmdldEV0aENhbGxDb250ZXh0KCksXG4gICAgKTtcbiAgfVxuXG4gIGFzeW5jIHN5bWJvbChvdmVycmlkZXM/OiBPdmVycmlkZXMpOiBQcm9taXNlPHN0cmluZz4ge1xuICAgIHJldHVybiBhd2FpdCB0aGlzLnZpZXcuc3ltYm9sKFxuICAgICAge1xuICAgICAgICBibG9ja1RhZzogdGhpcy5jb250ZXh0LmJsb2NrTnVtYmVyLFxuICAgICAgICAuLi5vdmVycmlkZXMsXG4gICAgICB9LFxuICAgICAgdGhpcy5jb250ZXh0LnByZXBhcmVkRGF0YSxcbiAgICAgIHRoaXMuY29udGV4dC5nZXRFdGhDYWxsQ29udGV4dCgpLFxuICAgICk7XG4gIH1cblxuICBhc3luYyB0b3RhbFN1cHBseShvdmVycmlkZXM/OiBPdmVycmlkZXMpOiBQcm9taXNlPGJpZ2ludD4ge1xuICAgIHJldHVybiBhd2FpdCB0aGlzLnZpZXcudG90YWxTdXBwbHkoXG4gICAgICB7XG4gICAgICAgIGJsb2NrVGFnOiB0aGlzLmNvbnRleHQuYmxvY2tOdW1iZXIsXG4gICAgICAgIC4uLm92ZXJyaWRlcyxcbiAgICAgIH0sXG4gICAgICB0aGlzLmNvbnRleHQucHJlcGFyZWREYXRhLFxuICAgICAgdGhpcy5jb250ZXh0LmdldEV0aENhbGxDb250ZXh0KCksXG4gICAgKTtcbiAgfVxuXG4gIGFzeW5jIHlpZWxkVG9rZW4ob3ZlcnJpZGVzPzogT3ZlcnJpZGVzKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy52aWV3LnlpZWxkVG9rZW4oXG4gICAgICB7XG4gICAgICAgIGJsb2NrVGFnOiB0aGlzLmNvbnRleHQuYmxvY2tOdW1iZXIsXG4gICAgICAgIC4uLm92ZXJyaWRlcyxcbiAgICAgIH0sXG4gICAgICB0aGlzLmNvbnRleHQucHJlcGFyZWREYXRhLFxuICAgICAgdGhpcy5jb250ZXh0LmdldEV0aENhbGxDb250ZXh0KCksXG4gICAgKTtcbiAgfVxuXG4gIGNhbGxTdGF0aWMgPSB7XG4gICAgdmlldzogdGhpcy52aWV3LFxuICAgIGNvbnRleHQ6IHRoaXMuY29udGV4dCxcblxuICAgIGFzeW5jIGFwcHJvdmUoXG4gICAgICBzcGVuZGVyOiBzdHJpbmcsXG4gICAgICBhbW91bnQ6IEJpZ051bWJlcmlzaCxcbiAgICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlcyxcbiAgICApOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICAgIHJldHVybiBhd2FpdCB0aGlzLnZpZXcuY2FsbFN0YXRpYy5hcHByb3ZlKFxuICAgICAgICBzcGVuZGVyLFxuICAgICAgICBhbW91bnQsXG4gICAgICAgIHtcbiAgICAgICAgICBibG9ja1RhZzogdGhpcy5jb250ZXh0LmJsb2NrTnVtYmVyLFxuICAgICAgICAgIC4uLm92ZXJyaWRlcyxcbiAgICAgICAgfSxcbiAgICAgICAgdGhpcy5jb250ZXh0LnByZXBhcmVkRGF0YSxcbiAgICAgICAgdGhpcy5jb250ZXh0LmdldEV0aENhbGxDb250ZXh0KCksXG4gICAgICApO1xuICAgIH0sXG4gICAgYXN5bmMgY2xhaW1SZXdhcmRzKHVzZXI6IHN0cmluZywgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzKTogUHJvbWlzZTxiaWdpbnRbXT4ge1xuICAgICAgcmV0dXJuIGF3YWl0IHRoaXMudmlldy5jYWxsU3RhdGljLmNsYWltUmV3YXJkcyhcbiAgICAgICAgdXNlcixcbiAgICAgICAge1xuICAgICAgICAgIGJsb2NrVGFnOiB0aGlzLmNvbnRleHQuYmxvY2tOdW1iZXIsXG4gICAgICAgICAgLi4ub3ZlcnJpZGVzLFxuICAgICAgICB9LFxuICAgICAgICB0aGlzLmNvbnRleHQucHJlcGFyZWREYXRhLFxuICAgICAgICB0aGlzLmNvbnRleHQuZ2V0RXRoQ2FsbENvbnRleHQoKSxcbiAgICAgICk7XG4gICAgfSxcbiAgICBhc3luYyBkZXBvc2l0KFxuICAgICAgcmVjZWl2ZXI6IHN0cmluZyxcbiAgICAgIHRva2VuSW46IHN0cmluZyxcbiAgICAgIGFtb3VudFRva2VuVG9EZXBvc2l0OiBCaWdOdW1iZXJpc2gsXG4gICAgICBtaW5TaGFyZXNPdXQ6IEJpZ051bWJlcmlzaCxcbiAgICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlcyxcbiAgICApOiBQcm9taXNlPGJpZ2ludD4ge1xuICAgICAgcmV0dXJuIGF3YWl0IHRoaXMudmlldy5jYWxsU3RhdGljLmRlcG9zaXQoXG4gICAgICAgIHJlY2VpdmVyLFxuICAgICAgICB0b2tlbkluLFxuICAgICAgICBhbW91bnRUb2tlblRvRGVwb3NpdCxcbiAgICAgICAgbWluU2hhcmVzT3V0LFxuICAgICAgICB7XG4gICAgICAgICAgYmxvY2tUYWc6IHRoaXMuY29udGV4dC5ibG9ja051bWJlcixcbiAgICAgICAgICAuLi5vdmVycmlkZXMsXG4gICAgICAgIH0sXG4gICAgICAgIHRoaXMuY29udGV4dC5wcmVwYXJlZERhdGEsXG4gICAgICAgIHRoaXMuY29udGV4dC5nZXRFdGhDYWxsQ29udGV4dCgpLFxuICAgICAgKTtcbiAgICB9LFxuICAgIGFzeW5jIHJlZGVlbShcbiAgICAgIHJlY2VpdmVyOiBzdHJpbmcsXG4gICAgICBhbW91bnRTaGFyZXNUb1JlZGVlbTogQmlnTnVtYmVyaXNoLFxuICAgICAgdG9rZW5PdXQ6IHN0cmluZyxcbiAgICAgIG1pblRva2VuT3V0OiBCaWdOdW1iZXJpc2gsXG4gICAgICBidXJuRnJvbUludGVybmFsQmFsYW5jZTogYm9vbGVhbixcbiAgICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlcyxcbiAgICApOiBQcm9taXNlPGJpZ2ludD4ge1xuICAgICAgcmV0dXJuIGF3YWl0IHRoaXMudmlldy5jYWxsU3RhdGljLnJlZGVlbShcbiAgICAgICAgcmVjZWl2ZXIsXG4gICAgICAgIGFtb3VudFNoYXJlc1RvUmVkZWVtLFxuICAgICAgICB0b2tlbk91dCxcbiAgICAgICAgbWluVG9rZW5PdXQsXG4gICAgICAgIGJ1cm5Gcm9tSW50ZXJuYWxCYWxhbmNlLFxuICAgICAgICB7XG4gICAgICAgICAgYmxvY2tUYWc6IHRoaXMuY29udGV4dC5ibG9ja051bWJlcixcbiAgICAgICAgICAuLi5vdmVycmlkZXMsXG4gICAgICAgIH0sXG4gICAgICAgIHRoaXMuY29udGV4dC5wcmVwYXJlZERhdGEsXG4gICAgICAgIHRoaXMuY29udGV4dC5nZXRFdGhDYWxsQ29udGV4dCgpLFxuICAgICAgKTtcbiAgICB9LFxuICAgIGFzeW5jIHJld2FyZEluZGV4ZXNDdXJyZW50KG92ZXJyaWRlcz86IE92ZXJyaWRlcyk6IFByb21pc2U8YmlnaW50W10+IHtcbiAgICAgIHJldHVybiBhd2FpdCB0aGlzLnZpZXcuY2FsbFN0YXRpYy5yZXdhcmRJbmRleGVzQ3VycmVudChcbiAgICAgICAge1xuICAgICAgICAgIGJsb2NrVGFnOiB0aGlzLmNvbnRleHQuYmxvY2tOdW1iZXIsXG4gICAgICAgICAgLi4ub3ZlcnJpZGVzLFxuICAgICAgICB9LFxuICAgICAgICB0aGlzLmNvbnRleHQucHJlcGFyZWREYXRhLFxuICAgICAgICB0aGlzLmNvbnRleHQuZ2V0RXRoQ2FsbENvbnRleHQoKSxcbiAgICAgICk7XG4gICAgfSxcbiAgICBhc3luYyB0cmFuc2ZlcihcbiAgICAgIHRvOiBzdHJpbmcsXG4gICAgICBhbW91bnQ6IEJpZ051bWJlcmlzaCxcbiAgICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlcyxcbiAgICApOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICAgIHJldHVybiBhd2FpdCB0aGlzLnZpZXcuY2FsbFN0YXRpYy50cmFuc2ZlcihcbiAgICAgICAgdG8sXG4gICAgICAgIGFtb3VudCxcbiAgICAgICAge1xuICAgICAgICAgIGJsb2NrVGFnOiB0aGlzLmNvbnRleHQuYmxvY2tOdW1iZXIsXG4gICAgICAgICAgLi4ub3ZlcnJpZGVzLFxuICAgICAgICB9LFxuICAgICAgICB0aGlzLmNvbnRleHQucHJlcGFyZWREYXRhLFxuICAgICAgICB0aGlzLmNvbnRleHQuZ2V0RXRoQ2FsbENvbnRleHQoKSxcbiAgICAgICk7XG4gICAgfSxcbiAgICBhc3luYyB0cmFuc2ZlckZyb20oXG4gICAgICBmcm9tOiBzdHJpbmcsXG4gICAgICB0bzogc3RyaW5nLFxuICAgICAgYW1vdW50OiBCaWdOdW1iZXJpc2gsXG4gICAgICBvdmVycmlkZXM/OiBPdmVycmlkZXMsXG4gICAgKTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgICByZXR1cm4gYXdhaXQgdGhpcy52aWV3LmNhbGxTdGF0aWMudHJhbnNmZXJGcm9tKFxuICAgICAgICBmcm9tLFxuICAgICAgICB0byxcbiAgICAgICAgYW1vdW50LFxuICAgICAgICB7XG4gICAgICAgICAgYmxvY2tUYWc6IHRoaXMuY29udGV4dC5ibG9ja051bWJlcixcbiAgICAgICAgICAuLi5vdmVycmlkZXMsXG4gICAgICAgIH0sXG4gICAgICAgIHRoaXMuY29udGV4dC5wcmVwYXJlZERhdGEsXG4gICAgICAgIHRoaXMuY29udGV4dC5nZXRFdGhDYWxsQ29udGV4dCgpLFxuICAgICAgKTtcbiAgICB9LFxuICB9O1xuXG4gIGVuY29kZUNhbGwgPSB7XG4gICAgdmlldzogdGhpcy52aWV3LFxuICAgIGNvbnRleHQ6IHRoaXMuY29udGV4dCxcblxuICAgIGFjY3J1ZWRSZXdhcmRzKHVzZXI6IHN0cmluZywgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzKTogRXRoQ2FsbFBhcmFtIHtcbiAgICAgIHJldHVybiB0aGlzLnZpZXcuZW5jb2RlQ2FsbC5hY2NydWVkUmV3YXJkcyh1c2VyLCB7XG4gICAgICAgIGNoYWluSWQ6IHRoaXMuY29udGV4dC5jaGFpbklkLnRvU3RyaW5nKCksXG4gICAgICAgIGFkZHJlc3M6IHRoaXMuY29udGV4dC5hZGRyZXNzLFxuICAgICAgICBibG9ja1RhZzogdGhpcy5jb250ZXh0LmdldEJsb2NrVGFnKG92ZXJyaWRlcyksXG4gICAgICB9KTtcbiAgICB9LFxuICAgIGFsbG93YW5jZShcbiAgICAgIG93bmVyOiBzdHJpbmcsXG4gICAgICBzcGVuZGVyOiBzdHJpbmcsXG4gICAgICBvdmVycmlkZXM/OiBPdmVycmlkZXMsXG4gICAgKTogRXRoQ2FsbFBhcmFtIHtcbiAgICAgIHJldHVybiB0aGlzLnZpZXcuZW5jb2RlQ2FsbC5hbGxvd2FuY2Uob3duZXIsIHNwZW5kZXIsIHtcbiAgICAgICAgY2hhaW5JZDogdGhpcy5jb250ZXh0LmNoYWluSWQudG9TdHJpbmcoKSxcbiAgICAgICAgYWRkcmVzczogdGhpcy5jb250ZXh0LmFkZHJlc3MsXG4gICAgICAgIGJsb2NrVGFnOiB0aGlzLmNvbnRleHQuZ2V0QmxvY2tUYWcob3ZlcnJpZGVzKSxcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgYXBwcm92ZShcbiAgICAgIHNwZW5kZXI6IHN0cmluZyxcbiAgICAgIGFtb3VudDogQmlnTnVtYmVyaXNoLFxuICAgICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzLFxuICAgICk6IEV0aENhbGxQYXJhbSB7XG4gICAgICByZXR1cm4gdGhpcy52aWV3LmVuY29kZUNhbGwuYXBwcm92ZShzcGVuZGVyLCBhbW91bnQsIHtcbiAgICAgICAgY2hhaW5JZDogdGhpcy5jb250ZXh0LmNoYWluSWQudG9TdHJpbmcoKSxcbiAgICAgICAgYWRkcmVzczogdGhpcy5jb250ZXh0LmFkZHJlc3MsXG4gICAgICAgIGJsb2NrVGFnOiB0aGlzLmNvbnRleHQuZ2V0QmxvY2tUYWcob3ZlcnJpZGVzKSxcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgYXNzZXRJbmZvKG92ZXJyaWRlcz86IE92ZXJyaWRlcyk6IEV0aENhbGxQYXJhbSB7XG4gICAgICByZXR1cm4gdGhpcy52aWV3LmVuY29kZUNhbGwuYXNzZXRJbmZvKHtcbiAgICAgICAgY2hhaW5JZDogdGhpcy5jb250ZXh0LmNoYWluSWQudG9TdHJpbmcoKSxcbiAgICAgICAgYWRkcmVzczogdGhpcy5jb250ZXh0LmFkZHJlc3MsXG4gICAgICAgIGJsb2NrVGFnOiB0aGlzLmNvbnRleHQuZ2V0QmxvY2tUYWcob3ZlcnJpZGVzKSxcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgYmFsYW5jZU9mKGFjY291bnQ6IHN0cmluZywgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzKTogRXRoQ2FsbFBhcmFtIHtcbiAgICAgIHJldHVybiB0aGlzLnZpZXcuZW5jb2RlQ2FsbC5iYWxhbmNlT2YoYWNjb3VudCwge1xuICAgICAgICBjaGFpbklkOiB0aGlzLmNvbnRleHQuY2hhaW5JZC50b1N0cmluZygpLFxuICAgICAgICBhZGRyZXNzOiB0aGlzLmNvbnRleHQuYWRkcmVzcyxcbiAgICAgICAgYmxvY2tUYWc6IHRoaXMuY29udGV4dC5nZXRCbG9ja1RhZyhvdmVycmlkZXMpLFxuICAgICAgfSk7XG4gICAgfSxcbiAgICBjbGFpbVJld2FyZHModXNlcjogc3RyaW5nLCBvdmVycmlkZXM/OiBPdmVycmlkZXMpOiBFdGhDYWxsUGFyYW0ge1xuICAgICAgcmV0dXJuIHRoaXMudmlldy5lbmNvZGVDYWxsLmNsYWltUmV3YXJkcyh1c2VyLCB7XG4gICAgICAgIGNoYWluSWQ6IHRoaXMuY29udGV4dC5jaGFpbklkLnRvU3RyaW5nKCksXG4gICAgICAgIGFkZHJlc3M6IHRoaXMuY29udGV4dC5hZGRyZXNzLFxuICAgICAgICBibG9ja1RhZzogdGhpcy5jb250ZXh0LmdldEJsb2NrVGFnKG92ZXJyaWRlcyksXG4gICAgICB9KTtcbiAgICB9LFxuICAgIGRlY2ltYWxzKG92ZXJyaWRlcz86IE92ZXJyaWRlcyk6IEV0aENhbGxQYXJhbSB7XG4gICAgICByZXR1cm4gdGhpcy52aWV3LmVuY29kZUNhbGwuZGVjaW1hbHMoe1xuICAgICAgICBjaGFpbklkOiB0aGlzLmNvbnRleHQuY2hhaW5JZC50b1N0cmluZygpLFxuICAgICAgICBhZGRyZXNzOiB0aGlzLmNvbnRleHQuYWRkcmVzcyxcbiAgICAgICAgYmxvY2tUYWc6IHRoaXMuY29udGV4dC5nZXRCbG9ja1RhZyhvdmVycmlkZXMpLFxuICAgICAgfSk7XG4gICAgfSxcbiAgICBkZXBvc2l0KFxuICAgICAgcmVjZWl2ZXI6IHN0cmluZyxcbiAgICAgIHRva2VuSW46IHN0cmluZyxcbiAgICAgIGFtb3VudFRva2VuVG9EZXBvc2l0OiBCaWdOdW1iZXJpc2gsXG4gICAgICBtaW5TaGFyZXNPdXQ6IEJpZ051bWJlcmlzaCxcbiAgICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlcyxcbiAgICApOiBFdGhDYWxsUGFyYW0ge1xuICAgICAgcmV0dXJuIHRoaXMudmlldy5lbmNvZGVDYWxsLmRlcG9zaXQoXG4gICAgICAgIHJlY2VpdmVyLFxuICAgICAgICB0b2tlbkluLFxuICAgICAgICBhbW91bnRUb2tlblRvRGVwb3NpdCxcbiAgICAgICAgbWluU2hhcmVzT3V0LFxuICAgICAgICB7XG4gICAgICAgICAgY2hhaW5JZDogdGhpcy5jb250ZXh0LmNoYWluSWQudG9TdHJpbmcoKSxcbiAgICAgICAgICBhZGRyZXNzOiB0aGlzLmNvbnRleHQuYWRkcmVzcyxcbiAgICAgICAgICBibG9ja1RhZzogdGhpcy5jb250ZXh0LmdldEJsb2NrVGFnKG92ZXJyaWRlcyksXG4gICAgICAgIH0sXG4gICAgICApO1xuICAgIH0sXG4gICAgZXhjaGFuZ2VSYXRlKG92ZXJyaWRlcz86IE92ZXJyaWRlcyk6IEV0aENhbGxQYXJhbSB7XG4gICAgICByZXR1cm4gdGhpcy52aWV3LmVuY29kZUNhbGwuZXhjaGFuZ2VSYXRlKHtcbiAgICAgICAgY2hhaW5JZDogdGhpcy5jb250ZXh0LmNoYWluSWQudG9TdHJpbmcoKSxcbiAgICAgICAgYWRkcmVzczogdGhpcy5jb250ZXh0LmFkZHJlc3MsXG4gICAgICAgIGJsb2NrVGFnOiB0aGlzLmNvbnRleHQuZ2V0QmxvY2tUYWcob3ZlcnJpZGVzKSxcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgZ2V0UmV3YXJkVG9rZW5zKG92ZXJyaWRlcz86IE92ZXJyaWRlcyk6IEV0aENhbGxQYXJhbSB7XG4gICAgICByZXR1cm4gdGhpcy52aWV3LmVuY29kZUNhbGwuZ2V0UmV3YXJkVG9rZW5zKHtcbiAgICAgICAgY2hhaW5JZDogdGhpcy5jb250ZXh0LmNoYWluSWQudG9TdHJpbmcoKSxcbiAgICAgICAgYWRkcmVzczogdGhpcy5jb250ZXh0LmFkZHJlc3MsXG4gICAgICAgIGJsb2NrVGFnOiB0aGlzLmNvbnRleHQuZ2V0QmxvY2tUYWcob3ZlcnJpZGVzKSxcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgZ2V0VG9rZW5zSW4ob3ZlcnJpZGVzPzogT3ZlcnJpZGVzKTogRXRoQ2FsbFBhcmFtIHtcbiAgICAgIHJldHVybiB0aGlzLnZpZXcuZW5jb2RlQ2FsbC5nZXRUb2tlbnNJbih7XG4gICAgICAgIGNoYWluSWQ6IHRoaXMuY29udGV4dC5jaGFpbklkLnRvU3RyaW5nKCksXG4gICAgICAgIGFkZHJlc3M6IHRoaXMuY29udGV4dC5hZGRyZXNzLFxuICAgICAgICBibG9ja1RhZzogdGhpcy5jb250ZXh0LmdldEJsb2NrVGFnKG92ZXJyaWRlcyksXG4gICAgICB9KTtcbiAgICB9LFxuICAgIGdldFRva2Vuc091dChvdmVycmlkZXM/OiBPdmVycmlkZXMpOiBFdGhDYWxsUGFyYW0ge1xuICAgICAgcmV0dXJuIHRoaXMudmlldy5lbmNvZGVDYWxsLmdldFRva2Vuc091dCh7XG4gICAgICAgIGNoYWluSWQ6IHRoaXMuY29udGV4dC5jaGFpbklkLnRvU3RyaW5nKCksXG4gICAgICAgIGFkZHJlc3M6IHRoaXMuY29udGV4dC5hZGRyZXNzLFxuICAgICAgICBibG9ja1RhZzogdGhpcy5jb250ZXh0LmdldEJsb2NrVGFnKG92ZXJyaWRlcyksXG4gICAgICB9KTtcbiAgICB9LFxuICAgIGlzVmFsaWRUb2tlbkluKHRva2VuOiBzdHJpbmcsIG92ZXJyaWRlcz86IE92ZXJyaWRlcyk6IEV0aENhbGxQYXJhbSB7XG4gICAgICByZXR1cm4gdGhpcy52aWV3LmVuY29kZUNhbGwuaXNWYWxpZFRva2VuSW4odG9rZW4sIHtcbiAgICAgICAgY2hhaW5JZDogdGhpcy5jb250ZXh0LmNoYWluSWQudG9TdHJpbmcoKSxcbiAgICAgICAgYWRkcmVzczogdGhpcy5jb250ZXh0LmFkZHJlc3MsXG4gICAgICAgIGJsb2NrVGFnOiB0aGlzLmNvbnRleHQuZ2V0QmxvY2tUYWcob3ZlcnJpZGVzKSxcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgaXNWYWxpZFRva2VuT3V0KHRva2VuOiBzdHJpbmcsIG92ZXJyaWRlcz86IE92ZXJyaWRlcyk6IEV0aENhbGxQYXJhbSB7XG4gICAgICByZXR1cm4gdGhpcy52aWV3LmVuY29kZUNhbGwuaXNWYWxpZFRva2VuT3V0KHRva2VuLCB7XG4gICAgICAgIGNoYWluSWQ6IHRoaXMuY29udGV4dC5jaGFpbklkLnRvU3RyaW5nKCksXG4gICAgICAgIGFkZHJlc3M6IHRoaXMuY29udGV4dC5hZGRyZXNzLFxuICAgICAgICBibG9ja1RhZzogdGhpcy5jb250ZXh0LmdldEJsb2NrVGFnKG92ZXJyaWRlcyksXG4gICAgICB9KTtcbiAgICB9LFxuICAgIG5hbWUob3ZlcnJpZGVzPzogT3ZlcnJpZGVzKTogRXRoQ2FsbFBhcmFtIHtcbiAgICAgIHJldHVybiB0aGlzLnZpZXcuZW5jb2RlQ2FsbC5uYW1lKHtcbiAgICAgICAgY2hhaW5JZDogdGhpcy5jb250ZXh0LmNoYWluSWQudG9TdHJpbmcoKSxcbiAgICAgICAgYWRkcmVzczogdGhpcy5jb250ZXh0LmFkZHJlc3MsXG4gICAgICAgIGJsb2NrVGFnOiB0aGlzLmNvbnRleHQuZ2V0QmxvY2tUYWcob3ZlcnJpZGVzKSxcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgcHJldmlld0RlcG9zaXQoXG4gICAgICB0b2tlbkluOiBzdHJpbmcsXG4gICAgICBhbW91bnRUb2tlblRvRGVwb3NpdDogQmlnTnVtYmVyaXNoLFxuICAgICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzLFxuICAgICk6IEV0aENhbGxQYXJhbSB7XG4gICAgICByZXR1cm4gdGhpcy52aWV3LmVuY29kZUNhbGwucHJldmlld0RlcG9zaXQoXG4gICAgICAgIHRva2VuSW4sXG4gICAgICAgIGFtb3VudFRva2VuVG9EZXBvc2l0LFxuICAgICAgICB7XG4gICAgICAgICAgY2hhaW5JZDogdGhpcy5jb250ZXh0LmNoYWluSWQudG9TdHJpbmcoKSxcbiAgICAgICAgICBhZGRyZXNzOiB0aGlzLmNvbnRleHQuYWRkcmVzcyxcbiAgICAgICAgICBibG9ja1RhZzogdGhpcy5jb250ZXh0LmdldEJsb2NrVGFnKG92ZXJyaWRlcyksXG4gICAgICAgIH0sXG4gICAgICApO1xuICAgIH0sXG4gICAgcHJldmlld1JlZGVlbShcbiAgICAgIHRva2VuT3V0OiBzdHJpbmcsXG4gICAgICBhbW91bnRTaGFyZXNUb1JlZGVlbTogQmlnTnVtYmVyaXNoLFxuICAgICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzLFxuICAgICk6IEV0aENhbGxQYXJhbSB7XG4gICAgICByZXR1cm4gdGhpcy52aWV3LmVuY29kZUNhbGwucHJldmlld1JlZGVlbShcbiAgICAgICAgdG9rZW5PdXQsXG4gICAgICAgIGFtb3VudFNoYXJlc1RvUmVkZWVtLFxuICAgICAgICB7XG4gICAgICAgICAgY2hhaW5JZDogdGhpcy5jb250ZXh0LmNoYWluSWQudG9TdHJpbmcoKSxcbiAgICAgICAgICBhZGRyZXNzOiB0aGlzLmNvbnRleHQuYWRkcmVzcyxcbiAgICAgICAgICBibG9ja1RhZzogdGhpcy5jb250ZXh0LmdldEJsb2NrVGFnKG92ZXJyaWRlcyksXG4gICAgICAgIH0sXG4gICAgICApO1xuICAgIH0sXG4gICAgcmVkZWVtKFxuICAgICAgcmVjZWl2ZXI6IHN0cmluZyxcbiAgICAgIGFtb3VudFNoYXJlc1RvUmVkZWVtOiBCaWdOdW1iZXJpc2gsXG4gICAgICB0b2tlbk91dDogc3RyaW5nLFxuICAgICAgbWluVG9rZW5PdXQ6IEJpZ051bWJlcmlzaCxcbiAgICAgIGJ1cm5Gcm9tSW50ZXJuYWxCYWxhbmNlOiBib29sZWFuLFxuICAgICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzLFxuICAgICk6IEV0aENhbGxQYXJhbSB7XG4gICAgICByZXR1cm4gdGhpcy52aWV3LmVuY29kZUNhbGwucmVkZWVtKFxuICAgICAgICByZWNlaXZlcixcbiAgICAgICAgYW1vdW50U2hhcmVzVG9SZWRlZW0sXG4gICAgICAgIHRva2VuT3V0LFxuICAgICAgICBtaW5Ub2tlbk91dCxcbiAgICAgICAgYnVybkZyb21JbnRlcm5hbEJhbGFuY2UsXG4gICAgICAgIHtcbiAgICAgICAgICBjaGFpbklkOiB0aGlzLmNvbnRleHQuY2hhaW5JZC50b1N0cmluZygpLFxuICAgICAgICAgIGFkZHJlc3M6IHRoaXMuY29udGV4dC5hZGRyZXNzLFxuICAgICAgICAgIGJsb2NrVGFnOiB0aGlzLmNvbnRleHQuZ2V0QmxvY2tUYWcob3ZlcnJpZGVzKSxcbiAgICAgICAgfSxcbiAgICAgICk7XG4gICAgfSxcbiAgICByZXdhcmRJbmRleGVzQ3VycmVudChvdmVycmlkZXM/OiBPdmVycmlkZXMpOiBFdGhDYWxsUGFyYW0ge1xuICAgICAgcmV0dXJuIHRoaXMudmlldy5lbmNvZGVDYWxsLnJld2FyZEluZGV4ZXNDdXJyZW50KHtcbiAgICAgICAgY2hhaW5JZDogdGhpcy5jb250ZXh0LmNoYWluSWQudG9TdHJpbmcoKSxcbiAgICAgICAgYWRkcmVzczogdGhpcy5jb250ZXh0LmFkZHJlc3MsXG4gICAgICAgIGJsb2NrVGFnOiB0aGlzLmNvbnRleHQuZ2V0QmxvY2tUYWcob3ZlcnJpZGVzKSxcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgcmV3YXJkSW5kZXhlc1N0b3JlZChvdmVycmlkZXM/OiBPdmVycmlkZXMpOiBFdGhDYWxsUGFyYW0ge1xuICAgICAgcmV0dXJuIHRoaXMudmlldy5lbmNvZGVDYWxsLnJld2FyZEluZGV4ZXNTdG9yZWQoe1xuICAgICAgICBjaGFpbklkOiB0aGlzLmNvbnRleHQuY2hhaW5JZC50b1N0cmluZygpLFxuICAgICAgICBhZGRyZXNzOiB0aGlzLmNvbnRleHQuYWRkcmVzcyxcbiAgICAgICAgYmxvY2tUYWc6IHRoaXMuY29udGV4dC5nZXRCbG9ja1RhZyhvdmVycmlkZXMpLFxuICAgICAgfSk7XG4gICAgfSxcbiAgICBzeW1ib2wob3ZlcnJpZGVzPzogT3ZlcnJpZGVzKTogRXRoQ2FsbFBhcmFtIHtcbiAgICAgIHJldHVybiB0aGlzLnZpZXcuZW5jb2RlQ2FsbC5zeW1ib2woe1xuICAgICAgICBjaGFpbklkOiB0aGlzLmNvbnRleHQuY2hhaW5JZC50b1N0cmluZygpLFxuICAgICAgICBhZGRyZXNzOiB0aGlzLmNvbnRleHQuYWRkcmVzcyxcbiAgICAgICAgYmxvY2tUYWc6IHRoaXMuY29udGV4dC5nZXRCbG9ja1RhZyhvdmVycmlkZXMpLFxuICAgICAgfSk7XG4gICAgfSxcbiAgICB0b3RhbFN1cHBseShvdmVycmlkZXM/OiBPdmVycmlkZXMpOiBFdGhDYWxsUGFyYW0ge1xuICAgICAgcmV0dXJuIHRoaXMudmlldy5lbmNvZGVDYWxsLnRvdGFsU3VwcGx5KHtcbiAgICAgICAgY2hhaW5JZDogdGhpcy5jb250ZXh0LmNoYWluSWQudG9TdHJpbmcoKSxcbiAgICAgICAgYWRkcmVzczogdGhpcy5jb250ZXh0LmFkZHJlc3MsXG4gICAgICAgIGJsb2NrVGFnOiB0aGlzLmNvbnRleHQuZ2V0QmxvY2tUYWcob3ZlcnJpZGVzKSxcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgdHJhbnNmZXIoXG4gICAgICB0bzogc3RyaW5nLFxuICAgICAgYW1vdW50OiBCaWdOdW1iZXJpc2gsXG4gICAgICBvdmVycmlkZXM/OiBPdmVycmlkZXMsXG4gICAgKTogRXRoQ2FsbFBhcmFtIHtcbiAgICAgIHJldHVybiB0aGlzLnZpZXcuZW5jb2RlQ2FsbC50cmFuc2Zlcih0bywgYW1vdW50LCB7XG4gICAgICAgIGNoYWluSWQ6IHRoaXMuY29udGV4dC5jaGFpbklkLnRvU3RyaW5nKCksXG4gICAgICAgIGFkZHJlc3M6IHRoaXMuY29udGV4dC5hZGRyZXNzLFxuICAgICAgICBibG9ja1RhZzogdGhpcy5jb250ZXh0LmdldEJsb2NrVGFnKG92ZXJyaWRlcyksXG4gICAgICB9KTtcbiAgICB9LFxuICAgIHRyYW5zZmVyRnJvbShcbiAgICAgIGZyb206IHN0cmluZyxcbiAgICAgIHRvOiBzdHJpbmcsXG4gICAgICBhbW91bnQ6IEJpZ051bWJlcmlzaCxcbiAgICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlcyxcbiAgICApOiBFdGhDYWxsUGFyYW0ge1xuICAgICAgcmV0dXJuIHRoaXMudmlldy5lbmNvZGVDYWxsLnRyYW5zZmVyRnJvbShmcm9tLCB0bywgYW1vdW50LCB7XG4gICAgICAgIGNoYWluSWQ6IHRoaXMuY29udGV4dC5jaGFpbklkLnRvU3RyaW5nKCksXG4gICAgICAgIGFkZHJlc3M6IHRoaXMuY29udGV4dC5hZGRyZXNzLFxuICAgICAgICBibG9ja1RhZzogdGhpcy5jb250ZXh0LmdldEJsb2NrVGFnKG92ZXJyaWRlcyksXG4gICAgICB9KTtcbiAgICB9LFxuICAgIHlpZWxkVG9rZW4ob3ZlcnJpZGVzPzogT3ZlcnJpZGVzKTogRXRoQ2FsbFBhcmFtIHtcbiAgICAgIHJldHVybiB0aGlzLnZpZXcuZW5jb2RlQ2FsbC55aWVsZFRva2VuKHtcbiAgICAgICAgY2hhaW5JZDogdGhpcy5jb250ZXh0LmNoYWluSWQudG9TdHJpbmcoKSxcbiAgICAgICAgYWRkcmVzczogdGhpcy5jb250ZXh0LmFkZHJlc3MsXG4gICAgICAgIGJsb2NrVGFnOiB0aGlzLmNvbnRleHQuZ2V0QmxvY2tUYWcob3ZlcnJpZGVzKSxcbiAgICAgIH0pO1xuICAgIH0sXG4gIH07XG59XG5cbmV4cG9ydCB0eXBlIFN0YW5kYXJkaXplZFlpZWxkQ29udGV4dCA9IENvbnRyYWN0Q29udGV4dDxcbiAgU3RhbmRhcmRpemVkWWllbGQsXG4gIFN0YW5kYXJkaXplZFlpZWxkQm91bmRDb250cmFjdFZpZXdcbj47XG5cbmV4cG9ydCBjbGFzcyBTdGFuZGFyZGl6ZWRZaWVsZFByb2Nlc3NvciBleHRlbmRzIEJhc2VQcm9jZXNzb3I8XG4gIFN0YW5kYXJkaXplZFlpZWxkLFxuICBTdGFuZGFyZGl6ZWRZaWVsZEJvdW5kQ29udHJhY3RWaWV3XG4+IHtcbiAgb25FdmVudEFwcHJvdmFsKFxuICAgIGhhbmRsZXI6IChldmVudDogQXBwcm92YWxFdmVudCwgY3R4OiBTdGFuZGFyZGl6ZWRZaWVsZENvbnRleHQpID0+IHZvaWQsXG4gICAgZmlsdGVyPzogQXBwcm92YWxFdmVudEZpbHRlciB8IEFwcHJvdmFsRXZlbnRGaWx0ZXJbXSxcbiAgICBmZXRjaENvbmZpZz86IFBhcnRpYWw8RXRoRmV0Y2hDb25maWc+LFxuICAgIHByZXByb2Nlc3NIYW5kbGVyPzogKFxuICAgICAgZXZlbnQ6IEFwcHJvdmFsRXZlbnQsXG4gICAgICBjdHg6IFN0YW5kYXJkaXplZFlpZWxkQ29udGV4dCxcbiAgICAgIHByZXByb2Nlc3NTdG9yZTogeyBbazogc3RyaW5nXTogYW55IH0sXG4gICAgKSA9PiBQcm9taXNlPFByZXByb2Nlc3NSZXN1bHQ+LFxuICApOiB0aGlzIHtcbiAgICBpZiAoIWZpbHRlcikge1xuICAgICAgZmlsdGVyID0gdGVtcGxhdGVDb250cmFjdC5maWx0ZXJzW1wiQXBwcm92YWwoYWRkcmVzcyxhZGRyZXNzLHVpbnQyNTYpXCJdKFxuICAgICAgICBudWxsLFxuICAgICAgICBudWxsLFxuICAgICAgICBudWxsLFxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIHN1cGVyLm9uRXRoRXZlbnQoaGFuZGxlciwgZmlsdGVyISwgZmV0Y2hDb25maWcsIHByZXByb2Nlc3NIYW5kbGVyKTtcbiAgfVxuXG4gIG9uRXZlbnRDbGFpbVJld2FyZHMoXG4gICAgaGFuZGxlcjogKGV2ZW50OiBDbGFpbVJld2FyZHNFdmVudCwgY3R4OiBTdGFuZGFyZGl6ZWRZaWVsZENvbnRleHQpID0+IHZvaWQsXG4gICAgZmlsdGVyPzogQ2xhaW1SZXdhcmRzRXZlbnRGaWx0ZXIgfCBDbGFpbVJld2FyZHNFdmVudEZpbHRlcltdLFxuICAgIGZldGNoQ29uZmlnPzogUGFydGlhbDxFdGhGZXRjaENvbmZpZz4sXG4gICAgcHJlcHJvY2Vzc0hhbmRsZXI/OiAoXG4gICAgICBldmVudDogQ2xhaW1SZXdhcmRzRXZlbnQsXG4gICAgICBjdHg6IFN0YW5kYXJkaXplZFlpZWxkQ29udGV4dCxcbiAgICAgIHByZXByb2Nlc3NTdG9yZTogeyBbazogc3RyaW5nXTogYW55IH0sXG4gICAgKSA9PiBQcm9taXNlPFByZXByb2Nlc3NSZXN1bHQ+LFxuICApOiB0aGlzIHtcbiAgICBpZiAoIWZpbHRlcikge1xuICAgICAgZmlsdGVyID0gdGVtcGxhdGVDb250cmFjdC5maWx0ZXJzW1xuICAgICAgICBcIkNsYWltUmV3YXJkcyhhZGRyZXNzLGFkZHJlc3NbXSx1aW50MjU2W10pXCJcbiAgICAgIF0obnVsbCwgbnVsbCwgbnVsbCk7XG4gICAgfVxuICAgIHJldHVybiBzdXBlci5vbkV0aEV2ZW50KGhhbmRsZXIsIGZpbHRlciEsIGZldGNoQ29uZmlnLCBwcmVwcm9jZXNzSGFuZGxlcik7XG4gIH1cblxuICBvbkV2ZW50RGVwb3NpdChcbiAgICBoYW5kbGVyOiAoZXZlbnQ6IERlcG9zaXRFdmVudCwgY3R4OiBTdGFuZGFyZGl6ZWRZaWVsZENvbnRleHQpID0+IHZvaWQsXG4gICAgZmlsdGVyPzogRGVwb3NpdEV2ZW50RmlsdGVyIHwgRGVwb3NpdEV2ZW50RmlsdGVyW10sXG4gICAgZmV0Y2hDb25maWc/OiBQYXJ0aWFsPEV0aEZldGNoQ29uZmlnPixcbiAgICBwcmVwcm9jZXNzSGFuZGxlcj86IChcbiAgICAgIGV2ZW50OiBEZXBvc2l0RXZlbnQsXG4gICAgICBjdHg6IFN0YW5kYXJkaXplZFlpZWxkQ29udGV4dCxcbiAgICAgIHByZXByb2Nlc3NTdG9yZTogeyBbazogc3RyaW5nXTogYW55IH0sXG4gICAgKSA9PiBQcm9taXNlPFByZXByb2Nlc3NSZXN1bHQ+LFxuICApOiB0aGlzIHtcbiAgICBpZiAoIWZpbHRlcikge1xuICAgICAgZmlsdGVyID0gdGVtcGxhdGVDb250cmFjdC5maWx0ZXJzW1xuICAgICAgICBcIkRlcG9zaXQoYWRkcmVzcyxhZGRyZXNzLGFkZHJlc3MsdWludDI1Nix1aW50MjU2KVwiXG4gICAgICBdKG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwpO1xuICAgIH1cbiAgICByZXR1cm4gc3VwZXIub25FdGhFdmVudChoYW5kbGVyLCBmaWx0ZXIhLCBmZXRjaENvbmZpZywgcHJlcHJvY2Vzc0hhbmRsZXIpO1xuICB9XG5cbiAgb25FdmVudFJlZGVlbShcbiAgICBoYW5kbGVyOiAoZXZlbnQ6IFJlZGVlbUV2ZW50LCBjdHg6IFN0YW5kYXJkaXplZFlpZWxkQ29udGV4dCkgPT4gdm9pZCxcbiAgICBmaWx0ZXI/OiBSZWRlZW1FdmVudEZpbHRlciB8IFJlZGVlbUV2ZW50RmlsdGVyW10sXG4gICAgZmV0Y2hDb25maWc/OiBQYXJ0aWFsPEV0aEZldGNoQ29uZmlnPixcbiAgICBwcmVwcm9jZXNzSGFuZGxlcj86IChcbiAgICAgIGV2ZW50OiBSZWRlZW1FdmVudCxcbiAgICAgIGN0eDogU3RhbmRhcmRpemVkWWllbGRDb250ZXh0LFxuICAgICAgcHJlcHJvY2Vzc1N0b3JlOiB7IFtrOiBzdHJpbmddOiBhbnkgfSxcbiAgICApID0+IFByb21pc2U8UHJlcHJvY2Vzc1Jlc3VsdD4sXG4gICk6IHRoaXMge1xuICAgIGlmICghZmlsdGVyKSB7XG4gICAgICBmaWx0ZXIgPSB0ZW1wbGF0ZUNvbnRyYWN0LmZpbHRlcnNbXG4gICAgICAgIFwiUmVkZWVtKGFkZHJlc3MsYWRkcmVzcyxhZGRyZXNzLHVpbnQyNTYsdWludDI1NilcIlxuICAgICAgXShudWxsLCBudWxsLCBudWxsLCBudWxsLCBudWxsKTtcbiAgICB9XG4gICAgcmV0dXJuIHN1cGVyLm9uRXRoRXZlbnQoaGFuZGxlciwgZmlsdGVyISwgZmV0Y2hDb25maWcsIHByZXByb2Nlc3NIYW5kbGVyKTtcbiAgfVxuXG4gIG9uRXZlbnRUcmFuc2ZlcihcbiAgICBoYW5kbGVyOiAoZXZlbnQ6IFRyYW5zZmVyRXZlbnQsIGN0eDogU3RhbmRhcmRpemVkWWllbGRDb250ZXh0KSA9PiB2b2lkLFxuICAgIGZpbHRlcj86IFRyYW5zZmVyRXZlbnRGaWx0ZXIgfCBUcmFuc2ZlckV2ZW50RmlsdGVyW10sXG4gICAgZmV0Y2hDb25maWc/OiBQYXJ0aWFsPEV0aEZldGNoQ29uZmlnPixcbiAgICBwcmVwcm9jZXNzSGFuZGxlcj86IChcbiAgICAgIGV2ZW50OiBUcmFuc2ZlckV2ZW50LFxuICAgICAgY3R4OiBTdGFuZGFyZGl6ZWRZaWVsZENvbnRleHQsXG4gICAgICBwcmVwcm9jZXNzU3RvcmU6IHsgW2s6IHN0cmluZ106IGFueSB9LFxuICAgICkgPT4gUHJvbWlzZTxQcmVwcm9jZXNzUmVzdWx0PixcbiAgKTogdGhpcyB7XG4gICAgaWYgKCFmaWx0ZXIpIHtcbiAgICAgIGZpbHRlciA9IHRlbXBsYXRlQ29udHJhY3QuZmlsdGVyc1tcIlRyYW5zZmVyKGFkZHJlc3MsYWRkcmVzcyx1aW50MjU2KVwiXShcbiAgICAgICAgbnVsbCxcbiAgICAgICAgbnVsbCxcbiAgICAgICAgbnVsbCxcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiBzdXBlci5vbkV0aEV2ZW50KGhhbmRsZXIsIGZpbHRlciEsIGZldGNoQ29uZmlnLCBwcmVwcm9jZXNzSGFuZGxlcik7XG4gIH1cblxuICBvbkNhbGxBY2NydWVkUmV3YXJkcyhcbiAgICBoYW5kbGVyOiAoXG4gICAgICBjYWxsOiBBY2NydWVkUmV3YXJkc0NhbGxUcmFjZSxcbiAgICAgIGN0eDogU3RhbmRhcmRpemVkWWllbGRDb250ZXh0LFxuICAgICkgPT4gdm9pZCxcbiAgICBmZXRjaENvbmZpZz86IFBhcnRpYWw8RXRoRmV0Y2hDb25maWc+LFxuICAgIHByZXByb2Nlc3NIYW5kbGVyPzogKFxuICAgICAgY2FsbDogQWNjcnVlZFJld2FyZHNDYWxsVHJhY2UsXG4gICAgICBjdHg6IFN0YW5kYXJkaXplZFlpZWxkQ29udGV4dCxcbiAgICApID0+IFByb21pc2U8UHJlcHJvY2Vzc1Jlc3VsdD4sXG4gICk6IHRoaXMge1xuICAgIHJldHVybiBzdXBlci5vbkV0aFRyYWNlKFxuICAgICAgXCIweDEyOGZjZWQxXCIsXG4gICAgICBoYW5kbGVyIGFzIGFueSxcbiAgICAgIGZldGNoQ29uZmlnLFxuICAgICAgcHJlcHJvY2Vzc0hhbmRsZXIsXG4gICAgKTtcbiAgfVxuXG4gIG9uQ2FsbEFsbG93YW5jZShcbiAgICBoYW5kbGVyOiAoY2FsbDogQWxsb3dhbmNlQ2FsbFRyYWNlLCBjdHg6IFN0YW5kYXJkaXplZFlpZWxkQ29udGV4dCkgPT4gdm9pZCxcbiAgICBmZXRjaENvbmZpZz86IFBhcnRpYWw8RXRoRmV0Y2hDb25maWc+LFxuICAgIHByZXByb2Nlc3NIYW5kbGVyPzogKFxuICAgICAgY2FsbDogQWxsb3dhbmNlQ2FsbFRyYWNlLFxuICAgICAgY3R4OiBTdGFuZGFyZGl6ZWRZaWVsZENvbnRleHQsXG4gICAgKSA9PiBQcm9taXNlPFByZXByb2Nlc3NSZXN1bHQ+LFxuICApOiB0aGlzIHtcbiAgICByZXR1cm4gc3VwZXIub25FdGhUcmFjZShcbiAgICAgIFwiMHhkZDYyZWQzZVwiLFxuICAgICAgaGFuZGxlciBhcyBhbnksXG4gICAgICBmZXRjaENvbmZpZyxcbiAgICAgIHByZXByb2Nlc3NIYW5kbGVyLFxuICAgICk7XG4gIH1cblxuICBvbkNhbGxBcHByb3ZlKFxuICAgIGhhbmRsZXI6IChjYWxsOiBBcHByb3ZlQ2FsbFRyYWNlLCBjdHg6IFN0YW5kYXJkaXplZFlpZWxkQ29udGV4dCkgPT4gdm9pZCxcbiAgICBmZXRjaENvbmZpZz86IFBhcnRpYWw8RXRoRmV0Y2hDb25maWc+LFxuICAgIHByZXByb2Nlc3NIYW5kbGVyPzogKFxuICAgICAgY2FsbDogQXBwcm92ZUNhbGxUcmFjZSxcbiAgICAgIGN0eDogU3RhbmRhcmRpemVkWWllbGRDb250ZXh0LFxuICAgICkgPT4gUHJvbWlzZTxQcmVwcm9jZXNzUmVzdWx0PixcbiAgKTogdGhpcyB7XG4gICAgcmV0dXJuIHN1cGVyLm9uRXRoVHJhY2UoXG4gICAgICBcIjB4MDk1ZWE3YjNcIixcbiAgICAgIGhhbmRsZXIgYXMgYW55LFxuICAgICAgZmV0Y2hDb25maWcsXG4gICAgICBwcmVwcm9jZXNzSGFuZGxlcixcbiAgICApO1xuICB9XG5cbiAgb25DYWxsQXNzZXRJbmZvKFxuICAgIGhhbmRsZXI6IChjYWxsOiBBc3NldEluZm9DYWxsVHJhY2UsIGN0eDogU3RhbmRhcmRpemVkWWllbGRDb250ZXh0KSA9PiB2b2lkLFxuICAgIGZldGNoQ29uZmlnPzogUGFydGlhbDxFdGhGZXRjaENvbmZpZz4sXG4gICAgcHJlcHJvY2Vzc0hhbmRsZXI/OiAoXG4gICAgICBjYWxsOiBBc3NldEluZm9DYWxsVHJhY2UsXG4gICAgICBjdHg6IFN0YW5kYXJkaXplZFlpZWxkQ29udGV4dCxcbiAgICApID0+IFByb21pc2U8UHJlcHJvY2Vzc1Jlc3VsdD4sXG4gICk6IHRoaXMge1xuICAgIHJldHVybiBzdXBlci5vbkV0aFRyYWNlKFxuICAgICAgXCIweGE0MGJlZTUwXCIsXG4gICAgICBoYW5kbGVyIGFzIGFueSxcbiAgICAgIGZldGNoQ29uZmlnLFxuICAgICAgcHJlcHJvY2Vzc0hhbmRsZXIsXG4gICAgKTtcbiAgfVxuXG4gIG9uQ2FsbEJhbGFuY2VPZihcbiAgICBoYW5kbGVyOiAoY2FsbDogQmFsYW5jZU9mQ2FsbFRyYWNlLCBjdHg6IFN0YW5kYXJkaXplZFlpZWxkQ29udGV4dCkgPT4gdm9pZCxcbiAgICBmZXRjaENvbmZpZz86IFBhcnRpYWw8RXRoRmV0Y2hDb25maWc+LFxuICAgIHByZXByb2Nlc3NIYW5kbGVyPzogKFxuICAgICAgY2FsbDogQmFsYW5jZU9mQ2FsbFRyYWNlLFxuICAgICAgY3R4OiBTdGFuZGFyZGl6ZWRZaWVsZENvbnRleHQsXG4gICAgKSA9PiBQcm9taXNlPFByZXByb2Nlc3NSZXN1bHQ+LFxuICApOiB0aGlzIHtcbiAgICByZXR1cm4gc3VwZXIub25FdGhUcmFjZShcbiAgICAgIFwiMHg3MGEwODIzMVwiLFxuICAgICAgaGFuZGxlciBhcyBhbnksXG4gICAgICBmZXRjaENvbmZpZyxcbiAgICAgIHByZXByb2Nlc3NIYW5kbGVyLFxuICAgICk7XG4gIH1cblxuICBvbkNhbGxDbGFpbVJld2FyZHMoXG4gICAgaGFuZGxlcjogKFxuICAgICAgY2FsbDogQ2xhaW1SZXdhcmRzQ2FsbFRyYWNlLFxuICAgICAgY3R4OiBTdGFuZGFyZGl6ZWRZaWVsZENvbnRleHQsXG4gICAgKSA9PiB2b2lkLFxuICAgIGZldGNoQ29uZmlnPzogUGFydGlhbDxFdGhGZXRjaENvbmZpZz4sXG4gICAgcHJlcHJvY2Vzc0hhbmRsZXI/OiAoXG4gICAgICBjYWxsOiBDbGFpbVJld2FyZHNDYWxsVHJhY2UsXG4gICAgICBjdHg6IFN0YW5kYXJkaXplZFlpZWxkQ29udGV4dCxcbiAgICApID0+IFByb21pc2U8UHJlcHJvY2Vzc1Jlc3VsdD4sXG4gICk6IHRoaXMge1xuICAgIHJldHVybiBzdXBlci5vbkV0aFRyYWNlKFxuICAgICAgXCIweGVmNWNmYjhjXCIsXG4gICAgICBoYW5kbGVyIGFzIGFueSxcbiAgICAgIGZldGNoQ29uZmlnLFxuICAgICAgcHJlcHJvY2Vzc0hhbmRsZXIsXG4gICAgKTtcbiAgfVxuXG4gIG9uQ2FsbERlY2ltYWxzKFxuICAgIGhhbmRsZXI6IChjYWxsOiBEZWNpbWFsc0NhbGxUcmFjZSwgY3R4OiBTdGFuZGFyZGl6ZWRZaWVsZENvbnRleHQpID0+IHZvaWQsXG4gICAgZmV0Y2hDb25maWc/OiBQYXJ0aWFsPEV0aEZldGNoQ29uZmlnPixcbiAgICBwcmVwcm9jZXNzSGFuZGxlcj86IChcbiAgICAgIGNhbGw6IERlY2ltYWxzQ2FsbFRyYWNlLFxuICAgICAgY3R4OiBTdGFuZGFyZGl6ZWRZaWVsZENvbnRleHQsXG4gICAgKSA9PiBQcm9taXNlPFByZXByb2Nlc3NSZXN1bHQ+LFxuICApOiB0aGlzIHtcbiAgICByZXR1cm4gc3VwZXIub25FdGhUcmFjZShcbiAgICAgIFwiMHgzMTNjZTU2N1wiLFxuICAgICAgaGFuZGxlciBhcyBhbnksXG4gICAgICBmZXRjaENvbmZpZyxcbiAgICAgIHByZXByb2Nlc3NIYW5kbGVyLFxuICAgICk7XG4gIH1cblxuICBvbkNhbGxEZXBvc2l0KFxuICAgIGhhbmRsZXI6IChjYWxsOiBEZXBvc2l0Q2FsbFRyYWNlLCBjdHg6IFN0YW5kYXJkaXplZFlpZWxkQ29udGV4dCkgPT4gdm9pZCxcbiAgICBmZXRjaENvbmZpZz86IFBhcnRpYWw8RXRoRmV0Y2hDb25maWc+LFxuICAgIHByZXByb2Nlc3NIYW5kbGVyPzogKFxuICAgICAgY2FsbDogRGVwb3NpdENhbGxUcmFjZSxcbiAgICAgIGN0eDogU3RhbmRhcmRpemVkWWllbGRDb250ZXh0LFxuICAgICkgPT4gUHJvbWlzZTxQcmVwcm9jZXNzUmVzdWx0PixcbiAgKTogdGhpcyB7XG4gICAgcmV0dXJuIHN1cGVyLm9uRXRoVHJhY2UoXG4gICAgICBcIjB4MjBlOGM1NjVcIixcbiAgICAgIGhhbmRsZXIgYXMgYW55LFxuICAgICAgZmV0Y2hDb25maWcsXG4gICAgICBwcmVwcm9jZXNzSGFuZGxlcixcbiAgICApO1xuICB9XG5cbiAgb25DYWxsRXhjaGFuZ2VSYXRlKFxuICAgIGhhbmRsZXI6IChcbiAgICAgIGNhbGw6IEV4Y2hhbmdlUmF0ZUNhbGxUcmFjZSxcbiAgICAgIGN0eDogU3RhbmRhcmRpemVkWWllbGRDb250ZXh0LFxuICAgICkgPT4gdm9pZCxcbiAgICBmZXRjaENvbmZpZz86IFBhcnRpYWw8RXRoRmV0Y2hDb25maWc+LFxuICAgIHByZXByb2Nlc3NIYW5kbGVyPzogKFxuICAgICAgY2FsbDogRXhjaGFuZ2VSYXRlQ2FsbFRyYWNlLFxuICAgICAgY3R4OiBTdGFuZGFyZGl6ZWRZaWVsZENvbnRleHQsXG4gICAgKSA9PiBQcm9taXNlPFByZXByb2Nlc3NSZXN1bHQ+LFxuICApOiB0aGlzIHtcbiAgICByZXR1cm4gc3VwZXIub25FdGhUcmFjZShcbiAgICAgIFwiMHgzYmEwYjlhOVwiLFxuICAgICAgaGFuZGxlciBhcyBhbnksXG4gICAgICBmZXRjaENvbmZpZyxcbiAgICAgIHByZXByb2Nlc3NIYW5kbGVyLFxuICAgICk7XG4gIH1cblxuICBvbkNhbGxHZXRSZXdhcmRUb2tlbnMoXG4gICAgaGFuZGxlcjogKFxuICAgICAgY2FsbDogR2V0UmV3YXJkVG9rZW5zQ2FsbFRyYWNlLFxuICAgICAgY3R4OiBTdGFuZGFyZGl6ZWRZaWVsZENvbnRleHQsXG4gICAgKSA9PiB2b2lkLFxuICAgIGZldGNoQ29uZmlnPzogUGFydGlhbDxFdGhGZXRjaENvbmZpZz4sXG4gICAgcHJlcHJvY2Vzc0hhbmRsZXI/OiAoXG4gICAgICBjYWxsOiBHZXRSZXdhcmRUb2tlbnNDYWxsVHJhY2UsXG4gICAgICBjdHg6IFN0YW5kYXJkaXplZFlpZWxkQ29udGV4dCxcbiAgICApID0+IFByb21pc2U8UHJlcHJvY2Vzc1Jlc3VsdD4sXG4gICk6IHRoaXMge1xuICAgIHJldHVybiBzdXBlci5vbkV0aFRyYWNlKFxuICAgICAgXCIweGM0ZjU5ZjliXCIsXG4gICAgICBoYW5kbGVyIGFzIGFueSxcbiAgICAgIGZldGNoQ29uZmlnLFxuICAgICAgcHJlcHJvY2Vzc0hhbmRsZXIsXG4gICAgKTtcbiAgfVxuXG4gIG9uQ2FsbEdldFRva2Vuc0luKFxuICAgIGhhbmRsZXI6IChcbiAgICAgIGNhbGw6IEdldFRva2Vuc0luQ2FsbFRyYWNlLFxuICAgICAgY3R4OiBTdGFuZGFyZGl6ZWRZaWVsZENvbnRleHQsXG4gICAgKSA9PiB2b2lkLFxuICAgIGZldGNoQ29uZmlnPzogUGFydGlhbDxFdGhGZXRjaENvbmZpZz4sXG4gICAgcHJlcHJvY2Vzc0hhbmRsZXI/OiAoXG4gICAgICBjYWxsOiBHZXRUb2tlbnNJbkNhbGxUcmFjZSxcbiAgICAgIGN0eDogU3RhbmRhcmRpemVkWWllbGRDb250ZXh0LFxuICAgICkgPT4gUHJvbWlzZTxQcmVwcm9jZXNzUmVzdWx0PixcbiAgKTogdGhpcyB7XG4gICAgcmV0dXJuIHN1cGVyLm9uRXRoVHJhY2UoXG4gICAgICBcIjB4MjEzY2FlNjNcIixcbiAgICAgIGhhbmRsZXIgYXMgYW55LFxuICAgICAgZmV0Y2hDb25maWcsXG4gICAgICBwcmVwcm9jZXNzSGFuZGxlcixcbiAgICApO1xuICB9XG5cbiAgb25DYWxsR2V0VG9rZW5zT3V0KFxuICAgIGhhbmRsZXI6IChcbiAgICAgIGNhbGw6IEdldFRva2Vuc091dENhbGxUcmFjZSxcbiAgICAgIGN0eDogU3RhbmRhcmRpemVkWWllbGRDb250ZXh0LFxuICAgICkgPT4gdm9pZCxcbiAgICBmZXRjaENvbmZpZz86IFBhcnRpYWw8RXRoRmV0Y2hDb25maWc+LFxuICAgIHByZXByb2Nlc3NIYW5kbGVyPzogKFxuICAgICAgY2FsbDogR2V0VG9rZW5zT3V0Q2FsbFRyYWNlLFxuICAgICAgY3R4OiBTdGFuZGFyZGl6ZWRZaWVsZENvbnRleHQsXG4gICAgKSA9PiBQcm9taXNlPFByZXByb2Nlc3NSZXN1bHQ+LFxuICApOiB0aGlzIHtcbiAgICByZXR1cm4gc3VwZXIub25FdGhUcmFjZShcbiAgICAgIFwiMHgwNzFiYzNjOVwiLFxuICAgICAgaGFuZGxlciBhcyBhbnksXG4gICAgICBmZXRjaENvbmZpZyxcbiAgICAgIHByZXByb2Nlc3NIYW5kbGVyLFxuICAgICk7XG4gIH1cblxuICBvbkNhbGxJc1ZhbGlkVG9rZW5JbihcbiAgICBoYW5kbGVyOiAoXG4gICAgICBjYWxsOiBJc1ZhbGlkVG9rZW5JbkNhbGxUcmFjZSxcbiAgICAgIGN0eDogU3RhbmRhcmRpemVkWWllbGRDb250ZXh0LFxuICAgICkgPT4gdm9pZCxcbiAgICBmZXRjaENvbmZpZz86IFBhcnRpYWw8RXRoRmV0Y2hDb25maWc+LFxuICAgIHByZXByb2Nlc3NIYW5kbGVyPzogKFxuICAgICAgY2FsbDogSXNWYWxpZFRva2VuSW5DYWxsVHJhY2UsXG4gICAgICBjdHg6IFN0YW5kYXJkaXplZFlpZWxkQ29udGV4dCxcbiAgICApID0+IFByb21pc2U8UHJlcHJvY2Vzc1Jlc3VsdD4sXG4gICk6IHRoaXMge1xuICAgIHJldHVybiBzdXBlci5vbkV0aFRyYWNlKFxuICAgICAgXCIweGZhNWE0ZjA2XCIsXG4gICAgICBoYW5kbGVyIGFzIGFueSxcbiAgICAgIGZldGNoQ29uZmlnLFxuICAgICAgcHJlcHJvY2Vzc0hhbmRsZXIsXG4gICAgKTtcbiAgfVxuXG4gIG9uQ2FsbElzVmFsaWRUb2tlbk91dChcbiAgICBoYW5kbGVyOiAoXG4gICAgICBjYWxsOiBJc1ZhbGlkVG9rZW5PdXRDYWxsVHJhY2UsXG4gICAgICBjdHg6IFN0YW5kYXJkaXplZFlpZWxkQ29udGV4dCxcbiAgICApID0+IHZvaWQsXG4gICAgZmV0Y2hDb25maWc/OiBQYXJ0aWFsPEV0aEZldGNoQ29uZmlnPixcbiAgICBwcmVwcm9jZXNzSGFuZGxlcj86IChcbiAgICAgIGNhbGw6IElzVmFsaWRUb2tlbk91dENhbGxUcmFjZSxcbiAgICAgIGN0eDogU3RhbmRhcmRpemVkWWllbGRDb250ZXh0LFxuICAgICkgPT4gUHJvbWlzZTxQcmVwcm9jZXNzUmVzdWx0PixcbiAgKTogdGhpcyB7XG4gICAgcmV0dXJuIHN1cGVyLm9uRXRoVHJhY2UoXG4gICAgICBcIjB4Nzg0MzY3ZDZcIixcbiAgICAgIGhhbmRsZXIgYXMgYW55LFxuICAgICAgZmV0Y2hDb25maWcsXG4gICAgICBwcmVwcm9jZXNzSGFuZGxlcixcbiAgICApO1xuICB9XG5cbiAgb25DYWxsTmFtZShcbiAgICBoYW5kbGVyOiAoY2FsbDogTmFtZUNhbGxUcmFjZSwgY3R4OiBTdGFuZGFyZGl6ZWRZaWVsZENvbnRleHQpID0+IHZvaWQsXG4gICAgZmV0Y2hDb25maWc/OiBQYXJ0aWFsPEV0aEZldGNoQ29uZmlnPixcbiAgICBwcmVwcm9jZXNzSGFuZGxlcj86IChcbiAgICAgIGNhbGw6IE5hbWVDYWxsVHJhY2UsXG4gICAgICBjdHg6IFN0YW5kYXJkaXplZFlpZWxkQ29udGV4dCxcbiAgICApID0+IFByb21pc2U8UHJlcHJvY2Vzc1Jlc3VsdD4sXG4gICk6IHRoaXMge1xuICAgIHJldHVybiBzdXBlci5vbkV0aFRyYWNlKFxuICAgICAgXCIweDA2ZmRkZTAzXCIsXG4gICAgICBoYW5kbGVyIGFzIGFueSxcbiAgICAgIGZldGNoQ29uZmlnLFxuICAgICAgcHJlcHJvY2Vzc0hhbmRsZXIsXG4gICAgKTtcbiAgfVxuXG4gIG9uQ2FsbFByZXZpZXdEZXBvc2l0KFxuICAgIGhhbmRsZXI6IChcbiAgICAgIGNhbGw6IFByZXZpZXdEZXBvc2l0Q2FsbFRyYWNlLFxuICAgICAgY3R4OiBTdGFuZGFyZGl6ZWRZaWVsZENvbnRleHQsXG4gICAgKSA9PiB2b2lkLFxuICAgIGZldGNoQ29uZmlnPzogUGFydGlhbDxFdGhGZXRjaENvbmZpZz4sXG4gICAgcHJlcHJvY2Vzc0hhbmRsZXI/OiAoXG4gICAgICBjYWxsOiBQcmV2aWV3RGVwb3NpdENhbGxUcmFjZSxcbiAgICAgIGN0eDogU3RhbmRhcmRpemVkWWllbGRDb250ZXh0LFxuICAgICkgPT4gUHJvbWlzZTxQcmVwcm9jZXNzUmVzdWx0PixcbiAgKTogdGhpcyB7XG4gICAgcmV0dXJuIHN1cGVyLm9uRXRoVHJhY2UoXG4gICAgICBcIjB4YjhmODJiMjZcIixcbiAgICAgIGhhbmRsZXIgYXMgYW55LFxuICAgICAgZmV0Y2hDb25maWcsXG4gICAgICBwcmVwcm9jZXNzSGFuZGxlcixcbiAgICApO1xuICB9XG5cbiAgb25DYWxsUHJldmlld1JlZGVlbShcbiAgICBoYW5kbGVyOiAoXG4gICAgICBjYWxsOiBQcmV2aWV3UmVkZWVtQ2FsbFRyYWNlLFxuICAgICAgY3R4OiBTdGFuZGFyZGl6ZWRZaWVsZENvbnRleHQsXG4gICAgKSA9PiB2b2lkLFxuICAgIGZldGNoQ29uZmlnPzogUGFydGlhbDxFdGhGZXRjaENvbmZpZz4sXG4gICAgcHJlcHJvY2Vzc0hhbmRsZXI/OiAoXG4gICAgICBjYWxsOiBQcmV2aWV3UmVkZWVtQ2FsbFRyYWNlLFxuICAgICAgY3R4OiBTdGFuZGFyZGl6ZWRZaWVsZENvbnRleHQsXG4gICAgKSA9PiBQcm9taXNlPFByZXByb2Nlc3NSZXN1bHQ+LFxuICApOiB0aGlzIHtcbiAgICByZXR1cm4gc3VwZXIub25FdGhUcmFjZShcbiAgICAgIFwiMHhjYmU1MmFlM1wiLFxuICAgICAgaGFuZGxlciBhcyBhbnksXG4gICAgICBmZXRjaENvbmZpZyxcbiAgICAgIHByZXByb2Nlc3NIYW5kbGVyLFxuICAgICk7XG4gIH1cblxuICBvbkNhbGxSZWRlZW0oXG4gICAgaGFuZGxlcjogKGNhbGw6IFJlZGVlbUNhbGxUcmFjZSwgY3R4OiBTdGFuZGFyZGl6ZWRZaWVsZENvbnRleHQpID0+IHZvaWQsXG4gICAgZmV0Y2hDb25maWc/OiBQYXJ0aWFsPEV0aEZldGNoQ29uZmlnPixcbiAgICBwcmVwcm9jZXNzSGFuZGxlcj86IChcbiAgICAgIGNhbGw6IFJlZGVlbUNhbGxUcmFjZSxcbiAgICAgIGN0eDogU3RhbmRhcmRpemVkWWllbGRDb250ZXh0LFxuICAgICkgPT4gUHJvbWlzZTxQcmVwcm9jZXNzUmVzdWx0PixcbiAgKTogdGhpcyB7XG4gICAgcmV0dXJuIHN1cGVyLm9uRXRoVHJhY2UoXG4gICAgICBcIjB4NzY5ZjhlNWRcIixcbiAgICAgIGhhbmRsZXIgYXMgYW55LFxuICAgICAgZmV0Y2hDb25maWcsXG4gICAgICBwcmVwcm9jZXNzSGFuZGxlcixcbiAgICApO1xuICB9XG5cbiAgb25DYWxsUmV3YXJkSW5kZXhlc0N1cnJlbnQoXG4gICAgaGFuZGxlcjogKFxuICAgICAgY2FsbDogUmV3YXJkSW5kZXhlc0N1cnJlbnRDYWxsVHJhY2UsXG4gICAgICBjdHg6IFN0YW5kYXJkaXplZFlpZWxkQ29udGV4dCxcbiAgICApID0+IHZvaWQsXG4gICAgZmV0Y2hDb25maWc/OiBQYXJ0aWFsPEV0aEZldGNoQ29uZmlnPixcbiAgICBwcmVwcm9jZXNzSGFuZGxlcj86IChcbiAgICAgIGNhbGw6IFJld2FyZEluZGV4ZXNDdXJyZW50Q2FsbFRyYWNlLFxuICAgICAgY3R4OiBTdGFuZGFyZGl6ZWRZaWVsZENvbnRleHQsXG4gICAgKSA9PiBQcm9taXNlPFByZXByb2Nlc3NSZXN1bHQ+LFxuICApOiB0aGlzIHtcbiAgICByZXR1cm4gc3VwZXIub25FdGhUcmFjZShcbiAgICAgIFwiMHhmOGIyZjk5MVwiLFxuICAgICAgaGFuZGxlciBhcyBhbnksXG4gICAgICBmZXRjaENvbmZpZyxcbiAgICAgIHByZXByb2Nlc3NIYW5kbGVyLFxuICAgICk7XG4gIH1cblxuICBvbkNhbGxSZXdhcmRJbmRleGVzU3RvcmVkKFxuICAgIGhhbmRsZXI6IChcbiAgICAgIGNhbGw6IFJld2FyZEluZGV4ZXNTdG9yZWRDYWxsVHJhY2UsXG4gICAgICBjdHg6IFN0YW5kYXJkaXplZFlpZWxkQ29udGV4dCxcbiAgICApID0+IHZvaWQsXG4gICAgZmV0Y2hDb25maWc/OiBQYXJ0aWFsPEV0aEZldGNoQ29uZmlnPixcbiAgICBwcmVwcm9jZXNzSGFuZGxlcj86IChcbiAgICAgIGNhbGw6IFJld2FyZEluZGV4ZXNTdG9yZWRDYWxsVHJhY2UsXG4gICAgICBjdHg6IFN0YW5kYXJkaXplZFlpZWxkQ29udGV4dCxcbiAgICApID0+IFByb21pc2U8UHJlcHJvY2Vzc1Jlc3VsdD4sXG4gICk6IHRoaXMge1xuICAgIHJldHVybiBzdXBlci5vbkV0aFRyYWNlKFxuICAgICAgXCIweGRhODhlY2I0XCIsXG4gICAgICBoYW5kbGVyIGFzIGFueSxcbiAgICAgIGZldGNoQ29uZmlnLFxuICAgICAgcHJlcHJvY2Vzc0hhbmRsZXIsXG4gICAgKTtcbiAgfVxuXG4gIG9uQ2FsbFN5bWJvbChcbiAgICBoYW5kbGVyOiAoY2FsbDogU3ltYm9sQ2FsbFRyYWNlLCBjdHg6IFN0YW5kYXJkaXplZFlpZWxkQ29udGV4dCkgPT4gdm9pZCxcbiAgICBmZXRjaENvbmZpZz86IFBhcnRpYWw8RXRoRmV0Y2hDb25maWc+LFxuICAgIHByZXByb2Nlc3NIYW5kbGVyPzogKFxuICAgICAgY2FsbDogU3ltYm9sQ2FsbFRyYWNlLFxuICAgICAgY3R4OiBTdGFuZGFyZGl6ZWRZaWVsZENvbnRleHQsXG4gICAgKSA9PiBQcm9taXNlPFByZXByb2Nlc3NSZXN1bHQ+LFxuICApOiB0aGlzIHtcbiAgICByZXR1cm4gc3VwZXIub25FdGhUcmFjZShcbiAgICAgIFwiMHg5NWQ4OWI0MVwiLFxuICAgICAgaGFuZGxlciBhcyBhbnksXG4gICAgICBmZXRjaENvbmZpZyxcbiAgICAgIHByZXByb2Nlc3NIYW5kbGVyLFxuICAgICk7XG4gIH1cblxuICBvbkNhbGxUb3RhbFN1cHBseShcbiAgICBoYW5kbGVyOiAoXG4gICAgICBjYWxsOiBUb3RhbFN1cHBseUNhbGxUcmFjZSxcbiAgICAgIGN0eDogU3RhbmRhcmRpemVkWWllbGRDb250ZXh0LFxuICAgICkgPT4gdm9pZCxcbiAgICBmZXRjaENvbmZpZz86IFBhcnRpYWw8RXRoRmV0Y2hDb25maWc+LFxuICAgIHByZXByb2Nlc3NIYW5kbGVyPzogKFxuICAgICAgY2FsbDogVG90YWxTdXBwbHlDYWxsVHJhY2UsXG4gICAgICBjdHg6IFN0YW5kYXJkaXplZFlpZWxkQ29udGV4dCxcbiAgICApID0+IFByb21pc2U8UHJlcHJvY2Vzc1Jlc3VsdD4sXG4gICk6IHRoaXMge1xuICAgIHJldHVybiBzdXBlci5vbkV0aFRyYWNlKFxuICAgICAgXCIweDE4MTYwZGRkXCIsXG4gICAgICBoYW5kbGVyIGFzIGFueSxcbiAgICAgIGZldGNoQ29uZmlnLFxuICAgICAgcHJlcHJvY2Vzc0hhbmRsZXIsXG4gICAgKTtcbiAgfVxuXG4gIG9uQ2FsbFRyYW5zZmVyKFxuICAgIGhhbmRsZXI6IChjYWxsOiBUcmFuc2ZlckNhbGxUcmFjZSwgY3R4OiBTdGFuZGFyZGl6ZWRZaWVsZENvbnRleHQpID0+IHZvaWQsXG4gICAgZmV0Y2hDb25maWc/OiBQYXJ0aWFsPEV0aEZldGNoQ29uZmlnPixcbiAgICBwcmVwcm9jZXNzSGFuZGxlcj86IChcbiAgICAgIGNhbGw6IFRyYW5zZmVyQ2FsbFRyYWNlLFxuICAgICAgY3R4OiBTdGFuZGFyZGl6ZWRZaWVsZENvbnRleHQsXG4gICAgKSA9PiBQcm9taXNlPFByZXByb2Nlc3NSZXN1bHQ+LFxuICApOiB0aGlzIHtcbiAgICByZXR1cm4gc3VwZXIub25FdGhUcmFjZShcbiAgICAgIFwiMHhhOTA1OWNiYlwiLFxuICAgICAgaGFuZGxlciBhcyBhbnksXG4gICAgICBmZXRjaENvbmZpZyxcbiAgICAgIHByZXByb2Nlc3NIYW5kbGVyLFxuICAgICk7XG4gIH1cblxuICBvbkNhbGxUcmFuc2ZlckZyb20oXG4gICAgaGFuZGxlcjogKFxuICAgICAgY2FsbDogVHJhbnNmZXJGcm9tQ2FsbFRyYWNlLFxuICAgICAgY3R4OiBTdGFuZGFyZGl6ZWRZaWVsZENvbnRleHQsXG4gICAgKSA9PiB2b2lkLFxuICAgIGZldGNoQ29uZmlnPzogUGFydGlhbDxFdGhGZXRjaENvbmZpZz4sXG4gICAgcHJlcHJvY2Vzc0hhbmRsZXI/OiAoXG4gICAgICBjYWxsOiBUcmFuc2ZlckZyb21DYWxsVHJhY2UsXG4gICAgICBjdHg6IFN0YW5kYXJkaXplZFlpZWxkQ29udGV4dCxcbiAgICApID0+IFByb21pc2U8UHJlcHJvY2Vzc1Jlc3VsdD4sXG4gICk6IHRoaXMge1xuICAgIHJldHVybiBzdXBlci5vbkV0aFRyYWNlKFxuICAgICAgXCIweDIzYjg3MmRkXCIsXG4gICAgICBoYW5kbGVyIGFzIGFueSxcbiAgICAgIGZldGNoQ29uZmlnLFxuICAgICAgcHJlcHJvY2Vzc0hhbmRsZXIsXG4gICAgKTtcbiAgfVxuXG4gIG9uQ2FsbFlpZWxkVG9rZW4oXG4gICAgaGFuZGxlcjogKGNhbGw6IFlpZWxkVG9rZW5DYWxsVHJhY2UsIGN0eDogU3RhbmRhcmRpemVkWWllbGRDb250ZXh0KSA9PiB2b2lkLFxuICAgIGZldGNoQ29uZmlnPzogUGFydGlhbDxFdGhGZXRjaENvbmZpZz4sXG4gICAgcHJlcHJvY2Vzc0hhbmRsZXI/OiAoXG4gICAgICBjYWxsOiBZaWVsZFRva2VuQ2FsbFRyYWNlLFxuICAgICAgY3R4OiBTdGFuZGFyZGl6ZWRZaWVsZENvbnRleHQsXG4gICAgKSA9PiBQcm9taXNlPFByZXByb2Nlc3NSZXN1bHQ+LFxuICApOiB0aGlzIHtcbiAgICByZXR1cm4gc3VwZXIub25FdGhUcmFjZShcbiAgICAgIFwiMHg3NmQ1ZGU4NVwiLFxuICAgICAgaGFuZGxlciBhcyBhbnksXG4gICAgICBmZXRjaENvbmZpZyxcbiAgICAgIHByZXByb2Nlc3NIYW5kbGVyLFxuICAgICk7XG4gIH1cblxuICBwdWJsaWMgc3RhdGljIGZpbHRlcnMgPSB7XG4gICAgQXBwcm92YWwoXG4gICAgICBvd25lcj86IHN0cmluZyB8IG51bGwsXG4gICAgICBzcGVuZGVyPzogc3RyaW5nIHwgbnVsbCxcbiAgICAgIHZhbHVlPzogbnVsbCxcbiAgICApOiBBcHByb3ZhbEV2ZW50RmlsdGVyIHtcbiAgICAgIHJldHVybiB0ZW1wbGF0ZUNvbnRyYWN0LmZpbHRlcnNbXCJBcHByb3ZhbChhZGRyZXNzLGFkZHJlc3MsdWludDI1NilcIl0oXG4gICAgICAgIG93bmVyLFxuICAgICAgICBzcGVuZGVyLFxuICAgICAgICB2YWx1ZSxcbiAgICAgICk7XG4gICAgfSxcbiAgICBDbGFpbVJld2FyZHMoXG4gICAgICB1c2VyPzogc3RyaW5nIHwgbnVsbCxcbiAgICAgIHJld2FyZFRva2Vucz86IG51bGwsXG4gICAgICByZXdhcmRBbW91bnRzPzogbnVsbCxcbiAgICApOiBDbGFpbVJld2FyZHNFdmVudEZpbHRlciB7XG4gICAgICByZXR1cm4gdGVtcGxhdGVDb250cmFjdC5maWx0ZXJzW1xuICAgICAgICBcIkNsYWltUmV3YXJkcyhhZGRyZXNzLGFkZHJlc3NbXSx1aW50MjU2W10pXCJcbiAgICAgIF0odXNlciwgcmV3YXJkVG9rZW5zLCByZXdhcmRBbW91bnRzKTtcbiAgICB9LFxuICAgIERlcG9zaXQoXG4gICAgICBjYWxsZXI/OiBzdHJpbmcgfCBudWxsLFxuICAgICAgcmVjZWl2ZXI/OiBzdHJpbmcgfCBudWxsLFxuICAgICAgdG9rZW5Jbj86IHN0cmluZyB8IG51bGwsXG4gICAgICBhbW91bnREZXBvc2l0ZWQ/OiBudWxsLFxuICAgICAgYW1vdW50U3lPdXQ/OiBudWxsLFxuICAgICk6IERlcG9zaXRFdmVudEZpbHRlciB7XG4gICAgICByZXR1cm4gdGVtcGxhdGVDb250cmFjdC5maWx0ZXJzW1xuICAgICAgICBcIkRlcG9zaXQoYWRkcmVzcyxhZGRyZXNzLGFkZHJlc3MsdWludDI1Nix1aW50MjU2KVwiXG4gICAgICBdKGNhbGxlciwgcmVjZWl2ZXIsIHRva2VuSW4sIGFtb3VudERlcG9zaXRlZCwgYW1vdW50U3lPdXQpO1xuICAgIH0sXG4gICAgUmVkZWVtKFxuICAgICAgY2FsbGVyPzogc3RyaW5nIHwgbnVsbCxcbiAgICAgIHJlY2VpdmVyPzogc3RyaW5nIHwgbnVsbCxcbiAgICAgIHRva2VuT3V0Pzogc3RyaW5nIHwgbnVsbCxcbiAgICAgIGFtb3VudFN5VG9SZWRlZW0/OiBudWxsLFxuICAgICAgYW1vdW50VG9rZW5PdXQ/OiBudWxsLFxuICAgICk6IFJlZGVlbUV2ZW50RmlsdGVyIHtcbiAgICAgIHJldHVybiB0ZW1wbGF0ZUNvbnRyYWN0LmZpbHRlcnNbXG4gICAgICAgIFwiUmVkZWVtKGFkZHJlc3MsYWRkcmVzcyxhZGRyZXNzLHVpbnQyNTYsdWludDI1NilcIlxuICAgICAgXShjYWxsZXIsIHJlY2VpdmVyLCB0b2tlbk91dCwgYW1vdW50U3lUb1JlZGVlbSwgYW1vdW50VG9rZW5PdXQpO1xuICAgIH0sXG4gICAgVHJhbnNmZXIoXG4gICAgICBmcm9tPzogc3RyaW5nIHwgbnVsbCxcbiAgICAgIHRvPzogc3RyaW5nIHwgbnVsbCxcbiAgICAgIHZhbHVlPzogbnVsbCxcbiAgICApOiBUcmFuc2ZlckV2ZW50RmlsdGVyIHtcbiAgICAgIHJldHVybiB0ZW1wbGF0ZUNvbnRyYWN0LmZpbHRlcnNbXCJUcmFuc2ZlcihhZGRyZXNzLGFkZHJlc3MsdWludDI1NilcIl0oXG4gICAgICAgIGZyb20sXG4gICAgICAgIHRvLFxuICAgICAgICB2YWx1ZSxcbiAgICAgICk7XG4gICAgfSxcbiAgfTtcblxuICBwcm90ZWN0ZWQgQ3JlYXRlQm91bmRDb250cmFjdFZpZXcoKTogU3RhbmRhcmRpemVkWWllbGRCb3VuZENvbnRyYWN0VmlldyB7XG4gICAgY29uc3QgdmlldyA9IGdldFN0YW5kYXJkaXplZFlpZWxkQ29udHJhY3QoXG4gICAgICB0aGlzLmNvbmZpZy5uZXR3b3JrLFxuICAgICAgdGhpcy5jb25maWcuYWRkcmVzcyxcbiAgICApO1xuICAgIHJldHVybiBuZXcgU3RhbmRhcmRpemVkWWllbGRCb3VuZENvbnRyYWN0Vmlldyh0aGlzLmNvbmZpZy5hZGRyZXNzLCB2aWV3KTtcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgYmluZChvcHRpb25zOiBCaW5kT3B0aW9ucyk6IFN0YW5kYXJkaXplZFlpZWxkUHJvY2Vzc29yIHtcbiAgICBpZiAoIW9wdGlvbnMubmFtZSkge1xuICAgICAgb3B0aW9ucy5uYW1lID0gXCJTdGFuZGFyZGl6ZWRZaWVsZFwiO1xuICAgIH1cbiAgICBsZXQgcHJvY2Vzc29yID0gZ2V0UHJvY2Vzc29yKG9wdGlvbnMpIGFzIFN0YW5kYXJkaXplZFlpZWxkUHJvY2Vzc29yO1xuICAgIGlmICghcHJvY2Vzc29yKSB7XG4gICAgICBwcm9jZXNzb3IgPSBuZXcgU3RhbmRhcmRpemVkWWllbGRQcm9jZXNzb3Iob3B0aW9ucyk7XG4gICAgICBhZGRQcm9jZXNzb3Iob3B0aW9ucywgcHJvY2Vzc29yKTtcbiAgICB9XG4gICAgcmV0dXJuIHByb2Nlc3NvcjtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgU3RhbmRhcmRpemVkWWllbGRQcm9jZXNzb3JUZW1wbGF0ZSBleHRlbmRzIEJhc2VQcm9jZXNzb3JUZW1wbGF0ZTxcbiAgU3RhbmRhcmRpemVkWWllbGQsXG4gIFN0YW5kYXJkaXplZFlpZWxkQm91bmRDb250cmFjdFZpZXdcbj4ge1xuICBiaW5kSW50ZXJuYWwob3B0aW9uczogQmluZE9wdGlvbnMpIHtcbiAgICBpZiAoIW9wdGlvbnMubmFtZSkge1xuICAgICAgb3B0aW9ucy5uYW1lID0gXCJTdGFuZGFyZGl6ZWRZaWVsZFwiO1xuICAgIH1cbiAgICBsZXQgcHJvY2Vzc29yID0gZ2V0UHJvY2Vzc29yKG9wdGlvbnMpIGFzIFN0YW5kYXJkaXplZFlpZWxkUHJvY2Vzc29yO1xuICAgIGlmICghcHJvY2Vzc29yKSB7XG4gICAgICBwcm9jZXNzb3IgPSBuZXcgU3RhbmRhcmRpemVkWWllbGRQcm9jZXNzb3Iob3B0aW9ucyk7XG4gICAgICBhZGRQcm9jZXNzb3Iob3B0aW9ucywgcHJvY2Vzc29yKTtcbiAgICB9XG4gICAgcmV0dXJuIHByb2Nlc3NvcjtcbiAgfVxuXG4gIG9uRXZlbnRBcHByb3ZhbChcbiAgICBoYW5kbGVyOiAoZXZlbnQ6IEFwcHJvdmFsRXZlbnQsIGN0eDogU3RhbmRhcmRpemVkWWllbGRDb250ZXh0KSA9PiB2b2lkLFxuICAgIGZpbHRlcj86IEFwcHJvdmFsRXZlbnRGaWx0ZXIgfCBBcHByb3ZhbEV2ZW50RmlsdGVyW10sXG4gICAgZmV0Y2hDb25maWc/OiBQYXJ0aWFsPEV0aEZldGNoQ29uZmlnPixcbiAgICBwcmVwcm9jZXNzSGFuZGxlcj86IChcbiAgICAgIGV2ZW50OiBBcHByb3ZhbEV2ZW50LFxuICAgICAgY3R4OiBTdGFuZGFyZGl6ZWRZaWVsZENvbnRleHQsXG4gICAgICBwcmVwcm9jZXNzU3RvcmU6IHsgW2s6IHN0cmluZ106IGFueSB9LFxuICAgICkgPT4gUHJvbWlzZTxQcmVwcm9jZXNzUmVzdWx0PixcbiAgKTogdGhpcyB7XG4gICAgaWYgKCFmaWx0ZXIpIHtcbiAgICAgIGZpbHRlciA9IHRlbXBsYXRlQ29udHJhY3QuZmlsdGVyc1tcIkFwcHJvdmFsKGFkZHJlc3MsYWRkcmVzcyx1aW50MjU2KVwiXShcbiAgICAgICAgbnVsbCxcbiAgICAgICAgbnVsbCxcbiAgICAgICAgbnVsbCxcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiBzdXBlci5vbkV0aEV2ZW50KGhhbmRsZXIsIGZpbHRlciEsIGZldGNoQ29uZmlnLCBwcmVwcm9jZXNzSGFuZGxlcik7XG4gIH1cblxuICBvbkV2ZW50Q2xhaW1SZXdhcmRzKFxuICAgIGhhbmRsZXI6IChldmVudDogQ2xhaW1SZXdhcmRzRXZlbnQsIGN0eDogU3RhbmRhcmRpemVkWWllbGRDb250ZXh0KSA9PiB2b2lkLFxuICAgIGZpbHRlcj86IENsYWltUmV3YXJkc0V2ZW50RmlsdGVyIHwgQ2xhaW1SZXdhcmRzRXZlbnRGaWx0ZXJbXSxcbiAgICBmZXRjaENvbmZpZz86IFBhcnRpYWw8RXRoRmV0Y2hDb25maWc+LFxuICAgIHByZXByb2Nlc3NIYW5kbGVyPzogKFxuICAgICAgZXZlbnQ6IENsYWltUmV3YXJkc0V2ZW50LFxuICAgICAgY3R4OiBTdGFuZGFyZGl6ZWRZaWVsZENvbnRleHQsXG4gICAgICBwcmVwcm9jZXNzU3RvcmU6IHsgW2s6IHN0cmluZ106IGFueSB9LFxuICAgICkgPT4gUHJvbWlzZTxQcmVwcm9jZXNzUmVzdWx0PixcbiAgKTogdGhpcyB7XG4gICAgaWYgKCFmaWx0ZXIpIHtcbiAgICAgIGZpbHRlciA9IHRlbXBsYXRlQ29udHJhY3QuZmlsdGVyc1tcbiAgICAgICAgXCJDbGFpbVJld2FyZHMoYWRkcmVzcyxhZGRyZXNzW10sdWludDI1NltdKVwiXG4gICAgICBdKG51bGwsIG51bGwsIG51bGwpO1xuICAgIH1cbiAgICByZXR1cm4gc3VwZXIub25FdGhFdmVudChoYW5kbGVyLCBmaWx0ZXIhLCBmZXRjaENvbmZpZywgcHJlcHJvY2Vzc0hhbmRsZXIpO1xuICB9XG5cbiAgb25FdmVudERlcG9zaXQoXG4gICAgaGFuZGxlcjogKGV2ZW50OiBEZXBvc2l0RXZlbnQsIGN0eDogU3RhbmRhcmRpemVkWWllbGRDb250ZXh0KSA9PiB2b2lkLFxuICAgIGZpbHRlcj86IERlcG9zaXRFdmVudEZpbHRlciB8IERlcG9zaXRFdmVudEZpbHRlcltdLFxuICAgIGZldGNoQ29uZmlnPzogUGFydGlhbDxFdGhGZXRjaENvbmZpZz4sXG4gICAgcHJlcHJvY2Vzc0hhbmRsZXI/OiAoXG4gICAgICBldmVudDogRGVwb3NpdEV2ZW50LFxuICAgICAgY3R4OiBTdGFuZGFyZGl6ZWRZaWVsZENvbnRleHQsXG4gICAgICBwcmVwcm9jZXNzU3RvcmU6IHsgW2s6IHN0cmluZ106IGFueSB9LFxuICAgICkgPT4gUHJvbWlzZTxQcmVwcm9jZXNzUmVzdWx0PixcbiAgKTogdGhpcyB7XG4gICAgaWYgKCFmaWx0ZXIpIHtcbiAgICAgIGZpbHRlciA9IHRlbXBsYXRlQ29udHJhY3QuZmlsdGVyc1tcbiAgICAgICAgXCJEZXBvc2l0KGFkZHJlc3MsYWRkcmVzcyxhZGRyZXNzLHVpbnQyNTYsdWludDI1NilcIlxuICAgICAgXShudWxsLCBudWxsLCBudWxsLCBudWxsLCBudWxsKTtcbiAgICB9XG4gICAgcmV0dXJuIHN1cGVyLm9uRXRoRXZlbnQoaGFuZGxlciwgZmlsdGVyISwgZmV0Y2hDb25maWcsIHByZXByb2Nlc3NIYW5kbGVyKTtcbiAgfVxuXG4gIG9uRXZlbnRSZWRlZW0oXG4gICAgaGFuZGxlcjogKGV2ZW50OiBSZWRlZW1FdmVudCwgY3R4OiBTdGFuZGFyZGl6ZWRZaWVsZENvbnRleHQpID0+IHZvaWQsXG4gICAgZmlsdGVyPzogUmVkZWVtRXZlbnRGaWx0ZXIgfCBSZWRlZW1FdmVudEZpbHRlcltdLFxuICAgIGZldGNoQ29uZmlnPzogUGFydGlhbDxFdGhGZXRjaENvbmZpZz4sXG4gICAgcHJlcHJvY2Vzc0hhbmRsZXI/OiAoXG4gICAgICBldmVudDogUmVkZWVtRXZlbnQsXG4gICAgICBjdHg6IFN0YW5kYXJkaXplZFlpZWxkQ29udGV4dCxcbiAgICAgIHByZXByb2Nlc3NTdG9yZTogeyBbazogc3RyaW5nXTogYW55IH0sXG4gICAgKSA9PiBQcm9taXNlPFByZXByb2Nlc3NSZXN1bHQ+LFxuICApOiB0aGlzIHtcbiAgICBpZiAoIWZpbHRlcikge1xuICAgICAgZmlsdGVyID0gdGVtcGxhdGVDb250cmFjdC5maWx0ZXJzW1xuICAgICAgICBcIlJlZGVlbShhZGRyZXNzLGFkZHJlc3MsYWRkcmVzcyx1aW50MjU2LHVpbnQyNTYpXCJcbiAgICAgIF0obnVsbCwgbnVsbCwgbnVsbCwgbnVsbCwgbnVsbCk7XG4gICAgfVxuICAgIHJldHVybiBzdXBlci5vbkV0aEV2ZW50KGhhbmRsZXIsIGZpbHRlciEsIGZldGNoQ29uZmlnLCBwcmVwcm9jZXNzSGFuZGxlcik7XG4gIH1cblxuICBvbkV2ZW50VHJhbnNmZXIoXG4gICAgaGFuZGxlcjogKGV2ZW50OiBUcmFuc2ZlckV2ZW50LCBjdHg6IFN0YW5kYXJkaXplZFlpZWxkQ29udGV4dCkgPT4gdm9pZCxcbiAgICBmaWx0ZXI/OiBUcmFuc2ZlckV2ZW50RmlsdGVyIHwgVHJhbnNmZXJFdmVudEZpbHRlcltdLFxuICAgIGZldGNoQ29uZmlnPzogUGFydGlhbDxFdGhGZXRjaENvbmZpZz4sXG4gICAgcHJlcHJvY2Vzc0hhbmRsZXI/OiAoXG4gICAgICBldmVudDogVHJhbnNmZXJFdmVudCxcbiAgICAgIGN0eDogU3RhbmRhcmRpemVkWWllbGRDb250ZXh0LFxuICAgICAgcHJlcHJvY2Vzc1N0b3JlOiB7IFtrOiBzdHJpbmddOiBhbnkgfSxcbiAgICApID0+IFByb21pc2U8UHJlcHJvY2Vzc1Jlc3VsdD4sXG4gICk6IHRoaXMge1xuICAgIGlmICghZmlsdGVyKSB7XG4gICAgICBmaWx0ZXIgPSB0ZW1wbGF0ZUNvbnRyYWN0LmZpbHRlcnNbXCJUcmFuc2ZlcihhZGRyZXNzLGFkZHJlc3MsdWludDI1NilcIl0oXG4gICAgICAgIG51bGwsXG4gICAgICAgIG51bGwsXG4gICAgICAgIG51bGwsXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gc3VwZXIub25FdGhFdmVudChoYW5kbGVyLCBmaWx0ZXIhLCBmZXRjaENvbmZpZywgcHJlcHJvY2Vzc0hhbmRsZXIpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRTdGFuZGFyZGl6ZWRZaWVsZENvbnRyYWN0KFxuICBjaGFpbklkOiBFdGhDaGFpbklkLFxuICBhZGRyZXNzOiBzdHJpbmcsXG4pOiBTdGFuZGFyZGl6ZWRZaWVsZENvbnRyYWN0VmlldyB7XG4gIGxldCBjb250cmFjdCA9IGdldENvbnRyYWN0QnlBQkkoXG4gICAgXCJTdGFuZGFyZGl6ZWRZaWVsZFwiLFxuICAgIGFkZHJlc3MsXG4gICAgY2hhaW5JZCxcbiAgKSBhcyBTdGFuZGFyZGl6ZWRZaWVsZENvbnRyYWN0VmlldztcbiAgaWYgKCFjb250cmFjdCkge1xuICAgIGNvbnN0IHJhd0NvbnRyYWN0ID0gU3RhbmRhcmRpemVkWWllbGRfX2ZhY3RvcnkuY29ubmVjdChcbiAgICAgIGFkZHJlc3MsXG4gICAgICBnZXRQcm92aWRlcihjaGFpbklkKSxcbiAgICApO1xuICAgIGNvbnRyYWN0ID0gbmV3IFN0YW5kYXJkaXplZFlpZWxkQ29udHJhY3RWaWV3KHJhd0NvbnRyYWN0KTtcbiAgICBhZGRDb250cmFjdEJ5QUJJKFwiU3RhbmRhcmRpemVkWWllbGRcIiwgYWRkcmVzcywgY2hhaW5JZCwgY29udHJhY3QpO1xuICB9XG4gIHJldHVybiBjb250cmFjdDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFN0YW5kYXJkaXplZFlpZWxkQ29udHJhY3RPbkNvbnRleHQoXG4gIGNvbnRleHQ6IEV0aENvbnRleHQsXG4gIGFkZHJlc3M6IHN0cmluZyxcbik6IFN0YW5kYXJkaXplZFlpZWxkQm91bmRDb250cmFjdFZpZXcge1xuICBjb25zdCB2aWV3ID0gZ2V0U3RhbmRhcmRpemVkWWllbGRDb250cmFjdChjb250ZXh0LmdldENoYWluSWQoKSwgYWRkcmVzcyk7XG4gIGNvbnN0IGJvdW5kVmlldyA9IG5ldyBTdGFuZGFyZGl6ZWRZaWVsZEJvdW5kQ29udHJhY3RWaWV3KGFkZHJlc3MsIHZpZXcpO1xuICBib3VuZFZpZXcuY29udGV4dCA9IGNvbnRleHQ7XG4gIGlmIChib3VuZFZpZXcuY2FsbFN0YXRpYykge1xuICAgIGJvdW5kVmlldy5jYWxsU3RhdGljLmNvbnRleHQgPSBjb250ZXh0O1xuICB9XG4gIHJldHVybiBib3VuZFZpZXc7XG59XG4iLCAiLyogQXV0b2dlbmVyYXRlZCBmaWxlLiBEbyBub3QgZWRpdCBtYW51YWxseS4gKi9cbi8qIHRzbGludDpkaXNhYmxlICovXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xuaW1wb3J0IHsgTG9nUGFyYW1zIH0gZnJvbSBcImV0aGVycy9wcm92aWRlcnNcIjtcbmltcG9ydCB7IEV0aENoYWluSWQgfSBmcm9tIFwiQHNlbnRpby9zZGsvZXRoXCI7XG5pbXBvcnQge1xuICBBcHByb3ZhbEV2ZW50T2JqZWN0LFxuICBDbGFpbVJld2FyZHNFdmVudE9iamVjdCxcbiAgRGVwb3NpdEV2ZW50T2JqZWN0LFxuICBSZWRlZW1FdmVudE9iamVjdCxcbiAgVHJhbnNmZXJFdmVudE9iamVjdCxcbn0gZnJvbSBcIi4vU3RhbmRhcmRpemVkWWllbGQuanNcIjtcbmltcG9ydCB7IGdldFN0YW5kYXJkaXplZFlpZWxkQ29udHJhY3QgfSBmcm9tIFwiLi9zdGFuZGFyZGl6ZWR5aWVsZC1wcm9jZXNzb3IuanNcIjtcbmNvbnN0IG1vY2tGaWVsZCA9IHtcbiAgYmxvY2tIYXNoOlxuICAgIFwiMHgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwXCIsXG4gIGJsb2NrTnVtYmVyOiAwLFxuICBsb2dJbmRleDogMCxcbiAgcmVtb3ZlZDogZmFsc2UsXG4gIHRyYW5zYWN0aW9uSGFzaDpcbiAgICBcIjB4MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMFwiLFxuICB0cmFuc2FjdGlvbkluZGV4OiAwLFxufTtcblxuZXhwb3J0IGZ1bmN0aW9uIG1vY2tBcHByb3ZhbExvZyhcbiAgY29udHJhY3RBZGRyZXNzOiBzdHJpbmcsXG4gIGV2ZW50OiBBcHByb3ZhbEV2ZW50T2JqZWN0LFxuKTogTG9nUGFyYW1zIHtcbiAgY29uc3QgY29udHJhY3QgPSBnZXRTdGFuZGFyZGl6ZWRZaWVsZENvbnRyYWN0KFxuICAgIEV0aENoYWluSWQuRVRIRVJFVU0sXG4gICAgY29udHJhY3RBZGRyZXNzLFxuICApO1xuICBjb25zdCBlbmNvZGVkTG9nID0gY29udHJhY3QucmF3Q29udHJhY3QuaW50ZXJmYWNlLmVuY29kZUV2ZW50TG9nKFxuICAgIFwiQXBwcm92YWwoYWRkcmVzcyxhZGRyZXNzLHVpbnQyNTYpXCIsXG4gICAgW2V2ZW50Lm93bmVyLCBldmVudC5zcGVuZGVyLCBldmVudC52YWx1ZV0sXG4gICk7XG4gIHJldHVybiB7XG4gICAgLi4ubW9ja0ZpZWxkLFxuICAgIGluZGV4OiAwLFxuICAgIGFkZHJlc3M6IGNvbnRyYWN0QWRkcmVzcyxcbiAgICBkYXRhOiBlbmNvZGVkTG9nLmRhdGEsXG4gICAgdG9waWNzOiBlbmNvZGVkTG9nLnRvcGljcyxcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1vY2tDbGFpbVJld2FyZHNMb2coXG4gIGNvbnRyYWN0QWRkcmVzczogc3RyaW5nLFxuICBldmVudDogQ2xhaW1SZXdhcmRzRXZlbnRPYmplY3QsXG4pOiBMb2dQYXJhbXMge1xuICBjb25zdCBjb250cmFjdCA9IGdldFN0YW5kYXJkaXplZFlpZWxkQ29udHJhY3QoXG4gICAgRXRoQ2hhaW5JZC5FVEhFUkVVTSxcbiAgICBjb250cmFjdEFkZHJlc3MsXG4gICk7XG4gIGNvbnN0IGVuY29kZWRMb2cgPSBjb250cmFjdC5yYXdDb250cmFjdC5pbnRlcmZhY2UuZW5jb2RlRXZlbnRMb2coXG4gICAgXCJDbGFpbVJld2FyZHMoYWRkcmVzcyxhZGRyZXNzW10sdWludDI1NltdKVwiLFxuICAgIFtldmVudC51c2VyLCBldmVudC5yZXdhcmRUb2tlbnMsIGV2ZW50LnJld2FyZEFtb3VudHNdLFxuICApO1xuICByZXR1cm4ge1xuICAgIC4uLm1vY2tGaWVsZCxcbiAgICBpbmRleDogMCxcbiAgICBhZGRyZXNzOiBjb250cmFjdEFkZHJlc3MsXG4gICAgZGF0YTogZW5jb2RlZExvZy5kYXRhLFxuICAgIHRvcGljczogZW5jb2RlZExvZy50b3BpY3MsXG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtb2NrRGVwb3NpdExvZyhcbiAgY29udHJhY3RBZGRyZXNzOiBzdHJpbmcsXG4gIGV2ZW50OiBEZXBvc2l0RXZlbnRPYmplY3QsXG4pOiBMb2dQYXJhbXMge1xuICBjb25zdCBjb250cmFjdCA9IGdldFN0YW5kYXJkaXplZFlpZWxkQ29udHJhY3QoXG4gICAgRXRoQ2hhaW5JZC5FVEhFUkVVTSxcbiAgICBjb250cmFjdEFkZHJlc3MsXG4gICk7XG4gIGNvbnN0IGVuY29kZWRMb2cgPSBjb250cmFjdC5yYXdDb250cmFjdC5pbnRlcmZhY2UuZW5jb2RlRXZlbnRMb2coXG4gICAgXCJEZXBvc2l0KGFkZHJlc3MsYWRkcmVzcyxhZGRyZXNzLHVpbnQyNTYsdWludDI1NilcIixcbiAgICBbXG4gICAgICBldmVudC5jYWxsZXIsXG4gICAgICBldmVudC5yZWNlaXZlcixcbiAgICAgIGV2ZW50LnRva2VuSW4sXG4gICAgICBldmVudC5hbW91bnREZXBvc2l0ZWQsXG4gICAgICBldmVudC5hbW91bnRTeU91dCxcbiAgICBdLFxuICApO1xuICByZXR1cm4ge1xuICAgIC4uLm1vY2tGaWVsZCxcbiAgICBpbmRleDogMCxcbiAgICBhZGRyZXNzOiBjb250cmFjdEFkZHJlc3MsXG4gICAgZGF0YTogZW5jb2RlZExvZy5kYXRhLFxuICAgIHRvcGljczogZW5jb2RlZExvZy50b3BpY3MsXG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtb2NrUmVkZWVtTG9nKFxuICBjb250cmFjdEFkZHJlc3M6IHN0cmluZyxcbiAgZXZlbnQ6IFJlZGVlbUV2ZW50T2JqZWN0LFxuKTogTG9nUGFyYW1zIHtcbiAgY29uc3QgY29udHJhY3QgPSBnZXRTdGFuZGFyZGl6ZWRZaWVsZENvbnRyYWN0KFxuICAgIEV0aENoYWluSWQuRVRIRVJFVU0sXG4gICAgY29udHJhY3RBZGRyZXNzLFxuICApO1xuICBjb25zdCBlbmNvZGVkTG9nID0gY29udHJhY3QucmF3Q29udHJhY3QuaW50ZXJmYWNlLmVuY29kZUV2ZW50TG9nKFxuICAgIFwiUmVkZWVtKGFkZHJlc3MsYWRkcmVzcyxhZGRyZXNzLHVpbnQyNTYsdWludDI1NilcIixcbiAgICBbXG4gICAgICBldmVudC5jYWxsZXIsXG4gICAgICBldmVudC5yZWNlaXZlcixcbiAgICAgIGV2ZW50LnRva2VuT3V0LFxuICAgICAgZXZlbnQuYW1vdW50U3lUb1JlZGVlbSxcbiAgICAgIGV2ZW50LmFtb3VudFRva2VuT3V0LFxuICAgIF0sXG4gICk7XG4gIHJldHVybiB7XG4gICAgLi4ubW9ja0ZpZWxkLFxuICAgIGluZGV4OiAwLFxuICAgIGFkZHJlc3M6IGNvbnRyYWN0QWRkcmVzcyxcbiAgICBkYXRhOiBlbmNvZGVkTG9nLmRhdGEsXG4gICAgdG9waWNzOiBlbmNvZGVkTG9nLnRvcGljcyxcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1vY2tUcmFuc2ZlckxvZyhcbiAgY29udHJhY3RBZGRyZXNzOiBzdHJpbmcsXG4gIGV2ZW50OiBUcmFuc2ZlckV2ZW50T2JqZWN0LFxuKTogTG9nUGFyYW1zIHtcbiAgY29uc3QgY29udHJhY3QgPSBnZXRTdGFuZGFyZGl6ZWRZaWVsZENvbnRyYWN0KFxuICAgIEV0aENoYWluSWQuRVRIRVJFVU0sXG4gICAgY29udHJhY3RBZGRyZXNzLFxuICApO1xuICBjb25zdCBlbmNvZGVkTG9nID0gY29udHJhY3QucmF3Q29udHJhY3QuaW50ZXJmYWNlLmVuY29kZUV2ZW50TG9nKFxuICAgIFwiVHJhbnNmZXIoYWRkcmVzcyxhZGRyZXNzLHVpbnQyNTYpXCIsXG4gICAgW2V2ZW50LmZyb20sIGV2ZW50LnRvLCBldmVudC52YWx1ZV0sXG4gICk7XG4gIHJldHVybiB7XG4gICAgLi4ubW9ja0ZpZWxkLFxuICAgIGluZGV4OiAwLFxuICAgIGFkZHJlc3M6IGNvbnRyYWN0QWRkcmVzcyxcbiAgICBkYXRhOiBlbmNvZGVkTG9nLmRhdGEsXG4gICAgdG9waWNzOiBlbmNvZGVkTG9nLnRvcGljcyxcbiAgfTtcbn1cbiIsICIvKiBBdXRvZ2VuZXJhdGVkIGZpbGUuIERvIG5vdCBlZGl0IG1hbnVhbGx5LiAqL1xuLyogdHNsaW50OmRpc2FibGUgKi9cbi8qIGVzbGludC1kaXNhYmxlICovXG5pbXBvcnQgeyBCaWdOdW1iZXJpc2gsIE92ZXJyaWRlcywgQnl0ZXNMaWtlIH0gZnJvbSBcImV0aGVyc1wiO1xuaW1wb3J0IHtcbiAgYWRkQ29udHJhY3RCeUFCSSxcbiAgZ2V0Q29udHJhY3RCeUFCSSxcbiAgYWRkUHJvY2Vzc29yLFxuICBnZXRQcm9jZXNzb3IsXG4gIGdldFByb3ZpZGVyLFxuICB0cmFuc2Zvcm1FdGhlckVycm9yLFxuICBCaW5kT3B0aW9ucyxcbiAgQmFzZVByb2Nlc3NvcixcbiAgQmFzZVByb2Nlc3NvclRlbXBsYXRlLFxuICBCb3VuZENvbnRyYWN0VmlldyxcbiAgQ29udHJhY3RDb250ZXh0LFxuICBDb250cmFjdFZpZXcsXG4gIER1bW15UHJvdmlkZXIsXG4gIEV0aENoYWluSWQsXG4gIFR5cGVkQ2FsbFRyYWNlLFxuICBFdGhDb250ZXh0LFxuICBFdGhGZXRjaENvbmZpZyxcbiAgUHJlcHJvY2Vzc1Jlc3VsdCxcbiAgZW5jb2RlQ2FsbERhdGEsXG59IGZyb20gXCJAc2VudGlvL3Nkay9ldGhcIjtcbmltcG9ydCB7IEV0aENhbGxQYXJhbSwgRXRoQ2FsbENvbnRleHQsIFByZXBhcmVkRGF0YSB9IGZyb20gXCJAc2VudGlvL3Byb3Rvc1wiO1xuXG5pbXBvcnQgeyBQZW5kbGVNYXJrZXRfX2ZhY3RvcnkgfSBmcm9tIFwiLi9pbmRleC5qc1wiO1xuaW1wb3J0IHtcbiAgUGVuZGxlTWFya2V0LFxuICBBcHByb3ZhbEV2ZW50LFxuICBBcHByb3ZhbEV2ZW50RmlsdGVyLFxuICBCdXJuRXZlbnQsXG4gIEJ1cm5FdmVudEZpbHRlcixcbiAgSW5jcmVhc2VPYnNlcnZhdGlvbkNhcmRpbmFsaXR5TmV4dEV2ZW50LFxuICBJbmNyZWFzZU9ic2VydmF0aW9uQ2FyZGluYWxpdHlOZXh0RXZlbnRGaWx0ZXIsXG4gIE1pbnRFdmVudCxcbiAgTWludEV2ZW50RmlsdGVyLFxuICBTd2FwRXZlbnQsXG4gIFN3YXBFdmVudEZpbHRlcixcbiAgVHJhbnNmZXJFdmVudCxcbiAgVHJhbnNmZXJFdmVudEZpbHRlcixcbiAgVXBkYXRlSW1wbGllZFJhdGVFdmVudCxcbiAgVXBkYXRlSW1wbGllZFJhdGVFdmVudEZpbHRlcixcbiAgTWFya2V0U3RhdGVTdHJ1Y3RPdXRwdXQsXG59IGZyb20gXCIuL1BlbmRsZU1hcmtldC5qc1wiO1xuXG5leHBvcnQgaW50ZXJmYWNlIF9zdG9yYWdlQ2FsbE9iamVjdCB7fVxuXG5leHBvcnQgdHlwZSBfc3RvcmFnZUNhbGxUcmFjZSA9IFR5cGVkQ2FsbFRyYWNlPFtdLCBfc3RvcmFnZUNhbGxPYmplY3Q+O1xuXG5leHBvcnQgaW50ZXJmYWNlIEFjdGl2ZUJhbGFuY2VDYWxsT2JqZWN0IHtcbiAgdXNlcjogc3RyaW5nO1xufVxuXG5leHBvcnQgdHlwZSBBY3RpdmVCYWxhbmNlQ2FsbFRyYWNlID0gVHlwZWRDYWxsVHJhY2U8XG4gIFtzdHJpbmddLFxuICBBY3RpdmVCYWxhbmNlQ2FsbE9iamVjdFxuPjtcblxuZXhwb3J0IGludGVyZmFjZSBBbGxvd2FuY2VDYWxsT2JqZWN0IHtcbiAgb3duZXI6IHN0cmluZztcbiAgc3BlbmRlcjogc3RyaW5nO1xufVxuXG5leHBvcnQgdHlwZSBBbGxvd2FuY2VDYWxsVHJhY2UgPSBUeXBlZENhbGxUcmFjZTxcbiAgW3N0cmluZywgc3RyaW5nXSxcbiAgQWxsb3dhbmNlQ2FsbE9iamVjdFxuPjtcblxuZXhwb3J0IGludGVyZmFjZSBBcHByb3ZlQ2FsbE9iamVjdCB7XG4gIHNwZW5kZXI6IHN0cmluZztcbiAgYW1vdW50OiBiaWdpbnQ7XG59XG5cbmV4cG9ydCB0eXBlIEFwcHJvdmVDYWxsVHJhY2UgPSBUeXBlZENhbGxUcmFjZTxcbiAgW3N0cmluZywgYmlnaW50XSxcbiAgQXBwcm92ZUNhbGxPYmplY3Rcbj47XG5cbmV4cG9ydCBpbnRlcmZhY2UgQmFsYW5jZU9mQ2FsbE9iamVjdCB7XG4gIGFjY291bnQ6IHN0cmluZztcbn1cblxuZXhwb3J0IHR5cGUgQmFsYW5jZU9mQ2FsbFRyYWNlID0gVHlwZWRDYWxsVHJhY2U8W3N0cmluZ10sIEJhbGFuY2VPZkNhbGxPYmplY3Q+O1xuXG5leHBvcnQgaW50ZXJmYWNlIEJ1cm5DYWxsT2JqZWN0IHtcbiAgcmVjZWl2ZXJTeTogc3RyaW5nO1xuICByZWNlaXZlclB0OiBzdHJpbmc7XG4gIG5ldExwVG9CdXJuOiBiaWdpbnQ7XG59XG5cbmV4cG9ydCB0eXBlIEJ1cm5DYWxsVHJhY2UgPSBUeXBlZENhbGxUcmFjZTxcbiAgW3N0cmluZywgc3RyaW5nLCBiaWdpbnRdLFxuICBCdXJuQ2FsbE9iamVjdFxuPjtcblxuZXhwb3J0IGludGVyZmFjZSBEZWNpbWFsc0NhbGxPYmplY3Qge31cblxuZXhwb3J0IHR5cGUgRGVjaW1hbHNDYWxsVHJhY2UgPSBUeXBlZENhbGxUcmFjZTxbXSwgRGVjaW1hbHNDYWxsT2JqZWN0PjtcblxuZXhwb3J0IGludGVyZmFjZSBFeHBpcnlDYWxsT2JqZWN0IHt9XG5cbmV4cG9ydCB0eXBlIEV4cGlyeUNhbGxUcmFjZSA9IFR5cGVkQ2FsbFRyYWNlPFtdLCBFeHBpcnlDYWxsT2JqZWN0PjtcblxuZXhwb3J0IGludGVyZmFjZSBHZXRSZXdhcmRUb2tlbnNDYWxsT2JqZWN0IHt9XG5cbmV4cG9ydCB0eXBlIEdldFJld2FyZFRva2Vuc0NhbGxUcmFjZSA9IFR5cGVkQ2FsbFRyYWNlPFxuICBbXSxcbiAgR2V0UmV3YXJkVG9rZW5zQ2FsbE9iamVjdFxuPjtcblxuZXhwb3J0IGludGVyZmFjZSBJbmNyZWFzZU9ic2VydmF0aW9uc0NhcmRpbmFsaXR5TmV4dENhbGxPYmplY3Qge1xuICBjYXJkaW5hbGl0eU5leHQ6IGJpZ2ludDtcbn1cblxuZXhwb3J0IHR5cGUgSW5jcmVhc2VPYnNlcnZhdGlvbnNDYXJkaW5hbGl0eU5leHRDYWxsVHJhY2UgPSBUeXBlZENhbGxUcmFjZTxcbiAgW2JpZ2ludF0sXG4gIEluY3JlYXNlT2JzZXJ2YXRpb25zQ2FyZGluYWxpdHlOZXh0Q2FsbE9iamVjdFxuPjtcblxuZXhwb3J0IGludGVyZmFjZSBJc0V4cGlyZWRDYWxsT2JqZWN0IHt9XG5cbmV4cG9ydCB0eXBlIElzRXhwaXJlZENhbGxUcmFjZSA9IFR5cGVkQ2FsbFRyYWNlPFtdLCBJc0V4cGlyZWRDYWxsT2JqZWN0PjtcblxuZXhwb3J0IGludGVyZmFjZSBNaW50Q2FsbE9iamVjdCB7XG4gIHJlY2VpdmVyOiBzdHJpbmc7XG4gIG5ldFN5RGVzaXJlZDogYmlnaW50O1xuICBuZXRQdERlc2lyZWQ6IGJpZ2ludDtcbn1cblxuZXhwb3J0IHR5cGUgTWludENhbGxUcmFjZSA9IFR5cGVkQ2FsbFRyYWNlPFxuICBbc3RyaW5nLCBiaWdpbnQsIGJpZ2ludF0sXG4gIE1pbnRDYWxsT2JqZWN0XG4+O1xuXG5leHBvcnQgaW50ZXJmYWNlIE5hbWVDYWxsT2JqZWN0IHt9XG5cbmV4cG9ydCB0eXBlIE5hbWVDYWxsVHJhY2UgPSBUeXBlZENhbGxUcmFjZTxbXSwgTmFtZUNhbGxPYmplY3Q+O1xuXG5leHBvcnQgaW50ZXJmYWNlIE9ic2VydmF0aW9uc0NhbGxPYmplY3Qge1xuICBpbmRleDogYmlnaW50O1xufVxuXG5leHBvcnQgdHlwZSBPYnNlcnZhdGlvbnNDYWxsVHJhY2UgPSBUeXBlZENhbGxUcmFjZTxcbiAgW2JpZ2ludF0sXG4gIE9ic2VydmF0aW9uc0NhbGxPYmplY3Rcbj47XG5cbmV4cG9ydCBpbnRlcmZhY2UgT2JzZXJ2ZUNhbGxPYmplY3Qge1xuICBzZWNvbmRzQWdvczogYmlnaW50W107XG59XG5cbmV4cG9ydCB0eXBlIE9ic2VydmVDYWxsVHJhY2UgPSBUeXBlZENhbGxUcmFjZTxbYmlnaW50W11dLCBPYnNlcnZlQ2FsbE9iamVjdD47XG5cbmV4cG9ydCBpbnRlcmZhY2UgUmVhZFN0YXRlQ2FsbE9iamVjdCB7XG4gIHJvdXRlcjogc3RyaW5nO1xufVxuXG5leHBvcnQgdHlwZSBSZWFkU3RhdGVDYWxsVHJhY2UgPSBUeXBlZENhbGxUcmFjZTxbc3RyaW5nXSwgUmVhZFN0YXRlQ2FsbE9iamVjdD47XG5cbmV4cG9ydCBpbnRlcmZhY2UgUmVhZFRva2Vuc0NhbGxPYmplY3Qge31cblxuZXhwb3J0IHR5cGUgUmVhZFRva2Vuc0NhbGxUcmFjZSA9IFR5cGVkQ2FsbFRyYWNlPFtdLCBSZWFkVG9rZW5zQ2FsbE9iamVjdD47XG5cbmV4cG9ydCBpbnRlcmZhY2UgUmVkZWVtUmV3YXJkc0NhbGxPYmplY3Qge1xuICB1c2VyOiBzdHJpbmc7XG59XG5cbmV4cG9ydCB0eXBlIFJlZGVlbVJld2FyZHNDYWxsVHJhY2UgPSBUeXBlZENhbGxUcmFjZTxcbiAgW3N0cmluZ10sXG4gIFJlZGVlbVJld2FyZHNDYWxsT2JqZWN0XG4+O1xuXG5leHBvcnQgaW50ZXJmYWNlIFN3YXBFeGFjdFB0Rm9yU3lDYWxsT2JqZWN0IHtcbiAgcmVjZWl2ZXI6IHN0cmluZztcbiAgZXhhY3RQdEluOiBiaWdpbnQ7XG4gIGRhdGE6IHN0cmluZztcbn1cblxuZXhwb3J0IHR5cGUgU3dhcEV4YWN0UHRGb3JTeUNhbGxUcmFjZSA9IFR5cGVkQ2FsbFRyYWNlPFxuICBbc3RyaW5nLCBiaWdpbnQsIHN0cmluZ10sXG4gIFN3YXBFeGFjdFB0Rm9yU3lDYWxsT2JqZWN0XG4+O1xuXG5leHBvcnQgaW50ZXJmYWNlIFN3YXBTeUZvckV4YWN0UHRDYWxsT2JqZWN0IHtcbiAgcmVjZWl2ZXI6IHN0cmluZztcbiAgZXhhY3RQdE91dDogYmlnaW50O1xuICBkYXRhOiBzdHJpbmc7XG59XG5cbmV4cG9ydCB0eXBlIFN3YXBTeUZvckV4YWN0UHRDYWxsVHJhY2UgPSBUeXBlZENhbGxUcmFjZTxcbiAgW3N0cmluZywgYmlnaW50LCBzdHJpbmddLFxuICBTd2FwU3lGb3JFeGFjdFB0Q2FsbE9iamVjdFxuPjtcblxuZXhwb3J0IGludGVyZmFjZSBTeW1ib2xDYWxsT2JqZWN0IHt9XG5cbmV4cG9ydCB0eXBlIFN5bWJvbENhbGxUcmFjZSA9IFR5cGVkQ2FsbFRyYWNlPFtdLCBTeW1ib2xDYWxsT2JqZWN0PjtcblxuZXhwb3J0IGludGVyZmFjZSBUb3RhbEFjdGl2ZVN1cHBseUNhbGxPYmplY3Qge31cblxuZXhwb3J0IHR5cGUgVG90YWxBY3RpdmVTdXBwbHlDYWxsVHJhY2UgPSBUeXBlZENhbGxUcmFjZTxcbiAgW10sXG4gIFRvdGFsQWN0aXZlU3VwcGx5Q2FsbE9iamVjdFxuPjtcblxuZXhwb3J0IGludGVyZmFjZSBUb3RhbFN1cHBseUNhbGxPYmplY3Qge31cblxuZXhwb3J0IHR5cGUgVG90YWxTdXBwbHlDYWxsVHJhY2UgPSBUeXBlZENhbGxUcmFjZTxbXSwgVG90YWxTdXBwbHlDYWxsT2JqZWN0PjtcblxuZXhwb3J0IGludGVyZmFjZSBUcmFuc2ZlckNhbGxPYmplY3Qge1xuICB0bzogc3RyaW5nO1xuICBhbW91bnQ6IGJpZ2ludDtcbn1cblxuZXhwb3J0IHR5cGUgVHJhbnNmZXJDYWxsVHJhY2UgPSBUeXBlZENhbGxUcmFjZTxcbiAgW3N0cmluZywgYmlnaW50XSxcbiAgVHJhbnNmZXJDYWxsT2JqZWN0XG4+O1xuXG5leHBvcnQgaW50ZXJmYWNlIFRyYW5zZmVyRnJvbUNhbGxPYmplY3Qge1xuICBmcm9tOiBzdHJpbmc7XG4gIHRvOiBzdHJpbmc7XG4gIGFtb3VudDogYmlnaW50O1xufVxuXG5leHBvcnQgdHlwZSBUcmFuc2ZlckZyb21DYWxsVHJhY2UgPSBUeXBlZENhbGxUcmFjZTxcbiAgW3N0cmluZywgc3RyaW5nLCBiaWdpbnRdLFxuICBUcmFuc2ZlckZyb21DYWxsT2JqZWN0XG4+O1xuXG5jb25zdCB0ZW1wbGF0ZUNvbnRyYWN0ID0gUGVuZGxlTWFya2V0X19mYWN0b3J5LmNvbm5lY3QoXCIweDBcIiwgRHVtbXlQcm92aWRlcik7XG5cbmV4cG9ydCBjbGFzcyBQZW5kbGVNYXJrZXRDb250cmFjdFZpZXcgZXh0ZW5kcyBDb250cmFjdFZpZXc8UGVuZGxlTWFya2V0PiB7XG4gIGNvbnN0cnVjdG9yKGNvbnRyYWN0OiBQZW5kbGVNYXJrZXQpIHtcbiAgICBzdXBlcihjb250cmFjdCk7XG4gICAgdGhpcy5jYWxsU3RhdGljLmNvbnRyYWN0ID0gY29udHJhY3Q7XG4gIH1cblxuICBhc3luYyBfc3RvcmFnZShcbiAgICBvdmVycmlkZXM/OiBPdmVycmlkZXMsXG4gICAgcHJlcGFyZWREYXRhPzogUHJlcGFyZWREYXRhLFxuICAgIGV0aENhbGxDb250ZXh0PzogRXRoQ2FsbENvbnRleHQsXG4gICk6IFByb21pc2U8XG4gICAgW2JpZ2ludCwgYmlnaW50LCBiaWdpbnQsIGJpZ2ludCwgYmlnaW50LCBiaWdpbnRdICYge1xuICAgICAgdG90YWxQdDogYmlnaW50O1xuICAgICAgdG90YWxTeTogYmlnaW50O1xuICAgICAgbGFzdExuSW1wbGllZFJhdGU6IGJpZ2ludDtcbiAgICAgIG9ic2VydmF0aW9uSW5kZXg6IGJpZ2ludDtcbiAgICAgIG9ic2VydmF0aW9uQ2FyZGluYWxpdHk6IGJpZ2ludDtcbiAgICAgIG9ic2VydmF0aW9uQ2FyZGluYWxpdHlOZXh0OiBiaWdpbnQ7XG4gICAgfVxuICA+IHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuY29udHJhY3QuZ2V0RnVuY3Rpb24oXCJfc3RvcmFnZSgpXCIpKG92ZXJyaWRlcyB8fCB7fSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgY29uc3Qgc3RhY2sgPSBuZXcgRXJyb3IoKS5zdGFjaztcbiAgICAgIHRocm93IHRyYW5zZm9ybUV0aGVyRXJyb3IoZSwgdW5kZWZpbmVkLCBzdGFjayk7XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgYWN0aXZlQmFsYW5jZShcbiAgICB1c2VyOiBzdHJpbmcsXG4gICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzLFxuICAgIHByZXBhcmVkRGF0YT86IFByZXBhcmVkRGF0YSxcbiAgICBldGhDYWxsQ29udGV4dD86IEV0aENhbGxDb250ZXh0LFxuICApOiBQcm9taXNlPGJpZ2ludD4ge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gYXdhaXQgdGhpcy5jb250cmFjdC5nZXRGdW5jdGlvbihcImFjdGl2ZUJhbGFuY2UoYWRkcmVzcylcIikoXG4gICAgICAgIHVzZXIsXG4gICAgICAgIG92ZXJyaWRlcyB8fCB7fSxcbiAgICAgICk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgY29uc3Qgc3RhY2sgPSBuZXcgRXJyb3IoKS5zdGFjaztcbiAgICAgIHRocm93IHRyYW5zZm9ybUV0aGVyRXJyb3IoZSwgdW5kZWZpbmVkLCBzdGFjayk7XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgYWxsb3dhbmNlKFxuICAgIG93bmVyOiBzdHJpbmcsXG4gICAgc3BlbmRlcjogc3RyaW5nLFxuICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlcyxcbiAgICBwcmVwYXJlZERhdGE/OiBQcmVwYXJlZERhdGEsXG4gICAgZXRoQ2FsbENvbnRleHQ/OiBFdGhDYWxsQ29udGV4dCxcbiAgKTogUHJvbWlzZTxiaWdpbnQ+IHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuY29udHJhY3QuZ2V0RnVuY3Rpb24oXCJhbGxvd2FuY2UoYWRkcmVzcyxhZGRyZXNzKVwiKShcbiAgICAgICAgb3duZXIsXG4gICAgICAgIHNwZW5kZXIsXG4gICAgICAgIG92ZXJyaWRlcyB8fCB7fSxcbiAgICAgICk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgY29uc3Qgc3RhY2sgPSBuZXcgRXJyb3IoKS5zdGFjaztcbiAgICAgIHRocm93IHRyYW5zZm9ybUV0aGVyRXJyb3IoZSwgdW5kZWZpbmVkLCBzdGFjayk7XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgYmFsYW5jZU9mKFxuICAgIGFjY291bnQ6IHN0cmluZyxcbiAgICBvdmVycmlkZXM/OiBPdmVycmlkZXMsXG4gICAgcHJlcGFyZWREYXRhPzogUHJlcGFyZWREYXRhLFxuICAgIGV0aENhbGxDb250ZXh0PzogRXRoQ2FsbENvbnRleHQsXG4gICk6IFByb21pc2U8YmlnaW50PiB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBhd2FpdCB0aGlzLmNvbnRyYWN0LmdldEZ1bmN0aW9uKFwiYmFsYW5jZU9mKGFkZHJlc3MpXCIpKFxuICAgICAgICBhY2NvdW50LFxuICAgICAgICBvdmVycmlkZXMgfHwge30sXG4gICAgICApO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGNvbnN0IHN0YWNrID0gbmV3IEVycm9yKCkuc3RhY2s7XG4gICAgICB0aHJvdyB0cmFuc2Zvcm1FdGhlckVycm9yKGUsIHVuZGVmaW5lZCwgc3RhY2spO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIGRlY2ltYWxzKFxuICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlcyxcbiAgICBwcmVwYXJlZERhdGE/OiBQcmVwYXJlZERhdGEsXG4gICAgZXRoQ2FsbENvbnRleHQ/OiBFdGhDYWxsQ29udGV4dCxcbiAgKTogUHJvbWlzZTxiaWdpbnQ+IHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuY29udHJhY3QuZ2V0RnVuY3Rpb24oXCJkZWNpbWFscygpXCIpKG92ZXJyaWRlcyB8fCB7fSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgY29uc3Qgc3RhY2sgPSBuZXcgRXJyb3IoKS5zdGFjaztcbiAgICAgIHRocm93IHRyYW5zZm9ybUV0aGVyRXJyb3IoZSwgdW5kZWZpbmVkLCBzdGFjayk7XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgZXhwaXJ5KFxuICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlcyxcbiAgICBwcmVwYXJlZERhdGE/OiBQcmVwYXJlZERhdGEsXG4gICAgZXRoQ2FsbENvbnRleHQ/OiBFdGhDYWxsQ29udGV4dCxcbiAgKTogUHJvbWlzZTxiaWdpbnQ+IHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuY29udHJhY3QuZ2V0RnVuY3Rpb24oXCJleHBpcnkoKVwiKShvdmVycmlkZXMgfHwge30pO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGNvbnN0IHN0YWNrID0gbmV3IEVycm9yKCkuc3RhY2s7XG4gICAgICB0aHJvdyB0cmFuc2Zvcm1FdGhlckVycm9yKGUsIHVuZGVmaW5lZCwgc3RhY2spO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIGdldFJld2FyZFRva2VucyhcbiAgICBvdmVycmlkZXM/OiBPdmVycmlkZXMsXG4gICAgcHJlcGFyZWREYXRhPzogUHJlcGFyZWREYXRhLFxuICAgIGV0aENhbGxDb250ZXh0PzogRXRoQ2FsbENvbnRleHQsXG4gICk6IFByb21pc2U8c3RyaW5nW10+IHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuY29udHJhY3QuZ2V0RnVuY3Rpb24oXCJnZXRSZXdhcmRUb2tlbnMoKVwiKShcbiAgICAgICAgb3ZlcnJpZGVzIHx8IHt9LFxuICAgICAgKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBjb25zdCBzdGFjayA9IG5ldyBFcnJvcigpLnN0YWNrO1xuICAgICAgdGhyb3cgdHJhbnNmb3JtRXRoZXJFcnJvcihlLCB1bmRlZmluZWQsIHN0YWNrKTtcbiAgICB9XG4gIH1cblxuICBhc3luYyBpc0V4cGlyZWQoXG4gICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzLFxuICAgIHByZXBhcmVkRGF0YT86IFByZXBhcmVkRGF0YSxcbiAgICBldGhDYWxsQ29udGV4dD86IEV0aENhbGxDb250ZXh0LFxuICApOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuY29udHJhY3QuZ2V0RnVuY3Rpb24oXCJpc0V4cGlyZWQoKVwiKShvdmVycmlkZXMgfHwge30pO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGNvbnN0IHN0YWNrID0gbmV3IEVycm9yKCkuc3RhY2s7XG4gICAgICB0aHJvdyB0cmFuc2Zvcm1FdGhlckVycm9yKGUsIHVuZGVmaW5lZCwgc3RhY2spO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIG5hbWUoXG4gICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzLFxuICAgIHByZXBhcmVkRGF0YT86IFByZXBhcmVkRGF0YSxcbiAgICBldGhDYWxsQ29udGV4dD86IEV0aENhbGxDb250ZXh0LFxuICApOiBQcm9taXNlPHN0cmluZz4ge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gYXdhaXQgdGhpcy5jb250cmFjdC5nZXRGdW5jdGlvbihcIm5hbWUoKVwiKShvdmVycmlkZXMgfHwge30pO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGNvbnN0IHN0YWNrID0gbmV3IEVycm9yKCkuc3RhY2s7XG4gICAgICB0aHJvdyB0cmFuc2Zvcm1FdGhlckVycm9yKGUsIHVuZGVmaW5lZCwgc3RhY2spO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIG9ic2VydmF0aW9ucyhcbiAgICBpbmRleDogQmlnTnVtYmVyaXNoLFxuICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlcyxcbiAgICBwcmVwYXJlZERhdGE/OiBQcmVwYXJlZERhdGEsXG4gICAgZXRoQ2FsbENvbnRleHQ/OiBFdGhDYWxsQ29udGV4dCxcbiAgKTogUHJvbWlzZTxcbiAgICBbYmlnaW50LCBiaWdpbnQsIGJvb2xlYW5dICYge1xuICAgICAgYmxvY2tUaW1lc3RhbXA6IGJpZ2ludDtcbiAgICAgIGxuSW1wbGllZFJhdGVDdW11bGF0aXZlOiBiaWdpbnQ7XG4gICAgICBpbml0aWFsaXplZDogYm9vbGVhbjtcbiAgICB9XG4gID4ge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gYXdhaXQgdGhpcy5jb250cmFjdC5nZXRGdW5jdGlvbihcIm9ic2VydmF0aW9ucyh1aW50MjU2KVwiKShcbiAgICAgICAgaW5kZXgsXG4gICAgICAgIG92ZXJyaWRlcyB8fCB7fSxcbiAgICAgICk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgY29uc3Qgc3RhY2sgPSBuZXcgRXJyb3IoKS5zdGFjaztcbiAgICAgIHRocm93IHRyYW5zZm9ybUV0aGVyRXJyb3IoZSwgdW5kZWZpbmVkLCBzdGFjayk7XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgb2JzZXJ2ZShcbiAgICBzZWNvbmRzQWdvczogQmlnTnVtYmVyaXNoW10sXG4gICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzLFxuICAgIHByZXBhcmVkRGF0YT86IFByZXBhcmVkRGF0YSxcbiAgICBldGhDYWxsQ29udGV4dD86IEV0aENhbGxDb250ZXh0LFxuICApOiBQcm9taXNlPGJpZ2ludFtdPiB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBhd2FpdCB0aGlzLmNvbnRyYWN0LmdldEZ1bmN0aW9uKFwib2JzZXJ2ZSh1aW50MzJbXSlcIikoXG4gICAgICAgIHNlY29uZHNBZ29zLFxuICAgICAgICBvdmVycmlkZXMgfHwge30sXG4gICAgICApO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGNvbnN0IHN0YWNrID0gbmV3IEVycm9yKCkuc3RhY2s7XG4gICAgICB0aHJvdyB0cmFuc2Zvcm1FdGhlckVycm9yKGUsIHVuZGVmaW5lZCwgc3RhY2spO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIHJlYWRTdGF0ZShcbiAgICByb3V0ZXI6IHN0cmluZyxcbiAgICBvdmVycmlkZXM/OiBPdmVycmlkZXMsXG4gICAgcHJlcGFyZWREYXRhPzogUHJlcGFyZWREYXRhLFxuICAgIGV0aENhbGxDb250ZXh0PzogRXRoQ2FsbENvbnRleHQsXG4gICk6IFByb21pc2U8TWFya2V0U3RhdGVTdHJ1Y3RPdXRwdXQ+IHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuY29udHJhY3QuZ2V0RnVuY3Rpb24oXCJyZWFkU3RhdGUoYWRkcmVzcylcIikoXG4gICAgICAgIHJvdXRlcixcbiAgICAgICAgb3ZlcnJpZGVzIHx8IHt9LFxuICAgICAgKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBjb25zdCBzdGFjayA9IG5ldyBFcnJvcigpLnN0YWNrO1xuICAgICAgdGhyb3cgdHJhbnNmb3JtRXRoZXJFcnJvcihlLCB1bmRlZmluZWQsIHN0YWNrKTtcbiAgICB9XG4gIH1cblxuICBhc3luYyByZWFkVG9rZW5zKFxuICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlcyxcbiAgICBwcmVwYXJlZERhdGE/OiBQcmVwYXJlZERhdGEsXG4gICAgZXRoQ2FsbENvbnRleHQ/OiBFdGhDYWxsQ29udGV4dCxcbiAgKTogUHJvbWlzZTxcbiAgICBbc3RyaW5nLCBzdHJpbmcsIHN0cmluZ10gJiB7IF9TWTogc3RyaW5nOyBfUFQ6IHN0cmluZzsgX1lUOiBzdHJpbmcgfVxuICA+IHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuY29udHJhY3QuZ2V0RnVuY3Rpb24oXCJyZWFkVG9rZW5zKClcIikob3ZlcnJpZGVzIHx8IHt9KTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBjb25zdCBzdGFjayA9IG5ldyBFcnJvcigpLnN0YWNrO1xuICAgICAgdGhyb3cgdHJhbnNmb3JtRXRoZXJFcnJvcihlLCB1bmRlZmluZWQsIHN0YWNrKTtcbiAgICB9XG4gIH1cblxuICBhc3luYyBzeW1ib2woXG4gICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzLFxuICAgIHByZXBhcmVkRGF0YT86IFByZXBhcmVkRGF0YSxcbiAgICBldGhDYWxsQ29udGV4dD86IEV0aENhbGxDb250ZXh0LFxuICApOiBQcm9taXNlPHN0cmluZz4ge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gYXdhaXQgdGhpcy5jb250cmFjdC5nZXRGdW5jdGlvbihcInN5bWJvbCgpXCIpKG92ZXJyaWRlcyB8fCB7fSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgY29uc3Qgc3RhY2sgPSBuZXcgRXJyb3IoKS5zdGFjaztcbiAgICAgIHRocm93IHRyYW5zZm9ybUV0aGVyRXJyb3IoZSwgdW5kZWZpbmVkLCBzdGFjayk7XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgdG90YWxBY3RpdmVTdXBwbHkoXG4gICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzLFxuICAgIHByZXBhcmVkRGF0YT86IFByZXBhcmVkRGF0YSxcbiAgICBldGhDYWxsQ29udGV4dD86IEV0aENhbGxDb250ZXh0LFxuICApOiBQcm9taXNlPGJpZ2ludD4ge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gYXdhaXQgdGhpcy5jb250cmFjdC5nZXRGdW5jdGlvbihcInRvdGFsQWN0aXZlU3VwcGx5KClcIikoXG4gICAgICAgIG92ZXJyaWRlcyB8fCB7fSxcbiAgICAgICk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgY29uc3Qgc3RhY2sgPSBuZXcgRXJyb3IoKS5zdGFjaztcbiAgICAgIHRocm93IHRyYW5zZm9ybUV0aGVyRXJyb3IoZSwgdW5kZWZpbmVkLCBzdGFjayk7XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgdG90YWxTdXBwbHkoXG4gICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzLFxuICAgIHByZXBhcmVkRGF0YT86IFByZXBhcmVkRGF0YSxcbiAgICBldGhDYWxsQ29udGV4dD86IEV0aENhbGxDb250ZXh0LFxuICApOiBQcm9taXNlPGJpZ2ludD4ge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gYXdhaXQgdGhpcy5jb250cmFjdC5nZXRGdW5jdGlvbihcInRvdGFsU3VwcGx5KClcIikob3ZlcnJpZGVzIHx8IHt9KTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBjb25zdCBzdGFjayA9IG5ldyBFcnJvcigpLnN0YWNrO1xuICAgICAgdGhyb3cgdHJhbnNmb3JtRXRoZXJFcnJvcihlLCB1bmRlZmluZWQsIHN0YWNrKTtcbiAgICB9XG4gIH1cblxuICBjYWxsU3RhdGljID0ge1xuICAgIGNvbnRyYWN0OiB0aGlzLmNvbnRyYWN0LFxuXG4gICAgYXN5bmMgYXBwcm92ZShcbiAgICAgIHNwZW5kZXI6IHN0cmluZyxcbiAgICAgIGFtb3VudDogQmlnTnVtYmVyaXNoLFxuICAgICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzLFxuICAgICAgcHJlcGFyZWREYXRhPzogUHJlcGFyZWREYXRhLFxuICAgICAgZXRoQ2FsbENvbnRleHQ/OiBFdGhDYWxsQ29udGV4dCxcbiAgICApOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLmNvbnRyYWN0XG4gICAgICAgICAgLmdldEZ1bmN0aW9uKFwiYXBwcm92ZShhZGRyZXNzLHVpbnQyNTYpXCIpXG4gICAgICAgICAgLnN0YXRpY0NhbGwoc3BlbmRlciwgYW1vdW50LCBvdmVycmlkZXMgfHwge30pO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjb25zdCBzdGFjayA9IG5ldyBFcnJvcigpLnN0YWNrO1xuICAgICAgICB0aHJvdyB0cmFuc2Zvcm1FdGhlckVycm9yKGUsIHVuZGVmaW5lZCwgc3RhY2spO1xuICAgICAgfVxuICAgIH0sXG4gICAgYXN5bmMgYnVybihcbiAgICAgIHJlY2VpdmVyU3k6IHN0cmluZyxcbiAgICAgIHJlY2VpdmVyUHQ6IHN0cmluZyxcbiAgICAgIG5ldExwVG9CdXJuOiBCaWdOdW1iZXJpc2gsXG4gICAgICBvdmVycmlkZXM/OiBPdmVycmlkZXMsXG4gICAgICBwcmVwYXJlZERhdGE/OiBQcmVwYXJlZERhdGEsXG4gICAgICBldGhDYWxsQ29udGV4dD86IEV0aENhbGxDb250ZXh0LFxuICAgICk6IFByb21pc2U8W2JpZ2ludCwgYmlnaW50XSAmIHsgbmV0U3lPdXQ6IGJpZ2ludDsgbmV0UHRPdXQ6IGJpZ2ludCB9PiB7XG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5jb250cmFjdFxuICAgICAgICAgIC5nZXRGdW5jdGlvbihcImJ1cm4oYWRkcmVzcyxhZGRyZXNzLHVpbnQyNTYpXCIpXG4gICAgICAgICAgLnN0YXRpY0NhbGwocmVjZWl2ZXJTeSwgcmVjZWl2ZXJQdCwgbmV0THBUb0J1cm4sIG92ZXJyaWRlcyB8fCB7fSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNvbnN0IHN0YWNrID0gbmV3IEVycm9yKCkuc3RhY2s7XG4gICAgICAgIHRocm93IHRyYW5zZm9ybUV0aGVyRXJyb3IoZSwgdW5kZWZpbmVkLCBzdGFjayk7XG4gICAgICB9XG4gICAgfSxcbiAgICBhc3luYyBpbmNyZWFzZU9ic2VydmF0aW9uc0NhcmRpbmFsaXR5TmV4dChcbiAgICAgIGNhcmRpbmFsaXR5TmV4dDogQmlnTnVtYmVyaXNoLFxuICAgICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzLFxuICAgICAgcHJlcGFyZWREYXRhPzogUHJlcGFyZWREYXRhLFxuICAgICAgZXRoQ2FsbENvbnRleHQ/OiBFdGhDYWxsQ29udGV4dCxcbiAgICApOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLmNvbnRyYWN0XG4gICAgICAgICAgLmdldEZ1bmN0aW9uKFwiaW5jcmVhc2VPYnNlcnZhdGlvbnNDYXJkaW5hbGl0eU5leHQodWludDE2KVwiKVxuICAgICAgICAgIC5zdGF0aWNDYWxsKGNhcmRpbmFsaXR5TmV4dCwgb3ZlcnJpZGVzIHx8IHt9KTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY29uc3Qgc3RhY2sgPSBuZXcgRXJyb3IoKS5zdGFjaztcbiAgICAgICAgdGhyb3cgdHJhbnNmb3JtRXRoZXJFcnJvcihlLCB1bmRlZmluZWQsIHN0YWNrKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGFzeW5jIG1pbnQoXG4gICAgICByZWNlaXZlcjogc3RyaW5nLFxuICAgICAgbmV0U3lEZXNpcmVkOiBCaWdOdW1iZXJpc2gsXG4gICAgICBuZXRQdERlc2lyZWQ6IEJpZ051bWJlcmlzaCxcbiAgICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlcyxcbiAgICAgIHByZXBhcmVkRGF0YT86IFByZXBhcmVkRGF0YSxcbiAgICAgIGV0aENhbGxDb250ZXh0PzogRXRoQ2FsbENvbnRleHQsXG4gICAgKTogUHJvbWlzZTxcbiAgICAgIFtiaWdpbnQsIGJpZ2ludCwgYmlnaW50XSAmIHtcbiAgICAgICAgbmV0THBPdXQ6IGJpZ2ludDtcbiAgICAgICAgbmV0U3lVc2VkOiBiaWdpbnQ7XG4gICAgICAgIG5ldFB0VXNlZDogYmlnaW50O1xuICAgICAgfVxuICAgID4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuY29udHJhY3RcbiAgICAgICAgICAuZ2V0RnVuY3Rpb24oXCJtaW50KGFkZHJlc3MsdWludDI1Nix1aW50MjU2KVwiKVxuICAgICAgICAgIC5zdGF0aWNDYWxsKHJlY2VpdmVyLCBuZXRTeURlc2lyZWQsIG5ldFB0RGVzaXJlZCwgb3ZlcnJpZGVzIHx8IHt9KTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY29uc3Qgc3RhY2sgPSBuZXcgRXJyb3IoKS5zdGFjaztcbiAgICAgICAgdGhyb3cgdHJhbnNmb3JtRXRoZXJFcnJvcihlLCB1bmRlZmluZWQsIHN0YWNrKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGFzeW5jIHJlZGVlbVJld2FyZHMoXG4gICAgICB1c2VyOiBzdHJpbmcsXG4gICAgICBvdmVycmlkZXM/OiBPdmVycmlkZXMsXG4gICAgICBwcmVwYXJlZERhdGE/OiBQcmVwYXJlZERhdGEsXG4gICAgICBldGhDYWxsQ29udGV4dD86IEV0aENhbGxDb250ZXh0LFxuICAgICk6IFByb21pc2U8YmlnaW50W10+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLmNvbnRyYWN0XG4gICAgICAgICAgLmdldEZ1bmN0aW9uKFwicmVkZWVtUmV3YXJkcyhhZGRyZXNzKVwiKVxuICAgICAgICAgIC5zdGF0aWNDYWxsKHVzZXIsIG92ZXJyaWRlcyB8fCB7fSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNvbnN0IHN0YWNrID0gbmV3IEVycm9yKCkuc3RhY2s7XG4gICAgICAgIHRocm93IHRyYW5zZm9ybUV0aGVyRXJyb3IoZSwgdW5kZWZpbmVkLCBzdGFjayk7XG4gICAgICB9XG4gICAgfSxcbiAgICBhc3luYyBzd2FwRXhhY3RQdEZvclN5KFxuICAgICAgcmVjZWl2ZXI6IHN0cmluZyxcbiAgICAgIGV4YWN0UHRJbjogQmlnTnVtYmVyaXNoLFxuICAgICAgZGF0YTogQnl0ZXNMaWtlLFxuICAgICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzLFxuICAgICAgcHJlcGFyZWREYXRhPzogUHJlcGFyZWREYXRhLFxuICAgICAgZXRoQ2FsbENvbnRleHQ/OiBFdGhDYWxsQ29udGV4dCxcbiAgICApOiBQcm9taXNlPFtiaWdpbnQsIGJpZ2ludF0gJiB7IG5ldFN5T3V0OiBiaWdpbnQ7IG5ldFN5RmVlOiBiaWdpbnQgfT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuY29udHJhY3RcbiAgICAgICAgICAuZ2V0RnVuY3Rpb24oXCJzd2FwRXhhY3RQdEZvclN5KGFkZHJlc3MsdWludDI1NixieXRlcylcIilcbiAgICAgICAgICAuc3RhdGljQ2FsbChyZWNlaXZlciwgZXhhY3RQdEluLCBkYXRhLCBvdmVycmlkZXMgfHwge30pO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjb25zdCBzdGFjayA9IG5ldyBFcnJvcigpLnN0YWNrO1xuICAgICAgICB0aHJvdyB0cmFuc2Zvcm1FdGhlckVycm9yKGUsIHVuZGVmaW5lZCwgc3RhY2spO1xuICAgICAgfVxuICAgIH0sXG4gICAgYXN5bmMgc3dhcFN5Rm9yRXhhY3RQdChcbiAgICAgIHJlY2VpdmVyOiBzdHJpbmcsXG4gICAgICBleGFjdFB0T3V0OiBCaWdOdW1iZXJpc2gsXG4gICAgICBkYXRhOiBCeXRlc0xpa2UsXG4gICAgICBvdmVycmlkZXM/OiBPdmVycmlkZXMsXG4gICAgICBwcmVwYXJlZERhdGE/OiBQcmVwYXJlZERhdGEsXG4gICAgICBldGhDYWxsQ29udGV4dD86IEV0aENhbGxDb250ZXh0LFxuICAgICk6IFByb21pc2U8W2JpZ2ludCwgYmlnaW50XSAmIHsgbmV0U3lJbjogYmlnaW50OyBuZXRTeUZlZTogYmlnaW50IH0+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLmNvbnRyYWN0XG4gICAgICAgICAgLmdldEZ1bmN0aW9uKFwic3dhcFN5Rm9yRXhhY3RQdChhZGRyZXNzLHVpbnQyNTYsYnl0ZXMpXCIpXG4gICAgICAgICAgLnN0YXRpY0NhbGwocmVjZWl2ZXIsIGV4YWN0UHRPdXQsIGRhdGEsIG92ZXJyaWRlcyB8fCB7fSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNvbnN0IHN0YWNrID0gbmV3IEVycm9yKCkuc3RhY2s7XG4gICAgICAgIHRocm93IHRyYW5zZm9ybUV0aGVyRXJyb3IoZSwgdW5kZWZpbmVkLCBzdGFjayk7XG4gICAgICB9XG4gICAgfSxcbiAgICBhc3luYyB0cmFuc2ZlcihcbiAgICAgIHRvOiBzdHJpbmcsXG4gICAgICBhbW91bnQ6IEJpZ051bWJlcmlzaCxcbiAgICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlcyxcbiAgICAgIHByZXBhcmVkRGF0YT86IFByZXBhcmVkRGF0YSxcbiAgICAgIGV0aENhbGxDb250ZXh0PzogRXRoQ2FsbENvbnRleHQsXG4gICAgKTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5jb250cmFjdFxuICAgICAgICAgIC5nZXRGdW5jdGlvbihcInRyYW5zZmVyKGFkZHJlc3MsdWludDI1NilcIilcbiAgICAgICAgICAuc3RhdGljQ2FsbCh0bywgYW1vdW50LCBvdmVycmlkZXMgfHwge30pO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjb25zdCBzdGFjayA9IG5ldyBFcnJvcigpLnN0YWNrO1xuICAgICAgICB0aHJvdyB0cmFuc2Zvcm1FdGhlckVycm9yKGUsIHVuZGVmaW5lZCwgc3RhY2spO1xuICAgICAgfVxuICAgIH0sXG4gICAgYXN5bmMgdHJhbnNmZXJGcm9tKFxuICAgICAgZnJvbTogc3RyaW5nLFxuICAgICAgdG86IHN0cmluZyxcbiAgICAgIGFtb3VudDogQmlnTnVtYmVyaXNoLFxuICAgICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzLFxuICAgICAgcHJlcGFyZWREYXRhPzogUHJlcGFyZWREYXRhLFxuICAgICAgZXRoQ2FsbENvbnRleHQ/OiBFdGhDYWxsQ29udGV4dCxcbiAgICApOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLmNvbnRyYWN0XG4gICAgICAgICAgLmdldEZ1bmN0aW9uKFwidHJhbnNmZXJGcm9tKGFkZHJlc3MsYWRkcmVzcyx1aW50MjU2KVwiKVxuICAgICAgICAgIC5zdGF0aWNDYWxsKGZyb20sIHRvLCBhbW91bnQsIG92ZXJyaWRlcyB8fCB7fSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNvbnN0IHN0YWNrID0gbmV3IEVycm9yKCkuc3RhY2s7XG4gICAgICAgIHRocm93IHRyYW5zZm9ybUV0aGVyRXJyb3IoZSwgdW5kZWZpbmVkLCBzdGFjayk7XG4gICAgICB9XG4gICAgfSxcbiAgfTtcblxuICBlbmNvZGVDYWxsID0ge1xuICAgIF9zdG9yYWdlKGNhbGxDb250ZXh0OiBFdGhDYWxsQ29udGV4dCk6IEV0aENhbGxQYXJhbSB7XG4gICAgICByZXR1cm4gZW5jb2RlQ2FsbERhdGEoY2FsbENvbnRleHQsIFwiX3N0b3JhZ2VcIiwgXCJmdW5jdGlvbiBfc3RvcmFnZSgpXCIsIFtdKTtcbiAgICB9LFxuICAgIGFjdGl2ZUJhbGFuY2UodXNlcjogc3RyaW5nLCBjYWxsQ29udGV4dDogRXRoQ2FsbENvbnRleHQpOiBFdGhDYWxsUGFyYW0ge1xuICAgICAgcmV0dXJuIGVuY29kZUNhbGxEYXRhKFxuICAgICAgICBjYWxsQ29udGV4dCxcbiAgICAgICAgXCJhY3RpdmVCYWxhbmNlXCIsXG4gICAgICAgIFwiZnVuY3Rpb24gYWN0aXZlQmFsYW5jZShhZGRyZXNzKVwiLFxuICAgICAgICBbdXNlcl0sXG4gICAgICApO1xuICAgIH0sXG4gICAgYWxsb3dhbmNlKFxuICAgICAgb3duZXI6IHN0cmluZyxcbiAgICAgIHNwZW5kZXI6IHN0cmluZyxcbiAgICAgIGNhbGxDb250ZXh0OiBFdGhDYWxsQ29udGV4dCxcbiAgICApOiBFdGhDYWxsUGFyYW0ge1xuICAgICAgcmV0dXJuIGVuY29kZUNhbGxEYXRhKFxuICAgICAgICBjYWxsQ29udGV4dCxcbiAgICAgICAgXCJhbGxvd2FuY2VcIixcbiAgICAgICAgXCJmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyxhZGRyZXNzKVwiLFxuICAgICAgICBbb3duZXIsIHNwZW5kZXJdLFxuICAgICAgKTtcbiAgICB9LFxuICAgIGFwcHJvdmUoXG4gICAgICBzcGVuZGVyOiBzdHJpbmcsXG4gICAgICBhbW91bnQ6IEJpZ051bWJlcmlzaCxcbiAgICAgIGNhbGxDb250ZXh0OiBFdGhDYWxsQ29udGV4dCxcbiAgICApOiBFdGhDYWxsUGFyYW0ge1xuICAgICAgcmV0dXJuIGVuY29kZUNhbGxEYXRhKFxuICAgICAgICBjYWxsQ29udGV4dCxcbiAgICAgICAgXCJhcHByb3ZlXCIsXG4gICAgICAgIFwiZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzLHVpbnQyNTYpXCIsXG4gICAgICAgIFtzcGVuZGVyLCBhbW91bnRdLFxuICAgICAgKTtcbiAgICB9LFxuICAgIGJhbGFuY2VPZihhY2NvdW50OiBzdHJpbmcsIGNhbGxDb250ZXh0OiBFdGhDYWxsQ29udGV4dCk6IEV0aENhbGxQYXJhbSB7XG4gICAgICByZXR1cm4gZW5jb2RlQ2FsbERhdGEoXG4gICAgICAgIGNhbGxDb250ZXh0LFxuICAgICAgICBcImJhbGFuY2VPZlwiLFxuICAgICAgICBcImZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzKVwiLFxuICAgICAgICBbYWNjb3VudF0sXG4gICAgICApO1xuICAgIH0sXG4gICAgYnVybihcbiAgICAgIHJlY2VpdmVyU3k6IHN0cmluZyxcbiAgICAgIHJlY2VpdmVyUHQ6IHN0cmluZyxcbiAgICAgIG5ldExwVG9CdXJuOiBCaWdOdW1iZXJpc2gsXG4gICAgICBjYWxsQ29udGV4dDogRXRoQ2FsbENvbnRleHQsXG4gICAgKTogRXRoQ2FsbFBhcmFtIHtcbiAgICAgIHJldHVybiBlbmNvZGVDYWxsRGF0YShcbiAgICAgICAgY2FsbENvbnRleHQsXG4gICAgICAgIFwiYnVyblwiLFxuICAgICAgICBcImZ1bmN0aW9uIGJ1cm4oYWRkcmVzcyxhZGRyZXNzLHVpbnQyNTYpXCIsXG4gICAgICAgIFtyZWNlaXZlclN5LCByZWNlaXZlclB0LCBuZXRMcFRvQnVybl0sXG4gICAgICApO1xuICAgIH0sXG4gICAgZGVjaW1hbHMoY2FsbENvbnRleHQ6IEV0aENhbGxDb250ZXh0KTogRXRoQ2FsbFBhcmFtIHtcbiAgICAgIHJldHVybiBlbmNvZGVDYWxsRGF0YShjYWxsQ29udGV4dCwgXCJkZWNpbWFsc1wiLCBcImZ1bmN0aW9uIGRlY2ltYWxzKClcIiwgW10pO1xuICAgIH0sXG4gICAgZXhwaXJ5KGNhbGxDb250ZXh0OiBFdGhDYWxsQ29udGV4dCk6IEV0aENhbGxQYXJhbSB7XG4gICAgICByZXR1cm4gZW5jb2RlQ2FsbERhdGEoY2FsbENvbnRleHQsIFwiZXhwaXJ5XCIsIFwiZnVuY3Rpb24gZXhwaXJ5KClcIiwgW10pO1xuICAgIH0sXG4gICAgZ2V0UmV3YXJkVG9rZW5zKGNhbGxDb250ZXh0OiBFdGhDYWxsQ29udGV4dCk6IEV0aENhbGxQYXJhbSB7XG4gICAgICByZXR1cm4gZW5jb2RlQ2FsbERhdGEoXG4gICAgICAgIGNhbGxDb250ZXh0LFxuICAgICAgICBcImdldFJld2FyZFRva2Vuc1wiLFxuICAgICAgICBcImZ1bmN0aW9uIGdldFJld2FyZFRva2VucygpXCIsXG4gICAgICAgIFtdLFxuICAgICAgKTtcbiAgICB9LFxuICAgIGluY3JlYXNlT2JzZXJ2YXRpb25zQ2FyZGluYWxpdHlOZXh0KFxuICAgICAgY2FyZGluYWxpdHlOZXh0OiBCaWdOdW1iZXJpc2gsXG4gICAgICBjYWxsQ29udGV4dDogRXRoQ2FsbENvbnRleHQsXG4gICAgKTogRXRoQ2FsbFBhcmFtIHtcbiAgICAgIHJldHVybiBlbmNvZGVDYWxsRGF0YShcbiAgICAgICAgY2FsbENvbnRleHQsXG4gICAgICAgIFwiaW5jcmVhc2VPYnNlcnZhdGlvbnNDYXJkaW5hbGl0eU5leHRcIixcbiAgICAgICAgXCJmdW5jdGlvbiBpbmNyZWFzZU9ic2VydmF0aW9uc0NhcmRpbmFsaXR5TmV4dCh1aW50MTYpXCIsXG4gICAgICAgIFtjYXJkaW5hbGl0eU5leHRdLFxuICAgICAgKTtcbiAgICB9LFxuICAgIGlzRXhwaXJlZChjYWxsQ29udGV4dDogRXRoQ2FsbENvbnRleHQpOiBFdGhDYWxsUGFyYW0ge1xuICAgICAgcmV0dXJuIGVuY29kZUNhbGxEYXRhKFxuICAgICAgICBjYWxsQ29udGV4dCxcbiAgICAgICAgXCJpc0V4cGlyZWRcIixcbiAgICAgICAgXCJmdW5jdGlvbiBpc0V4cGlyZWQoKVwiLFxuICAgICAgICBbXSxcbiAgICAgICk7XG4gICAgfSxcbiAgICBtaW50KFxuICAgICAgcmVjZWl2ZXI6IHN0cmluZyxcbiAgICAgIG5ldFN5RGVzaXJlZDogQmlnTnVtYmVyaXNoLFxuICAgICAgbmV0UHREZXNpcmVkOiBCaWdOdW1iZXJpc2gsXG4gICAgICBjYWxsQ29udGV4dDogRXRoQ2FsbENvbnRleHQsXG4gICAgKTogRXRoQ2FsbFBhcmFtIHtcbiAgICAgIHJldHVybiBlbmNvZGVDYWxsRGF0YShcbiAgICAgICAgY2FsbENvbnRleHQsXG4gICAgICAgIFwibWludFwiLFxuICAgICAgICBcImZ1bmN0aW9uIG1pbnQoYWRkcmVzcyx1aW50MjU2LHVpbnQyNTYpXCIsXG4gICAgICAgIFtyZWNlaXZlciwgbmV0U3lEZXNpcmVkLCBuZXRQdERlc2lyZWRdLFxuICAgICAgKTtcbiAgICB9LFxuICAgIG5hbWUoY2FsbENvbnRleHQ6IEV0aENhbGxDb250ZXh0KTogRXRoQ2FsbFBhcmFtIHtcbiAgICAgIHJldHVybiBlbmNvZGVDYWxsRGF0YShjYWxsQ29udGV4dCwgXCJuYW1lXCIsIFwiZnVuY3Rpb24gbmFtZSgpXCIsIFtdKTtcbiAgICB9LFxuICAgIG9ic2VydmF0aW9ucyhcbiAgICAgIGluZGV4OiBCaWdOdW1iZXJpc2gsXG4gICAgICBjYWxsQ29udGV4dDogRXRoQ2FsbENvbnRleHQsXG4gICAgKTogRXRoQ2FsbFBhcmFtIHtcbiAgICAgIHJldHVybiBlbmNvZGVDYWxsRGF0YShcbiAgICAgICAgY2FsbENvbnRleHQsXG4gICAgICAgIFwib2JzZXJ2YXRpb25zXCIsXG4gICAgICAgIFwiZnVuY3Rpb24gb2JzZXJ2YXRpb25zKHVpbnQyNTYpXCIsXG4gICAgICAgIFtpbmRleF0sXG4gICAgICApO1xuICAgIH0sXG4gICAgb2JzZXJ2ZShcbiAgICAgIHNlY29uZHNBZ29zOiBCaWdOdW1iZXJpc2hbXSxcbiAgICAgIGNhbGxDb250ZXh0OiBFdGhDYWxsQ29udGV4dCxcbiAgICApOiBFdGhDYWxsUGFyYW0ge1xuICAgICAgcmV0dXJuIGVuY29kZUNhbGxEYXRhKFxuICAgICAgICBjYWxsQ29udGV4dCxcbiAgICAgICAgXCJvYnNlcnZlXCIsXG4gICAgICAgIFwiZnVuY3Rpb24gb2JzZXJ2ZSh1aW50MzJbXSlcIixcbiAgICAgICAgW3NlY29uZHNBZ29zXSxcbiAgICAgICk7XG4gICAgfSxcbiAgICByZWFkU3RhdGUocm91dGVyOiBzdHJpbmcsIGNhbGxDb250ZXh0OiBFdGhDYWxsQ29udGV4dCk6IEV0aENhbGxQYXJhbSB7XG4gICAgICByZXR1cm4gZW5jb2RlQ2FsbERhdGEoXG4gICAgICAgIGNhbGxDb250ZXh0LFxuICAgICAgICBcInJlYWRTdGF0ZVwiLFxuICAgICAgICBcImZ1bmN0aW9uIHJlYWRTdGF0ZShhZGRyZXNzKVwiLFxuICAgICAgICBbcm91dGVyXSxcbiAgICAgICk7XG4gICAgfSxcbiAgICByZWFkVG9rZW5zKGNhbGxDb250ZXh0OiBFdGhDYWxsQ29udGV4dCk6IEV0aENhbGxQYXJhbSB7XG4gICAgICByZXR1cm4gZW5jb2RlQ2FsbERhdGEoXG4gICAgICAgIGNhbGxDb250ZXh0LFxuICAgICAgICBcInJlYWRUb2tlbnNcIixcbiAgICAgICAgXCJmdW5jdGlvbiByZWFkVG9rZW5zKClcIixcbiAgICAgICAgW10sXG4gICAgICApO1xuICAgIH0sXG4gICAgcmVkZWVtUmV3YXJkcyh1c2VyOiBzdHJpbmcsIGNhbGxDb250ZXh0OiBFdGhDYWxsQ29udGV4dCk6IEV0aENhbGxQYXJhbSB7XG4gICAgICByZXR1cm4gZW5jb2RlQ2FsbERhdGEoXG4gICAgICAgIGNhbGxDb250ZXh0LFxuICAgICAgICBcInJlZGVlbVJld2FyZHNcIixcbiAgICAgICAgXCJmdW5jdGlvbiByZWRlZW1SZXdhcmRzKGFkZHJlc3MpXCIsXG4gICAgICAgIFt1c2VyXSxcbiAgICAgICk7XG4gICAgfSxcbiAgICBzd2FwRXhhY3RQdEZvclN5KFxuICAgICAgcmVjZWl2ZXI6IHN0cmluZyxcbiAgICAgIGV4YWN0UHRJbjogQmlnTnVtYmVyaXNoLFxuICAgICAgZGF0YTogQnl0ZXNMaWtlLFxuICAgICAgY2FsbENvbnRleHQ6IEV0aENhbGxDb250ZXh0LFxuICAgICk6IEV0aENhbGxQYXJhbSB7XG4gICAgICByZXR1cm4gZW5jb2RlQ2FsbERhdGEoXG4gICAgICAgIGNhbGxDb250ZXh0LFxuICAgICAgICBcInN3YXBFeGFjdFB0Rm9yU3lcIixcbiAgICAgICAgXCJmdW5jdGlvbiBzd2FwRXhhY3RQdEZvclN5KGFkZHJlc3MsdWludDI1NixieXRlcylcIixcbiAgICAgICAgW3JlY2VpdmVyLCBleGFjdFB0SW4sIGRhdGFdLFxuICAgICAgKTtcbiAgICB9LFxuICAgIHN3YXBTeUZvckV4YWN0UHQoXG4gICAgICByZWNlaXZlcjogc3RyaW5nLFxuICAgICAgZXhhY3RQdE91dDogQmlnTnVtYmVyaXNoLFxuICAgICAgZGF0YTogQnl0ZXNMaWtlLFxuICAgICAgY2FsbENvbnRleHQ6IEV0aENhbGxDb250ZXh0LFxuICAgICk6IEV0aENhbGxQYXJhbSB7XG4gICAgICByZXR1cm4gZW5jb2RlQ2FsbERhdGEoXG4gICAgICAgIGNhbGxDb250ZXh0LFxuICAgICAgICBcInN3YXBTeUZvckV4YWN0UHRcIixcbiAgICAgICAgXCJmdW5jdGlvbiBzd2FwU3lGb3JFeGFjdFB0KGFkZHJlc3MsdWludDI1NixieXRlcylcIixcbiAgICAgICAgW3JlY2VpdmVyLCBleGFjdFB0T3V0LCBkYXRhXSxcbiAgICAgICk7XG4gICAgfSxcbiAgICBzeW1ib2woY2FsbENvbnRleHQ6IEV0aENhbGxDb250ZXh0KTogRXRoQ2FsbFBhcmFtIHtcbiAgICAgIHJldHVybiBlbmNvZGVDYWxsRGF0YShjYWxsQ29udGV4dCwgXCJzeW1ib2xcIiwgXCJmdW5jdGlvbiBzeW1ib2woKVwiLCBbXSk7XG4gICAgfSxcbiAgICB0b3RhbEFjdGl2ZVN1cHBseShjYWxsQ29udGV4dDogRXRoQ2FsbENvbnRleHQpOiBFdGhDYWxsUGFyYW0ge1xuICAgICAgcmV0dXJuIGVuY29kZUNhbGxEYXRhKFxuICAgICAgICBjYWxsQ29udGV4dCxcbiAgICAgICAgXCJ0b3RhbEFjdGl2ZVN1cHBseVwiLFxuICAgICAgICBcImZ1bmN0aW9uIHRvdGFsQWN0aXZlU3VwcGx5KClcIixcbiAgICAgICAgW10sXG4gICAgICApO1xuICAgIH0sXG4gICAgdG90YWxTdXBwbHkoY2FsbENvbnRleHQ6IEV0aENhbGxDb250ZXh0KTogRXRoQ2FsbFBhcmFtIHtcbiAgICAgIHJldHVybiBlbmNvZGVDYWxsRGF0YShcbiAgICAgICAgY2FsbENvbnRleHQsXG4gICAgICAgIFwidG90YWxTdXBwbHlcIixcbiAgICAgICAgXCJmdW5jdGlvbiB0b3RhbFN1cHBseSgpXCIsXG4gICAgICAgIFtdLFxuICAgICAgKTtcbiAgICB9LFxuICAgIHRyYW5zZmVyKFxuICAgICAgdG86IHN0cmluZyxcbiAgICAgIGFtb3VudDogQmlnTnVtYmVyaXNoLFxuICAgICAgY2FsbENvbnRleHQ6IEV0aENhbGxDb250ZXh0LFxuICAgICk6IEV0aENhbGxQYXJhbSB7XG4gICAgICByZXR1cm4gZW5jb2RlQ2FsbERhdGEoXG4gICAgICAgIGNhbGxDb250ZXh0LFxuICAgICAgICBcInRyYW5zZmVyXCIsXG4gICAgICAgIFwiZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyx1aW50MjU2KVwiLFxuICAgICAgICBbdG8sIGFtb3VudF0sXG4gICAgICApO1xuICAgIH0sXG4gICAgdHJhbnNmZXJGcm9tKFxuICAgICAgZnJvbTogc3RyaW5nLFxuICAgICAgdG86IHN0cmluZyxcbiAgICAgIGFtb3VudDogQmlnTnVtYmVyaXNoLFxuICAgICAgY2FsbENvbnRleHQ6IEV0aENhbGxDb250ZXh0LFxuICAgICk6IEV0aENhbGxQYXJhbSB7XG4gICAgICByZXR1cm4gZW5jb2RlQ2FsbERhdGEoXG4gICAgICAgIGNhbGxDb250ZXh0LFxuICAgICAgICBcInRyYW5zZmVyRnJvbVwiLFxuICAgICAgICBcImZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzLGFkZHJlc3MsdWludDI1NilcIixcbiAgICAgICAgW2Zyb20sIHRvLCBhbW91bnRdLFxuICAgICAgKTtcbiAgICB9LFxuICB9O1xufVxuXG5leHBvcnQgY2xhc3MgUGVuZGxlTWFya2V0Qm91bmRDb250cmFjdFZpZXcgZXh0ZW5kcyBCb3VuZENvbnRyYWN0VmlldzxcbiAgUGVuZGxlTWFya2V0LFxuICBQZW5kbGVNYXJrZXRDb250cmFjdFZpZXdcbj4ge1xuICBhc3luYyBfc3RvcmFnZShcbiAgICBvdmVycmlkZXM/OiBPdmVycmlkZXMsXG4gICk6IFByb21pc2U8XG4gICAgW2JpZ2ludCwgYmlnaW50LCBiaWdpbnQsIGJpZ2ludCwgYmlnaW50LCBiaWdpbnRdICYge1xuICAgICAgdG90YWxQdDogYmlnaW50O1xuICAgICAgdG90YWxTeTogYmlnaW50O1xuICAgICAgbGFzdExuSW1wbGllZFJhdGU6IGJpZ2ludDtcbiAgICAgIG9ic2VydmF0aW9uSW5kZXg6IGJpZ2ludDtcbiAgICAgIG9ic2VydmF0aW9uQ2FyZGluYWxpdHk6IGJpZ2ludDtcbiAgICAgIG9ic2VydmF0aW9uQ2FyZGluYWxpdHlOZXh0OiBiaWdpbnQ7XG4gICAgfVxuICA+IHtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy52aWV3Ll9zdG9yYWdlKFxuICAgICAge1xuICAgICAgICBibG9ja1RhZzogdGhpcy5jb250ZXh0LmJsb2NrTnVtYmVyLFxuICAgICAgICAuLi5vdmVycmlkZXMsXG4gICAgICB9LFxuICAgICAgdGhpcy5jb250ZXh0LnByZXBhcmVkRGF0YSxcbiAgICAgIHRoaXMuY29udGV4dC5nZXRFdGhDYWxsQ29udGV4dCgpLFxuICAgICk7XG4gIH1cblxuICBhc3luYyBhY3RpdmVCYWxhbmNlKHVzZXI6IHN0cmluZywgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzKTogUHJvbWlzZTxiaWdpbnQ+IHtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy52aWV3LmFjdGl2ZUJhbGFuY2UoXG4gICAgICB1c2VyLFxuICAgICAge1xuICAgICAgICBibG9ja1RhZzogdGhpcy5jb250ZXh0LmJsb2NrTnVtYmVyLFxuICAgICAgICAuLi5vdmVycmlkZXMsXG4gICAgICB9LFxuICAgICAgdGhpcy5jb250ZXh0LnByZXBhcmVkRGF0YSxcbiAgICAgIHRoaXMuY29udGV4dC5nZXRFdGhDYWxsQ29udGV4dCgpLFxuICAgICk7XG4gIH1cblxuICBhc3luYyBhbGxvd2FuY2UoXG4gICAgb3duZXI6IHN0cmluZyxcbiAgICBzcGVuZGVyOiBzdHJpbmcsXG4gICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzLFxuICApOiBQcm9taXNlPGJpZ2ludD4ge1xuICAgIHJldHVybiBhd2FpdCB0aGlzLnZpZXcuYWxsb3dhbmNlKFxuICAgICAgb3duZXIsXG4gICAgICBzcGVuZGVyLFxuICAgICAge1xuICAgICAgICBibG9ja1RhZzogdGhpcy5jb250ZXh0LmJsb2NrTnVtYmVyLFxuICAgICAgICAuLi5vdmVycmlkZXMsXG4gICAgICB9LFxuICAgICAgdGhpcy5jb250ZXh0LnByZXBhcmVkRGF0YSxcbiAgICAgIHRoaXMuY29udGV4dC5nZXRFdGhDYWxsQ29udGV4dCgpLFxuICAgICk7XG4gIH1cblxuICBhc3luYyBiYWxhbmNlT2YoYWNjb3VudDogc3RyaW5nLCBvdmVycmlkZXM/OiBPdmVycmlkZXMpOiBQcm9taXNlPGJpZ2ludD4ge1xuICAgIHJldHVybiBhd2FpdCB0aGlzLnZpZXcuYmFsYW5jZU9mKFxuICAgICAgYWNjb3VudCxcbiAgICAgIHtcbiAgICAgICAgYmxvY2tUYWc6IHRoaXMuY29udGV4dC5ibG9ja051bWJlcixcbiAgICAgICAgLi4ub3ZlcnJpZGVzLFxuICAgICAgfSxcbiAgICAgIHRoaXMuY29udGV4dC5wcmVwYXJlZERhdGEsXG4gICAgICB0aGlzLmNvbnRleHQuZ2V0RXRoQ2FsbENvbnRleHQoKSxcbiAgICApO1xuICB9XG5cbiAgYXN5bmMgZGVjaW1hbHMob3ZlcnJpZGVzPzogT3ZlcnJpZGVzKTogUHJvbWlzZTxiaWdpbnQ+IHtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy52aWV3LmRlY2ltYWxzKFxuICAgICAge1xuICAgICAgICBibG9ja1RhZzogdGhpcy5jb250ZXh0LmJsb2NrTnVtYmVyLFxuICAgICAgICAuLi5vdmVycmlkZXMsXG4gICAgICB9LFxuICAgICAgdGhpcy5jb250ZXh0LnByZXBhcmVkRGF0YSxcbiAgICAgIHRoaXMuY29udGV4dC5nZXRFdGhDYWxsQ29udGV4dCgpLFxuICAgICk7XG4gIH1cblxuICBhc3luYyBleHBpcnkob3ZlcnJpZGVzPzogT3ZlcnJpZGVzKTogUHJvbWlzZTxiaWdpbnQ+IHtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy52aWV3LmV4cGlyeShcbiAgICAgIHtcbiAgICAgICAgYmxvY2tUYWc6IHRoaXMuY29udGV4dC5ibG9ja051bWJlcixcbiAgICAgICAgLi4ub3ZlcnJpZGVzLFxuICAgICAgfSxcbiAgICAgIHRoaXMuY29udGV4dC5wcmVwYXJlZERhdGEsXG4gICAgICB0aGlzLmNvbnRleHQuZ2V0RXRoQ2FsbENvbnRleHQoKSxcbiAgICApO1xuICB9XG5cbiAgYXN5bmMgZ2V0UmV3YXJkVG9rZW5zKG92ZXJyaWRlcz86IE92ZXJyaWRlcyk6IFByb21pc2U8c3RyaW5nW10+IHtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy52aWV3LmdldFJld2FyZFRva2VucyhcbiAgICAgIHtcbiAgICAgICAgYmxvY2tUYWc6IHRoaXMuY29udGV4dC5ibG9ja051bWJlcixcbiAgICAgICAgLi4ub3ZlcnJpZGVzLFxuICAgICAgfSxcbiAgICAgIHRoaXMuY29udGV4dC5wcmVwYXJlZERhdGEsXG4gICAgICB0aGlzLmNvbnRleHQuZ2V0RXRoQ2FsbENvbnRleHQoKSxcbiAgICApO1xuICB9XG5cbiAgYXN5bmMgaXNFeHBpcmVkKG92ZXJyaWRlcz86IE92ZXJyaWRlcyk6IFByb21pc2U8Ym9vbGVhbj4ge1xuICAgIHJldHVybiBhd2FpdCB0aGlzLnZpZXcuaXNFeHBpcmVkKFxuICAgICAge1xuICAgICAgICBibG9ja1RhZzogdGhpcy5jb250ZXh0LmJsb2NrTnVtYmVyLFxuICAgICAgICAuLi5vdmVycmlkZXMsXG4gICAgICB9LFxuICAgICAgdGhpcy5jb250ZXh0LnByZXBhcmVkRGF0YSxcbiAgICAgIHRoaXMuY29udGV4dC5nZXRFdGhDYWxsQ29udGV4dCgpLFxuICAgICk7XG4gIH1cblxuICBhc3luYyBuYW1lKG92ZXJyaWRlcz86IE92ZXJyaWRlcyk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMudmlldy5uYW1lKFxuICAgICAge1xuICAgICAgICBibG9ja1RhZzogdGhpcy5jb250ZXh0LmJsb2NrTnVtYmVyLFxuICAgICAgICAuLi5vdmVycmlkZXMsXG4gICAgICB9LFxuICAgICAgdGhpcy5jb250ZXh0LnByZXBhcmVkRGF0YSxcbiAgICAgIHRoaXMuY29udGV4dC5nZXRFdGhDYWxsQ29udGV4dCgpLFxuICAgICk7XG4gIH1cblxuICBhc3luYyBvYnNlcnZhdGlvbnMoXG4gICAgaW5kZXg6IEJpZ051bWJlcmlzaCxcbiAgICBvdmVycmlkZXM/OiBPdmVycmlkZXMsXG4gICk6IFByb21pc2U8XG4gICAgW2JpZ2ludCwgYmlnaW50LCBib29sZWFuXSAmIHtcbiAgICAgIGJsb2NrVGltZXN0YW1wOiBiaWdpbnQ7XG4gICAgICBsbkltcGxpZWRSYXRlQ3VtdWxhdGl2ZTogYmlnaW50O1xuICAgICAgaW5pdGlhbGl6ZWQ6IGJvb2xlYW47XG4gICAgfVxuICA+IHtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy52aWV3Lm9ic2VydmF0aW9ucyhcbiAgICAgIGluZGV4LFxuICAgICAge1xuICAgICAgICBibG9ja1RhZzogdGhpcy5jb250ZXh0LmJsb2NrTnVtYmVyLFxuICAgICAgICAuLi5vdmVycmlkZXMsXG4gICAgICB9LFxuICAgICAgdGhpcy5jb250ZXh0LnByZXBhcmVkRGF0YSxcbiAgICAgIHRoaXMuY29udGV4dC5nZXRFdGhDYWxsQ29udGV4dCgpLFxuICAgICk7XG4gIH1cblxuICBhc3luYyBvYnNlcnZlKFxuICAgIHNlY29uZHNBZ29zOiBCaWdOdW1iZXJpc2hbXSxcbiAgICBvdmVycmlkZXM/OiBPdmVycmlkZXMsXG4gICk6IFByb21pc2U8YmlnaW50W10+IHtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy52aWV3Lm9ic2VydmUoXG4gICAgICBzZWNvbmRzQWdvcyxcbiAgICAgIHtcbiAgICAgICAgYmxvY2tUYWc6IHRoaXMuY29udGV4dC5ibG9ja051bWJlcixcbiAgICAgICAgLi4ub3ZlcnJpZGVzLFxuICAgICAgfSxcbiAgICAgIHRoaXMuY29udGV4dC5wcmVwYXJlZERhdGEsXG4gICAgICB0aGlzLmNvbnRleHQuZ2V0RXRoQ2FsbENvbnRleHQoKSxcbiAgICApO1xuICB9XG5cbiAgYXN5bmMgcmVhZFN0YXRlKFxuICAgIHJvdXRlcjogc3RyaW5nLFxuICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlcyxcbiAgKTogUHJvbWlzZTxNYXJrZXRTdGF0ZVN0cnVjdE91dHB1dD4ge1xuICAgIHJldHVybiBhd2FpdCB0aGlzLnZpZXcucmVhZFN0YXRlKFxuICAgICAgcm91dGVyLFxuICAgICAge1xuICAgICAgICBibG9ja1RhZzogdGhpcy5jb250ZXh0LmJsb2NrTnVtYmVyLFxuICAgICAgICAuLi5vdmVycmlkZXMsXG4gICAgICB9LFxuICAgICAgdGhpcy5jb250ZXh0LnByZXBhcmVkRGF0YSxcbiAgICAgIHRoaXMuY29udGV4dC5nZXRFdGhDYWxsQ29udGV4dCgpLFxuICAgICk7XG4gIH1cblxuICBhc3luYyByZWFkVG9rZW5zKFxuICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlcyxcbiAgKTogUHJvbWlzZTxcbiAgICBbc3RyaW5nLCBzdHJpbmcsIHN0cmluZ10gJiB7IF9TWTogc3RyaW5nOyBfUFQ6IHN0cmluZzsgX1lUOiBzdHJpbmcgfVxuICA+IHtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy52aWV3LnJlYWRUb2tlbnMoXG4gICAgICB7XG4gICAgICAgIGJsb2NrVGFnOiB0aGlzLmNvbnRleHQuYmxvY2tOdW1iZXIsXG4gICAgICAgIC4uLm92ZXJyaWRlcyxcbiAgICAgIH0sXG4gICAgICB0aGlzLmNvbnRleHQucHJlcGFyZWREYXRhLFxuICAgICAgdGhpcy5jb250ZXh0LmdldEV0aENhbGxDb250ZXh0KCksXG4gICAgKTtcbiAgfVxuXG4gIGFzeW5jIHN5bWJvbChvdmVycmlkZXM/OiBPdmVycmlkZXMpOiBQcm9taXNlPHN0cmluZz4ge1xuICAgIHJldHVybiBhd2FpdCB0aGlzLnZpZXcuc3ltYm9sKFxuICAgICAge1xuICAgICAgICBibG9ja1RhZzogdGhpcy5jb250ZXh0LmJsb2NrTnVtYmVyLFxuICAgICAgICAuLi5vdmVycmlkZXMsXG4gICAgICB9LFxuICAgICAgdGhpcy5jb250ZXh0LnByZXBhcmVkRGF0YSxcbiAgICAgIHRoaXMuY29udGV4dC5nZXRFdGhDYWxsQ29udGV4dCgpLFxuICAgICk7XG4gIH1cblxuICBhc3luYyB0b3RhbEFjdGl2ZVN1cHBseShvdmVycmlkZXM/OiBPdmVycmlkZXMpOiBQcm9taXNlPGJpZ2ludD4ge1xuICAgIHJldHVybiBhd2FpdCB0aGlzLnZpZXcudG90YWxBY3RpdmVTdXBwbHkoXG4gICAgICB7XG4gICAgICAgIGJsb2NrVGFnOiB0aGlzLmNvbnRleHQuYmxvY2tOdW1iZXIsXG4gICAgICAgIC4uLm92ZXJyaWRlcyxcbiAgICAgIH0sXG4gICAgICB0aGlzLmNvbnRleHQucHJlcGFyZWREYXRhLFxuICAgICAgdGhpcy5jb250ZXh0LmdldEV0aENhbGxDb250ZXh0KCksXG4gICAgKTtcbiAgfVxuXG4gIGFzeW5jIHRvdGFsU3VwcGx5KG92ZXJyaWRlcz86IE92ZXJyaWRlcyk6IFByb21pc2U8YmlnaW50PiB7XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMudmlldy50b3RhbFN1cHBseShcbiAgICAgIHtcbiAgICAgICAgYmxvY2tUYWc6IHRoaXMuY29udGV4dC5ibG9ja051bWJlcixcbiAgICAgICAgLi4ub3ZlcnJpZGVzLFxuICAgICAgfSxcbiAgICAgIHRoaXMuY29udGV4dC5wcmVwYXJlZERhdGEsXG4gICAgICB0aGlzLmNvbnRleHQuZ2V0RXRoQ2FsbENvbnRleHQoKSxcbiAgICApO1xuICB9XG5cbiAgY2FsbFN0YXRpYyA9IHtcbiAgICB2aWV3OiB0aGlzLnZpZXcsXG4gICAgY29udGV4dDogdGhpcy5jb250ZXh0LFxuXG4gICAgYXN5bmMgYXBwcm92ZShcbiAgICAgIHNwZW5kZXI6IHN0cmluZyxcbiAgICAgIGFtb3VudDogQmlnTnVtYmVyaXNoLFxuICAgICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzLFxuICAgICk6IFByb21pc2U8Ym9vbGVhbj4ge1xuICAgICAgcmV0dXJuIGF3YWl0IHRoaXMudmlldy5jYWxsU3RhdGljLmFwcHJvdmUoXG4gICAgICAgIHNwZW5kZXIsXG4gICAgICAgIGFtb3VudCxcbiAgICAgICAge1xuICAgICAgICAgIGJsb2NrVGFnOiB0aGlzLmNvbnRleHQuYmxvY2tOdW1iZXIsXG4gICAgICAgICAgLi4ub3ZlcnJpZGVzLFxuICAgICAgICB9LFxuICAgICAgICB0aGlzLmNvbnRleHQucHJlcGFyZWREYXRhLFxuICAgICAgICB0aGlzLmNvbnRleHQuZ2V0RXRoQ2FsbENvbnRleHQoKSxcbiAgICAgICk7XG4gICAgfSxcbiAgICBhc3luYyBidXJuKFxuICAgICAgcmVjZWl2ZXJTeTogc3RyaW5nLFxuICAgICAgcmVjZWl2ZXJQdDogc3RyaW5nLFxuICAgICAgbmV0THBUb0J1cm46IEJpZ051bWJlcmlzaCxcbiAgICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlcyxcbiAgICApOiBQcm9taXNlPFtiaWdpbnQsIGJpZ2ludF0gJiB7IG5ldFN5T3V0OiBiaWdpbnQ7IG5ldFB0T3V0OiBiaWdpbnQgfT4ge1xuICAgICAgcmV0dXJuIGF3YWl0IHRoaXMudmlldy5jYWxsU3RhdGljLmJ1cm4oXG4gICAgICAgIHJlY2VpdmVyU3ksXG4gICAgICAgIHJlY2VpdmVyUHQsXG4gICAgICAgIG5ldExwVG9CdXJuLFxuICAgICAgICB7XG4gICAgICAgICAgYmxvY2tUYWc6IHRoaXMuY29udGV4dC5ibG9ja051bWJlcixcbiAgICAgICAgICAuLi5vdmVycmlkZXMsXG4gICAgICAgIH0sXG4gICAgICAgIHRoaXMuY29udGV4dC5wcmVwYXJlZERhdGEsXG4gICAgICAgIHRoaXMuY29udGV4dC5nZXRFdGhDYWxsQ29udGV4dCgpLFxuICAgICAgKTtcbiAgICB9LFxuICAgIGFzeW5jIGluY3JlYXNlT2JzZXJ2YXRpb25zQ2FyZGluYWxpdHlOZXh0KFxuICAgICAgY2FyZGluYWxpdHlOZXh0OiBCaWdOdW1iZXJpc2gsXG4gICAgICBvdmVycmlkZXM/OiBPdmVycmlkZXMsXG4gICAgKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICByZXR1cm4gYXdhaXQgdGhpcy52aWV3LmNhbGxTdGF0aWMuaW5jcmVhc2VPYnNlcnZhdGlvbnNDYXJkaW5hbGl0eU5leHQoXG4gICAgICAgIGNhcmRpbmFsaXR5TmV4dCxcbiAgICAgICAge1xuICAgICAgICAgIGJsb2NrVGFnOiB0aGlzLmNvbnRleHQuYmxvY2tOdW1iZXIsXG4gICAgICAgICAgLi4ub3ZlcnJpZGVzLFxuICAgICAgICB9LFxuICAgICAgICB0aGlzLmNvbnRleHQucHJlcGFyZWREYXRhLFxuICAgICAgICB0aGlzLmNvbnRleHQuZ2V0RXRoQ2FsbENvbnRleHQoKSxcbiAgICAgICk7XG4gICAgfSxcbiAgICBhc3luYyBtaW50KFxuICAgICAgcmVjZWl2ZXI6IHN0cmluZyxcbiAgICAgIG5ldFN5RGVzaXJlZDogQmlnTnVtYmVyaXNoLFxuICAgICAgbmV0UHREZXNpcmVkOiBCaWdOdW1iZXJpc2gsXG4gICAgICBvdmVycmlkZXM/OiBPdmVycmlkZXMsXG4gICAgKTogUHJvbWlzZTxcbiAgICAgIFtiaWdpbnQsIGJpZ2ludCwgYmlnaW50XSAmIHtcbiAgICAgICAgbmV0THBPdXQ6IGJpZ2ludDtcbiAgICAgICAgbmV0U3lVc2VkOiBiaWdpbnQ7XG4gICAgICAgIG5ldFB0VXNlZDogYmlnaW50O1xuICAgICAgfVxuICAgID4ge1xuICAgICAgcmV0dXJuIGF3YWl0IHRoaXMudmlldy5jYWxsU3RhdGljLm1pbnQoXG4gICAgICAgIHJlY2VpdmVyLFxuICAgICAgICBuZXRTeURlc2lyZWQsXG4gICAgICAgIG5ldFB0RGVzaXJlZCxcbiAgICAgICAge1xuICAgICAgICAgIGJsb2NrVGFnOiB0aGlzLmNvbnRleHQuYmxvY2tOdW1iZXIsXG4gICAgICAgICAgLi4ub3ZlcnJpZGVzLFxuICAgICAgICB9LFxuICAgICAgICB0aGlzLmNvbnRleHQucHJlcGFyZWREYXRhLFxuICAgICAgICB0aGlzLmNvbnRleHQuZ2V0RXRoQ2FsbENvbnRleHQoKSxcbiAgICAgICk7XG4gICAgfSxcbiAgICBhc3luYyByZWRlZW1SZXdhcmRzKFxuICAgICAgdXNlcjogc3RyaW5nLFxuICAgICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzLFxuICAgICk6IFByb21pc2U8YmlnaW50W10+IHtcbiAgICAgIHJldHVybiBhd2FpdCB0aGlzLnZpZXcuY2FsbFN0YXRpYy5yZWRlZW1SZXdhcmRzKFxuICAgICAgICB1c2VyLFxuICAgICAgICB7XG4gICAgICAgICAgYmxvY2tUYWc6IHRoaXMuY29udGV4dC5ibG9ja051bWJlcixcbiAgICAgICAgICAuLi5vdmVycmlkZXMsXG4gICAgICAgIH0sXG4gICAgICAgIHRoaXMuY29udGV4dC5wcmVwYXJlZERhdGEsXG4gICAgICAgIHRoaXMuY29udGV4dC5nZXRFdGhDYWxsQ29udGV4dCgpLFxuICAgICAgKTtcbiAgICB9LFxuICAgIGFzeW5jIHN3YXBFeGFjdFB0Rm9yU3koXG4gICAgICByZWNlaXZlcjogc3RyaW5nLFxuICAgICAgZXhhY3RQdEluOiBCaWdOdW1iZXJpc2gsXG4gICAgICBkYXRhOiBCeXRlc0xpa2UsXG4gICAgICBvdmVycmlkZXM/OiBPdmVycmlkZXMsXG4gICAgKTogUHJvbWlzZTxbYmlnaW50LCBiaWdpbnRdICYgeyBuZXRTeU91dDogYmlnaW50OyBuZXRTeUZlZTogYmlnaW50IH0+IHtcbiAgICAgIHJldHVybiBhd2FpdCB0aGlzLnZpZXcuY2FsbFN0YXRpYy5zd2FwRXhhY3RQdEZvclN5KFxuICAgICAgICByZWNlaXZlcixcbiAgICAgICAgZXhhY3RQdEluLFxuICAgICAgICBkYXRhLFxuICAgICAgICB7XG4gICAgICAgICAgYmxvY2tUYWc6IHRoaXMuY29udGV4dC5ibG9ja051bWJlcixcbiAgICAgICAgICAuLi5vdmVycmlkZXMsXG4gICAgICAgIH0sXG4gICAgICAgIHRoaXMuY29udGV4dC5wcmVwYXJlZERhdGEsXG4gICAgICAgIHRoaXMuY29udGV4dC5nZXRFdGhDYWxsQ29udGV4dCgpLFxuICAgICAgKTtcbiAgICB9LFxuICAgIGFzeW5jIHN3YXBTeUZvckV4YWN0UHQoXG4gICAgICByZWNlaXZlcjogc3RyaW5nLFxuICAgICAgZXhhY3RQdE91dDogQmlnTnVtYmVyaXNoLFxuICAgICAgZGF0YTogQnl0ZXNMaWtlLFxuICAgICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzLFxuICAgICk6IFByb21pc2U8W2JpZ2ludCwgYmlnaW50XSAmIHsgbmV0U3lJbjogYmlnaW50OyBuZXRTeUZlZTogYmlnaW50IH0+IHtcbiAgICAgIHJldHVybiBhd2FpdCB0aGlzLnZpZXcuY2FsbFN0YXRpYy5zd2FwU3lGb3JFeGFjdFB0KFxuICAgICAgICByZWNlaXZlcixcbiAgICAgICAgZXhhY3RQdE91dCxcbiAgICAgICAgZGF0YSxcbiAgICAgICAge1xuICAgICAgICAgIGJsb2NrVGFnOiB0aGlzLmNvbnRleHQuYmxvY2tOdW1iZXIsXG4gICAgICAgICAgLi4ub3ZlcnJpZGVzLFxuICAgICAgICB9LFxuICAgICAgICB0aGlzLmNvbnRleHQucHJlcGFyZWREYXRhLFxuICAgICAgICB0aGlzLmNvbnRleHQuZ2V0RXRoQ2FsbENvbnRleHQoKSxcbiAgICAgICk7XG4gICAgfSxcbiAgICBhc3luYyB0cmFuc2ZlcihcbiAgICAgIHRvOiBzdHJpbmcsXG4gICAgICBhbW91bnQ6IEJpZ051bWJlcmlzaCxcbiAgICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlcyxcbiAgICApOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICAgIHJldHVybiBhd2FpdCB0aGlzLnZpZXcuY2FsbFN0YXRpYy50cmFuc2ZlcihcbiAgICAgICAgdG8sXG4gICAgICAgIGFtb3VudCxcbiAgICAgICAge1xuICAgICAgICAgIGJsb2NrVGFnOiB0aGlzLmNvbnRleHQuYmxvY2tOdW1iZXIsXG4gICAgICAgICAgLi4ub3ZlcnJpZGVzLFxuICAgICAgICB9LFxuICAgICAgICB0aGlzLmNvbnRleHQucHJlcGFyZWREYXRhLFxuICAgICAgICB0aGlzLmNvbnRleHQuZ2V0RXRoQ2FsbENvbnRleHQoKSxcbiAgICAgICk7XG4gICAgfSxcbiAgICBhc3luYyB0cmFuc2ZlckZyb20oXG4gICAgICBmcm9tOiBzdHJpbmcsXG4gICAgICB0bzogc3RyaW5nLFxuICAgICAgYW1vdW50OiBCaWdOdW1iZXJpc2gsXG4gICAgICBvdmVycmlkZXM/OiBPdmVycmlkZXMsXG4gICAgKTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgICByZXR1cm4gYXdhaXQgdGhpcy52aWV3LmNhbGxTdGF0aWMudHJhbnNmZXJGcm9tKFxuICAgICAgICBmcm9tLFxuICAgICAgICB0byxcbiAgICAgICAgYW1vdW50LFxuICAgICAgICB7XG4gICAgICAgICAgYmxvY2tUYWc6IHRoaXMuY29udGV4dC5ibG9ja051bWJlcixcbiAgICAgICAgICAuLi5vdmVycmlkZXMsXG4gICAgICAgIH0sXG4gICAgICAgIHRoaXMuY29udGV4dC5wcmVwYXJlZERhdGEsXG4gICAgICAgIHRoaXMuY29udGV4dC5nZXRFdGhDYWxsQ29udGV4dCgpLFxuICAgICAgKTtcbiAgICB9LFxuICB9O1xuXG4gIGVuY29kZUNhbGwgPSB7XG4gICAgdmlldzogdGhpcy52aWV3LFxuICAgIGNvbnRleHQ6IHRoaXMuY29udGV4dCxcblxuICAgIF9zdG9yYWdlKG92ZXJyaWRlcz86IE92ZXJyaWRlcyk6IEV0aENhbGxQYXJhbSB7XG4gICAgICByZXR1cm4gdGhpcy52aWV3LmVuY29kZUNhbGwuX3N0b3JhZ2Uoe1xuICAgICAgICBjaGFpbklkOiB0aGlzLmNvbnRleHQuY2hhaW5JZC50b1N0cmluZygpLFxuICAgICAgICBhZGRyZXNzOiB0aGlzLmNvbnRleHQuYWRkcmVzcyxcbiAgICAgICAgYmxvY2tUYWc6IHRoaXMuY29udGV4dC5nZXRCbG9ja1RhZyhvdmVycmlkZXMpLFxuICAgICAgfSk7XG4gICAgfSxcbiAgICBhY3RpdmVCYWxhbmNlKHVzZXI6IHN0cmluZywgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzKTogRXRoQ2FsbFBhcmFtIHtcbiAgICAgIHJldHVybiB0aGlzLnZpZXcuZW5jb2RlQ2FsbC5hY3RpdmVCYWxhbmNlKHVzZXIsIHtcbiAgICAgICAgY2hhaW5JZDogdGhpcy5jb250ZXh0LmNoYWluSWQudG9TdHJpbmcoKSxcbiAgICAgICAgYWRkcmVzczogdGhpcy5jb250ZXh0LmFkZHJlc3MsXG4gICAgICAgIGJsb2NrVGFnOiB0aGlzLmNvbnRleHQuZ2V0QmxvY2tUYWcob3ZlcnJpZGVzKSxcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgYWxsb3dhbmNlKFxuICAgICAgb3duZXI6IHN0cmluZyxcbiAgICAgIHNwZW5kZXI6IHN0cmluZyxcbiAgICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlcyxcbiAgICApOiBFdGhDYWxsUGFyYW0ge1xuICAgICAgcmV0dXJuIHRoaXMudmlldy5lbmNvZGVDYWxsLmFsbG93YW5jZShvd25lciwgc3BlbmRlciwge1xuICAgICAgICBjaGFpbklkOiB0aGlzLmNvbnRleHQuY2hhaW5JZC50b1N0cmluZygpLFxuICAgICAgICBhZGRyZXNzOiB0aGlzLmNvbnRleHQuYWRkcmVzcyxcbiAgICAgICAgYmxvY2tUYWc6IHRoaXMuY29udGV4dC5nZXRCbG9ja1RhZyhvdmVycmlkZXMpLFxuICAgICAgfSk7XG4gICAgfSxcbiAgICBhcHByb3ZlKFxuICAgICAgc3BlbmRlcjogc3RyaW5nLFxuICAgICAgYW1vdW50OiBCaWdOdW1iZXJpc2gsXG4gICAgICBvdmVycmlkZXM/OiBPdmVycmlkZXMsXG4gICAgKTogRXRoQ2FsbFBhcmFtIHtcbiAgICAgIHJldHVybiB0aGlzLnZpZXcuZW5jb2RlQ2FsbC5hcHByb3ZlKHNwZW5kZXIsIGFtb3VudCwge1xuICAgICAgICBjaGFpbklkOiB0aGlzLmNvbnRleHQuY2hhaW5JZC50b1N0cmluZygpLFxuICAgICAgICBhZGRyZXNzOiB0aGlzLmNvbnRleHQuYWRkcmVzcyxcbiAgICAgICAgYmxvY2tUYWc6IHRoaXMuY29udGV4dC5nZXRCbG9ja1RhZyhvdmVycmlkZXMpLFxuICAgICAgfSk7XG4gICAgfSxcbiAgICBiYWxhbmNlT2YoYWNjb3VudDogc3RyaW5nLCBvdmVycmlkZXM/OiBPdmVycmlkZXMpOiBFdGhDYWxsUGFyYW0ge1xuICAgICAgcmV0dXJuIHRoaXMudmlldy5lbmNvZGVDYWxsLmJhbGFuY2VPZihhY2NvdW50LCB7XG4gICAgICAgIGNoYWluSWQ6IHRoaXMuY29udGV4dC5jaGFpbklkLnRvU3RyaW5nKCksXG4gICAgICAgIGFkZHJlc3M6IHRoaXMuY29udGV4dC5hZGRyZXNzLFxuICAgICAgICBibG9ja1RhZzogdGhpcy5jb250ZXh0LmdldEJsb2NrVGFnKG92ZXJyaWRlcyksXG4gICAgICB9KTtcbiAgICB9LFxuICAgIGJ1cm4oXG4gICAgICByZWNlaXZlclN5OiBzdHJpbmcsXG4gICAgICByZWNlaXZlclB0OiBzdHJpbmcsXG4gICAgICBuZXRMcFRvQnVybjogQmlnTnVtYmVyaXNoLFxuICAgICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzLFxuICAgICk6IEV0aENhbGxQYXJhbSB7XG4gICAgICByZXR1cm4gdGhpcy52aWV3LmVuY29kZUNhbGwuYnVybihyZWNlaXZlclN5LCByZWNlaXZlclB0LCBuZXRMcFRvQnVybiwge1xuICAgICAgICBjaGFpbklkOiB0aGlzLmNvbnRleHQuY2hhaW5JZC50b1N0cmluZygpLFxuICAgICAgICBhZGRyZXNzOiB0aGlzLmNvbnRleHQuYWRkcmVzcyxcbiAgICAgICAgYmxvY2tUYWc6IHRoaXMuY29udGV4dC5nZXRCbG9ja1RhZyhvdmVycmlkZXMpLFxuICAgICAgfSk7XG4gICAgfSxcbiAgICBkZWNpbWFscyhvdmVycmlkZXM/OiBPdmVycmlkZXMpOiBFdGhDYWxsUGFyYW0ge1xuICAgICAgcmV0dXJuIHRoaXMudmlldy5lbmNvZGVDYWxsLmRlY2ltYWxzKHtcbiAgICAgICAgY2hhaW5JZDogdGhpcy5jb250ZXh0LmNoYWluSWQudG9TdHJpbmcoKSxcbiAgICAgICAgYWRkcmVzczogdGhpcy5jb250ZXh0LmFkZHJlc3MsXG4gICAgICAgIGJsb2NrVGFnOiB0aGlzLmNvbnRleHQuZ2V0QmxvY2tUYWcob3ZlcnJpZGVzKSxcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgZXhwaXJ5KG92ZXJyaWRlcz86IE92ZXJyaWRlcyk6IEV0aENhbGxQYXJhbSB7XG4gICAgICByZXR1cm4gdGhpcy52aWV3LmVuY29kZUNhbGwuZXhwaXJ5KHtcbiAgICAgICAgY2hhaW5JZDogdGhpcy5jb250ZXh0LmNoYWluSWQudG9TdHJpbmcoKSxcbiAgICAgICAgYWRkcmVzczogdGhpcy5jb250ZXh0LmFkZHJlc3MsXG4gICAgICAgIGJsb2NrVGFnOiB0aGlzLmNvbnRleHQuZ2V0QmxvY2tUYWcob3ZlcnJpZGVzKSxcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgZ2V0UmV3YXJkVG9rZW5zKG92ZXJyaWRlcz86IE92ZXJyaWRlcyk6IEV0aENhbGxQYXJhbSB7XG4gICAgICByZXR1cm4gdGhpcy52aWV3LmVuY29kZUNhbGwuZ2V0UmV3YXJkVG9rZW5zKHtcbiAgICAgICAgY2hhaW5JZDogdGhpcy5jb250ZXh0LmNoYWluSWQudG9TdHJpbmcoKSxcbiAgICAgICAgYWRkcmVzczogdGhpcy5jb250ZXh0LmFkZHJlc3MsXG4gICAgICAgIGJsb2NrVGFnOiB0aGlzLmNvbnRleHQuZ2V0QmxvY2tUYWcob3ZlcnJpZGVzKSxcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgaW5jcmVhc2VPYnNlcnZhdGlvbnNDYXJkaW5hbGl0eU5leHQoXG4gICAgICBjYXJkaW5hbGl0eU5leHQ6IEJpZ051bWJlcmlzaCxcbiAgICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlcyxcbiAgICApOiBFdGhDYWxsUGFyYW0ge1xuICAgICAgcmV0dXJuIHRoaXMudmlldy5lbmNvZGVDYWxsLmluY3JlYXNlT2JzZXJ2YXRpb25zQ2FyZGluYWxpdHlOZXh0KFxuICAgICAgICBjYXJkaW5hbGl0eU5leHQsXG4gICAgICAgIHtcbiAgICAgICAgICBjaGFpbklkOiB0aGlzLmNvbnRleHQuY2hhaW5JZC50b1N0cmluZygpLFxuICAgICAgICAgIGFkZHJlc3M6IHRoaXMuY29udGV4dC5hZGRyZXNzLFxuICAgICAgICAgIGJsb2NrVGFnOiB0aGlzLmNvbnRleHQuZ2V0QmxvY2tUYWcob3ZlcnJpZGVzKSxcbiAgICAgICAgfSxcbiAgICAgICk7XG4gICAgfSxcbiAgICBpc0V4cGlyZWQob3ZlcnJpZGVzPzogT3ZlcnJpZGVzKTogRXRoQ2FsbFBhcmFtIHtcbiAgICAgIHJldHVybiB0aGlzLnZpZXcuZW5jb2RlQ2FsbC5pc0V4cGlyZWQoe1xuICAgICAgICBjaGFpbklkOiB0aGlzLmNvbnRleHQuY2hhaW5JZC50b1N0cmluZygpLFxuICAgICAgICBhZGRyZXNzOiB0aGlzLmNvbnRleHQuYWRkcmVzcyxcbiAgICAgICAgYmxvY2tUYWc6IHRoaXMuY29udGV4dC5nZXRCbG9ja1RhZyhvdmVycmlkZXMpLFxuICAgICAgfSk7XG4gICAgfSxcbiAgICBtaW50KFxuICAgICAgcmVjZWl2ZXI6IHN0cmluZyxcbiAgICAgIG5ldFN5RGVzaXJlZDogQmlnTnVtYmVyaXNoLFxuICAgICAgbmV0UHREZXNpcmVkOiBCaWdOdW1iZXJpc2gsXG4gICAgICBvdmVycmlkZXM/OiBPdmVycmlkZXMsXG4gICAgKTogRXRoQ2FsbFBhcmFtIHtcbiAgICAgIHJldHVybiB0aGlzLnZpZXcuZW5jb2RlQ2FsbC5taW50KHJlY2VpdmVyLCBuZXRTeURlc2lyZWQsIG5ldFB0RGVzaXJlZCwge1xuICAgICAgICBjaGFpbklkOiB0aGlzLmNvbnRleHQuY2hhaW5JZC50b1N0cmluZygpLFxuICAgICAgICBhZGRyZXNzOiB0aGlzLmNvbnRleHQuYWRkcmVzcyxcbiAgICAgICAgYmxvY2tUYWc6IHRoaXMuY29udGV4dC5nZXRCbG9ja1RhZyhvdmVycmlkZXMpLFxuICAgICAgfSk7XG4gICAgfSxcbiAgICBuYW1lKG92ZXJyaWRlcz86IE92ZXJyaWRlcyk6IEV0aENhbGxQYXJhbSB7XG4gICAgICByZXR1cm4gdGhpcy52aWV3LmVuY29kZUNhbGwubmFtZSh7XG4gICAgICAgIGNoYWluSWQ6IHRoaXMuY29udGV4dC5jaGFpbklkLnRvU3RyaW5nKCksXG4gICAgICAgIGFkZHJlc3M6IHRoaXMuY29udGV4dC5hZGRyZXNzLFxuICAgICAgICBibG9ja1RhZzogdGhpcy5jb250ZXh0LmdldEJsb2NrVGFnKG92ZXJyaWRlcyksXG4gICAgICB9KTtcbiAgICB9LFxuICAgIG9ic2VydmF0aW9ucyhpbmRleDogQmlnTnVtYmVyaXNoLCBvdmVycmlkZXM/OiBPdmVycmlkZXMpOiBFdGhDYWxsUGFyYW0ge1xuICAgICAgcmV0dXJuIHRoaXMudmlldy5lbmNvZGVDYWxsLm9ic2VydmF0aW9ucyhpbmRleCwge1xuICAgICAgICBjaGFpbklkOiB0aGlzLmNvbnRleHQuY2hhaW5JZC50b1N0cmluZygpLFxuICAgICAgICBhZGRyZXNzOiB0aGlzLmNvbnRleHQuYWRkcmVzcyxcbiAgICAgICAgYmxvY2tUYWc6IHRoaXMuY29udGV4dC5nZXRCbG9ja1RhZyhvdmVycmlkZXMpLFxuICAgICAgfSk7XG4gICAgfSxcbiAgICBvYnNlcnZlKHNlY29uZHNBZ29zOiBCaWdOdW1iZXJpc2hbXSwgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzKTogRXRoQ2FsbFBhcmFtIHtcbiAgICAgIHJldHVybiB0aGlzLnZpZXcuZW5jb2RlQ2FsbC5vYnNlcnZlKHNlY29uZHNBZ29zLCB7XG4gICAgICAgIGNoYWluSWQ6IHRoaXMuY29udGV4dC5jaGFpbklkLnRvU3RyaW5nKCksXG4gICAgICAgIGFkZHJlc3M6IHRoaXMuY29udGV4dC5hZGRyZXNzLFxuICAgICAgICBibG9ja1RhZzogdGhpcy5jb250ZXh0LmdldEJsb2NrVGFnKG92ZXJyaWRlcyksXG4gICAgICB9KTtcbiAgICB9LFxuICAgIHJlYWRTdGF0ZShyb3V0ZXI6IHN0cmluZywgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzKTogRXRoQ2FsbFBhcmFtIHtcbiAgICAgIHJldHVybiB0aGlzLnZpZXcuZW5jb2RlQ2FsbC5yZWFkU3RhdGUocm91dGVyLCB7XG4gICAgICAgIGNoYWluSWQ6IHRoaXMuY29udGV4dC5jaGFpbklkLnRvU3RyaW5nKCksXG4gICAgICAgIGFkZHJlc3M6IHRoaXMuY29udGV4dC5hZGRyZXNzLFxuICAgICAgICBibG9ja1RhZzogdGhpcy5jb250ZXh0LmdldEJsb2NrVGFnKG92ZXJyaWRlcyksXG4gICAgICB9KTtcbiAgICB9LFxuICAgIHJlYWRUb2tlbnMob3ZlcnJpZGVzPzogT3ZlcnJpZGVzKTogRXRoQ2FsbFBhcmFtIHtcbiAgICAgIHJldHVybiB0aGlzLnZpZXcuZW5jb2RlQ2FsbC5yZWFkVG9rZW5zKHtcbiAgICAgICAgY2hhaW5JZDogdGhpcy5jb250ZXh0LmNoYWluSWQudG9TdHJpbmcoKSxcbiAgICAgICAgYWRkcmVzczogdGhpcy5jb250ZXh0LmFkZHJlc3MsXG4gICAgICAgIGJsb2NrVGFnOiB0aGlzLmNvbnRleHQuZ2V0QmxvY2tUYWcob3ZlcnJpZGVzKSxcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgcmVkZWVtUmV3YXJkcyh1c2VyOiBzdHJpbmcsIG92ZXJyaWRlcz86IE92ZXJyaWRlcyk6IEV0aENhbGxQYXJhbSB7XG4gICAgICByZXR1cm4gdGhpcy52aWV3LmVuY29kZUNhbGwucmVkZWVtUmV3YXJkcyh1c2VyLCB7XG4gICAgICAgIGNoYWluSWQ6IHRoaXMuY29udGV4dC5jaGFpbklkLnRvU3RyaW5nKCksXG4gICAgICAgIGFkZHJlc3M6IHRoaXMuY29udGV4dC5hZGRyZXNzLFxuICAgICAgICBibG9ja1RhZzogdGhpcy5jb250ZXh0LmdldEJsb2NrVGFnKG92ZXJyaWRlcyksXG4gICAgICB9KTtcbiAgICB9LFxuICAgIHN3YXBFeGFjdFB0Rm9yU3koXG4gICAgICByZWNlaXZlcjogc3RyaW5nLFxuICAgICAgZXhhY3RQdEluOiBCaWdOdW1iZXJpc2gsXG4gICAgICBkYXRhOiBCeXRlc0xpa2UsXG4gICAgICBvdmVycmlkZXM/OiBPdmVycmlkZXMsXG4gICAgKTogRXRoQ2FsbFBhcmFtIHtcbiAgICAgIHJldHVybiB0aGlzLnZpZXcuZW5jb2RlQ2FsbC5zd2FwRXhhY3RQdEZvclN5KHJlY2VpdmVyLCBleGFjdFB0SW4sIGRhdGEsIHtcbiAgICAgICAgY2hhaW5JZDogdGhpcy5jb250ZXh0LmNoYWluSWQudG9TdHJpbmcoKSxcbiAgICAgICAgYWRkcmVzczogdGhpcy5jb250ZXh0LmFkZHJlc3MsXG4gICAgICAgIGJsb2NrVGFnOiB0aGlzLmNvbnRleHQuZ2V0QmxvY2tUYWcob3ZlcnJpZGVzKSxcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgc3dhcFN5Rm9yRXhhY3RQdChcbiAgICAgIHJlY2VpdmVyOiBzdHJpbmcsXG4gICAgICBleGFjdFB0T3V0OiBCaWdOdW1iZXJpc2gsXG4gICAgICBkYXRhOiBCeXRlc0xpa2UsXG4gICAgICBvdmVycmlkZXM/OiBPdmVycmlkZXMsXG4gICAgKTogRXRoQ2FsbFBhcmFtIHtcbiAgICAgIHJldHVybiB0aGlzLnZpZXcuZW5jb2RlQ2FsbC5zd2FwU3lGb3JFeGFjdFB0KHJlY2VpdmVyLCBleGFjdFB0T3V0LCBkYXRhLCB7XG4gICAgICAgIGNoYWluSWQ6IHRoaXMuY29udGV4dC5jaGFpbklkLnRvU3RyaW5nKCksXG4gICAgICAgIGFkZHJlc3M6IHRoaXMuY29udGV4dC5hZGRyZXNzLFxuICAgICAgICBibG9ja1RhZzogdGhpcy5jb250ZXh0LmdldEJsb2NrVGFnKG92ZXJyaWRlcyksXG4gICAgICB9KTtcbiAgICB9LFxuICAgIHN5bWJvbChvdmVycmlkZXM/OiBPdmVycmlkZXMpOiBFdGhDYWxsUGFyYW0ge1xuICAgICAgcmV0dXJuIHRoaXMudmlldy5lbmNvZGVDYWxsLnN5bWJvbCh7XG4gICAgICAgIGNoYWluSWQ6IHRoaXMuY29udGV4dC5jaGFpbklkLnRvU3RyaW5nKCksXG4gICAgICAgIGFkZHJlc3M6IHRoaXMuY29udGV4dC5hZGRyZXNzLFxuICAgICAgICBibG9ja1RhZzogdGhpcy5jb250ZXh0LmdldEJsb2NrVGFnKG92ZXJyaWRlcyksXG4gICAgICB9KTtcbiAgICB9LFxuICAgIHRvdGFsQWN0aXZlU3VwcGx5KG92ZXJyaWRlcz86IE92ZXJyaWRlcyk6IEV0aENhbGxQYXJhbSB7XG4gICAgICByZXR1cm4gdGhpcy52aWV3LmVuY29kZUNhbGwudG90YWxBY3RpdmVTdXBwbHkoe1xuICAgICAgICBjaGFpbklkOiB0aGlzLmNvbnRleHQuY2hhaW5JZC50b1N0cmluZygpLFxuICAgICAgICBhZGRyZXNzOiB0aGlzLmNvbnRleHQuYWRkcmVzcyxcbiAgICAgICAgYmxvY2tUYWc6IHRoaXMuY29udGV4dC5nZXRCbG9ja1RhZyhvdmVycmlkZXMpLFxuICAgICAgfSk7XG4gICAgfSxcbiAgICB0b3RhbFN1cHBseShvdmVycmlkZXM/OiBPdmVycmlkZXMpOiBFdGhDYWxsUGFyYW0ge1xuICAgICAgcmV0dXJuIHRoaXMudmlldy5lbmNvZGVDYWxsLnRvdGFsU3VwcGx5KHtcbiAgICAgICAgY2hhaW5JZDogdGhpcy5jb250ZXh0LmNoYWluSWQudG9TdHJpbmcoKSxcbiAgICAgICAgYWRkcmVzczogdGhpcy5jb250ZXh0LmFkZHJlc3MsXG4gICAgICAgIGJsb2NrVGFnOiB0aGlzLmNvbnRleHQuZ2V0QmxvY2tUYWcob3ZlcnJpZGVzKSxcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgdHJhbnNmZXIoXG4gICAgICB0bzogc3RyaW5nLFxuICAgICAgYW1vdW50OiBCaWdOdW1iZXJpc2gsXG4gICAgICBvdmVycmlkZXM/OiBPdmVycmlkZXMsXG4gICAgKTogRXRoQ2FsbFBhcmFtIHtcbiAgICAgIHJldHVybiB0aGlzLnZpZXcuZW5jb2RlQ2FsbC50cmFuc2Zlcih0bywgYW1vdW50LCB7XG4gICAgICAgIGNoYWluSWQ6IHRoaXMuY29udGV4dC5jaGFpbklkLnRvU3RyaW5nKCksXG4gICAgICAgIGFkZHJlc3M6IHRoaXMuY29udGV4dC5hZGRyZXNzLFxuICAgICAgICBibG9ja1RhZzogdGhpcy5jb250ZXh0LmdldEJsb2NrVGFnKG92ZXJyaWRlcyksXG4gICAgICB9KTtcbiAgICB9LFxuICAgIHRyYW5zZmVyRnJvbShcbiAgICAgIGZyb206IHN0cmluZyxcbiAgICAgIHRvOiBzdHJpbmcsXG4gICAgICBhbW91bnQ6IEJpZ051bWJlcmlzaCxcbiAgICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlcyxcbiAgICApOiBFdGhDYWxsUGFyYW0ge1xuICAgICAgcmV0dXJuIHRoaXMudmlldy5lbmNvZGVDYWxsLnRyYW5zZmVyRnJvbShmcm9tLCB0bywgYW1vdW50LCB7XG4gICAgICAgIGNoYWluSWQ6IHRoaXMuY29udGV4dC5jaGFpbklkLnRvU3RyaW5nKCksXG4gICAgICAgIGFkZHJlc3M6IHRoaXMuY29udGV4dC5hZGRyZXNzLFxuICAgICAgICBibG9ja1RhZzogdGhpcy5jb250ZXh0LmdldEJsb2NrVGFnKG92ZXJyaWRlcyksXG4gICAgICB9KTtcbiAgICB9LFxuICB9O1xufVxuXG5leHBvcnQgdHlwZSBQZW5kbGVNYXJrZXRDb250ZXh0ID0gQ29udHJhY3RDb250ZXh0PFxuICBQZW5kbGVNYXJrZXQsXG4gIFBlbmRsZU1hcmtldEJvdW5kQ29udHJhY3RWaWV3XG4+O1xuXG5leHBvcnQgY2xhc3MgUGVuZGxlTWFya2V0UHJvY2Vzc29yIGV4dGVuZHMgQmFzZVByb2Nlc3NvcjxcbiAgUGVuZGxlTWFya2V0LFxuICBQZW5kbGVNYXJrZXRCb3VuZENvbnRyYWN0Vmlld1xuPiB7XG4gIG9uRXZlbnRBcHByb3ZhbChcbiAgICBoYW5kbGVyOiAoZXZlbnQ6IEFwcHJvdmFsRXZlbnQsIGN0eDogUGVuZGxlTWFya2V0Q29udGV4dCkgPT4gdm9pZCxcbiAgICBmaWx0ZXI/OiBBcHByb3ZhbEV2ZW50RmlsdGVyIHwgQXBwcm92YWxFdmVudEZpbHRlcltdLFxuICAgIGZldGNoQ29uZmlnPzogUGFydGlhbDxFdGhGZXRjaENvbmZpZz4sXG4gICAgcHJlcHJvY2Vzc0hhbmRsZXI/OiAoXG4gICAgICBldmVudDogQXBwcm92YWxFdmVudCxcbiAgICAgIGN0eDogUGVuZGxlTWFya2V0Q29udGV4dCxcbiAgICAgIHByZXByb2Nlc3NTdG9yZTogeyBbazogc3RyaW5nXTogYW55IH0sXG4gICAgKSA9PiBQcm9taXNlPFByZXByb2Nlc3NSZXN1bHQ+LFxuICApOiB0aGlzIHtcbiAgICBpZiAoIWZpbHRlcikge1xuICAgICAgZmlsdGVyID0gdGVtcGxhdGVDb250cmFjdC5maWx0ZXJzW1wiQXBwcm92YWwoYWRkcmVzcyxhZGRyZXNzLHVpbnQyNTYpXCJdKFxuICAgICAgICBudWxsLFxuICAgICAgICBudWxsLFxuICAgICAgICBudWxsLFxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIHN1cGVyLm9uRXRoRXZlbnQoaGFuZGxlciwgZmlsdGVyISwgZmV0Y2hDb25maWcsIHByZXByb2Nlc3NIYW5kbGVyKTtcbiAgfVxuXG4gIG9uRXZlbnRCdXJuKFxuICAgIGhhbmRsZXI6IChldmVudDogQnVybkV2ZW50LCBjdHg6IFBlbmRsZU1hcmtldENvbnRleHQpID0+IHZvaWQsXG4gICAgZmlsdGVyPzogQnVybkV2ZW50RmlsdGVyIHwgQnVybkV2ZW50RmlsdGVyW10sXG4gICAgZmV0Y2hDb25maWc/OiBQYXJ0aWFsPEV0aEZldGNoQ29uZmlnPixcbiAgICBwcmVwcm9jZXNzSGFuZGxlcj86IChcbiAgICAgIGV2ZW50OiBCdXJuRXZlbnQsXG4gICAgICBjdHg6IFBlbmRsZU1hcmtldENvbnRleHQsXG4gICAgICBwcmVwcm9jZXNzU3RvcmU6IHsgW2s6IHN0cmluZ106IGFueSB9LFxuICAgICkgPT4gUHJvbWlzZTxQcmVwcm9jZXNzUmVzdWx0PixcbiAgKTogdGhpcyB7XG4gICAgaWYgKCFmaWx0ZXIpIHtcbiAgICAgIGZpbHRlciA9IHRlbXBsYXRlQ29udHJhY3QuZmlsdGVyc1tcbiAgICAgICAgXCJCdXJuKGFkZHJlc3MsYWRkcmVzcyx1aW50MjU2LHVpbnQyNTYsdWludDI1NilcIlxuICAgICAgXShudWxsLCBudWxsLCBudWxsLCBudWxsLCBudWxsKTtcbiAgICB9XG4gICAgcmV0dXJuIHN1cGVyLm9uRXRoRXZlbnQoaGFuZGxlciwgZmlsdGVyISwgZmV0Y2hDb25maWcsIHByZXByb2Nlc3NIYW5kbGVyKTtcbiAgfVxuXG4gIG9uRXZlbnRJbmNyZWFzZU9ic2VydmF0aW9uQ2FyZGluYWxpdHlOZXh0KFxuICAgIGhhbmRsZXI6IChcbiAgICAgIGV2ZW50OiBJbmNyZWFzZU9ic2VydmF0aW9uQ2FyZGluYWxpdHlOZXh0RXZlbnQsXG4gICAgICBjdHg6IFBlbmRsZU1hcmtldENvbnRleHQsXG4gICAgKSA9PiB2b2lkLFxuICAgIGZpbHRlcj86XG4gICAgICB8IEluY3JlYXNlT2JzZXJ2YXRpb25DYXJkaW5hbGl0eU5leHRFdmVudEZpbHRlclxuICAgICAgfCBJbmNyZWFzZU9ic2VydmF0aW9uQ2FyZGluYWxpdHlOZXh0RXZlbnRGaWx0ZXJbXSxcbiAgICBmZXRjaENvbmZpZz86IFBhcnRpYWw8RXRoRmV0Y2hDb25maWc+LFxuICAgIHByZXByb2Nlc3NIYW5kbGVyPzogKFxuICAgICAgZXZlbnQ6IEluY3JlYXNlT2JzZXJ2YXRpb25DYXJkaW5hbGl0eU5leHRFdmVudCxcbiAgICAgIGN0eDogUGVuZGxlTWFya2V0Q29udGV4dCxcbiAgICAgIHByZXByb2Nlc3NTdG9yZTogeyBbazogc3RyaW5nXTogYW55IH0sXG4gICAgKSA9PiBQcm9taXNlPFByZXByb2Nlc3NSZXN1bHQ+LFxuICApOiB0aGlzIHtcbiAgICBpZiAoIWZpbHRlcikge1xuICAgICAgZmlsdGVyID0gdGVtcGxhdGVDb250cmFjdC5maWx0ZXJzW1xuICAgICAgICBcIkluY3JlYXNlT2JzZXJ2YXRpb25DYXJkaW5hbGl0eU5leHQodWludDE2LHVpbnQxNilcIlxuICAgICAgXShudWxsLCBudWxsKTtcbiAgICB9XG4gICAgcmV0dXJuIHN1cGVyLm9uRXRoRXZlbnQoaGFuZGxlciwgZmlsdGVyISwgZmV0Y2hDb25maWcsIHByZXByb2Nlc3NIYW5kbGVyKTtcbiAgfVxuXG4gIG9uRXZlbnRNaW50KFxuICAgIGhhbmRsZXI6IChldmVudDogTWludEV2ZW50LCBjdHg6IFBlbmRsZU1hcmtldENvbnRleHQpID0+IHZvaWQsXG4gICAgZmlsdGVyPzogTWludEV2ZW50RmlsdGVyIHwgTWludEV2ZW50RmlsdGVyW10sXG4gICAgZmV0Y2hDb25maWc/OiBQYXJ0aWFsPEV0aEZldGNoQ29uZmlnPixcbiAgICBwcmVwcm9jZXNzSGFuZGxlcj86IChcbiAgICAgIGV2ZW50OiBNaW50RXZlbnQsXG4gICAgICBjdHg6IFBlbmRsZU1hcmtldENvbnRleHQsXG4gICAgICBwcmVwcm9jZXNzU3RvcmU6IHsgW2s6IHN0cmluZ106IGFueSB9LFxuICAgICkgPT4gUHJvbWlzZTxQcmVwcm9jZXNzUmVzdWx0PixcbiAgKTogdGhpcyB7XG4gICAgaWYgKCFmaWx0ZXIpIHtcbiAgICAgIGZpbHRlciA9IHRlbXBsYXRlQ29udHJhY3QuZmlsdGVyc1tcbiAgICAgICAgXCJNaW50KGFkZHJlc3MsdWludDI1Nix1aW50MjU2LHVpbnQyNTYpXCJcbiAgICAgIF0obnVsbCwgbnVsbCwgbnVsbCwgbnVsbCk7XG4gICAgfVxuICAgIHJldHVybiBzdXBlci5vbkV0aEV2ZW50KGhhbmRsZXIsIGZpbHRlciEsIGZldGNoQ29uZmlnLCBwcmVwcm9jZXNzSGFuZGxlcik7XG4gIH1cblxuICBvbkV2ZW50U3dhcChcbiAgICBoYW5kbGVyOiAoZXZlbnQ6IFN3YXBFdmVudCwgY3R4OiBQZW5kbGVNYXJrZXRDb250ZXh0KSA9PiB2b2lkLFxuICAgIGZpbHRlcj86IFN3YXBFdmVudEZpbHRlciB8IFN3YXBFdmVudEZpbHRlcltdLFxuICAgIGZldGNoQ29uZmlnPzogUGFydGlhbDxFdGhGZXRjaENvbmZpZz4sXG4gICAgcHJlcHJvY2Vzc0hhbmRsZXI/OiAoXG4gICAgICBldmVudDogU3dhcEV2ZW50LFxuICAgICAgY3R4OiBQZW5kbGVNYXJrZXRDb250ZXh0LFxuICAgICAgcHJlcHJvY2Vzc1N0b3JlOiB7IFtrOiBzdHJpbmddOiBhbnkgfSxcbiAgICApID0+IFByb21pc2U8UHJlcHJvY2Vzc1Jlc3VsdD4sXG4gICk6IHRoaXMge1xuICAgIGlmICghZmlsdGVyKSB7XG4gICAgICBmaWx0ZXIgPSB0ZW1wbGF0ZUNvbnRyYWN0LmZpbHRlcnNbXG4gICAgICAgIFwiU3dhcChhZGRyZXNzLGFkZHJlc3MsaW50MjU2LGludDI1Nix1aW50MjU2LHVpbnQyNTYpXCJcbiAgICAgIF0obnVsbCwgbnVsbCwgbnVsbCwgbnVsbCwgbnVsbCwgbnVsbCk7XG4gICAgfVxuICAgIHJldHVybiBzdXBlci5vbkV0aEV2ZW50KGhhbmRsZXIsIGZpbHRlciEsIGZldGNoQ29uZmlnLCBwcmVwcm9jZXNzSGFuZGxlcik7XG4gIH1cblxuICBvbkV2ZW50VHJhbnNmZXIoXG4gICAgaGFuZGxlcjogKGV2ZW50OiBUcmFuc2ZlckV2ZW50LCBjdHg6IFBlbmRsZU1hcmtldENvbnRleHQpID0+IHZvaWQsXG4gICAgZmlsdGVyPzogVHJhbnNmZXJFdmVudEZpbHRlciB8IFRyYW5zZmVyRXZlbnRGaWx0ZXJbXSxcbiAgICBmZXRjaENvbmZpZz86IFBhcnRpYWw8RXRoRmV0Y2hDb25maWc+LFxuICAgIHByZXByb2Nlc3NIYW5kbGVyPzogKFxuICAgICAgZXZlbnQ6IFRyYW5zZmVyRXZlbnQsXG4gICAgICBjdHg6IFBlbmRsZU1hcmtldENvbnRleHQsXG4gICAgICBwcmVwcm9jZXNzU3RvcmU6IHsgW2s6IHN0cmluZ106IGFueSB9LFxuICAgICkgPT4gUHJvbWlzZTxQcmVwcm9jZXNzUmVzdWx0PixcbiAgKTogdGhpcyB7XG4gICAgaWYgKCFmaWx0ZXIpIHtcbiAgICAgIGZpbHRlciA9IHRlbXBsYXRlQ29udHJhY3QuZmlsdGVyc1tcIlRyYW5zZmVyKGFkZHJlc3MsYWRkcmVzcyx1aW50MjU2KVwiXShcbiAgICAgICAgbnVsbCxcbiAgICAgICAgbnVsbCxcbiAgICAgICAgbnVsbCxcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiBzdXBlci5vbkV0aEV2ZW50KGhhbmRsZXIsIGZpbHRlciEsIGZldGNoQ29uZmlnLCBwcmVwcm9jZXNzSGFuZGxlcik7XG4gIH1cblxuICBvbkV2ZW50VXBkYXRlSW1wbGllZFJhdGUoXG4gICAgaGFuZGxlcjogKGV2ZW50OiBVcGRhdGVJbXBsaWVkUmF0ZUV2ZW50LCBjdHg6IFBlbmRsZU1hcmtldENvbnRleHQpID0+IHZvaWQsXG4gICAgZmlsdGVyPzogVXBkYXRlSW1wbGllZFJhdGVFdmVudEZpbHRlciB8IFVwZGF0ZUltcGxpZWRSYXRlRXZlbnRGaWx0ZXJbXSxcbiAgICBmZXRjaENvbmZpZz86IFBhcnRpYWw8RXRoRmV0Y2hDb25maWc+LFxuICAgIHByZXByb2Nlc3NIYW5kbGVyPzogKFxuICAgICAgZXZlbnQ6IFVwZGF0ZUltcGxpZWRSYXRlRXZlbnQsXG4gICAgICBjdHg6IFBlbmRsZU1hcmtldENvbnRleHQsXG4gICAgICBwcmVwcm9jZXNzU3RvcmU6IHsgW2s6IHN0cmluZ106IGFueSB9LFxuICAgICkgPT4gUHJvbWlzZTxQcmVwcm9jZXNzUmVzdWx0PixcbiAgKTogdGhpcyB7XG4gICAgaWYgKCFmaWx0ZXIpIHtcbiAgICAgIGZpbHRlciA9IHRlbXBsYXRlQ29udHJhY3QuZmlsdGVyc1tcIlVwZGF0ZUltcGxpZWRSYXRlKHVpbnQyNTYsdWludDI1NilcIl0oXG4gICAgICAgIG51bGwsXG4gICAgICAgIG51bGwsXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gc3VwZXIub25FdGhFdmVudChoYW5kbGVyLCBmaWx0ZXIhLCBmZXRjaENvbmZpZywgcHJlcHJvY2Vzc0hhbmRsZXIpO1xuICB9XG5cbiAgb25DYWxsX3N0b3JhZ2UoXG4gICAgaGFuZGxlcjogKGNhbGw6IF9zdG9yYWdlQ2FsbFRyYWNlLCBjdHg6IFBlbmRsZU1hcmtldENvbnRleHQpID0+IHZvaWQsXG4gICAgZmV0Y2hDb25maWc/OiBQYXJ0aWFsPEV0aEZldGNoQ29uZmlnPixcbiAgICBwcmVwcm9jZXNzSGFuZGxlcj86IChcbiAgICAgIGNhbGw6IF9zdG9yYWdlQ2FsbFRyYWNlLFxuICAgICAgY3R4OiBQZW5kbGVNYXJrZXRDb250ZXh0LFxuICAgICkgPT4gUHJvbWlzZTxQcmVwcm9jZXNzUmVzdWx0PixcbiAgKTogdGhpcyB7XG4gICAgcmV0dXJuIHN1cGVyLm9uRXRoVHJhY2UoXG4gICAgICBcIjB4YzNmYjkwZDZcIixcbiAgICAgIGhhbmRsZXIgYXMgYW55LFxuICAgICAgZmV0Y2hDb25maWcsXG4gICAgICBwcmVwcm9jZXNzSGFuZGxlcixcbiAgICApO1xuICB9XG5cbiAgb25DYWxsQWN0aXZlQmFsYW5jZShcbiAgICBoYW5kbGVyOiAoY2FsbDogQWN0aXZlQmFsYW5jZUNhbGxUcmFjZSwgY3R4OiBQZW5kbGVNYXJrZXRDb250ZXh0KSA9PiB2b2lkLFxuICAgIGZldGNoQ29uZmlnPzogUGFydGlhbDxFdGhGZXRjaENvbmZpZz4sXG4gICAgcHJlcHJvY2Vzc0hhbmRsZXI/OiAoXG4gICAgICBjYWxsOiBBY3RpdmVCYWxhbmNlQ2FsbFRyYWNlLFxuICAgICAgY3R4OiBQZW5kbGVNYXJrZXRDb250ZXh0LFxuICAgICkgPT4gUHJvbWlzZTxQcmVwcm9jZXNzUmVzdWx0PixcbiAgKTogdGhpcyB7XG4gICAgcmV0dXJuIHN1cGVyLm9uRXRoVHJhY2UoXG4gICAgICBcIjB4MDg5MmNkOGJcIixcbiAgICAgIGhhbmRsZXIgYXMgYW55LFxuICAgICAgZmV0Y2hDb25maWcsXG4gICAgICBwcmVwcm9jZXNzSGFuZGxlcixcbiAgICApO1xuICB9XG5cbiAgb25DYWxsQWxsb3dhbmNlKFxuICAgIGhhbmRsZXI6IChjYWxsOiBBbGxvd2FuY2VDYWxsVHJhY2UsIGN0eDogUGVuZGxlTWFya2V0Q29udGV4dCkgPT4gdm9pZCxcbiAgICBmZXRjaENvbmZpZz86IFBhcnRpYWw8RXRoRmV0Y2hDb25maWc+LFxuICAgIHByZXByb2Nlc3NIYW5kbGVyPzogKFxuICAgICAgY2FsbDogQWxsb3dhbmNlQ2FsbFRyYWNlLFxuICAgICAgY3R4OiBQZW5kbGVNYXJrZXRDb250ZXh0LFxuICAgICkgPT4gUHJvbWlzZTxQcmVwcm9jZXNzUmVzdWx0PixcbiAgKTogdGhpcyB7XG4gICAgcmV0dXJuIHN1cGVyLm9uRXRoVHJhY2UoXG4gICAgICBcIjB4ZGQ2MmVkM2VcIixcbiAgICAgIGhhbmRsZXIgYXMgYW55LFxuICAgICAgZmV0Y2hDb25maWcsXG4gICAgICBwcmVwcm9jZXNzSGFuZGxlcixcbiAgICApO1xuICB9XG5cbiAgb25DYWxsQXBwcm92ZShcbiAgICBoYW5kbGVyOiAoY2FsbDogQXBwcm92ZUNhbGxUcmFjZSwgY3R4OiBQZW5kbGVNYXJrZXRDb250ZXh0KSA9PiB2b2lkLFxuICAgIGZldGNoQ29uZmlnPzogUGFydGlhbDxFdGhGZXRjaENvbmZpZz4sXG4gICAgcHJlcHJvY2Vzc0hhbmRsZXI/OiAoXG4gICAgICBjYWxsOiBBcHByb3ZlQ2FsbFRyYWNlLFxuICAgICAgY3R4OiBQZW5kbGVNYXJrZXRDb250ZXh0LFxuICAgICkgPT4gUHJvbWlzZTxQcmVwcm9jZXNzUmVzdWx0PixcbiAgKTogdGhpcyB7XG4gICAgcmV0dXJuIHN1cGVyLm9uRXRoVHJhY2UoXG4gICAgICBcIjB4MDk1ZWE3YjNcIixcbiAgICAgIGhhbmRsZXIgYXMgYW55LFxuICAgICAgZmV0Y2hDb25maWcsXG4gICAgICBwcmVwcm9jZXNzSGFuZGxlcixcbiAgICApO1xuICB9XG5cbiAgb25DYWxsQmFsYW5jZU9mKFxuICAgIGhhbmRsZXI6IChjYWxsOiBCYWxhbmNlT2ZDYWxsVHJhY2UsIGN0eDogUGVuZGxlTWFya2V0Q29udGV4dCkgPT4gdm9pZCxcbiAgICBmZXRjaENvbmZpZz86IFBhcnRpYWw8RXRoRmV0Y2hDb25maWc+LFxuICAgIHByZXByb2Nlc3NIYW5kbGVyPzogKFxuICAgICAgY2FsbDogQmFsYW5jZU9mQ2FsbFRyYWNlLFxuICAgICAgY3R4OiBQZW5kbGVNYXJrZXRDb250ZXh0LFxuICAgICkgPT4gUHJvbWlzZTxQcmVwcm9jZXNzUmVzdWx0PixcbiAgKTogdGhpcyB7XG4gICAgcmV0dXJuIHN1cGVyLm9uRXRoVHJhY2UoXG4gICAgICBcIjB4NzBhMDgyMzFcIixcbiAgICAgIGhhbmRsZXIgYXMgYW55LFxuICAgICAgZmV0Y2hDb25maWcsXG4gICAgICBwcmVwcm9jZXNzSGFuZGxlcixcbiAgICApO1xuICB9XG5cbiAgb25DYWxsQnVybihcbiAgICBoYW5kbGVyOiAoY2FsbDogQnVybkNhbGxUcmFjZSwgY3R4OiBQZW5kbGVNYXJrZXRDb250ZXh0KSA9PiB2b2lkLFxuICAgIGZldGNoQ29uZmlnPzogUGFydGlhbDxFdGhGZXRjaENvbmZpZz4sXG4gICAgcHJlcHJvY2Vzc0hhbmRsZXI/OiAoXG4gICAgICBjYWxsOiBCdXJuQ2FsbFRyYWNlLFxuICAgICAgY3R4OiBQZW5kbGVNYXJrZXRDb250ZXh0LFxuICAgICkgPT4gUHJvbWlzZTxQcmVwcm9jZXNzUmVzdWx0PixcbiAgKTogdGhpcyB7XG4gICAgcmV0dXJuIHN1cGVyLm9uRXRoVHJhY2UoXG4gICAgICBcIjB4ZjZiOTExYmNcIixcbiAgICAgIGhhbmRsZXIgYXMgYW55LFxuICAgICAgZmV0Y2hDb25maWcsXG4gICAgICBwcmVwcm9jZXNzSGFuZGxlcixcbiAgICApO1xuICB9XG5cbiAgb25DYWxsRGVjaW1hbHMoXG4gICAgaGFuZGxlcjogKGNhbGw6IERlY2ltYWxzQ2FsbFRyYWNlLCBjdHg6IFBlbmRsZU1hcmtldENvbnRleHQpID0+IHZvaWQsXG4gICAgZmV0Y2hDb25maWc/OiBQYXJ0aWFsPEV0aEZldGNoQ29uZmlnPixcbiAgICBwcmVwcm9jZXNzSGFuZGxlcj86IChcbiAgICAgIGNhbGw6IERlY2ltYWxzQ2FsbFRyYWNlLFxuICAgICAgY3R4OiBQZW5kbGVNYXJrZXRDb250ZXh0LFxuICAgICkgPT4gUHJvbWlzZTxQcmVwcm9jZXNzUmVzdWx0PixcbiAgKTogdGhpcyB7XG4gICAgcmV0dXJuIHN1cGVyLm9uRXRoVHJhY2UoXG4gICAgICBcIjB4MzEzY2U1NjdcIixcbiAgICAgIGhhbmRsZXIgYXMgYW55LFxuICAgICAgZmV0Y2hDb25maWcsXG4gICAgICBwcmVwcm9jZXNzSGFuZGxlcixcbiAgICApO1xuICB9XG5cbiAgb25DYWxsRXhwaXJ5KFxuICAgIGhhbmRsZXI6IChjYWxsOiBFeHBpcnlDYWxsVHJhY2UsIGN0eDogUGVuZGxlTWFya2V0Q29udGV4dCkgPT4gdm9pZCxcbiAgICBmZXRjaENvbmZpZz86IFBhcnRpYWw8RXRoRmV0Y2hDb25maWc+LFxuICAgIHByZXByb2Nlc3NIYW5kbGVyPzogKFxuICAgICAgY2FsbDogRXhwaXJ5Q2FsbFRyYWNlLFxuICAgICAgY3R4OiBQZW5kbGVNYXJrZXRDb250ZXh0LFxuICAgICkgPT4gUHJvbWlzZTxQcmVwcm9jZXNzUmVzdWx0PixcbiAgKTogdGhpcyB7XG4gICAgcmV0dXJuIHN1cGVyLm9uRXRoVHJhY2UoXG4gICAgICBcIjB4ZTE4NGM5YmVcIixcbiAgICAgIGhhbmRsZXIgYXMgYW55LFxuICAgICAgZmV0Y2hDb25maWcsXG4gICAgICBwcmVwcm9jZXNzSGFuZGxlcixcbiAgICApO1xuICB9XG5cbiAgb25DYWxsR2V0UmV3YXJkVG9rZW5zKFxuICAgIGhhbmRsZXI6IChjYWxsOiBHZXRSZXdhcmRUb2tlbnNDYWxsVHJhY2UsIGN0eDogUGVuZGxlTWFya2V0Q29udGV4dCkgPT4gdm9pZCxcbiAgICBmZXRjaENvbmZpZz86IFBhcnRpYWw8RXRoRmV0Y2hDb25maWc+LFxuICAgIHByZXByb2Nlc3NIYW5kbGVyPzogKFxuICAgICAgY2FsbDogR2V0UmV3YXJkVG9rZW5zQ2FsbFRyYWNlLFxuICAgICAgY3R4OiBQZW5kbGVNYXJrZXRDb250ZXh0LFxuICAgICkgPT4gUHJvbWlzZTxQcmVwcm9jZXNzUmVzdWx0PixcbiAgKTogdGhpcyB7XG4gICAgcmV0dXJuIHN1cGVyLm9uRXRoVHJhY2UoXG4gICAgICBcIjB4YzRmNTlmOWJcIixcbiAgICAgIGhhbmRsZXIgYXMgYW55LFxuICAgICAgZmV0Y2hDb25maWcsXG4gICAgICBwcmVwcm9jZXNzSGFuZGxlcixcbiAgICApO1xuICB9XG5cbiAgb25DYWxsSW5jcmVhc2VPYnNlcnZhdGlvbnNDYXJkaW5hbGl0eU5leHQoXG4gICAgaGFuZGxlcjogKFxuICAgICAgY2FsbDogSW5jcmVhc2VPYnNlcnZhdGlvbnNDYXJkaW5hbGl0eU5leHRDYWxsVHJhY2UsXG4gICAgICBjdHg6IFBlbmRsZU1hcmtldENvbnRleHQsXG4gICAgKSA9PiB2b2lkLFxuICAgIGZldGNoQ29uZmlnPzogUGFydGlhbDxFdGhGZXRjaENvbmZpZz4sXG4gICAgcHJlcHJvY2Vzc0hhbmRsZXI/OiAoXG4gICAgICBjYWxsOiBJbmNyZWFzZU9ic2VydmF0aW9uc0NhcmRpbmFsaXR5TmV4dENhbGxUcmFjZSxcbiAgICAgIGN0eDogUGVuZGxlTWFya2V0Q29udGV4dCxcbiAgICApID0+IFByb21pc2U8UHJlcHJvY2Vzc1Jlc3VsdD4sXG4gICk6IHRoaXMge1xuICAgIHJldHVybiBzdXBlci5vbkV0aFRyYWNlKFxuICAgICAgXCIweDM3ZDQ1ZTNhXCIsXG4gICAgICBoYW5kbGVyIGFzIGFueSxcbiAgICAgIGZldGNoQ29uZmlnLFxuICAgICAgcHJlcHJvY2Vzc0hhbmRsZXIsXG4gICAgKTtcbiAgfVxuXG4gIG9uQ2FsbElzRXhwaXJlZChcbiAgICBoYW5kbGVyOiAoY2FsbDogSXNFeHBpcmVkQ2FsbFRyYWNlLCBjdHg6IFBlbmRsZU1hcmtldENvbnRleHQpID0+IHZvaWQsXG4gICAgZmV0Y2hDb25maWc/OiBQYXJ0aWFsPEV0aEZldGNoQ29uZmlnPixcbiAgICBwcmVwcm9jZXNzSGFuZGxlcj86IChcbiAgICAgIGNhbGw6IElzRXhwaXJlZENhbGxUcmFjZSxcbiAgICAgIGN0eDogUGVuZGxlTWFya2V0Q29udGV4dCxcbiAgICApID0+IFByb21pc2U8UHJlcHJvY2Vzc1Jlc3VsdD4sXG4gICk6IHRoaXMge1xuICAgIHJldHVybiBzdXBlci5vbkV0aFRyYWNlKFxuICAgICAgXCIweDJmMTNiNjBjXCIsXG4gICAgICBoYW5kbGVyIGFzIGFueSxcbiAgICAgIGZldGNoQ29uZmlnLFxuICAgICAgcHJlcHJvY2Vzc0hhbmRsZXIsXG4gICAgKTtcbiAgfVxuXG4gIG9uQ2FsbE1pbnQoXG4gICAgaGFuZGxlcjogKGNhbGw6IE1pbnRDYWxsVHJhY2UsIGN0eDogUGVuZGxlTWFya2V0Q29udGV4dCkgPT4gdm9pZCxcbiAgICBmZXRjaENvbmZpZz86IFBhcnRpYWw8RXRoRmV0Y2hDb25maWc+LFxuICAgIHByZXByb2Nlc3NIYW5kbGVyPzogKFxuICAgICAgY2FsbDogTWludENhbGxUcmFjZSxcbiAgICAgIGN0eDogUGVuZGxlTWFya2V0Q29udGV4dCxcbiAgICApID0+IFByb21pc2U8UHJlcHJvY2Vzc1Jlc3VsdD4sXG4gICk6IHRoaXMge1xuICAgIHJldHVybiBzdXBlci5vbkV0aFRyYWNlKFxuICAgICAgXCIweDE1NmUyOWY2XCIsXG4gICAgICBoYW5kbGVyIGFzIGFueSxcbiAgICAgIGZldGNoQ29uZmlnLFxuICAgICAgcHJlcHJvY2Vzc0hhbmRsZXIsXG4gICAgKTtcbiAgfVxuXG4gIG9uQ2FsbE5hbWUoXG4gICAgaGFuZGxlcjogKGNhbGw6IE5hbWVDYWxsVHJhY2UsIGN0eDogUGVuZGxlTWFya2V0Q29udGV4dCkgPT4gdm9pZCxcbiAgICBmZXRjaENvbmZpZz86IFBhcnRpYWw8RXRoRmV0Y2hDb25maWc+LFxuICAgIHByZXByb2Nlc3NIYW5kbGVyPzogKFxuICAgICAgY2FsbDogTmFtZUNhbGxUcmFjZSxcbiAgICAgIGN0eDogUGVuZGxlTWFya2V0Q29udGV4dCxcbiAgICApID0+IFByb21pc2U8UHJlcHJvY2Vzc1Jlc3VsdD4sXG4gICk6IHRoaXMge1xuICAgIHJldHVybiBzdXBlci5vbkV0aFRyYWNlKFxuICAgICAgXCIweDA2ZmRkZTAzXCIsXG4gICAgICBoYW5kbGVyIGFzIGFueSxcbiAgICAgIGZldGNoQ29uZmlnLFxuICAgICAgcHJlcHJvY2Vzc0hhbmRsZXIsXG4gICAgKTtcbiAgfVxuXG4gIG9uQ2FsbE9ic2VydmF0aW9ucyhcbiAgICBoYW5kbGVyOiAoY2FsbDogT2JzZXJ2YXRpb25zQ2FsbFRyYWNlLCBjdHg6IFBlbmRsZU1hcmtldENvbnRleHQpID0+IHZvaWQsXG4gICAgZmV0Y2hDb25maWc/OiBQYXJ0aWFsPEV0aEZldGNoQ29uZmlnPixcbiAgICBwcmVwcm9jZXNzSGFuZGxlcj86IChcbiAgICAgIGNhbGw6IE9ic2VydmF0aW9uc0NhbGxUcmFjZSxcbiAgICAgIGN0eDogUGVuZGxlTWFya2V0Q29udGV4dCxcbiAgICApID0+IFByb21pc2U8UHJlcHJvY2Vzc1Jlc3VsdD4sXG4gICk6IHRoaXMge1xuICAgIHJldHVybiBzdXBlci5vbkV0aFRyYWNlKFxuICAgICAgXCIweDI1MmMwOWQ3XCIsXG4gICAgICBoYW5kbGVyIGFzIGFueSxcbiAgICAgIGZldGNoQ29uZmlnLFxuICAgICAgcHJlcHJvY2Vzc0hhbmRsZXIsXG4gICAgKTtcbiAgfVxuXG4gIG9uQ2FsbE9ic2VydmUoXG4gICAgaGFuZGxlcjogKGNhbGw6IE9ic2VydmVDYWxsVHJhY2UsIGN0eDogUGVuZGxlTWFya2V0Q29udGV4dCkgPT4gdm9pZCxcbiAgICBmZXRjaENvbmZpZz86IFBhcnRpYWw8RXRoRmV0Y2hDb25maWc+LFxuICAgIHByZXByb2Nlc3NIYW5kbGVyPzogKFxuICAgICAgY2FsbDogT2JzZXJ2ZUNhbGxUcmFjZSxcbiAgICAgIGN0eDogUGVuZGxlTWFya2V0Q29udGV4dCxcbiAgICApID0+IFByb21pc2U8UHJlcHJvY2Vzc1Jlc3VsdD4sXG4gICk6IHRoaXMge1xuICAgIHJldHVybiBzdXBlci5vbkV0aFRyYWNlKFxuICAgICAgXCIweDg4M2JkYmZkXCIsXG4gICAgICBoYW5kbGVyIGFzIGFueSxcbiAgICAgIGZldGNoQ29uZmlnLFxuICAgICAgcHJlcHJvY2Vzc0hhbmRsZXIsXG4gICAgKTtcbiAgfVxuXG4gIG9uQ2FsbFJlYWRTdGF0ZShcbiAgICBoYW5kbGVyOiAoY2FsbDogUmVhZFN0YXRlQ2FsbFRyYWNlLCBjdHg6IFBlbmRsZU1hcmtldENvbnRleHQpID0+IHZvaWQsXG4gICAgZmV0Y2hDb25maWc/OiBQYXJ0aWFsPEV0aEZldGNoQ29uZmlnPixcbiAgICBwcmVwcm9jZXNzSGFuZGxlcj86IChcbiAgICAgIGNhbGw6IFJlYWRTdGF0ZUNhbGxUcmFjZSxcbiAgICAgIGN0eDogUGVuZGxlTWFya2V0Q29udGV4dCxcbiAgICApID0+IFByb21pc2U8UHJlcHJvY2Vzc1Jlc3VsdD4sXG4gICk6IHRoaXMge1xuICAgIHJldHVybiBzdXBlci5vbkV0aFRyYWNlKFxuICAgICAgXCIweDc5NDA1MmYzXCIsXG4gICAgICBoYW5kbGVyIGFzIGFueSxcbiAgICAgIGZldGNoQ29uZmlnLFxuICAgICAgcHJlcHJvY2Vzc0hhbmRsZXIsXG4gICAgKTtcbiAgfVxuXG4gIG9uQ2FsbFJlYWRUb2tlbnMoXG4gICAgaGFuZGxlcjogKGNhbGw6IFJlYWRUb2tlbnNDYWxsVHJhY2UsIGN0eDogUGVuZGxlTWFya2V0Q29udGV4dCkgPT4gdm9pZCxcbiAgICBmZXRjaENvbmZpZz86IFBhcnRpYWw8RXRoRmV0Y2hDb25maWc+LFxuICAgIHByZXByb2Nlc3NIYW5kbGVyPzogKFxuICAgICAgY2FsbDogUmVhZFRva2Vuc0NhbGxUcmFjZSxcbiAgICAgIGN0eDogUGVuZGxlTWFya2V0Q29udGV4dCxcbiAgICApID0+IFByb21pc2U8UHJlcHJvY2Vzc1Jlc3VsdD4sXG4gICk6IHRoaXMge1xuICAgIHJldHVybiBzdXBlci5vbkV0aFRyYWNlKFxuICAgICAgXCIweDJjOGNlNmJjXCIsXG4gICAgICBoYW5kbGVyIGFzIGFueSxcbiAgICAgIGZldGNoQ29uZmlnLFxuICAgICAgcHJlcHJvY2Vzc0hhbmRsZXIsXG4gICAgKTtcbiAgfVxuXG4gIG9uQ2FsbFJlZGVlbVJld2FyZHMoXG4gICAgaGFuZGxlcjogKGNhbGw6IFJlZGVlbVJld2FyZHNDYWxsVHJhY2UsIGN0eDogUGVuZGxlTWFya2V0Q29udGV4dCkgPT4gdm9pZCxcbiAgICBmZXRjaENvbmZpZz86IFBhcnRpYWw8RXRoRmV0Y2hDb25maWc+LFxuICAgIHByZXByb2Nlc3NIYW5kbGVyPzogKFxuICAgICAgY2FsbDogUmVkZWVtUmV3YXJkc0NhbGxUcmFjZSxcbiAgICAgIGN0eDogUGVuZGxlTWFya2V0Q29udGV4dCxcbiAgICApID0+IFByb21pc2U8UHJlcHJvY2Vzc1Jlc3VsdD4sXG4gICk6IHRoaXMge1xuICAgIHJldHVybiBzdXBlci5vbkV0aFRyYWNlKFxuICAgICAgXCIweDkyNjIxODdiXCIsXG4gICAgICBoYW5kbGVyIGFzIGFueSxcbiAgICAgIGZldGNoQ29uZmlnLFxuICAgICAgcHJlcHJvY2Vzc0hhbmRsZXIsXG4gICAgKTtcbiAgfVxuXG4gIG9uQ2FsbFN3YXBFeGFjdFB0Rm9yU3koXG4gICAgaGFuZGxlcjogKFxuICAgICAgY2FsbDogU3dhcEV4YWN0UHRGb3JTeUNhbGxUcmFjZSxcbiAgICAgIGN0eDogUGVuZGxlTWFya2V0Q29udGV4dCxcbiAgICApID0+IHZvaWQsXG4gICAgZmV0Y2hDb25maWc/OiBQYXJ0aWFsPEV0aEZldGNoQ29uZmlnPixcbiAgICBwcmVwcm9jZXNzSGFuZGxlcj86IChcbiAgICAgIGNhbGw6IFN3YXBFeGFjdFB0Rm9yU3lDYWxsVHJhY2UsXG4gICAgICBjdHg6IFBlbmRsZU1hcmtldENvbnRleHQsXG4gICAgKSA9PiBQcm9taXNlPFByZXByb2Nlc3NSZXN1bHQ+LFxuICApOiB0aGlzIHtcbiAgICByZXR1cm4gc3VwZXIub25FdGhUcmFjZShcbiAgICAgIFwiMHgyOTkxMGIxMVwiLFxuICAgICAgaGFuZGxlciBhcyBhbnksXG4gICAgICBmZXRjaENvbmZpZyxcbiAgICAgIHByZXByb2Nlc3NIYW5kbGVyLFxuICAgICk7XG4gIH1cblxuICBvbkNhbGxTd2FwU3lGb3JFeGFjdFB0KFxuICAgIGhhbmRsZXI6IChcbiAgICAgIGNhbGw6IFN3YXBTeUZvckV4YWN0UHRDYWxsVHJhY2UsXG4gICAgICBjdHg6IFBlbmRsZU1hcmtldENvbnRleHQsXG4gICAgKSA9PiB2b2lkLFxuICAgIGZldGNoQ29uZmlnPzogUGFydGlhbDxFdGhGZXRjaENvbmZpZz4sXG4gICAgcHJlcHJvY2Vzc0hhbmRsZXI/OiAoXG4gICAgICBjYWxsOiBTd2FwU3lGb3JFeGFjdFB0Q2FsbFRyYWNlLFxuICAgICAgY3R4OiBQZW5kbGVNYXJrZXRDb250ZXh0LFxuICAgICkgPT4gUHJvbWlzZTxQcmVwcm9jZXNzUmVzdWx0PixcbiAgKTogdGhpcyB7XG4gICAgcmV0dXJuIHN1cGVyLm9uRXRoVHJhY2UoXG4gICAgICBcIjB4NWI3MDlmMTdcIixcbiAgICAgIGhhbmRsZXIgYXMgYW55LFxuICAgICAgZmV0Y2hDb25maWcsXG4gICAgICBwcmVwcm9jZXNzSGFuZGxlcixcbiAgICApO1xuICB9XG5cbiAgb25DYWxsU3ltYm9sKFxuICAgIGhhbmRsZXI6IChjYWxsOiBTeW1ib2xDYWxsVHJhY2UsIGN0eDogUGVuZGxlTWFya2V0Q29udGV4dCkgPT4gdm9pZCxcbiAgICBmZXRjaENvbmZpZz86IFBhcnRpYWw8RXRoRmV0Y2hDb25maWc+LFxuICAgIHByZXByb2Nlc3NIYW5kbGVyPzogKFxuICAgICAgY2FsbDogU3ltYm9sQ2FsbFRyYWNlLFxuICAgICAgY3R4OiBQZW5kbGVNYXJrZXRDb250ZXh0LFxuICAgICkgPT4gUHJvbWlzZTxQcmVwcm9jZXNzUmVzdWx0PixcbiAgKTogdGhpcyB7XG4gICAgcmV0dXJuIHN1cGVyLm9uRXRoVHJhY2UoXG4gICAgICBcIjB4OTVkODliNDFcIixcbiAgICAgIGhhbmRsZXIgYXMgYW55LFxuICAgICAgZmV0Y2hDb25maWcsXG4gICAgICBwcmVwcm9jZXNzSGFuZGxlcixcbiAgICApO1xuICB9XG5cbiAgb25DYWxsVG90YWxBY3RpdmVTdXBwbHkoXG4gICAgaGFuZGxlcjogKFxuICAgICAgY2FsbDogVG90YWxBY3RpdmVTdXBwbHlDYWxsVHJhY2UsXG4gICAgICBjdHg6IFBlbmRsZU1hcmtldENvbnRleHQsXG4gICAgKSA9PiB2b2lkLFxuICAgIGZldGNoQ29uZmlnPzogUGFydGlhbDxFdGhGZXRjaENvbmZpZz4sXG4gICAgcHJlcHJvY2Vzc0hhbmRsZXI/OiAoXG4gICAgICBjYWxsOiBUb3RhbEFjdGl2ZVN1cHBseUNhbGxUcmFjZSxcbiAgICAgIGN0eDogUGVuZGxlTWFya2V0Q29udGV4dCxcbiAgICApID0+IFByb21pc2U8UHJlcHJvY2Vzc1Jlc3VsdD4sXG4gICk6IHRoaXMge1xuICAgIHJldHVybiBzdXBlci5vbkV0aFRyYWNlKFxuICAgICAgXCIweDcyMDY5MjY0XCIsXG4gICAgICBoYW5kbGVyIGFzIGFueSxcbiAgICAgIGZldGNoQ29uZmlnLFxuICAgICAgcHJlcHJvY2Vzc0hhbmRsZXIsXG4gICAgKTtcbiAgfVxuXG4gIG9uQ2FsbFRvdGFsU3VwcGx5KFxuICAgIGhhbmRsZXI6IChjYWxsOiBUb3RhbFN1cHBseUNhbGxUcmFjZSwgY3R4OiBQZW5kbGVNYXJrZXRDb250ZXh0KSA9PiB2b2lkLFxuICAgIGZldGNoQ29uZmlnPzogUGFydGlhbDxFdGhGZXRjaENvbmZpZz4sXG4gICAgcHJlcHJvY2Vzc0hhbmRsZXI/OiAoXG4gICAgICBjYWxsOiBUb3RhbFN1cHBseUNhbGxUcmFjZSxcbiAgICAgIGN0eDogUGVuZGxlTWFya2V0Q29udGV4dCxcbiAgICApID0+IFByb21pc2U8UHJlcHJvY2Vzc1Jlc3VsdD4sXG4gICk6IHRoaXMge1xuICAgIHJldHVybiBzdXBlci5vbkV0aFRyYWNlKFxuICAgICAgXCIweDE4MTYwZGRkXCIsXG4gICAgICBoYW5kbGVyIGFzIGFueSxcbiAgICAgIGZldGNoQ29uZmlnLFxuICAgICAgcHJlcHJvY2Vzc0hhbmRsZXIsXG4gICAgKTtcbiAgfVxuXG4gIG9uQ2FsbFRyYW5zZmVyKFxuICAgIGhhbmRsZXI6IChjYWxsOiBUcmFuc2ZlckNhbGxUcmFjZSwgY3R4OiBQZW5kbGVNYXJrZXRDb250ZXh0KSA9PiB2b2lkLFxuICAgIGZldGNoQ29uZmlnPzogUGFydGlhbDxFdGhGZXRjaENvbmZpZz4sXG4gICAgcHJlcHJvY2Vzc0hhbmRsZXI/OiAoXG4gICAgICBjYWxsOiBUcmFuc2ZlckNhbGxUcmFjZSxcbiAgICAgIGN0eDogUGVuZGxlTWFya2V0Q29udGV4dCxcbiAgICApID0+IFByb21pc2U8UHJlcHJvY2Vzc1Jlc3VsdD4sXG4gICk6IHRoaXMge1xuICAgIHJldHVybiBzdXBlci5vbkV0aFRyYWNlKFxuICAgICAgXCIweGE5MDU5Y2JiXCIsXG4gICAgICBoYW5kbGVyIGFzIGFueSxcbiAgICAgIGZldGNoQ29uZmlnLFxuICAgICAgcHJlcHJvY2Vzc0hhbmRsZXIsXG4gICAgKTtcbiAgfVxuXG4gIG9uQ2FsbFRyYW5zZmVyRnJvbShcbiAgICBoYW5kbGVyOiAoY2FsbDogVHJhbnNmZXJGcm9tQ2FsbFRyYWNlLCBjdHg6IFBlbmRsZU1hcmtldENvbnRleHQpID0+IHZvaWQsXG4gICAgZmV0Y2hDb25maWc/OiBQYXJ0aWFsPEV0aEZldGNoQ29uZmlnPixcbiAgICBwcmVwcm9jZXNzSGFuZGxlcj86IChcbiAgICAgIGNhbGw6IFRyYW5zZmVyRnJvbUNhbGxUcmFjZSxcbiAgICAgIGN0eDogUGVuZGxlTWFya2V0Q29udGV4dCxcbiAgICApID0+IFByb21pc2U8UHJlcHJvY2Vzc1Jlc3VsdD4sXG4gICk6IHRoaXMge1xuICAgIHJldHVybiBzdXBlci5vbkV0aFRyYWNlKFxuICAgICAgXCIweDIzYjg3MmRkXCIsXG4gICAgICBoYW5kbGVyIGFzIGFueSxcbiAgICAgIGZldGNoQ29uZmlnLFxuICAgICAgcHJlcHJvY2Vzc0hhbmRsZXIsXG4gICAgKTtcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgZmlsdGVycyA9IHtcbiAgICBBcHByb3ZhbChcbiAgICAgIG93bmVyPzogc3RyaW5nIHwgbnVsbCxcbiAgICAgIHNwZW5kZXI/OiBzdHJpbmcgfCBudWxsLFxuICAgICAgdmFsdWU/OiBudWxsLFxuICAgICk6IEFwcHJvdmFsRXZlbnRGaWx0ZXIge1xuICAgICAgcmV0dXJuIHRlbXBsYXRlQ29udHJhY3QuZmlsdGVyc1tcIkFwcHJvdmFsKGFkZHJlc3MsYWRkcmVzcyx1aW50MjU2KVwiXShcbiAgICAgICAgb3duZXIsXG4gICAgICAgIHNwZW5kZXIsXG4gICAgICAgIHZhbHVlLFxuICAgICAgKTtcbiAgICB9LFxuICAgIEJ1cm4oXG4gICAgICByZWNlaXZlclN5Pzogc3RyaW5nIHwgbnVsbCxcbiAgICAgIHJlY2VpdmVyUHQ/OiBzdHJpbmcgfCBudWxsLFxuICAgICAgbmV0THBCdXJuZWQ/OiBudWxsLFxuICAgICAgbmV0U3lPdXQ/OiBudWxsLFxuICAgICAgbmV0UHRPdXQ/OiBudWxsLFxuICAgICk6IEJ1cm5FdmVudEZpbHRlciB7XG4gICAgICByZXR1cm4gdGVtcGxhdGVDb250cmFjdC5maWx0ZXJzW1xuICAgICAgICBcIkJ1cm4oYWRkcmVzcyxhZGRyZXNzLHVpbnQyNTYsdWludDI1Nix1aW50MjU2KVwiXG4gICAgICBdKHJlY2VpdmVyU3ksIHJlY2VpdmVyUHQsIG5ldExwQnVybmVkLCBuZXRTeU91dCwgbmV0UHRPdXQpO1xuICAgIH0sXG4gICAgSW5jcmVhc2VPYnNlcnZhdGlvbkNhcmRpbmFsaXR5TmV4dChcbiAgICAgIG9ic2VydmF0aW9uQ2FyZGluYWxpdHlOZXh0T2xkPzogbnVsbCxcbiAgICAgIG9ic2VydmF0aW9uQ2FyZGluYWxpdHlOZXh0TmV3PzogbnVsbCxcbiAgICApOiBJbmNyZWFzZU9ic2VydmF0aW9uQ2FyZGluYWxpdHlOZXh0RXZlbnRGaWx0ZXIge1xuICAgICAgcmV0dXJuIHRlbXBsYXRlQ29udHJhY3QuZmlsdGVyc1tcbiAgICAgICAgXCJJbmNyZWFzZU9ic2VydmF0aW9uQ2FyZGluYWxpdHlOZXh0KHVpbnQxNix1aW50MTYpXCJcbiAgICAgIF0ob2JzZXJ2YXRpb25DYXJkaW5hbGl0eU5leHRPbGQsIG9ic2VydmF0aW9uQ2FyZGluYWxpdHlOZXh0TmV3KTtcbiAgICB9LFxuICAgIE1pbnQoXG4gICAgICByZWNlaXZlcj86IHN0cmluZyB8IG51bGwsXG4gICAgICBuZXRMcE1pbnRlZD86IG51bGwsXG4gICAgICBuZXRTeVVzZWQ/OiBudWxsLFxuICAgICAgbmV0UHRVc2VkPzogbnVsbCxcbiAgICApOiBNaW50RXZlbnRGaWx0ZXIge1xuICAgICAgcmV0dXJuIHRlbXBsYXRlQ29udHJhY3QuZmlsdGVyc1tcIk1pbnQoYWRkcmVzcyx1aW50MjU2LHVpbnQyNTYsdWludDI1NilcIl0oXG4gICAgICAgIHJlY2VpdmVyLFxuICAgICAgICBuZXRMcE1pbnRlZCxcbiAgICAgICAgbmV0U3lVc2VkLFxuICAgICAgICBuZXRQdFVzZWQsXG4gICAgICApO1xuICAgIH0sXG4gICAgU3dhcChcbiAgICAgIGNhbGxlcj86IHN0cmluZyB8IG51bGwsXG4gICAgICByZWNlaXZlcj86IHN0cmluZyB8IG51bGwsXG4gICAgICBuZXRQdE91dD86IG51bGwsXG4gICAgICBuZXRTeU91dD86IG51bGwsXG4gICAgICBuZXRTeUZlZT86IG51bGwsXG4gICAgICBuZXRTeVRvUmVzZXJ2ZT86IG51bGwsXG4gICAgKTogU3dhcEV2ZW50RmlsdGVyIHtcbiAgICAgIHJldHVybiB0ZW1wbGF0ZUNvbnRyYWN0LmZpbHRlcnNbXG4gICAgICAgIFwiU3dhcChhZGRyZXNzLGFkZHJlc3MsaW50MjU2LGludDI1Nix1aW50MjU2LHVpbnQyNTYpXCJcbiAgICAgIF0oY2FsbGVyLCByZWNlaXZlciwgbmV0UHRPdXQsIG5ldFN5T3V0LCBuZXRTeUZlZSwgbmV0U3lUb1Jlc2VydmUpO1xuICAgIH0sXG4gICAgVHJhbnNmZXIoXG4gICAgICBmcm9tPzogc3RyaW5nIHwgbnVsbCxcbiAgICAgIHRvPzogc3RyaW5nIHwgbnVsbCxcbiAgICAgIHZhbHVlPzogbnVsbCxcbiAgICApOiBUcmFuc2ZlckV2ZW50RmlsdGVyIHtcbiAgICAgIHJldHVybiB0ZW1wbGF0ZUNvbnRyYWN0LmZpbHRlcnNbXCJUcmFuc2ZlcihhZGRyZXNzLGFkZHJlc3MsdWludDI1NilcIl0oXG4gICAgICAgIGZyb20sXG4gICAgICAgIHRvLFxuICAgICAgICB2YWx1ZSxcbiAgICAgICk7XG4gICAgfSxcbiAgICBVcGRhdGVJbXBsaWVkUmF0ZShcbiAgICAgIHRpbWVzdGFtcD86IEJpZ051bWJlcmlzaCB8IG51bGwsXG4gICAgICBsbkxhc3RJbXBsaWVkUmF0ZT86IG51bGwsXG4gICAgKTogVXBkYXRlSW1wbGllZFJhdGVFdmVudEZpbHRlciB7XG4gICAgICByZXR1cm4gdGVtcGxhdGVDb250cmFjdC5maWx0ZXJzW1wiVXBkYXRlSW1wbGllZFJhdGUodWludDI1Nix1aW50MjU2KVwiXShcbiAgICAgICAgdGltZXN0YW1wLFxuICAgICAgICBsbkxhc3RJbXBsaWVkUmF0ZSxcbiAgICAgICk7XG4gICAgfSxcbiAgfTtcblxuICBwcm90ZWN0ZWQgQ3JlYXRlQm91bmRDb250cmFjdFZpZXcoKTogUGVuZGxlTWFya2V0Qm91bmRDb250cmFjdFZpZXcge1xuICAgIGNvbnN0IHZpZXcgPSBnZXRQZW5kbGVNYXJrZXRDb250cmFjdChcbiAgICAgIHRoaXMuY29uZmlnLm5ldHdvcmssXG4gICAgICB0aGlzLmNvbmZpZy5hZGRyZXNzLFxuICAgICk7XG4gICAgcmV0dXJuIG5ldyBQZW5kbGVNYXJrZXRCb3VuZENvbnRyYWN0Vmlldyh0aGlzLmNvbmZpZy5hZGRyZXNzLCB2aWV3KTtcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgYmluZChvcHRpb25zOiBCaW5kT3B0aW9ucyk6IFBlbmRsZU1hcmtldFByb2Nlc3NvciB7XG4gICAgaWYgKCFvcHRpb25zLm5hbWUpIHtcbiAgICAgIG9wdGlvbnMubmFtZSA9IFwiUGVuZGxlTWFya2V0XCI7XG4gICAgfVxuICAgIGxldCBwcm9jZXNzb3IgPSBnZXRQcm9jZXNzb3Iob3B0aW9ucykgYXMgUGVuZGxlTWFya2V0UHJvY2Vzc29yO1xuICAgIGlmICghcHJvY2Vzc29yKSB7XG4gICAgICBwcm9jZXNzb3IgPSBuZXcgUGVuZGxlTWFya2V0UHJvY2Vzc29yKG9wdGlvbnMpO1xuICAgICAgYWRkUHJvY2Vzc29yKG9wdGlvbnMsIHByb2Nlc3Nvcik7XG4gICAgfVxuICAgIHJldHVybiBwcm9jZXNzb3I7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIFBlbmRsZU1hcmtldFByb2Nlc3NvclRlbXBsYXRlIGV4dGVuZHMgQmFzZVByb2Nlc3NvclRlbXBsYXRlPFxuICBQZW5kbGVNYXJrZXQsXG4gIFBlbmRsZU1hcmtldEJvdW5kQ29udHJhY3RWaWV3XG4+IHtcbiAgYmluZEludGVybmFsKG9wdGlvbnM6IEJpbmRPcHRpb25zKSB7XG4gICAgaWYgKCFvcHRpb25zLm5hbWUpIHtcbiAgICAgIG9wdGlvbnMubmFtZSA9IFwiUGVuZGxlTWFya2V0XCI7XG4gICAgfVxuICAgIGxldCBwcm9jZXNzb3IgPSBnZXRQcm9jZXNzb3Iob3B0aW9ucykgYXMgUGVuZGxlTWFya2V0UHJvY2Vzc29yO1xuICAgIGlmICghcHJvY2Vzc29yKSB7XG4gICAgICBwcm9jZXNzb3IgPSBuZXcgUGVuZGxlTWFya2V0UHJvY2Vzc29yKG9wdGlvbnMpO1xuICAgICAgYWRkUHJvY2Vzc29yKG9wdGlvbnMsIHByb2Nlc3Nvcik7XG4gICAgfVxuICAgIHJldHVybiBwcm9jZXNzb3I7XG4gIH1cblxuICBvbkV2ZW50QXBwcm92YWwoXG4gICAgaGFuZGxlcjogKGV2ZW50OiBBcHByb3ZhbEV2ZW50LCBjdHg6IFBlbmRsZU1hcmtldENvbnRleHQpID0+IHZvaWQsXG4gICAgZmlsdGVyPzogQXBwcm92YWxFdmVudEZpbHRlciB8IEFwcHJvdmFsRXZlbnRGaWx0ZXJbXSxcbiAgICBmZXRjaENvbmZpZz86IFBhcnRpYWw8RXRoRmV0Y2hDb25maWc+LFxuICAgIHByZXByb2Nlc3NIYW5kbGVyPzogKFxuICAgICAgZXZlbnQ6IEFwcHJvdmFsRXZlbnQsXG4gICAgICBjdHg6IFBlbmRsZU1hcmtldENvbnRleHQsXG4gICAgICBwcmVwcm9jZXNzU3RvcmU6IHsgW2s6IHN0cmluZ106IGFueSB9LFxuICAgICkgPT4gUHJvbWlzZTxQcmVwcm9jZXNzUmVzdWx0PixcbiAgKTogdGhpcyB7XG4gICAgaWYgKCFmaWx0ZXIpIHtcbiAgICAgIGZpbHRlciA9IHRlbXBsYXRlQ29udHJhY3QuZmlsdGVyc1tcIkFwcHJvdmFsKGFkZHJlc3MsYWRkcmVzcyx1aW50MjU2KVwiXShcbiAgICAgICAgbnVsbCxcbiAgICAgICAgbnVsbCxcbiAgICAgICAgbnVsbCxcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiBzdXBlci5vbkV0aEV2ZW50KGhhbmRsZXIsIGZpbHRlciEsIGZldGNoQ29uZmlnLCBwcmVwcm9jZXNzSGFuZGxlcik7XG4gIH1cblxuICBvbkV2ZW50QnVybihcbiAgICBoYW5kbGVyOiAoZXZlbnQ6IEJ1cm5FdmVudCwgY3R4OiBQZW5kbGVNYXJrZXRDb250ZXh0KSA9PiB2b2lkLFxuICAgIGZpbHRlcj86IEJ1cm5FdmVudEZpbHRlciB8IEJ1cm5FdmVudEZpbHRlcltdLFxuICAgIGZldGNoQ29uZmlnPzogUGFydGlhbDxFdGhGZXRjaENvbmZpZz4sXG4gICAgcHJlcHJvY2Vzc0hhbmRsZXI/OiAoXG4gICAgICBldmVudDogQnVybkV2ZW50LFxuICAgICAgY3R4OiBQZW5kbGVNYXJrZXRDb250ZXh0LFxuICAgICAgcHJlcHJvY2Vzc1N0b3JlOiB7IFtrOiBzdHJpbmddOiBhbnkgfSxcbiAgICApID0+IFByb21pc2U8UHJlcHJvY2Vzc1Jlc3VsdD4sXG4gICk6IHRoaXMge1xuICAgIGlmICghZmlsdGVyKSB7XG4gICAgICBmaWx0ZXIgPSB0ZW1wbGF0ZUNvbnRyYWN0LmZpbHRlcnNbXG4gICAgICAgIFwiQnVybihhZGRyZXNzLGFkZHJlc3MsdWludDI1Nix1aW50MjU2LHVpbnQyNTYpXCJcbiAgICAgIF0obnVsbCwgbnVsbCwgbnVsbCwgbnVsbCwgbnVsbCk7XG4gICAgfVxuICAgIHJldHVybiBzdXBlci5vbkV0aEV2ZW50KGhhbmRsZXIsIGZpbHRlciEsIGZldGNoQ29uZmlnLCBwcmVwcm9jZXNzSGFuZGxlcik7XG4gIH1cblxuICBvbkV2ZW50SW5jcmVhc2VPYnNlcnZhdGlvbkNhcmRpbmFsaXR5TmV4dChcbiAgICBoYW5kbGVyOiAoXG4gICAgICBldmVudDogSW5jcmVhc2VPYnNlcnZhdGlvbkNhcmRpbmFsaXR5TmV4dEV2ZW50LFxuICAgICAgY3R4OiBQZW5kbGVNYXJrZXRDb250ZXh0LFxuICAgICkgPT4gdm9pZCxcbiAgICBmaWx0ZXI/OlxuICAgICAgfCBJbmNyZWFzZU9ic2VydmF0aW9uQ2FyZGluYWxpdHlOZXh0RXZlbnRGaWx0ZXJcbiAgICAgIHwgSW5jcmVhc2VPYnNlcnZhdGlvbkNhcmRpbmFsaXR5TmV4dEV2ZW50RmlsdGVyW10sXG4gICAgZmV0Y2hDb25maWc/OiBQYXJ0aWFsPEV0aEZldGNoQ29uZmlnPixcbiAgICBwcmVwcm9jZXNzSGFuZGxlcj86IChcbiAgICAgIGV2ZW50OiBJbmNyZWFzZU9ic2VydmF0aW9uQ2FyZGluYWxpdHlOZXh0RXZlbnQsXG4gICAgICBjdHg6IFBlbmRsZU1hcmtldENvbnRleHQsXG4gICAgICBwcmVwcm9jZXNzU3RvcmU6IHsgW2s6IHN0cmluZ106IGFueSB9LFxuICAgICkgPT4gUHJvbWlzZTxQcmVwcm9jZXNzUmVzdWx0PixcbiAgKTogdGhpcyB7XG4gICAgaWYgKCFmaWx0ZXIpIHtcbiAgICAgIGZpbHRlciA9IHRlbXBsYXRlQ29udHJhY3QuZmlsdGVyc1tcbiAgICAgICAgXCJJbmNyZWFzZU9ic2VydmF0aW9uQ2FyZGluYWxpdHlOZXh0KHVpbnQxNix1aW50MTYpXCJcbiAgICAgIF0obnVsbCwgbnVsbCk7XG4gICAgfVxuICAgIHJldHVybiBzdXBlci5vbkV0aEV2ZW50KGhhbmRsZXIsIGZpbHRlciEsIGZldGNoQ29uZmlnLCBwcmVwcm9jZXNzSGFuZGxlcik7XG4gIH1cblxuICBvbkV2ZW50TWludChcbiAgICBoYW5kbGVyOiAoZXZlbnQ6IE1pbnRFdmVudCwgY3R4OiBQZW5kbGVNYXJrZXRDb250ZXh0KSA9PiB2b2lkLFxuICAgIGZpbHRlcj86IE1pbnRFdmVudEZpbHRlciB8IE1pbnRFdmVudEZpbHRlcltdLFxuICAgIGZldGNoQ29uZmlnPzogUGFydGlhbDxFdGhGZXRjaENvbmZpZz4sXG4gICAgcHJlcHJvY2Vzc0hhbmRsZXI/OiAoXG4gICAgICBldmVudDogTWludEV2ZW50LFxuICAgICAgY3R4OiBQZW5kbGVNYXJrZXRDb250ZXh0LFxuICAgICAgcHJlcHJvY2Vzc1N0b3JlOiB7IFtrOiBzdHJpbmddOiBhbnkgfSxcbiAgICApID0+IFByb21pc2U8UHJlcHJvY2Vzc1Jlc3VsdD4sXG4gICk6IHRoaXMge1xuICAgIGlmICghZmlsdGVyKSB7XG4gICAgICBmaWx0ZXIgPSB0ZW1wbGF0ZUNvbnRyYWN0LmZpbHRlcnNbXG4gICAgICAgIFwiTWludChhZGRyZXNzLHVpbnQyNTYsdWludDI1Nix1aW50MjU2KVwiXG4gICAgICBdKG51bGwsIG51bGwsIG51bGwsIG51bGwpO1xuICAgIH1cbiAgICByZXR1cm4gc3VwZXIub25FdGhFdmVudChoYW5kbGVyLCBmaWx0ZXIhLCBmZXRjaENvbmZpZywgcHJlcHJvY2Vzc0hhbmRsZXIpO1xuICB9XG5cbiAgb25FdmVudFN3YXAoXG4gICAgaGFuZGxlcjogKGV2ZW50OiBTd2FwRXZlbnQsIGN0eDogUGVuZGxlTWFya2V0Q29udGV4dCkgPT4gdm9pZCxcbiAgICBmaWx0ZXI/OiBTd2FwRXZlbnRGaWx0ZXIgfCBTd2FwRXZlbnRGaWx0ZXJbXSxcbiAgICBmZXRjaENvbmZpZz86IFBhcnRpYWw8RXRoRmV0Y2hDb25maWc+LFxuICAgIHByZXByb2Nlc3NIYW5kbGVyPzogKFxuICAgICAgZXZlbnQ6IFN3YXBFdmVudCxcbiAgICAgIGN0eDogUGVuZGxlTWFya2V0Q29udGV4dCxcbiAgICAgIHByZXByb2Nlc3NTdG9yZTogeyBbazogc3RyaW5nXTogYW55IH0sXG4gICAgKSA9PiBQcm9taXNlPFByZXByb2Nlc3NSZXN1bHQ+LFxuICApOiB0aGlzIHtcbiAgICBpZiAoIWZpbHRlcikge1xuICAgICAgZmlsdGVyID0gdGVtcGxhdGVDb250cmFjdC5maWx0ZXJzW1xuICAgICAgICBcIlN3YXAoYWRkcmVzcyxhZGRyZXNzLGludDI1NixpbnQyNTYsdWludDI1Nix1aW50MjU2KVwiXG4gICAgICBdKG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwpO1xuICAgIH1cbiAgICByZXR1cm4gc3VwZXIub25FdGhFdmVudChoYW5kbGVyLCBmaWx0ZXIhLCBmZXRjaENvbmZpZywgcHJlcHJvY2Vzc0hhbmRsZXIpO1xuICB9XG5cbiAgb25FdmVudFRyYW5zZmVyKFxuICAgIGhhbmRsZXI6IChldmVudDogVHJhbnNmZXJFdmVudCwgY3R4OiBQZW5kbGVNYXJrZXRDb250ZXh0KSA9PiB2b2lkLFxuICAgIGZpbHRlcj86IFRyYW5zZmVyRXZlbnRGaWx0ZXIgfCBUcmFuc2ZlckV2ZW50RmlsdGVyW10sXG4gICAgZmV0Y2hDb25maWc/OiBQYXJ0aWFsPEV0aEZldGNoQ29uZmlnPixcbiAgICBwcmVwcm9jZXNzSGFuZGxlcj86IChcbiAgICAgIGV2ZW50OiBUcmFuc2ZlckV2ZW50LFxuICAgICAgY3R4OiBQZW5kbGVNYXJrZXRDb250ZXh0LFxuICAgICAgcHJlcHJvY2Vzc1N0b3JlOiB7IFtrOiBzdHJpbmddOiBhbnkgfSxcbiAgICApID0+IFByb21pc2U8UHJlcHJvY2Vzc1Jlc3VsdD4sXG4gICk6IHRoaXMge1xuICAgIGlmICghZmlsdGVyKSB7XG4gICAgICBmaWx0ZXIgPSB0ZW1wbGF0ZUNvbnRyYWN0LmZpbHRlcnNbXCJUcmFuc2ZlcihhZGRyZXNzLGFkZHJlc3MsdWludDI1NilcIl0oXG4gICAgICAgIG51bGwsXG4gICAgICAgIG51bGwsXG4gICAgICAgIG51bGwsXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gc3VwZXIub25FdGhFdmVudChoYW5kbGVyLCBmaWx0ZXIhLCBmZXRjaENvbmZpZywgcHJlcHJvY2Vzc0hhbmRsZXIpO1xuICB9XG5cbiAgb25FdmVudFVwZGF0ZUltcGxpZWRSYXRlKFxuICAgIGhhbmRsZXI6IChldmVudDogVXBkYXRlSW1wbGllZFJhdGVFdmVudCwgY3R4OiBQZW5kbGVNYXJrZXRDb250ZXh0KSA9PiB2b2lkLFxuICAgIGZpbHRlcj86IFVwZGF0ZUltcGxpZWRSYXRlRXZlbnRGaWx0ZXIgfCBVcGRhdGVJbXBsaWVkUmF0ZUV2ZW50RmlsdGVyW10sXG4gICAgZmV0Y2hDb25maWc/OiBQYXJ0aWFsPEV0aEZldGNoQ29uZmlnPixcbiAgICBwcmVwcm9jZXNzSGFuZGxlcj86IChcbiAgICAgIGV2ZW50OiBVcGRhdGVJbXBsaWVkUmF0ZUV2ZW50LFxuICAgICAgY3R4OiBQZW5kbGVNYXJrZXRDb250ZXh0LFxuICAgICAgcHJlcHJvY2Vzc1N0b3JlOiB7IFtrOiBzdHJpbmddOiBhbnkgfSxcbiAgICApID0+IFByb21pc2U8UHJlcHJvY2Vzc1Jlc3VsdD4sXG4gICk6IHRoaXMge1xuICAgIGlmICghZmlsdGVyKSB7XG4gICAgICBmaWx0ZXIgPSB0ZW1wbGF0ZUNvbnRyYWN0LmZpbHRlcnNbXCJVcGRhdGVJbXBsaWVkUmF0ZSh1aW50MjU2LHVpbnQyNTYpXCJdKFxuICAgICAgICBudWxsLFxuICAgICAgICBudWxsLFxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIHN1cGVyLm9uRXRoRXZlbnQoaGFuZGxlciwgZmlsdGVyISwgZmV0Y2hDb25maWcsIHByZXByb2Nlc3NIYW5kbGVyKTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0UGVuZGxlTWFya2V0Q29udHJhY3QoXG4gIGNoYWluSWQ6IEV0aENoYWluSWQsXG4gIGFkZHJlc3M6IHN0cmluZyxcbik6IFBlbmRsZU1hcmtldENvbnRyYWN0VmlldyB7XG4gIGxldCBjb250cmFjdCA9IGdldENvbnRyYWN0QnlBQkkoXG4gICAgXCJQZW5kbGVNYXJrZXRcIixcbiAgICBhZGRyZXNzLFxuICAgIGNoYWluSWQsXG4gICkgYXMgUGVuZGxlTWFya2V0Q29udHJhY3RWaWV3O1xuICBpZiAoIWNvbnRyYWN0KSB7XG4gICAgY29uc3QgcmF3Q29udHJhY3QgPSBQZW5kbGVNYXJrZXRfX2ZhY3RvcnkuY29ubmVjdChcbiAgICAgIGFkZHJlc3MsXG4gICAgICBnZXRQcm92aWRlcihjaGFpbklkKSxcbiAgICApO1xuICAgIGNvbnRyYWN0ID0gbmV3IFBlbmRsZU1hcmtldENvbnRyYWN0VmlldyhyYXdDb250cmFjdCk7XG4gICAgYWRkQ29udHJhY3RCeUFCSShcIlBlbmRsZU1hcmtldFwiLCBhZGRyZXNzLCBjaGFpbklkLCBjb250cmFjdCk7XG4gIH1cbiAgcmV0dXJuIGNvbnRyYWN0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0UGVuZGxlTWFya2V0Q29udHJhY3RPbkNvbnRleHQoXG4gIGNvbnRleHQ6IEV0aENvbnRleHQsXG4gIGFkZHJlc3M6IHN0cmluZyxcbik6IFBlbmRsZU1hcmtldEJvdW5kQ29udHJhY3RWaWV3IHtcbiAgY29uc3QgdmlldyA9IGdldFBlbmRsZU1hcmtldENvbnRyYWN0KGNvbnRleHQuZ2V0Q2hhaW5JZCgpLCBhZGRyZXNzKTtcbiAgY29uc3QgYm91bmRWaWV3ID0gbmV3IFBlbmRsZU1hcmtldEJvdW5kQ29udHJhY3RWaWV3KGFkZHJlc3MsIHZpZXcpO1xuICBib3VuZFZpZXcuY29udGV4dCA9IGNvbnRleHQ7XG4gIGlmIChib3VuZFZpZXcuY2FsbFN0YXRpYykge1xuICAgIGJvdW5kVmlldy5jYWxsU3RhdGljLmNvbnRleHQgPSBjb250ZXh0O1xuICB9XG4gIHJldHVybiBib3VuZFZpZXc7XG59XG4iLCAiLyogQXV0b2dlbmVyYXRlZCBmaWxlLiBEbyBub3QgZWRpdCBtYW51YWxseS4gKi9cbi8qIHRzbGludDpkaXNhYmxlICovXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xuaW1wb3J0IHsgTG9nUGFyYW1zIH0gZnJvbSBcImV0aGVycy9wcm92aWRlcnNcIjtcbmltcG9ydCB7IEV0aENoYWluSWQgfSBmcm9tIFwiQHNlbnRpby9zZGsvZXRoXCI7XG5pbXBvcnQge1xuICBBcHByb3ZhbEV2ZW50T2JqZWN0LFxuICBCdXJuRXZlbnRPYmplY3QsXG4gIEluY3JlYXNlT2JzZXJ2YXRpb25DYXJkaW5hbGl0eU5leHRFdmVudE9iamVjdCxcbiAgTWludEV2ZW50T2JqZWN0LFxuICBTd2FwRXZlbnRPYmplY3QsXG4gIFRyYW5zZmVyRXZlbnRPYmplY3QsXG4gIFVwZGF0ZUltcGxpZWRSYXRlRXZlbnRPYmplY3QsXG59IGZyb20gXCIuL1BlbmRsZU1hcmtldC5qc1wiO1xuaW1wb3J0IHsgZ2V0UGVuZGxlTWFya2V0Q29udHJhY3QgfSBmcm9tIFwiLi9wZW5kbGVtYXJrZXQtcHJvY2Vzc29yLmpzXCI7XG5jb25zdCBtb2NrRmllbGQgPSB7XG4gIGJsb2NrSGFzaDpcbiAgICBcIjB4MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMFwiLFxuICBibG9ja051bWJlcjogMCxcbiAgbG9nSW5kZXg6IDAsXG4gIHJlbW92ZWQ6IGZhbHNlLFxuICB0cmFuc2FjdGlvbkhhc2g6XG4gICAgXCIweDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDBcIixcbiAgdHJhbnNhY3Rpb25JbmRleDogMCxcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBtb2NrQXBwcm92YWxMb2coXG4gIGNvbnRyYWN0QWRkcmVzczogc3RyaW5nLFxuICBldmVudDogQXBwcm92YWxFdmVudE9iamVjdCxcbik6IExvZ1BhcmFtcyB7XG4gIGNvbnN0IGNvbnRyYWN0ID0gZ2V0UGVuZGxlTWFya2V0Q29udHJhY3QoXG4gICAgRXRoQ2hhaW5JZC5FVEhFUkVVTSxcbiAgICBjb250cmFjdEFkZHJlc3MsXG4gICk7XG4gIGNvbnN0IGVuY29kZWRMb2cgPSBjb250cmFjdC5yYXdDb250cmFjdC5pbnRlcmZhY2UuZW5jb2RlRXZlbnRMb2coXG4gICAgXCJBcHByb3ZhbChhZGRyZXNzLGFkZHJlc3MsdWludDI1NilcIixcbiAgICBbZXZlbnQub3duZXIsIGV2ZW50LnNwZW5kZXIsIGV2ZW50LnZhbHVlXSxcbiAgKTtcbiAgcmV0dXJuIHtcbiAgICAuLi5tb2NrRmllbGQsXG4gICAgaW5kZXg6IDAsXG4gICAgYWRkcmVzczogY29udHJhY3RBZGRyZXNzLFxuICAgIGRhdGE6IGVuY29kZWRMb2cuZGF0YSxcbiAgICB0b3BpY3M6IGVuY29kZWRMb2cudG9waWNzLFxuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbW9ja0J1cm5Mb2coXG4gIGNvbnRyYWN0QWRkcmVzczogc3RyaW5nLFxuICBldmVudDogQnVybkV2ZW50T2JqZWN0LFxuKTogTG9nUGFyYW1zIHtcbiAgY29uc3QgY29udHJhY3QgPSBnZXRQZW5kbGVNYXJrZXRDb250cmFjdChcbiAgICBFdGhDaGFpbklkLkVUSEVSRVVNLFxuICAgIGNvbnRyYWN0QWRkcmVzcyxcbiAgKTtcbiAgY29uc3QgZW5jb2RlZExvZyA9IGNvbnRyYWN0LnJhd0NvbnRyYWN0LmludGVyZmFjZS5lbmNvZGVFdmVudExvZyhcbiAgICBcIkJ1cm4oYWRkcmVzcyxhZGRyZXNzLHVpbnQyNTYsdWludDI1Nix1aW50MjU2KVwiLFxuICAgIFtcbiAgICAgIGV2ZW50LnJlY2VpdmVyU3ksXG4gICAgICBldmVudC5yZWNlaXZlclB0LFxuICAgICAgZXZlbnQubmV0THBCdXJuZWQsXG4gICAgICBldmVudC5uZXRTeU91dCxcbiAgICAgIGV2ZW50Lm5ldFB0T3V0LFxuICAgIF0sXG4gICk7XG4gIHJldHVybiB7XG4gICAgLi4ubW9ja0ZpZWxkLFxuICAgIGluZGV4OiAwLFxuICAgIGFkZHJlc3M6IGNvbnRyYWN0QWRkcmVzcyxcbiAgICBkYXRhOiBlbmNvZGVkTG9nLmRhdGEsXG4gICAgdG9waWNzOiBlbmNvZGVkTG9nLnRvcGljcyxcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1vY2tJbmNyZWFzZU9ic2VydmF0aW9uQ2FyZGluYWxpdHlOZXh0TG9nKFxuICBjb250cmFjdEFkZHJlc3M6IHN0cmluZyxcbiAgZXZlbnQ6IEluY3JlYXNlT2JzZXJ2YXRpb25DYXJkaW5hbGl0eU5leHRFdmVudE9iamVjdCxcbik6IExvZ1BhcmFtcyB7XG4gIGNvbnN0IGNvbnRyYWN0ID0gZ2V0UGVuZGxlTWFya2V0Q29udHJhY3QoXG4gICAgRXRoQ2hhaW5JZC5FVEhFUkVVTSxcbiAgICBjb250cmFjdEFkZHJlc3MsXG4gICk7XG4gIGNvbnN0IGVuY29kZWRMb2cgPSBjb250cmFjdC5yYXdDb250cmFjdC5pbnRlcmZhY2UuZW5jb2RlRXZlbnRMb2coXG4gICAgXCJJbmNyZWFzZU9ic2VydmF0aW9uQ2FyZGluYWxpdHlOZXh0KHVpbnQxNix1aW50MTYpXCIsXG4gICAgW2V2ZW50Lm9ic2VydmF0aW9uQ2FyZGluYWxpdHlOZXh0T2xkLCBldmVudC5vYnNlcnZhdGlvbkNhcmRpbmFsaXR5TmV4dE5ld10sXG4gICk7XG4gIHJldHVybiB7XG4gICAgLi4ubW9ja0ZpZWxkLFxuICAgIGluZGV4OiAwLFxuICAgIGFkZHJlc3M6IGNvbnRyYWN0QWRkcmVzcyxcbiAgICBkYXRhOiBlbmNvZGVkTG9nLmRhdGEsXG4gICAgdG9waWNzOiBlbmNvZGVkTG9nLnRvcGljcyxcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1vY2tNaW50TG9nKFxuICBjb250cmFjdEFkZHJlc3M6IHN0cmluZyxcbiAgZXZlbnQ6IE1pbnRFdmVudE9iamVjdCxcbik6IExvZ1BhcmFtcyB7XG4gIGNvbnN0IGNvbnRyYWN0ID0gZ2V0UGVuZGxlTWFya2V0Q29udHJhY3QoXG4gICAgRXRoQ2hhaW5JZC5FVEhFUkVVTSxcbiAgICBjb250cmFjdEFkZHJlc3MsXG4gICk7XG4gIGNvbnN0IGVuY29kZWRMb2cgPSBjb250cmFjdC5yYXdDb250cmFjdC5pbnRlcmZhY2UuZW5jb2RlRXZlbnRMb2coXG4gICAgXCJNaW50KGFkZHJlc3MsdWludDI1Nix1aW50MjU2LHVpbnQyNTYpXCIsXG4gICAgW2V2ZW50LnJlY2VpdmVyLCBldmVudC5uZXRMcE1pbnRlZCwgZXZlbnQubmV0U3lVc2VkLCBldmVudC5uZXRQdFVzZWRdLFxuICApO1xuICByZXR1cm4ge1xuICAgIC4uLm1vY2tGaWVsZCxcbiAgICBpbmRleDogMCxcbiAgICBhZGRyZXNzOiBjb250cmFjdEFkZHJlc3MsXG4gICAgZGF0YTogZW5jb2RlZExvZy5kYXRhLFxuICAgIHRvcGljczogZW5jb2RlZExvZy50b3BpY3MsXG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtb2NrU3dhcExvZyhcbiAgY29udHJhY3RBZGRyZXNzOiBzdHJpbmcsXG4gIGV2ZW50OiBTd2FwRXZlbnRPYmplY3QsXG4pOiBMb2dQYXJhbXMge1xuICBjb25zdCBjb250cmFjdCA9IGdldFBlbmRsZU1hcmtldENvbnRyYWN0KFxuICAgIEV0aENoYWluSWQuRVRIRVJFVU0sXG4gICAgY29udHJhY3RBZGRyZXNzLFxuICApO1xuICBjb25zdCBlbmNvZGVkTG9nID0gY29udHJhY3QucmF3Q29udHJhY3QuaW50ZXJmYWNlLmVuY29kZUV2ZW50TG9nKFxuICAgIFwiU3dhcChhZGRyZXNzLGFkZHJlc3MsaW50MjU2LGludDI1Nix1aW50MjU2LHVpbnQyNTYpXCIsXG4gICAgW1xuICAgICAgZXZlbnQuY2FsbGVyLFxuICAgICAgZXZlbnQucmVjZWl2ZXIsXG4gICAgICBldmVudC5uZXRQdE91dCxcbiAgICAgIGV2ZW50Lm5ldFN5T3V0LFxuICAgICAgZXZlbnQubmV0U3lGZWUsXG4gICAgICBldmVudC5uZXRTeVRvUmVzZXJ2ZSxcbiAgICBdLFxuICApO1xuICByZXR1cm4ge1xuICAgIC4uLm1vY2tGaWVsZCxcbiAgICBpbmRleDogMCxcbiAgICBhZGRyZXNzOiBjb250cmFjdEFkZHJlc3MsXG4gICAgZGF0YTogZW5jb2RlZExvZy5kYXRhLFxuICAgIHRvcGljczogZW5jb2RlZExvZy50b3BpY3MsXG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtb2NrVHJhbnNmZXJMb2coXG4gIGNvbnRyYWN0QWRkcmVzczogc3RyaW5nLFxuICBldmVudDogVHJhbnNmZXJFdmVudE9iamVjdCxcbik6IExvZ1BhcmFtcyB7XG4gIGNvbnN0IGNvbnRyYWN0ID0gZ2V0UGVuZGxlTWFya2V0Q29udHJhY3QoXG4gICAgRXRoQ2hhaW5JZC5FVEhFUkVVTSxcbiAgICBjb250cmFjdEFkZHJlc3MsXG4gICk7XG4gIGNvbnN0IGVuY29kZWRMb2cgPSBjb250cmFjdC5yYXdDb250cmFjdC5pbnRlcmZhY2UuZW5jb2RlRXZlbnRMb2coXG4gICAgXCJUcmFuc2ZlcihhZGRyZXNzLGFkZHJlc3MsdWludDI1NilcIixcbiAgICBbZXZlbnQuZnJvbSwgZXZlbnQudG8sIGV2ZW50LnZhbHVlXSxcbiAgKTtcbiAgcmV0dXJuIHtcbiAgICAuLi5tb2NrRmllbGQsXG4gICAgaW5kZXg6IDAsXG4gICAgYWRkcmVzczogY29udHJhY3RBZGRyZXNzLFxuICAgIGRhdGE6IGVuY29kZWRMb2cuZGF0YSxcbiAgICB0b3BpY3M6IGVuY29kZWRMb2cudG9waWNzLFxuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbW9ja1VwZGF0ZUltcGxpZWRSYXRlTG9nKFxuICBjb250cmFjdEFkZHJlc3M6IHN0cmluZyxcbiAgZXZlbnQ6IFVwZGF0ZUltcGxpZWRSYXRlRXZlbnRPYmplY3QsXG4pOiBMb2dQYXJhbXMge1xuICBjb25zdCBjb250cmFjdCA9IGdldFBlbmRsZU1hcmtldENvbnRyYWN0KFxuICAgIEV0aENoYWluSWQuRVRIRVJFVU0sXG4gICAgY29udHJhY3RBZGRyZXNzLFxuICApO1xuICBjb25zdCBlbmNvZGVkTG9nID0gY29udHJhY3QucmF3Q29udHJhY3QuaW50ZXJmYWNlLmVuY29kZUV2ZW50TG9nKFxuICAgIFwiVXBkYXRlSW1wbGllZFJhdGUodWludDI1Nix1aW50MjU2KVwiLFxuICAgIFtldmVudC50aW1lc3RhbXAsIGV2ZW50LmxuTGFzdEltcGxpZWRSYXRlXSxcbiAgKTtcbiAgcmV0dXJuIHtcbiAgICAuLi5tb2NrRmllbGQsXG4gICAgaW5kZXg6IDAsXG4gICAgYWRkcmVzczogY29udHJhY3RBZGRyZXNzLFxuICAgIGRhdGE6IGVuY29kZWRMb2cuZGF0YSxcbiAgICB0b3BpY3M6IGVuY29kZWRMb2cudG9waWNzLFxuICB9O1xufVxuIiwgIlxuLyogQXV0b2dlbmVyYXRlZCBmaWxlLiBEbyBub3QgZWRpdCBtYW51YWxseS4gKi9cbi8qIHRzbGludDpkaXNhYmxlICovXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xuaW1wb3J0IHR5cGUgeyBTdHJpbmcsIEludCwgQmlnSW50LCBGbG9hdCwgSUQsIEJ5dGVzLCBUaW1lc3RhbXAsIEJvb2xlYW4sIEludDggfSBmcm9tICdAc2VudGlvL3Nkay9zdG9yZSdcbmltcG9ydCB7IEVudGl0eSwgUmVxdWlyZWQsIE9uZSwgTWFueSwgQ29sdW1uLCBMaXN0Q29sdW1uLCBBYnN0cmFjdEVudGl0eSB9IGZyb20gJ0BzZW50aW8vc2RrL3N0b3JlJ1xuaW1wb3J0IHsgQmlnRGVjaW1hbCB9IGZyb20gJ0BzZW50aW8vYmlnZGVjaW1hbCdcbmltcG9ydCB7IERhdGFiYXNlU2NoZW1hIH0gZnJvbSAnQHNlbnRpby9zZGsnXG5cblxuXG5cblxuXG5cbmludGVyZmFjZSBQb29sc0NvbnN0cnVjdG9ySW5wdXQge1xuICBpZDogSUQ7XG4gIGNoYWluX2lkOiBJbnQ7XG4gIHRpbWVzdGFtcDogSW50O1xuICBjcmVhdGlvbl9ibG9ja19udW1iZXI6IEludDtcbiAgdW5kZXJseWluZ190b2tlbl9hZGRyZXNzOiBTdHJpbmc7XG4gIHVuZGVybHlpbmdfdG9rZW5faW5kZXg6IEludDtcbiAgdW5kZXJseWluZ190b2tlbl9zeW1ib2w6IFN0cmluZztcbiAgdW5kZXJseWluZ190b2tlbl9kZWNpbWFsczogU3RyaW5nO1xuICByZWNlaXB0X3Rva2VuX2FkZHJlc3M/OiBTdHJpbmc7XG4gIHJlY2VpcHRfdG9rZW5fc3ltYm9sPzogU3RyaW5nO1xuICByZWNlaXB0X3Rva2VuX2RlY2ltYWxzPzogU3RyaW5nO1xuICBwb29sX2FkZHJlc3M6IFN0cmluZztcbiAgcG9vbF9zeW1ib2w6IFN0cmluZztcbn1cbkBFbnRpdHkoXCJQb29sc1wiKVxuZXhwb3J0IGNsYXNzIFBvb2xzIGV4dGVuZHMgQWJzdHJhY3RFbnRpdHkgIHtcblxuXHRAUmVxdWlyZWRcblx0QENvbHVtbihcIklEXCIpXG5cdGlkOiBJRFxuXG5cdEBSZXF1aXJlZFxuXHRAQ29sdW1uKFwiSW50XCIpXG5cdGNoYWluX2lkOiBJbnRcblxuXHRAUmVxdWlyZWRcblx0QENvbHVtbihcIkludFwiKVxuXHR0aW1lc3RhbXA6IEludFxuXG5cdEBSZXF1aXJlZFxuXHRAQ29sdW1uKFwiSW50XCIpXG5cdGNyZWF0aW9uX2Jsb2NrX251bWJlcjogSW50XG5cblx0QFJlcXVpcmVkXG5cdEBDb2x1bW4oXCJTdHJpbmdcIilcblx0dW5kZXJseWluZ190b2tlbl9hZGRyZXNzOiBTdHJpbmdcblxuXHRAUmVxdWlyZWRcblx0QENvbHVtbihcIkludFwiKVxuXHR1bmRlcmx5aW5nX3Rva2VuX2luZGV4OiBJbnRcblxuXHRAUmVxdWlyZWRcblx0QENvbHVtbihcIlN0cmluZ1wiKVxuXHR1bmRlcmx5aW5nX3Rva2VuX3N5bWJvbDogU3RyaW5nXG5cblx0QFJlcXVpcmVkXG5cdEBDb2x1bW4oXCJTdHJpbmdcIilcblx0dW5kZXJseWluZ190b2tlbl9kZWNpbWFsczogU3RyaW5nXG5cblx0QENvbHVtbihcIlN0cmluZ1wiKVxuXHRyZWNlaXB0X3Rva2VuX2FkZHJlc3M/OiBTdHJpbmdcblxuXHRAQ29sdW1uKFwiU3RyaW5nXCIpXG5cdHJlY2VpcHRfdG9rZW5fc3ltYm9sPzogU3RyaW5nXG5cblx0QENvbHVtbihcIlN0cmluZ1wiKVxuXHRyZWNlaXB0X3Rva2VuX2RlY2ltYWxzPzogU3RyaW5nXG5cblx0QFJlcXVpcmVkXG5cdEBDb2x1bW4oXCJTdHJpbmdcIilcblx0cG9vbF9hZGRyZXNzOiBTdHJpbmdcblxuXHRAUmVxdWlyZWRcblx0QENvbHVtbihcIlN0cmluZ1wiKVxuXHRwb29sX3N5bWJvbDogU3RyaW5nXG4gIGNvbnN0cnVjdG9yKGRhdGE6IFBvb2xzQ29uc3RydWN0b3JJbnB1dCkge3N1cGVyKCl9XG4gIFxufVxuXG5cbmludGVyZmFjZSBQb29sU25hcHNob3RDb25zdHJ1Y3RvcklucHV0IHtcbiAgaWQ6IElEO1xuICB0aW1lc3RhbXA6IEludDtcbiAgYmxvY2tfZGF0ZTogU3RyaW5nO1xuICBjaGFpbl9pZDogSW50O1xuICB1bmRlcmx5aW5nX3Rva2VuX2FkZHJlc3M6IFN0cmluZztcbiAgdW5kZXJseWluZ190b2tlbl9pbmRleDogSW50O1xuICBwb29sX2FkZHJlc3M6IFN0cmluZztcbiAgdW5kZXJseWluZ190b2tlbl9hbW91bnQ6IEZsb2F0O1xuICB1bmRlcmx5aW5nX3Rva2VuX2Ftb3VudF91c2Q/OiBGbG9hdDtcbiAgdG90YWxfZmVlc191c2Q/OiBGbG9hdDtcbn1cbkBFbnRpdHkoXCJQb29sU25hcHNob3RcIilcbmV4cG9ydCBjbGFzcyBQb29sU25hcHNob3QgZXh0ZW5kcyBBYnN0cmFjdEVudGl0eSAge1xuXG5cdEBSZXF1aXJlZFxuXHRAQ29sdW1uKFwiSURcIilcblx0aWQ6IElEXG5cblx0QFJlcXVpcmVkXG5cdEBDb2x1bW4oXCJJbnRcIilcblx0dGltZXN0YW1wOiBJbnRcblxuXHRAUmVxdWlyZWRcblx0QENvbHVtbihcIlN0cmluZ1wiKVxuXHRibG9ja19kYXRlOiBTdHJpbmdcblxuXHRAUmVxdWlyZWRcblx0QENvbHVtbihcIkludFwiKVxuXHRjaGFpbl9pZDogSW50XG5cblx0QFJlcXVpcmVkXG5cdEBDb2x1bW4oXCJTdHJpbmdcIilcblx0dW5kZXJseWluZ190b2tlbl9hZGRyZXNzOiBTdHJpbmdcblxuXHRAUmVxdWlyZWRcblx0QENvbHVtbihcIkludFwiKVxuXHR1bmRlcmx5aW5nX3Rva2VuX2luZGV4OiBJbnRcblxuXHRAUmVxdWlyZWRcblx0QENvbHVtbihcIlN0cmluZ1wiKVxuXHRwb29sX2FkZHJlc3M6IFN0cmluZ1xuXG5cdEBSZXF1aXJlZFxuXHRAQ29sdW1uKFwiRmxvYXRcIilcblx0dW5kZXJseWluZ190b2tlbl9hbW91bnQ6IEZsb2F0XG5cblx0QENvbHVtbihcIkZsb2F0XCIpXG5cdHVuZGVybHlpbmdfdG9rZW5fYW1vdW50X3VzZD86IEZsb2F0XG5cblx0QENvbHVtbihcIkZsb2F0XCIpXG5cdHRvdGFsX2ZlZXNfdXNkPzogRmxvYXRcbiAgY29uc3RydWN0b3IoZGF0YTogUG9vbFNuYXBzaG90Q29uc3RydWN0b3JJbnB1dCkge3N1cGVyKCl9XG4gIFxufVxuXG5cbmludGVyZmFjZSBQb3NpdGlvblNuYXBzaG90Q29uc3RydWN0b3JJbnB1dCB7XG4gIGlkOiBJRDtcbiAgdGltZXN0YW1wOiBJbnQ7XG4gIGJsb2NrX2RhdGU6IFN0cmluZztcbiAgY2hhaW5faWQ6IEludDtcbiAgcG9vbF9hZGRyZXNzOiBTdHJpbmc7XG4gIHVzZXJfYWRkcmVzczogU3RyaW5nO1xuICB1bmRlcmx5aW5nX3Rva2VuX2FkZHJlc3M6IFN0cmluZztcbiAgdW5kZXJseWluZ190b2tlbl9pbmRleDogSW50O1xuICB1bmRlcmx5aW5nX3Rva2VuX2Ftb3VudDogRmxvYXQ7XG4gIHVuZGVybHlpbmdfdG9rZW5fYW1vdW50X3VzZD86IEZsb2F0O1xuICB0b3RhbF9mZWVzX3VzZD86IEZsb2F0O1xufVxuQEVudGl0eShcIlBvc2l0aW9uU25hcHNob3RcIilcbmV4cG9ydCBjbGFzcyBQb3NpdGlvblNuYXBzaG90IGV4dGVuZHMgQWJzdHJhY3RFbnRpdHkgIHtcblxuXHRAUmVxdWlyZWRcblx0QENvbHVtbihcIklEXCIpXG5cdGlkOiBJRFxuXG5cdEBSZXF1aXJlZFxuXHRAQ29sdW1uKFwiSW50XCIpXG5cdHRpbWVzdGFtcDogSW50XG5cblx0QFJlcXVpcmVkXG5cdEBDb2x1bW4oXCJTdHJpbmdcIilcblx0YmxvY2tfZGF0ZTogU3RyaW5nXG5cblx0QFJlcXVpcmVkXG5cdEBDb2x1bW4oXCJJbnRcIilcblx0Y2hhaW5faWQ6IEludFxuXG5cdEBSZXF1aXJlZFxuXHRAQ29sdW1uKFwiU3RyaW5nXCIpXG5cdHBvb2xfYWRkcmVzczogU3RyaW5nXG5cblx0QFJlcXVpcmVkXG5cdEBDb2x1bW4oXCJTdHJpbmdcIilcblx0dXNlcl9hZGRyZXNzOiBTdHJpbmdcblxuXHRAUmVxdWlyZWRcblx0QENvbHVtbihcIlN0cmluZ1wiKVxuXHR1bmRlcmx5aW5nX3Rva2VuX2FkZHJlc3M6IFN0cmluZ1xuXG5cdEBSZXF1aXJlZFxuXHRAQ29sdW1uKFwiSW50XCIpXG5cdHVuZGVybHlpbmdfdG9rZW5faW5kZXg6IEludFxuXG5cdEBSZXF1aXJlZFxuXHRAQ29sdW1uKFwiRmxvYXRcIilcblx0dW5kZXJseWluZ190b2tlbl9hbW91bnQ6IEZsb2F0XG5cblx0QENvbHVtbihcIkZsb2F0XCIpXG5cdHVuZGVybHlpbmdfdG9rZW5fYW1vdW50X3VzZD86IEZsb2F0XG5cblx0QENvbHVtbihcIkZsb2F0XCIpXG5cdHRvdGFsX2ZlZXNfdXNkPzogRmxvYXRcbiAgY29uc3RydWN0b3IoZGF0YTogUG9zaXRpb25TbmFwc2hvdENvbnN0cnVjdG9ySW5wdXQpIHtzdXBlcigpfVxuICBcbn1cblxuXG5pbnRlcmZhY2UgUmV3YXJkUG9vbFVzZXJDb25zdHJ1Y3RvcklucHV0IHtcbiAgaWQ6IElEO1xuICB1c2VyOiBTdHJpbmc7XG4gIHJld2FyZF9wb29sOiBTdHJpbmc7XG59XG5ARW50aXR5KFwiUmV3YXJkUG9vbFVzZXJcIilcbmV4cG9ydCBjbGFzcyBSZXdhcmRQb29sVXNlciBleHRlbmRzIEFic3RyYWN0RW50aXR5ICB7XG5cblx0QFJlcXVpcmVkXG5cdEBDb2x1bW4oXCJJRFwiKVxuXHRpZDogSURcblxuXHRAUmVxdWlyZWRcblx0QENvbHVtbihcIlN0cmluZ1wiKVxuXHR1c2VyOiBTdHJpbmdcblxuXHRAUmVxdWlyZWRcblx0QENvbHVtbihcIlN0cmluZ1wiKVxuXHRyZXdhcmRfcG9vbDogU3RyaW5nXG4gIGNvbnN0cnVjdG9yKGRhdGE6IFJld2FyZFBvb2xVc2VyQ29uc3RydWN0b3JJbnB1dCkge3N1cGVyKCl9XG4gIFxufVxuXG5cbmludGVyZmFjZSBSZXdjYWNoZUNvbnN0cnVjdG9ySW5wdXQge1xuICBpZDogSUQ7XG4gIFNZOiBTdHJpbmc7XG4gIExQOiBTdHJpbmc7XG4gIHJld2FyZFBvb2w6IFN0cmluZztcbiAgdW5kZXJseWluZ190b2tlbl9hZGRyZXNzOiBTdHJpbmc7XG4gIHVuZGVybHlpbmdfdG9rZW5fZGVjaW1hbHM6IEludDtcbn1cbkBFbnRpdHkoXCJSZXdjYWNoZVwiKVxuZXhwb3J0IGNsYXNzIFJld2NhY2hlIGV4dGVuZHMgQWJzdHJhY3RFbnRpdHkgIHtcblxuXHRAUmVxdWlyZWRcblx0QENvbHVtbihcIklEXCIpXG5cdGlkOiBJRFxuXG5cdEBSZXF1aXJlZFxuXHRAQ29sdW1uKFwiU3RyaW5nXCIpXG5cdFNZOiBTdHJpbmdcblxuXHRAUmVxdWlyZWRcblx0QENvbHVtbihcIlN0cmluZ1wiKVxuXHRMUDogU3RyaW5nXG5cblx0QFJlcXVpcmVkXG5cdEBDb2x1bW4oXCJTdHJpbmdcIilcblx0cmV3YXJkUG9vbDogU3RyaW5nXG5cblx0QFJlcXVpcmVkXG5cdEBDb2x1bW4oXCJTdHJpbmdcIilcblx0dW5kZXJseWluZ190b2tlbl9hZGRyZXNzOiBTdHJpbmdcblxuXHRAUmVxdWlyZWRcblx0QENvbHVtbihcIkludFwiKVxuXHR1bmRlcmx5aW5nX3Rva2VuX2RlY2ltYWxzOiBJbnRcbiAgY29uc3RydWN0b3IoZGF0YTogUmV3Y2FjaGVDb25zdHJ1Y3RvcklucHV0KSB7c3VwZXIoKX1cbiAgXG59XG5cblxuY29uc3Qgc291cmNlID0gYHR5cGUgUG9vbHMgQGVudGl0eSB7XG4gICAgaWQ6IElEIVxuICAgIGNoYWluX2lkOiBJbnQhXG4gICAgdGltZXN0YW1wOiBJbnQhXG4gICAgY3JlYXRpb25fYmxvY2tfbnVtYmVyOiBJbnQhXG4gICAgdW5kZXJseWluZ190b2tlbl9hZGRyZXNzOiBTdHJpbmchXG4gICAgdW5kZXJseWluZ190b2tlbl9pbmRleDogSW50IVxuICAgIHVuZGVybHlpbmdfdG9rZW5fc3ltYm9sOiBTdHJpbmchXG4gICAgdW5kZXJseWluZ190b2tlbl9kZWNpbWFsczogU3RyaW5nIVxuICAgIHJlY2VpcHRfdG9rZW5fYWRkcmVzczogU3RyaW5nXG4gICAgcmVjZWlwdF90b2tlbl9zeW1ib2w6IFN0cmluZ1xuICAgIHJlY2VpcHRfdG9rZW5fZGVjaW1hbHM6IFN0cmluZ1xuICAgIHBvb2xfYWRkcmVzczogU3RyaW5nIVxuICAgIHBvb2xfc3ltYm9sOiBTdHJpbmchXG59XG5cbnR5cGUgUG9vbFNuYXBzaG90IEBlbnRpdHkge1xuICAgIGlkOiBJRCFcbiAgICB0aW1lc3RhbXA6IEludCFcbiAgICBibG9ja19kYXRlOiBTdHJpbmchXG4gICAgY2hhaW5faWQ6IEludCFcbiAgICB1bmRlcmx5aW5nX3Rva2VuX2FkZHJlc3M6IFN0cmluZyFcbiAgICB1bmRlcmx5aW5nX3Rva2VuX2luZGV4OiBJbnQhXG4gICAgcG9vbF9hZGRyZXNzOiBTdHJpbmchXG4gICAgdW5kZXJseWluZ190b2tlbl9hbW91bnQ6IEZsb2F0IVxuICAgIHVuZGVybHlpbmdfdG9rZW5fYW1vdW50X3VzZDogRmxvYXRcbiAgICB0b3RhbF9mZWVzX3VzZDogRmxvYXRcbn1cblxudHlwZSBQb3NpdGlvblNuYXBzaG90IEBlbnRpdHkge1xuICAgIGlkOiBJRCFcbiAgICB0aW1lc3RhbXA6IEludCFcbiAgICBibG9ja19kYXRlOiBTdHJpbmchXG4gICAgY2hhaW5faWQ6IEludCFcbiAgICBwb29sX2FkZHJlc3M6IFN0cmluZyFcbiAgICB1c2VyX2FkZHJlc3M6IFN0cmluZyFcbiAgICB1bmRlcmx5aW5nX3Rva2VuX2FkZHJlc3M6IFN0cmluZyFcbiAgICB1bmRlcmx5aW5nX3Rva2VuX2luZGV4OiBJbnQhXG4gICAgdW5kZXJseWluZ190b2tlbl9hbW91bnQ6IEZsb2F0IVxuXG4gICAgdW5kZXJseWluZ190b2tlbl9hbW91bnRfdXNkOiBGbG9hdFxuICAgIHRvdGFsX2ZlZXNfdXNkOiBGbG9hdFxufVxuXG50eXBlIFJld2FyZFBvb2xVc2VyIEBlbnRpdHkge1xuICAgIGlkOiBJRCFcbiAgICB1c2VyOiBTdHJpbmchXG4gICAgcmV3YXJkX3Bvb2w6IFN0cmluZyFcbn1cblxudHlwZSBSZXdjYWNoZSBAZW50aXR5IHtcbiAgICBpZDogSUQhXG4gICAgU1k6IFN0cmluZyFcbiAgICBMUDogU3RyaW5nIVxuICAgIHJld2FyZFBvb2w6IFN0cmluZyFcblxuICAgIHVuZGVybHlpbmdfdG9rZW5fYWRkcmVzczogU3RyaW5nIVxuICAgIHVuZGVybHlpbmdfdG9rZW5fZGVjaW1hbHM6IEludCFcbn1gXG5EYXRhYmFzZVNjaGVtYS5yZWdpc3Rlcih7XG4gIHNvdXJjZSxcbiAgZW50aXRpZXM6IHtcbiAgICBcIlBvb2xzXCI6IFBvb2xzLFxuXHRcdFwiUG9vbFNuYXBzaG90XCI6IFBvb2xTbmFwc2hvdCxcblx0XHRcIlBvc2l0aW9uU25hcHNob3RcIjogUG9zaXRpb25TbmFwc2hvdCxcblx0XHRcIlJld2FyZFBvb2xVc2VyXCI6IFJld2FyZFBvb2xVc2VyLFxuXHRcdFwiUmV3Y2FjaGVcIjogUmV3Y2FjaGVcbiAgfVxufSlcbiIsICJleHBvcnQgY29uc3QgTVVMVElDQUxMX0FERFJFU1MgPSAnMHhjYTExYmRlMDU5NzdiMzYzMTE2NzAyODg2MmJlMmExNzM5NzZjYTExJztcbmV4cG9ydCBjb25zdCBNVUxUSUNBTExfQkFUQ0hfU0laRSA9IDEwMDA7XG4vLyBleHBvcnQgY29uc3QgVFJFQVNVUllfQUREUkVTUyA9ICcweDgyNzA0MDBkNTI4YzM0ZTE1OTZlZjM2N2VlZGVjOTkwODBhMWI1OTInO1xuZXhwb3J0IGNvbnN0IE9ORSA9IEJpZ0ludCgxMCkgKiogMThuO1xuXG5leHBvcnQgY29uc3QgQ0hBSU5fSUQgPSAxNDY7XG4vLyBleHBvcnQgY29uc3QgRVFCX0JPT1NURVJfQUREUkVTUyA9ICcweDkyMDg3M0U1YjMwMkE2MTlDNTRjOTA4YURGQjc3YTFDNDI1NkEzQjgnO1xuLy8gZXhwb3J0IGNvbnN0IEVRQl9CT09TVEVSX1NUQVJUX0JMT0NLID0gMTI4MTU4OTc7XG4vLyBleHBvcnQgY29uc3QgRVFCX1BST1hZX0FERFJFU1MgPSAnMHg0Nzk2MDNERTBhOEI2RDJmNEQ0ZWFBMTA1OEVlYTBkN0FjOUUyMThkJztcbmV4cG9ydCBjb25zdCBQRU5QSUVfU1RBS0lOR19BRERSRVNTID0gJzB4Rjk2MTllOEIwMUFjYzIzRkFjN0VlMEFFYjEyNTg0MzNiODU4MTRlYyc7XG5leHBvcnQgY29uc3QgUEVOUElFX1NUQUtJTkdfU1RBUlRfQkxPQ0sgPSAyODQyNzQ3NTtcblxuXG5leHBvcnQgY29uc3QgT05FX0RBWV9JTl9NSU5VVEUgPSAyNCAqIDYwO1xuIiwgImV4cG9ydCB0eXBlIFVzZXJQb3NpdGlvblJhdyA9IFJlY29yZDxzdHJpbmcsIGJpZ2ludD47XG5cbmV4cG9ydCBmdW5jdGlvbiBhZGQocmM6IFVzZXJQb3NpdGlvblJhdywga2V5OiBzdHJpbmcsIHZhbHVlOiBiaWdpbnQpIHtcbiAgaWYgKHJjW2tleV0pIHtcbiAgICByY1trZXldICs9IHZhbHVlO1xuICB9IGVsc2Uge1xuICAgIHJjW2tleV0gPSB2YWx1ZTtcbiAgfVxufVxuIiwgIi8qIEF1dG9nZW5lcmF0ZWQgZmlsZS4gRG8gbm90IGVkaXQgbWFudWFsbHkuICovXG4vKiB0c2xpbnQ6ZGlzYWJsZSAqL1xuLyogZXNsaW50LWRpc2FibGUgKi9cbmltcG9ydCB7IEJpZ051bWJlcmlzaCwgT3ZlcnJpZGVzIH0gZnJvbSBcImV0aGVyc1wiO1xuaW1wb3J0IHtcbiAgYWRkQ29udHJhY3RCeUFCSSxcbiAgZ2V0Q29udHJhY3RCeUFCSSxcbiAgYWRkUHJvY2Vzc29yLFxuICBnZXRQcm9jZXNzb3IsXG4gIGdldFByb3ZpZGVyLFxuICB0cmFuc2Zvcm1FdGhlckVycm9yLFxuICBCaW5kT3B0aW9ucyxcbiAgQmFzZVByb2Nlc3NvcixcbiAgQmFzZVByb2Nlc3NvclRlbXBsYXRlLFxuICBCb3VuZENvbnRyYWN0VmlldyxcbiAgQ29udHJhY3RDb250ZXh0LFxuICBDb250cmFjdFZpZXcsXG4gIER1bW15UHJvdmlkZXIsXG4gIEV0aENoYWluSWQsXG4gIFR5cGVkQ2FsbFRyYWNlLFxuICBFdGhDb250ZXh0LFxuICBFdGhGZXRjaENvbmZpZyxcbiAgUHJlcHJvY2Vzc1Jlc3VsdCxcbiAgZW5jb2RlQ2FsbERhdGEsXG59IGZyb20gXCJAc2VudGlvL3Nkay9ldGhcIjtcbmltcG9ydCB7IEV0aENhbGxQYXJhbSwgRXRoQ2FsbENvbnRleHQsIFByZXBhcmVkRGF0YSB9IGZyb20gXCJAc2VudGlvL3Byb3Rvc1wiO1xuXG5pbXBvcnQgeyBNdWx0aWNhbGwyX19mYWN0b3J5IH0gZnJvbSBcIi4vaW5kZXguanNcIjtcbmltcG9ydCB7IE11bHRpY2FsbDIgfSBmcm9tIFwiLi9NdWx0aWNhbGwyLmpzXCI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgQWdncmVnYXRlQ2FsbE9iamVjdCB7XG4gIGNhbGxzOiBNdWx0aWNhbGwyLkNhbGxTdHJ1Y3RPdXRwdXRbXTtcbn1cblxuZXhwb3J0IHR5cGUgQWdncmVnYXRlQ2FsbFRyYWNlID0gVHlwZWRDYWxsVHJhY2U8XG4gIFtNdWx0aWNhbGwyLkNhbGxTdHJ1Y3RPdXRwdXRbXV0sXG4gIEFnZ3JlZ2F0ZUNhbGxPYmplY3Rcbj47XG5cbmV4cG9ydCBpbnRlcmZhY2UgQmxvY2tBbmRBZ2dyZWdhdGVDYWxsT2JqZWN0IHtcbiAgY2FsbHM6IE11bHRpY2FsbDIuQ2FsbFN0cnVjdE91dHB1dFtdO1xufVxuXG5leHBvcnQgdHlwZSBCbG9ja0FuZEFnZ3JlZ2F0ZUNhbGxUcmFjZSA9IFR5cGVkQ2FsbFRyYWNlPFxuICBbTXVsdGljYWxsMi5DYWxsU3RydWN0T3V0cHV0W11dLFxuICBCbG9ja0FuZEFnZ3JlZ2F0ZUNhbGxPYmplY3Rcbj47XG5cbmV4cG9ydCBpbnRlcmZhY2UgR2V0QmxvY2tIYXNoQ2FsbE9iamVjdCB7XG4gIGJsb2NrTnVtYmVyOiBiaWdpbnQ7XG59XG5cbmV4cG9ydCB0eXBlIEdldEJsb2NrSGFzaENhbGxUcmFjZSA9IFR5cGVkQ2FsbFRyYWNlPFxuICBbYmlnaW50XSxcbiAgR2V0QmxvY2tIYXNoQ2FsbE9iamVjdFxuPjtcblxuZXhwb3J0IGludGVyZmFjZSBHZXRCbG9ja051bWJlckNhbGxPYmplY3Qge31cblxuZXhwb3J0IHR5cGUgR2V0QmxvY2tOdW1iZXJDYWxsVHJhY2UgPSBUeXBlZENhbGxUcmFjZTxcbiAgW10sXG4gIEdldEJsb2NrTnVtYmVyQ2FsbE9iamVjdFxuPjtcblxuZXhwb3J0IGludGVyZmFjZSBHZXRDdXJyZW50QmxvY2tDb2luYmFzZUNhbGxPYmplY3Qge31cblxuZXhwb3J0IHR5cGUgR2V0Q3VycmVudEJsb2NrQ29pbmJhc2VDYWxsVHJhY2UgPSBUeXBlZENhbGxUcmFjZTxcbiAgW10sXG4gIEdldEN1cnJlbnRCbG9ja0NvaW5iYXNlQ2FsbE9iamVjdFxuPjtcblxuZXhwb3J0IGludGVyZmFjZSBHZXRDdXJyZW50QmxvY2tEaWZmaWN1bHR5Q2FsbE9iamVjdCB7fVxuXG5leHBvcnQgdHlwZSBHZXRDdXJyZW50QmxvY2tEaWZmaWN1bHR5Q2FsbFRyYWNlID0gVHlwZWRDYWxsVHJhY2U8XG4gIFtdLFxuICBHZXRDdXJyZW50QmxvY2tEaWZmaWN1bHR5Q2FsbE9iamVjdFxuPjtcblxuZXhwb3J0IGludGVyZmFjZSBHZXRDdXJyZW50QmxvY2tHYXNMaW1pdENhbGxPYmplY3Qge31cblxuZXhwb3J0IHR5cGUgR2V0Q3VycmVudEJsb2NrR2FzTGltaXRDYWxsVHJhY2UgPSBUeXBlZENhbGxUcmFjZTxcbiAgW10sXG4gIEdldEN1cnJlbnRCbG9ja0dhc0xpbWl0Q2FsbE9iamVjdFxuPjtcblxuZXhwb3J0IGludGVyZmFjZSBHZXRDdXJyZW50QmxvY2tUaW1lc3RhbXBDYWxsT2JqZWN0IHt9XG5cbmV4cG9ydCB0eXBlIEdldEN1cnJlbnRCbG9ja1RpbWVzdGFtcENhbGxUcmFjZSA9IFR5cGVkQ2FsbFRyYWNlPFxuICBbXSxcbiAgR2V0Q3VycmVudEJsb2NrVGltZXN0YW1wQ2FsbE9iamVjdFxuPjtcblxuZXhwb3J0IGludGVyZmFjZSBHZXRFdGhCYWxhbmNlQ2FsbE9iamVjdCB7XG4gIGFkZHI6IHN0cmluZztcbn1cblxuZXhwb3J0IHR5cGUgR2V0RXRoQmFsYW5jZUNhbGxUcmFjZSA9IFR5cGVkQ2FsbFRyYWNlPFxuICBbc3RyaW5nXSxcbiAgR2V0RXRoQmFsYW5jZUNhbGxPYmplY3Rcbj47XG5cbmV4cG9ydCBpbnRlcmZhY2UgR2V0TDFCbG9ja051bWJlckNhbGxPYmplY3Qge31cblxuZXhwb3J0IHR5cGUgR2V0TDFCbG9ja051bWJlckNhbGxUcmFjZSA9IFR5cGVkQ2FsbFRyYWNlPFxuICBbXSxcbiAgR2V0TDFCbG9ja051bWJlckNhbGxPYmplY3Rcbj47XG5cbmV4cG9ydCBpbnRlcmZhY2UgR2V0TGFzdEJsb2NrSGFzaENhbGxPYmplY3Qge31cblxuZXhwb3J0IHR5cGUgR2V0TGFzdEJsb2NrSGFzaENhbGxUcmFjZSA9IFR5cGVkQ2FsbFRyYWNlPFxuICBbXSxcbiAgR2V0TGFzdEJsb2NrSGFzaENhbGxPYmplY3Rcbj47XG5cbmV4cG9ydCBpbnRlcmZhY2UgVHJ5QWdncmVnYXRlQ2FsbE9iamVjdCB7XG4gIHJlcXVpcmVTdWNjZXNzOiBib29sZWFuO1xuICBjYWxsczogTXVsdGljYWxsMi5DYWxsU3RydWN0T3V0cHV0W107XG59XG5cbmV4cG9ydCB0eXBlIFRyeUFnZ3JlZ2F0ZUNhbGxUcmFjZSA9IFR5cGVkQ2FsbFRyYWNlPFxuICBbYm9vbGVhbiwgTXVsdGljYWxsMi5DYWxsU3RydWN0T3V0cHV0W11dLFxuICBUcnlBZ2dyZWdhdGVDYWxsT2JqZWN0XG4+O1xuXG5leHBvcnQgaW50ZXJmYWNlIFRyeUJsb2NrQW5kQWdncmVnYXRlQ2FsbE9iamVjdCB7XG4gIHJlcXVpcmVTdWNjZXNzOiBib29sZWFuO1xuICBjYWxsczogTXVsdGljYWxsMi5DYWxsU3RydWN0T3V0cHV0W107XG59XG5cbmV4cG9ydCB0eXBlIFRyeUJsb2NrQW5kQWdncmVnYXRlQ2FsbFRyYWNlID0gVHlwZWRDYWxsVHJhY2U8XG4gIFtib29sZWFuLCBNdWx0aWNhbGwyLkNhbGxTdHJ1Y3RPdXRwdXRbXV0sXG4gIFRyeUJsb2NrQW5kQWdncmVnYXRlQ2FsbE9iamVjdFxuPjtcblxuY29uc3QgdGVtcGxhdGVDb250cmFjdCA9IE11bHRpY2FsbDJfX2ZhY3RvcnkuY29ubmVjdChcIjB4MFwiLCBEdW1teVByb3ZpZGVyKTtcblxuZXhwb3J0IGNsYXNzIE11bHRpY2FsbDJDb250cmFjdFZpZXcgZXh0ZW5kcyBDb250cmFjdFZpZXc8TXVsdGljYWxsMj4ge1xuICBjb25zdHJ1Y3Rvcihjb250cmFjdDogTXVsdGljYWxsMikge1xuICAgIHN1cGVyKGNvbnRyYWN0KTtcbiAgICB0aGlzLmNhbGxTdGF0aWMuY29udHJhY3QgPSBjb250cmFjdDtcbiAgfVxuXG4gIGFzeW5jIGdldEJsb2NrSGFzaChcbiAgICBibG9ja051bWJlcjogQmlnTnVtYmVyaXNoLFxuICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlcyxcbiAgICBwcmVwYXJlZERhdGE/OiBQcmVwYXJlZERhdGEsXG4gICAgZXRoQ2FsbENvbnRleHQ/OiBFdGhDYWxsQ29udGV4dCxcbiAgKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuY29udHJhY3QuZ2V0RnVuY3Rpb24oXCJnZXRCbG9ja0hhc2godWludDI1NilcIikoXG4gICAgICAgIGJsb2NrTnVtYmVyLFxuICAgICAgICBvdmVycmlkZXMgfHwge30sXG4gICAgICApO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGNvbnN0IHN0YWNrID0gbmV3IEVycm9yKCkuc3RhY2s7XG4gICAgICB0aHJvdyB0cmFuc2Zvcm1FdGhlckVycm9yKGUsIHVuZGVmaW5lZCwgc3RhY2spO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIGdldEJsb2NrTnVtYmVyKFxuICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlcyxcbiAgICBwcmVwYXJlZERhdGE/OiBQcmVwYXJlZERhdGEsXG4gICAgZXRoQ2FsbENvbnRleHQ/OiBFdGhDYWxsQ29udGV4dCxcbiAgKTogUHJvbWlzZTxiaWdpbnQ+IHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuY29udHJhY3QuZ2V0RnVuY3Rpb24oXCJnZXRCbG9ja051bWJlcigpXCIpKFxuICAgICAgICBvdmVycmlkZXMgfHwge30sXG4gICAgICApO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGNvbnN0IHN0YWNrID0gbmV3IEVycm9yKCkuc3RhY2s7XG4gICAgICB0aHJvdyB0cmFuc2Zvcm1FdGhlckVycm9yKGUsIHVuZGVmaW5lZCwgc3RhY2spO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIGdldEN1cnJlbnRCbG9ja0NvaW5iYXNlKFxuICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlcyxcbiAgICBwcmVwYXJlZERhdGE/OiBQcmVwYXJlZERhdGEsXG4gICAgZXRoQ2FsbENvbnRleHQ/OiBFdGhDYWxsQ29udGV4dCxcbiAgKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuY29udHJhY3QuZ2V0RnVuY3Rpb24oXCJnZXRDdXJyZW50QmxvY2tDb2luYmFzZSgpXCIpKFxuICAgICAgICBvdmVycmlkZXMgfHwge30sXG4gICAgICApO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGNvbnN0IHN0YWNrID0gbmV3IEVycm9yKCkuc3RhY2s7XG4gICAgICB0aHJvdyB0cmFuc2Zvcm1FdGhlckVycm9yKGUsIHVuZGVmaW5lZCwgc3RhY2spO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIGdldEN1cnJlbnRCbG9ja0RpZmZpY3VsdHkoXG4gICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzLFxuICAgIHByZXBhcmVkRGF0YT86IFByZXBhcmVkRGF0YSxcbiAgICBldGhDYWxsQ29udGV4dD86IEV0aENhbGxDb250ZXh0LFxuICApOiBQcm9taXNlPGJpZ2ludD4ge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gYXdhaXQgdGhpcy5jb250cmFjdC5nZXRGdW5jdGlvbihcImdldEN1cnJlbnRCbG9ja0RpZmZpY3VsdHkoKVwiKShcbiAgICAgICAgb3ZlcnJpZGVzIHx8IHt9LFxuICAgICAgKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBjb25zdCBzdGFjayA9IG5ldyBFcnJvcigpLnN0YWNrO1xuICAgICAgdGhyb3cgdHJhbnNmb3JtRXRoZXJFcnJvcihlLCB1bmRlZmluZWQsIHN0YWNrKTtcbiAgICB9XG4gIH1cblxuICBhc3luYyBnZXRDdXJyZW50QmxvY2tHYXNMaW1pdChcbiAgICBvdmVycmlkZXM/OiBPdmVycmlkZXMsXG4gICAgcHJlcGFyZWREYXRhPzogUHJlcGFyZWREYXRhLFxuICAgIGV0aENhbGxDb250ZXh0PzogRXRoQ2FsbENvbnRleHQsXG4gICk6IFByb21pc2U8YmlnaW50PiB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBhd2FpdCB0aGlzLmNvbnRyYWN0LmdldEZ1bmN0aW9uKFwiZ2V0Q3VycmVudEJsb2NrR2FzTGltaXQoKVwiKShcbiAgICAgICAgb3ZlcnJpZGVzIHx8IHt9LFxuICAgICAgKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBjb25zdCBzdGFjayA9IG5ldyBFcnJvcigpLnN0YWNrO1xuICAgICAgdGhyb3cgdHJhbnNmb3JtRXRoZXJFcnJvcihlLCB1bmRlZmluZWQsIHN0YWNrKTtcbiAgICB9XG4gIH1cblxuICBhc3luYyBnZXRDdXJyZW50QmxvY2tUaW1lc3RhbXAoXG4gICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzLFxuICAgIHByZXBhcmVkRGF0YT86IFByZXBhcmVkRGF0YSxcbiAgICBldGhDYWxsQ29udGV4dD86IEV0aENhbGxDb250ZXh0LFxuICApOiBQcm9taXNlPGJpZ2ludD4ge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gYXdhaXQgdGhpcy5jb250cmFjdC5nZXRGdW5jdGlvbihcImdldEN1cnJlbnRCbG9ja1RpbWVzdGFtcCgpXCIpKFxuICAgICAgICBvdmVycmlkZXMgfHwge30sXG4gICAgICApO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGNvbnN0IHN0YWNrID0gbmV3IEVycm9yKCkuc3RhY2s7XG4gICAgICB0aHJvdyB0cmFuc2Zvcm1FdGhlckVycm9yKGUsIHVuZGVmaW5lZCwgc3RhY2spO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIGdldEV0aEJhbGFuY2UoXG4gICAgYWRkcjogc3RyaW5nLFxuICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlcyxcbiAgICBwcmVwYXJlZERhdGE/OiBQcmVwYXJlZERhdGEsXG4gICAgZXRoQ2FsbENvbnRleHQ/OiBFdGhDYWxsQ29udGV4dCxcbiAgKTogUHJvbWlzZTxiaWdpbnQ+IHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuY29udHJhY3QuZ2V0RnVuY3Rpb24oXCJnZXRFdGhCYWxhbmNlKGFkZHJlc3MpXCIpKFxuICAgICAgICBhZGRyLFxuICAgICAgICBvdmVycmlkZXMgfHwge30sXG4gICAgICApO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGNvbnN0IHN0YWNrID0gbmV3IEVycm9yKCkuc3RhY2s7XG4gICAgICB0aHJvdyB0cmFuc2Zvcm1FdGhlckVycm9yKGUsIHVuZGVmaW5lZCwgc3RhY2spO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIGdldEwxQmxvY2tOdW1iZXIoXG4gICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzLFxuICAgIHByZXBhcmVkRGF0YT86IFByZXBhcmVkRGF0YSxcbiAgICBldGhDYWxsQ29udGV4dD86IEV0aENhbGxDb250ZXh0LFxuICApOiBQcm9taXNlPGJpZ2ludD4ge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gYXdhaXQgdGhpcy5jb250cmFjdC5nZXRGdW5jdGlvbihcImdldEwxQmxvY2tOdW1iZXIoKVwiKShcbiAgICAgICAgb3ZlcnJpZGVzIHx8IHt9LFxuICAgICAgKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBjb25zdCBzdGFjayA9IG5ldyBFcnJvcigpLnN0YWNrO1xuICAgICAgdGhyb3cgdHJhbnNmb3JtRXRoZXJFcnJvcihlLCB1bmRlZmluZWQsIHN0YWNrKTtcbiAgICB9XG4gIH1cblxuICBhc3luYyBnZXRMYXN0QmxvY2tIYXNoKFxuICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlcyxcbiAgICBwcmVwYXJlZERhdGE/OiBQcmVwYXJlZERhdGEsXG4gICAgZXRoQ2FsbENvbnRleHQ/OiBFdGhDYWxsQ29udGV4dCxcbiAgKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuY29udHJhY3QuZ2V0RnVuY3Rpb24oXCJnZXRMYXN0QmxvY2tIYXNoKClcIikoXG4gICAgICAgIG92ZXJyaWRlcyB8fCB7fSxcbiAgICAgICk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgY29uc3Qgc3RhY2sgPSBuZXcgRXJyb3IoKS5zdGFjaztcbiAgICAgIHRocm93IHRyYW5zZm9ybUV0aGVyRXJyb3IoZSwgdW5kZWZpbmVkLCBzdGFjayk7XG4gICAgfVxuICB9XG5cbiAgY2FsbFN0YXRpYyA9IHtcbiAgICBjb250cmFjdDogdGhpcy5jb250cmFjdCxcblxuICAgIGFzeW5jIGFnZ3JlZ2F0ZShcbiAgICAgIGNhbGxzOiBNdWx0aWNhbGwyLkNhbGxTdHJ1Y3RbXSxcbiAgICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlcyxcbiAgICAgIHByZXBhcmVkRGF0YT86IFByZXBhcmVkRGF0YSxcbiAgICAgIGV0aENhbGxDb250ZXh0PzogRXRoQ2FsbENvbnRleHQsXG4gICAgKTogUHJvbWlzZTxcbiAgICAgIFtiaWdpbnQsIHN0cmluZ1tdXSAmIHsgYmxvY2tOdW1iZXI6IGJpZ2ludDsgcmV0dXJuRGF0YTogc3RyaW5nW10gfVxuICAgID4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuY29udHJhY3RcbiAgICAgICAgICAuZ2V0RnVuY3Rpb24oXCJhZ2dyZWdhdGUoKGFkZHJlc3MsYnl0ZXMpW10pXCIpXG4gICAgICAgICAgLnN0YXRpY0NhbGwoY2FsbHMsIG92ZXJyaWRlcyB8fCB7fSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNvbnN0IHN0YWNrID0gbmV3IEVycm9yKCkuc3RhY2s7XG4gICAgICAgIHRocm93IHRyYW5zZm9ybUV0aGVyRXJyb3IoZSwgdW5kZWZpbmVkLCBzdGFjayk7XG4gICAgICB9XG4gICAgfSxcbiAgICBhc3luYyBibG9ja0FuZEFnZ3JlZ2F0ZShcbiAgICAgIGNhbGxzOiBNdWx0aWNhbGwyLkNhbGxTdHJ1Y3RbXSxcbiAgICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlcyxcbiAgICAgIHByZXBhcmVkRGF0YT86IFByZXBhcmVkRGF0YSxcbiAgICAgIGV0aENhbGxDb250ZXh0PzogRXRoQ2FsbENvbnRleHQsXG4gICAgKTogUHJvbWlzZTxcbiAgICAgIFtiaWdpbnQsIHN0cmluZywgTXVsdGljYWxsMi5SZXN1bHRTdHJ1Y3RPdXRwdXRbXV0gJiB7XG4gICAgICAgIGJsb2NrTnVtYmVyOiBiaWdpbnQ7XG4gICAgICAgIGJsb2NrSGFzaDogc3RyaW5nO1xuICAgICAgICByZXR1cm5EYXRhOiBNdWx0aWNhbGwyLlJlc3VsdFN0cnVjdE91dHB1dFtdO1xuICAgICAgfVxuICAgID4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuY29udHJhY3RcbiAgICAgICAgICAuZ2V0RnVuY3Rpb24oXCJibG9ja0FuZEFnZ3JlZ2F0ZSgoYWRkcmVzcyxieXRlcylbXSlcIilcbiAgICAgICAgICAuc3RhdGljQ2FsbChjYWxscywgb3ZlcnJpZGVzIHx8IHt9KTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY29uc3Qgc3RhY2sgPSBuZXcgRXJyb3IoKS5zdGFjaztcbiAgICAgICAgdGhyb3cgdHJhbnNmb3JtRXRoZXJFcnJvcihlLCB1bmRlZmluZWQsIHN0YWNrKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGFzeW5jIHRyeUFnZ3JlZ2F0ZShcbiAgICAgIHJlcXVpcmVTdWNjZXNzOiBib29sZWFuLFxuICAgICAgY2FsbHM6IE11bHRpY2FsbDIuQ2FsbFN0cnVjdFtdLFxuICAgICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzLFxuICAgICAgcHJlcGFyZWREYXRhPzogUHJlcGFyZWREYXRhLFxuICAgICAgZXRoQ2FsbENvbnRleHQ/OiBFdGhDYWxsQ29udGV4dCxcbiAgICApOiBQcm9taXNlPE11bHRpY2FsbDIuUmVzdWx0U3RydWN0T3V0cHV0W10+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLmNvbnRyYWN0XG4gICAgICAgICAgLmdldEZ1bmN0aW9uKFwidHJ5QWdncmVnYXRlKGJvb2wsKGFkZHJlc3MsYnl0ZXMpW10pXCIpXG4gICAgICAgICAgLnN0YXRpY0NhbGwocmVxdWlyZVN1Y2Nlc3MsIGNhbGxzLCBvdmVycmlkZXMgfHwge30pO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjb25zdCBzdGFjayA9IG5ldyBFcnJvcigpLnN0YWNrO1xuICAgICAgICB0aHJvdyB0cmFuc2Zvcm1FdGhlckVycm9yKGUsIHVuZGVmaW5lZCwgc3RhY2spO1xuICAgICAgfVxuICAgIH0sXG4gICAgYXN5bmMgdHJ5QmxvY2tBbmRBZ2dyZWdhdGUoXG4gICAgICByZXF1aXJlU3VjY2VzczogYm9vbGVhbixcbiAgICAgIGNhbGxzOiBNdWx0aWNhbGwyLkNhbGxTdHJ1Y3RbXSxcbiAgICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlcyxcbiAgICAgIHByZXBhcmVkRGF0YT86IFByZXBhcmVkRGF0YSxcbiAgICAgIGV0aENhbGxDb250ZXh0PzogRXRoQ2FsbENvbnRleHQsXG4gICAgKTogUHJvbWlzZTxcbiAgICAgIFtiaWdpbnQsIHN0cmluZywgTXVsdGljYWxsMi5SZXN1bHRTdHJ1Y3RPdXRwdXRbXV0gJiB7XG4gICAgICAgIGJsb2NrTnVtYmVyOiBiaWdpbnQ7XG4gICAgICAgIGJsb2NrSGFzaDogc3RyaW5nO1xuICAgICAgICByZXR1cm5EYXRhOiBNdWx0aWNhbGwyLlJlc3VsdFN0cnVjdE91dHB1dFtdO1xuICAgICAgfVxuICAgID4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuY29udHJhY3RcbiAgICAgICAgICAuZ2V0RnVuY3Rpb24oXCJ0cnlCbG9ja0FuZEFnZ3JlZ2F0ZShib29sLChhZGRyZXNzLGJ5dGVzKVtdKVwiKVxuICAgICAgICAgIC5zdGF0aWNDYWxsKHJlcXVpcmVTdWNjZXNzLCBjYWxscywgb3ZlcnJpZGVzIHx8IHt9KTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY29uc3Qgc3RhY2sgPSBuZXcgRXJyb3IoKS5zdGFjaztcbiAgICAgICAgdGhyb3cgdHJhbnNmb3JtRXRoZXJFcnJvcihlLCB1bmRlZmluZWQsIHN0YWNrKTtcbiAgICAgIH1cbiAgICB9LFxuICB9O1xuXG4gIGVuY29kZUNhbGwgPSB7XG4gICAgYWdncmVnYXRlKFxuICAgICAgY2FsbHM6IE11bHRpY2FsbDIuQ2FsbFN0cnVjdFtdLFxuICAgICAgY2FsbENvbnRleHQ6IEV0aENhbGxDb250ZXh0LFxuICAgICk6IEV0aENhbGxQYXJhbSB7XG4gICAgICByZXR1cm4gZW5jb2RlQ2FsbERhdGEoXG4gICAgICAgIGNhbGxDb250ZXh0LFxuICAgICAgICBcImFnZ3JlZ2F0ZVwiLFxuICAgICAgICBcImZ1bmN0aW9uIGFnZ3JlZ2F0ZSgoYWRkcmVzcyxieXRlcylbXSlcIixcbiAgICAgICAgW2NhbGxzXSxcbiAgICAgICk7XG4gICAgfSxcbiAgICBibG9ja0FuZEFnZ3JlZ2F0ZShcbiAgICAgIGNhbGxzOiBNdWx0aWNhbGwyLkNhbGxTdHJ1Y3RbXSxcbiAgICAgIGNhbGxDb250ZXh0OiBFdGhDYWxsQ29udGV4dCxcbiAgICApOiBFdGhDYWxsUGFyYW0ge1xuICAgICAgcmV0dXJuIGVuY29kZUNhbGxEYXRhKFxuICAgICAgICBjYWxsQ29udGV4dCxcbiAgICAgICAgXCJibG9ja0FuZEFnZ3JlZ2F0ZVwiLFxuICAgICAgICBcImZ1bmN0aW9uIGJsb2NrQW5kQWdncmVnYXRlKChhZGRyZXNzLGJ5dGVzKVtdKVwiLFxuICAgICAgICBbY2FsbHNdLFxuICAgICAgKTtcbiAgICB9LFxuICAgIGdldEJsb2NrSGFzaChcbiAgICAgIGJsb2NrTnVtYmVyOiBCaWdOdW1iZXJpc2gsXG4gICAgICBjYWxsQ29udGV4dDogRXRoQ2FsbENvbnRleHQsXG4gICAgKTogRXRoQ2FsbFBhcmFtIHtcbiAgICAgIHJldHVybiBlbmNvZGVDYWxsRGF0YShcbiAgICAgICAgY2FsbENvbnRleHQsXG4gICAgICAgIFwiZ2V0QmxvY2tIYXNoXCIsXG4gICAgICAgIFwiZnVuY3Rpb24gZ2V0QmxvY2tIYXNoKHVpbnQyNTYpXCIsXG4gICAgICAgIFtibG9ja051bWJlcl0sXG4gICAgICApO1xuICAgIH0sXG4gICAgZ2V0QmxvY2tOdW1iZXIoY2FsbENvbnRleHQ6IEV0aENhbGxDb250ZXh0KTogRXRoQ2FsbFBhcmFtIHtcbiAgICAgIHJldHVybiBlbmNvZGVDYWxsRGF0YShcbiAgICAgICAgY2FsbENvbnRleHQsXG4gICAgICAgIFwiZ2V0QmxvY2tOdW1iZXJcIixcbiAgICAgICAgXCJmdW5jdGlvbiBnZXRCbG9ja051bWJlcigpXCIsXG4gICAgICAgIFtdLFxuICAgICAgKTtcbiAgICB9LFxuICAgIGdldEN1cnJlbnRCbG9ja0NvaW5iYXNlKGNhbGxDb250ZXh0OiBFdGhDYWxsQ29udGV4dCk6IEV0aENhbGxQYXJhbSB7XG4gICAgICByZXR1cm4gZW5jb2RlQ2FsbERhdGEoXG4gICAgICAgIGNhbGxDb250ZXh0LFxuICAgICAgICBcImdldEN1cnJlbnRCbG9ja0NvaW5iYXNlXCIsXG4gICAgICAgIFwiZnVuY3Rpb24gZ2V0Q3VycmVudEJsb2NrQ29pbmJhc2UoKVwiLFxuICAgICAgICBbXSxcbiAgICAgICk7XG4gICAgfSxcbiAgICBnZXRDdXJyZW50QmxvY2tEaWZmaWN1bHR5KGNhbGxDb250ZXh0OiBFdGhDYWxsQ29udGV4dCk6IEV0aENhbGxQYXJhbSB7XG4gICAgICByZXR1cm4gZW5jb2RlQ2FsbERhdGEoXG4gICAgICAgIGNhbGxDb250ZXh0LFxuICAgICAgICBcImdldEN1cnJlbnRCbG9ja0RpZmZpY3VsdHlcIixcbiAgICAgICAgXCJmdW5jdGlvbiBnZXRDdXJyZW50QmxvY2tEaWZmaWN1bHR5KClcIixcbiAgICAgICAgW10sXG4gICAgICApO1xuICAgIH0sXG4gICAgZ2V0Q3VycmVudEJsb2NrR2FzTGltaXQoY2FsbENvbnRleHQ6IEV0aENhbGxDb250ZXh0KTogRXRoQ2FsbFBhcmFtIHtcbiAgICAgIHJldHVybiBlbmNvZGVDYWxsRGF0YShcbiAgICAgICAgY2FsbENvbnRleHQsXG4gICAgICAgIFwiZ2V0Q3VycmVudEJsb2NrR2FzTGltaXRcIixcbiAgICAgICAgXCJmdW5jdGlvbiBnZXRDdXJyZW50QmxvY2tHYXNMaW1pdCgpXCIsXG4gICAgICAgIFtdLFxuICAgICAgKTtcbiAgICB9LFxuICAgIGdldEN1cnJlbnRCbG9ja1RpbWVzdGFtcChjYWxsQ29udGV4dDogRXRoQ2FsbENvbnRleHQpOiBFdGhDYWxsUGFyYW0ge1xuICAgICAgcmV0dXJuIGVuY29kZUNhbGxEYXRhKFxuICAgICAgICBjYWxsQ29udGV4dCxcbiAgICAgICAgXCJnZXRDdXJyZW50QmxvY2tUaW1lc3RhbXBcIixcbiAgICAgICAgXCJmdW5jdGlvbiBnZXRDdXJyZW50QmxvY2tUaW1lc3RhbXAoKVwiLFxuICAgICAgICBbXSxcbiAgICAgICk7XG4gICAgfSxcbiAgICBnZXRFdGhCYWxhbmNlKGFkZHI6IHN0cmluZywgY2FsbENvbnRleHQ6IEV0aENhbGxDb250ZXh0KTogRXRoQ2FsbFBhcmFtIHtcbiAgICAgIHJldHVybiBlbmNvZGVDYWxsRGF0YShcbiAgICAgICAgY2FsbENvbnRleHQsXG4gICAgICAgIFwiZ2V0RXRoQmFsYW5jZVwiLFxuICAgICAgICBcImZ1bmN0aW9uIGdldEV0aEJhbGFuY2UoYWRkcmVzcylcIixcbiAgICAgICAgW2FkZHJdLFxuICAgICAgKTtcbiAgICB9LFxuICAgIGdldEwxQmxvY2tOdW1iZXIoY2FsbENvbnRleHQ6IEV0aENhbGxDb250ZXh0KTogRXRoQ2FsbFBhcmFtIHtcbiAgICAgIHJldHVybiBlbmNvZGVDYWxsRGF0YShcbiAgICAgICAgY2FsbENvbnRleHQsXG4gICAgICAgIFwiZ2V0TDFCbG9ja051bWJlclwiLFxuICAgICAgICBcImZ1bmN0aW9uIGdldEwxQmxvY2tOdW1iZXIoKVwiLFxuICAgICAgICBbXSxcbiAgICAgICk7XG4gICAgfSxcbiAgICBnZXRMYXN0QmxvY2tIYXNoKGNhbGxDb250ZXh0OiBFdGhDYWxsQ29udGV4dCk6IEV0aENhbGxQYXJhbSB7XG4gICAgICByZXR1cm4gZW5jb2RlQ2FsbERhdGEoXG4gICAgICAgIGNhbGxDb250ZXh0LFxuICAgICAgICBcImdldExhc3RCbG9ja0hhc2hcIixcbiAgICAgICAgXCJmdW5jdGlvbiBnZXRMYXN0QmxvY2tIYXNoKClcIixcbiAgICAgICAgW10sXG4gICAgICApO1xuICAgIH0sXG4gICAgdHJ5QWdncmVnYXRlKFxuICAgICAgcmVxdWlyZVN1Y2Nlc3M6IGJvb2xlYW4sXG4gICAgICBjYWxsczogTXVsdGljYWxsMi5DYWxsU3RydWN0W10sXG4gICAgICBjYWxsQ29udGV4dDogRXRoQ2FsbENvbnRleHQsXG4gICAgKTogRXRoQ2FsbFBhcmFtIHtcbiAgICAgIHJldHVybiBlbmNvZGVDYWxsRGF0YShcbiAgICAgICAgY2FsbENvbnRleHQsXG4gICAgICAgIFwidHJ5QWdncmVnYXRlXCIsXG4gICAgICAgIFwiZnVuY3Rpb24gdHJ5QWdncmVnYXRlKGJvb2wsKGFkZHJlc3MsYnl0ZXMpW10pXCIsXG4gICAgICAgIFtyZXF1aXJlU3VjY2VzcywgY2FsbHNdLFxuICAgICAgKTtcbiAgICB9LFxuICAgIHRyeUJsb2NrQW5kQWdncmVnYXRlKFxuICAgICAgcmVxdWlyZVN1Y2Nlc3M6IGJvb2xlYW4sXG4gICAgICBjYWxsczogTXVsdGljYWxsMi5DYWxsU3RydWN0W10sXG4gICAgICBjYWxsQ29udGV4dDogRXRoQ2FsbENvbnRleHQsXG4gICAgKTogRXRoQ2FsbFBhcmFtIHtcbiAgICAgIHJldHVybiBlbmNvZGVDYWxsRGF0YShcbiAgICAgICAgY2FsbENvbnRleHQsXG4gICAgICAgIFwidHJ5QmxvY2tBbmRBZ2dyZWdhdGVcIixcbiAgICAgICAgXCJmdW5jdGlvbiB0cnlCbG9ja0FuZEFnZ3JlZ2F0ZShib29sLChhZGRyZXNzLGJ5dGVzKVtdKVwiLFxuICAgICAgICBbcmVxdWlyZVN1Y2Nlc3MsIGNhbGxzXSxcbiAgICAgICk7XG4gICAgfSxcbiAgfTtcbn1cblxuZXhwb3J0IGNsYXNzIE11bHRpY2FsbDJCb3VuZENvbnRyYWN0VmlldyBleHRlbmRzIEJvdW5kQ29udHJhY3RWaWV3PFxuICBNdWx0aWNhbGwyLFxuICBNdWx0aWNhbGwyQ29udHJhY3RWaWV3XG4+IHtcbiAgYXN5bmMgZ2V0QmxvY2tIYXNoKFxuICAgIGJsb2NrTnVtYmVyOiBCaWdOdW1iZXJpc2gsXG4gICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzLFxuICApOiBQcm9taXNlPHN0cmluZz4ge1xuICAgIHJldHVybiBhd2FpdCB0aGlzLnZpZXcuZ2V0QmxvY2tIYXNoKFxuICAgICAgYmxvY2tOdW1iZXIsXG4gICAgICB7XG4gICAgICAgIGJsb2NrVGFnOiB0aGlzLmNvbnRleHQuYmxvY2tOdW1iZXIsXG4gICAgICAgIC4uLm92ZXJyaWRlcyxcbiAgICAgIH0sXG4gICAgICB0aGlzLmNvbnRleHQucHJlcGFyZWREYXRhLFxuICAgICAgdGhpcy5jb250ZXh0LmdldEV0aENhbGxDb250ZXh0KCksXG4gICAgKTtcbiAgfVxuXG4gIGFzeW5jIGdldEJsb2NrTnVtYmVyKG92ZXJyaWRlcz86IE92ZXJyaWRlcyk6IFByb21pc2U8YmlnaW50PiB7XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMudmlldy5nZXRCbG9ja051bWJlcihcbiAgICAgIHtcbiAgICAgICAgYmxvY2tUYWc6IHRoaXMuY29udGV4dC5ibG9ja051bWJlcixcbiAgICAgICAgLi4ub3ZlcnJpZGVzLFxuICAgICAgfSxcbiAgICAgIHRoaXMuY29udGV4dC5wcmVwYXJlZERhdGEsXG4gICAgICB0aGlzLmNvbnRleHQuZ2V0RXRoQ2FsbENvbnRleHQoKSxcbiAgICApO1xuICB9XG5cbiAgYXN5bmMgZ2V0Q3VycmVudEJsb2NrQ29pbmJhc2Uob3ZlcnJpZGVzPzogT3ZlcnJpZGVzKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy52aWV3LmdldEN1cnJlbnRCbG9ja0NvaW5iYXNlKFxuICAgICAge1xuICAgICAgICBibG9ja1RhZzogdGhpcy5jb250ZXh0LmJsb2NrTnVtYmVyLFxuICAgICAgICAuLi5vdmVycmlkZXMsXG4gICAgICB9LFxuICAgICAgdGhpcy5jb250ZXh0LnByZXBhcmVkRGF0YSxcbiAgICAgIHRoaXMuY29udGV4dC5nZXRFdGhDYWxsQ29udGV4dCgpLFxuICAgICk7XG4gIH1cblxuICBhc3luYyBnZXRDdXJyZW50QmxvY2tEaWZmaWN1bHR5KG92ZXJyaWRlcz86IE92ZXJyaWRlcyk6IFByb21pc2U8YmlnaW50PiB7XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMudmlldy5nZXRDdXJyZW50QmxvY2tEaWZmaWN1bHR5KFxuICAgICAge1xuICAgICAgICBibG9ja1RhZzogdGhpcy5jb250ZXh0LmJsb2NrTnVtYmVyLFxuICAgICAgICAuLi5vdmVycmlkZXMsXG4gICAgICB9LFxuICAgICAgdGhpcy5jb250ZXh0LnByZXBhcmVkRGF0YSxcbiAgICAgIHRoaXMuY29udGV4dC5nZXRFdGhDYWxsQ29udGV4dCgpLFxuICAgICk7XG4gIH1cblxuICBhc3luYyBnZXRDdXJyZW50QmxvY2tHYXNMaW1pdChvdmVycmlkZXM/OiBPdmVycmlkZXMpOiBQcm9taXNlPGJpZ2ludD4ge1xuICAgIHJldHVybiBhd2FpdCB0aGlzLnZpZXcuZ2V0Q3VycmVudEJsb2NrR2FzTGltaXQoXG4gICAgICB7XG4gICAgICAgIGJsb2NrVGFnOiB0aGlzLmNvbnRleHQuYmxvY2tOdW1iZXIsXG4gICAgICAgIC4uLm92ZXJyaWRlcyxcbiAgICAgIH0sXG4gICAgICB0aGlzLmNvbnRleHQucHJlcGFyZWREYXRhLFxuICAgICAgdGhpcy5jb250ZXh0LmdldEV0aENhbGxDb250ZXh0KCksXG4gICAgKTtcbiAgfVxuXG4gIGFzeW5jIGdldEN1cnJlbnRCbG9ja1RpbWVzdGFtcChvdmVycmlkZXM/OiBPdmVycmlkZXMpOiBQcm9taXNlPGJpZ2ludD4ge1xuICAgIHJldHVybiBhd2FpdCB0aGlzLnZpZXcuZ2V0Q3VycmVudEJsb2NrVGltZXN0YW1wKFxuICAgICAge1xuICAgICAgICBibG9ja1RhZzogdGhpcy5jb250ZXh0LmJsb2NrTnVtYmVyLFxuICAgICAgICAuLi5vdmVycmlkZXMsXG4gICAgICB9LFxuICAgICAgdGhpcy5jb250ZXh0LnByZXBhcmVkRGF0YSxcbiAgICAgIHRoaXMuY29udGV4dC5nZXRFdGhDYWxsQ29udGV4dCgpLFxuICAgICk7XG4gIH1cblxuICBhc3luYyBnZXRFdGhCYWxhbmNlKGFkZHI6IHN0cmluZywgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzKTogUHJvbWlzZTxiaWdpbnQ+IHtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy52aWV3LmdldEV0aEJhbGFuY2UoXG4gICAgICBhZGRyLFxuICAgICAge1xuICAgICAgICBibG9ja1RhZzogdGhpcy5jb250ZXh0LmJsb2NrTnVtYmVyLFxuICAgICAgICAuLi5vdmVycmlkZXMsXG4gICAgICB9LFxuICAgICAgdGhpcy5jb250ZXh0LnByZXBhcmVkRGF0YSxcbiAgICAgIHRoaXMuY29udGV4dC5nZXRFdGhDYWxsQ29udGV4dCgpLFxuICAgICk7XG4gIH1cblxuICBhc3luYyBnZXRMMUJsb2NrTnVtYmVyKG92ZXJyaWRlcz86IE92ZXJyaWRlcyk6IFByb21pc2U8YmlnaW50PiB7XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMudmlldy5nZXRMMUJsb2NrTnVtYmVyKFxuICAgICAge1xuICAgICAgICBibG9ja1RhZzogdGhpcy5jb250ZXh0LmJsb2NrTnVtYmVyLFxuICAgICAgICAuLi5vdmVycmlkZXMsXG4gICAgICB9LFxuICAgICAgdGhpcy5jb250ZXh0LnByZXBhcmVkRGF0YSxcbiAgICAgIHRoaXMuY29udGV4dC5nZXRFdGhDYWxsQ29udGV4dCgpLFxuICAgICk7XG4gIH1cblxuICBhc3luYyBnZXRMYXN0QmxvY2tIYXNoKG92ZXJyaWRlcz86IE92ZXJyaWRlcyk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMudmlldy5nZXRMYXN0QmxvY2tIYXNoKFxuICAgICAge1xuICAgICAgICBibG9ja1RhZzogdGhpcy5jb250ZXh0LmJsb2NrTnVtYmVyLFxuICAgICAgICAuLi5vdmVycmlkZXMsXG4gICAgICB9LFxuICAgICAgdGhpcy5jb250ZXh0LnByZXBhcmVkRGF0YSxcbiAgICAgIHRoaXMuY29udGV4dC5nZXRFdGhDYWxsQ29udGV4dCgpLFxuICAgICk7XG4gIH1cblxuICBjYWxsU3RhdGljID0ge1xuICAgIHZpZXc6IHRoaXMudmlldyxcbiAgICBjb250ZXh0OiB0aGlzLmNvbnRleHQsXG5cbiAgICBhc3luYyBhZ2dyZWdhdGUoXG4gICAgICBjYWxsczogTXVsdGljYWxsMi5DYWxsU3RydWN0W10sXG4gICAgICBvdmVycmlkZXM/OiBPdmVycmlkZXMsXG4gICAgKTogUHJvbWlzZTxcbiAgICAgIFtiaWdpbnQsIHN0cmluZ1tdXSAmIHsgYmxvY2tOdW1iZXI6IGJpZ2ludDsgcmV0dXJuRGF0YTogc3RyaW5nW10gfVxuICAgID4ge1xuICAgICAgcmV0dXJuIGF3YWl0IHRoaXMudmlldy5jYWxsU3RhdGljLmFnZ3JlZ2F0ZShcbiAgICAgICAgY2FsbHMsXG4gICAgICAgIHtcbiAgICAgICAgICBibG9ja1RhZzogdGhpcy5jb250ZXh0LmJsb2NrTnVtYmVyLFxuICAgICAgICAgIC4uLm92ZXJyaWRlcyxcbiAgICAgICAgfSxcbiAgICAgICAgdGhpcy5jb250ZXh0LnByZXBhcmVkRGF0YSxcbiAgICAgICAgdGhpcy5jb250ZXh0LmdldEV0aENhbGxDb250ZXh0KCksXG4gICAgICApO1xuICAgIH0sXG4gICAgYXN5bmMgYmxvY2tBbmRBZ2dyZWdhdGUoXG4gICAgICBjYWxsczogTXVsdGljYWxsMi5DYWxsU3RydWN0W10sXG4gICAgICBvdmVycmlkZXM/OiBPdmVycmlkZXMsXG4gICAgKTogUHJvbWlzZTxcbiAgICAgIFtiaWdpbnQsIHN0cmluZywgTXVsdGljYWxsMi5SZXN1bHRTdHJ1Y3RPdXRwdXRbXV0gJiB7XG4gICAgICAgIGJsb2NrTnVtYmVyOiBiaWdpbnQ7XG4gICAgICAgIGJsb2NrSGFzaDogc3RyaW5nO1xuICAgICAgICByZXR1cm5EYXRhOiBNdWx0aWNhbGwyLlJlc3VsdFN0cnVjdE91dHB1dFtdO1xuICAgICAgfVxuICAgID4ge1xuICAgICAgcmV0dXJuIGF3YWl0IHRoaXMudmlldy5jYWxsU3RhdGljLmJsb2NrQW5kQWdncmVnYXRlKFxuICAgICAgICBjYWxscyxcbiAgICAgICAge1xuICAgICAgICAgIGJsb2NrVGFnOiB0aGlzLmNvbnRleHQuYmxvY2tOdW1iZXIsXG4gICAgICAgICAgLi4ub3ZlcnJpZGVzLFxuICAgICAgICB9LFxuICAgICAgICB0aGlzLmNvbnRleHQucHJlcGFyZWREYXRhLFxuICAgICAgICB0aGlzLmNvbnRleHQuZ2V0RXRoQ2FsbENvbnRleHQoKSxcbiAgICAgICk7XG4gICAgfSxcbiAgICBhc3luYyB0cnlBZ2dyZWdhdGUoXG4gICAgICByZXF1aXJlU3VjY2VzczogYm9vbGVhbixcbiAgICAgIGNhbGxzOiBNdWx0aWNhbGwyLkNhbGxTdHJ1Y3RbXSxcbiAgICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlcyxcbiAgICApOiBQcm9taXNlPE11bHRpY2FsbDIuUmVzdWx0U3RydWN0T3V0cHV0W10+IHtcbiAgICAgIHJldHVybiBhd2FpdCB0aGlzLnZpZXcuY2FsbFN0YXRpYy50cnlBZ2dyZWdhdGUoXG4gICAgICAgIHJlcXVpcmVTdWNjZXNzLFxuICAgICAgICBjYWxscyxcbiAgICAgICAge1xuICAgICAgICAgIGJsb2NrVGFnOiB0aGlzLmNvbnRleHQuYmxvY2tOdW1iZXIsXG4gICAgICAgICAgLi4ub3ZlcnJpZGVzLFxuICAgICAgICB9LFxuICAgICAgICB0aGlzLmNvbnRleHQucHJlcGFyZWREYXRhLFxuICAgICAgICB0aGlzLmNvbnRleHQuZ2V0RXRoQ2FsbENvbnRleHQoKSxcbiAgICAgICk7XG4gICAgfSxcbiAgICBhc3luYyB0cnlCbG9ja0FuZEFnZ3JlZ2F0ZShcbiAgICAgIHJlcXVpcmVTdWNjZXNzOiBib29sZWFuLFxuICAgICAgY2FsbHM6IE11bHRpY2FsbDIuQ2FsbFN0cnVjdFtdLFxuICAgICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzLFxuICAgICk6IFByb21pc2U8XG4gICAgICBbYmlnaW50LCBzdHJpbmcsIE11bHRpY2FsbDIuUmVzdWx0U3RydWN0T3V0cHV0W11dICYge1xuICAgICAgICBibG9ja051bWJlcjogYmlnaW50O1xuICAgICAgICBibG9ja0hhc2g6IHN0cmluZztcbiAgICAgICAgcmV0dXJuRGF0YTogTXVsdGljYWxsMi5SZXN1bHRTdHJ1Y3RPdXRwdXRbXTtcbiAgICAgIH1cbiAgICA+IHtcbiAgICAgIHJldHVybiBhd2FpdCB0aGlzLnZpZXcuY2FsbFN0YXRpYy50cnlCbG9ja0FuZEFnZ3JlZ2F0ZShcbiAgICAgICAgcmVxdWlyZVN1Y2Nlc3MsXG4gICAgICAgIGNhbGxzLFxuICAgICAgICB7XG4gICAgICAgICAgYmxvY2tUYWc6IHRoaXMuY29udGV4dC5ibG9ja051bWJlcixcbiAgICAgICAgICAuLi5vdmVycmlkZXMsXG4gICAgICAgIH0sXG4gICAgICAgIHRoaXMuY29udGV4dC5wcmVwYXJlZERhdGEsXG4gICAgICAgIHRoaXMuY29udGV4dC5nZXRFdGhDYWxsQ29udGV4dCgpLFxuICAgICAgKTtcbiAgICB9LFxuICB9O1xuXG4gIGVuY29kZUNhbGwgPSB7XG4gICAgdmlldzogdGhpcy52aWV3LFxuICAgIGNvbnRleHQ6IHRoaXMuY29udGV4dCxcblxuICAgIGFnZ3JlZ2F0ZShcbiAgICAgIGNhbGxzOiBNdWx0aWNhbGwyLkNhbGxTdHJ1Y3RbXSxcbiAgICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlcyxcbiAgICApOiBFdGhDYWxsUGFyYW0ge1xuICAgICAgcmV0dXJuIHRoaXMudmlldy5lbmNvZGVDYWxsLmFnZ3JlZ2F0ZShjYWxscywge1xuICAgICAgICBjaGFpbklkOiB0aGlzLmNvbnRleHQuY2hhaW5JZC50b1N0cmluZygpLFxuICAgICAgICBhZGRyZXNzOiB0aGlzLmNvbnRleHQuYWRkcmVzcyxcbiAgICAgICAgYmxvY2tUYWc6IHRoaXMuY29udGV4dC5nZXRCbG9ja1RhZyhvdmVycmlkZXMpLFxuICAgICAgfSk7XG4gICAgfSxcbiAgICBibG9ja0FuZEFnZ3JlZ2F0ZShcbiAgICAgIGNhbGxzOiBNdWx0aWNhbGwyLkNhbGxTdHJ1Y3RbXSxcbiAgICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlcyxcbiAgICApOiBFdGhDYWxsUGFyYW0ge1xuICAgICAgcmV0dXJuIHRoaXMudmlldy5lbmNvZGVDYWxsLmJsb2NrQW5kQWdncmVnYXRlKGNhbGxzLCB7XG4gICAgICAgIGNoYWluSWQ6IHRoaXMuY29udGV4dC5jaGFpbklkLnRvU3RyaW5nKCksXG4gICAgICAgIGFkZHJlc3M6IHRoaXMuY29udGV4dC5hZGRyZXNzLFxuICAgICAgICBibG9ja1RhZzogdGhpcy5jb250ZXh0LmdldEJsb2NrVGFnKG92ZXJyaWRlcyksXG4gICAgICB9KTtcbiAgICB9LFxuICAgIGdldEJsb2NrSGFzaChcbiAgICAgIGJsb2NrTnVtYmVyOiBCaWdOdW1iZXJpc2gsXG4gICAgICBvdmVycmlkZXM/OiBPdmVycmlkZXMsXG4gICAgKTogRXRoQ2FsbFBhcmFtIHtcbiAgICAgIHJldHVybiB0aGlzLnZpZXcuZW5jb2RlQ2FsbC5nZXRCbG9ja0hhc2goYmxvY2tOdW1iZXIsIHtcbiAgICAgICAgY2hhaW5JZDogdGhpcy5jb250ZXh0LmNoYWluSWQudG9TdHJpbmcoKSxcbiAgICAgICAgYWRkcmVzczogdGhpcy5jb250ZXh0LmFkZHJlc3MsXG4gICAgICAgIGJsb2NrVGFnOiB0aGlzLmNvbnRleHQuZ2V0QmxvY2tUYWcob3ZlcnJpZGVzKSxcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgZ2V0QmxvY2tOdW1iZXIob3ZlcnJpZGVzPzogT3ZlcnJpZGVzKTogRXRoQ2FsbFBhcmFtIHtcbiAgICAgIHJldHVybiB0aGlzLnZpZXcuZW5jb2RlQ2FsbC5nZXRCbG9ja051bWJlcih7XG4gICAgICAgIGNoYWluSWQ6IHRoaXMuY29udGV4dC5jaGFpbklkLnRvU3RyaW5nKCksXG4gICAgICAgIGFkZHJlc3M6IHRoaXMuY29udGV4dC5hZGRyZXNzLFxuICAgICAgICBibG9ja1RhZzogdGhpcy5jb250ZXh0LmdldEJsb2NrVGFnKG92ZXJyaWRlcyksXG4gICAgICB9KTtcbiAgICB9LFxuICAgIGdldEN1cnJlbnRCbG9ja0NvaW5iYXNlKG92ZXJyaWRlcz86IE92ZXJyaWRlcyk6IEV0aENhbGxQYXJhbSB7XG4gICAgICByZXR1cm4gdGhpcy52aWV3LmVuY29kZUNhbGwuZ2V0Q3VycmVudEJsb2NrQ29pbmJhc2Uoe1xuICAgICAgICBjaGFpbklkOiB0aGlzLmNvbnRleHQuY2hhaW5JZC50b1N0cmluZygpLFxuICAgICAgICBhZGRyZXNzOiB0aGlzLmNvbnRleHQuYWRkcmVzcyxcbiAgICAgICAgYmxvY2tUYWc6IHRoaXMuY29udGV4dC5nZXRCbG9ja1RhZyhvdmVycmlkZXMpLFxuICAgICAgfSk7XG4gICAgfSxcbiAgICBnZXRDdXJyZW50QmxvY2tEaWZmaWN1bHR5KG92ZXJyaWRlcz86IE92ZXJyaWRlcyk6IEV0aENhbGxQYXJhbSB7XG4gICAgICByZXR1cm4gdGhpcy52aWV3LmVuY29kZUNhbGwuZ2V0Q3VycmVudEJsb2NrRGlmZmljdWx0eSh7XG4gICAgICAgIGNoYWluSWQ6IHRoaXMuY29udGV4dC5jaGFpbklkLnRvU3RyaW5nKCksXG4gICAgICAgIGFkZHJlc3M6IHRoaXMuY29udGV4dC5hZGRyZXNzLFxuICAgICAgICBibG9ja1RhZzogdGhpcy5jb250ZXh0LmdldEJsb2NrVGFnKG92ZXJyaWRlcyksXG4gICAgICB9KTtcbiAgICB9LFxuICAgIGdldEN1cnJlbnRCbG9ja0dhc0xpbWl0KG92ZXJyaWRlcz86IE92ZXJyaWRlcyk6IEV0aENhbGxQYXJhbSB7XG4gICAgICByZXR1cm4gdGhpcy52aWV3LmVuY29kZUNhbGwuZ2V0Q3VycmVudEJsb2NrR2FzTGltaXQoe1xuICAgICAgICBjaGFpbklkOiB0aGlzLmNvbnRleHQuY2hhaW5JZC50b1N0cmluZygpLFxuICAgICAgICBhZGRyZXNzOiB0aGlzLmNvbnRleHQuYWRkcmVzcyxcbiAgICAgICAgYmxvY2tUYWc6IHRoaXMuY29udGV4dC5nZXRCbG9ja1RhZyhvdmVycmlkZXMpLFxuICAgICAgfSk7XG4gICAgfSxcbiAgICBnZXRDdXJyZW50QmxvY2tUaW1lc3RhbXAob3ZlcnJpZGVzPzogT3ZlcnJpZGVzKTogRXRoQ2FsbFBhcmFtIHtcbiAgICAgIHJldHVybiB0aGlzLnZpZXcuZW5jb2RlQ2FsbC5nZXRDdXJyZW50QmxvY2tUaW1lc3RhbXAoe1xuICAgICAgICBjaGFpbklkOiB0aGlzLmNvbnRleHQuY2hhaW5JZC50b1N0cmluZygpLFxuICAgICAgICBhZGRyZXNzOiB0aGlzLmNvbnRleHQuYWRkcmVzcyxcbiAgICAgICAgYmxvY2tUYWc6IHRoaXMuY29udGV4dC5nZXRCbG9ja1RhZyhvdmVycmlkZXMpLFxuICAgICAgfSk7XG4gICAgfSxcbiAgICBnZXRFdGhCYWxhbmNlKGFkZHI6IHN0cmluZywgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzKTogRXRoQ2FsbFBhcmFtIHtcbiAgICAgIHJldHVybiB0aGlzLnZpZXcuZW5jb2RlQ2FsbC5nZXRFdGhCYWxhbmNlKGFkZHIsIHtcbiAgICAgICAgY2hhaW5JZDogdGhpcy5jb250ZXh0LmNoYWluSWQudG9TdHJpbmcoKSxcbiAgICAgICAgYWRkcmVzczogdGhpcy5jb250ZXh0LmFkZHJlc3MsXG4gICAgICAgIGJsb2NrVGFnOiB0aGlzLmNvbnRleHQuZ2V0QmxvY2tUYWcob3ZlcnJpZGVzKSxcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgZ2V0TDFCbG9ja051bWJlcihvdmVycmlkZXM/OiBPdmVycmlkZXMpOiBFdGhDYWxsUGFyYW0ge1xuICAgICAgcmV0dXJuIHRoaXMudmlldy5lbmNvZGVDYWxsLmdldEwxQmxvY2tOdW1iZXIoe1xuICAgICAgICBjaGFpbklkOiB0aGlzLmNvbnRleHQuY2hhaW5JZC50b1N0cmluZygpLFxuICAgICAgICBhZGRyZXNzOiB0aGlzLmNvbnRleHQuYWRkcmVzcyxcbiAgICAgICAgYmxvY2tUYWc6IHRoaXMuY29udGV4dC5nZXRCbG9ja1RhZyhvdmVycmlkZXMpLFxuICAgICAgfSk7XG4gICAgfSxcbiAgICBnZXRMYXN0QmxvY2tIYXNoKG92ZXJyaWRlcz86IE92ZXJyaWRlcyk6IEV0aENhbGxQYXJhbSB7XG4gICAgICByZXR1cm4gdGhpcy52aWV3LmVuY29kZUNhbGwuZ2V0TGFzdEJsb2NrSGFzaCh7XG4gICAgICAgIGNoYWluSWQ6IHRoaXMuY29udGV4dC5jaGFpbklkLnRvU3RyaW5nKCksXG4gICAgICAgIGFkZHJlc3M6IHRoaXMuY29udGV4dC5hZGRyZXNzLFxuICAgICAgICBibG9ja1RhZzogdGhpcy5jb250ZXh0LmdldEJsb2NrVGFnKG92ZXJyaWRlcyksXG4gICAgICB9KTtcbiAgICB9LFxuICAgIHRyeUFnZ3JlZ2F0ZShcbiAgICAgIHJlcXVpcmVTdWNjZXNzOiBib29sZWFuLFxuICAgICAgY2FsbHM6IE11bHRpY2FsbDIuQ2FsbFN0cnVjdFtdLFxuICAgICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzLFxuICAgICk6IEV0aENhbGxQYXJhbSB7XG4gICAgICByZXR1cm4gdGhpcy52aWV3LmVuY29kZUNhbGwudHJ5QWdncmVnYXRlKHJlcXVpcmVTdWNjZXNzLCBjYWxscywge1xuICAgICAgICBjaGFpbklkOiB0aGlzLmNvbnRleHQuY2hhaW5JZC50b1N0cmluZygpLFxuICAgICAgICBhZGRyZXNzOiB0aGlzLmNvbnRleHQuYWRkcmVzcyxcbiAgICAgICAgYmxvY2tUYWc6IHRoaXMuY29udGV4dC5nZXRCbG9ja1RhZyhvdmVycmlkZXMpLFxuICAgICAgfSk7XG4gICAgfSxcbiAgICB0cnlCbG9ja0FuZEFnZ3JlZ2F0ZShcbiAgICAgIHJlcXVpcmVTdWNjZXNzOiBib29sZWFuLFxuICAgICAgY2FsbHM6IE11bHRpY2FsbDIuQ2FsbFN0cnVjdFtdLFxuICAgICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzLFxuICAgICk6IEV0aENhbGxQYXJhbSB7XG4gICAgICByZXR1cm4gdGhpcy52aWV3LmVuY29kZUNhbGwudHJ5QmxvY2tBbmRBZ2dyZWdhdGUocmVxdWlyZVN1Y2Nlc3MsIGNhbGxzLCB7XG4gICAgICAgIGNoYWluSWQ6IHRoaXMuY29udGV4dC5jaGFpbklkLnRvU3RyaW5nKCksXG4gICAgICAgIGFkZHJlc3M6IHRoaXMuY29udGV4dC5hZGRyZXNzLFxuICAgICAgICBibG9ja1RhZzogdGhpcy5jb250ZXh0LmdldEJsb2NrVGFnKG92ZXJyaWRlcyksXG4gICAgICB9KTtcbiAgICB9LFxuICB9O1xufVxuXG5leHBvcnQgdHlwZSBNdWx0aWNhbGwyQ29udGV4dCA9IENvbnRyYWN0Q29udGV4dDxcbiAgTXVsdGljYWxsMixcbiAgTXVsdGljYWxsMkJvdW5kQ29udHJhY3RWaWV3XG4+O1xuXG5leHBvcnQgY2xhc3MgTXVsdGljYWxsMlByb2Nlc3NvciBleHRlbmRzIEJhc2VQcm9jZXNzb3I8XG4gIE11bHRpY2FsbDIsXG4gIE11bHRpY2FsbDJCb3VuZENvbnRyYWN0Vmlld1xuPiB7XG4gIG9uQ2FsbEFnZ3JlZ2F0ZShcbiAgICBoYW5kbGVyOiAoY2FsbDogQWdncmVnYXRlQ2FsbFRyYWNlLCBjdHg6IE11bHRpY2FsbDJDb250ZXh0KSA9PiB2b2lkLFxuICAgIGZldGNoQ29uZmlnPzogUGFydGlhbDxFdGhGZXRjaENvbmZpZz4sXG4gICAgcHJlcHJvY2Vzc0hhbmRsZXI/OiAoXG4gICAgICBjYWxsOiBBZ2dyZWdhdGVDYWxsVHJhY2UsXG4gICAgICBjdHg6IE11bHRpY2FsbDJDb250ZXh0LFxuICAgICkgPT4gUHJvbWlzZTxQcmVwcm9jZXNzUmVzdWx0PixcbiAgKTogdGhpcyB7XG4gICAgcmV0dXJuIHN1cGVyLm9uRXRoVHJhY2UoXG4gICAgICBcIjB4MjUyZGJhNDJcIixcbiAgICAgIGhhbmRsZXIgYXMgYW55LFxuICAgICAgZmV0Y2hDb25maWcsXG4gICAgICBwcmVwcm9jZXNzSGFuZGxlcixcbiAgICApO1xuICB9XG5cbiAgb25DYWxsQmxvY2tBbmRBZ2dyZWdhdGUoXG4gICAgaGFuZGxlcjogKGNhbGw6IEJsb2NrQW5kQWdncmVnYXRlQ2FsbFRyYWNlLCBjdHg6IE11bHRpY2FsbDJDb250ZXh0KSA9PiB2b2lkLFxuICAgIGZldGNoQ29uZmlnPzogUGFydGlhbDxFdGhGZXRjaENvbmZpZz4sXG4gICAgcHJlcHJvY2Vzc0hhbmRsZXI/OiAoXG4gICAgICBjYWxsOiBCbG9ja0FuZEFnZ3JlZ2F0ZUNhbGxUcmFjZSxcbiAgICAgIGN0eDogTXVsdGljYWxsMkNvbnRleHQsXG4gICAgKSA9PiBQcm9taXNlPFByZXByb2Nlc3NSZXN1bHQ+LFxuICApOiB0aGlzIHtcbiAgICByZXR1cm4gc3VwZXIub25FdGhUcmFjZShcbiAgICAgIFwiMHhjMzA3N2ZhOVwiLFxuICAgICAgaGFuZGxlciBhcyBhbnksXG4gICAgICBmZXRjaENvbmZpZyxcbiAgICAgIHByZXByb2Nlc3NIYW5kbGVyLFxuICAgICk7XG4gIH1cblxuICBvbkNhbGxHZXRCbG9ja0hhc2goXG4gICAgaGFuZGxlcjogKGNhbGw6IEdldEJsb2NrSGFzaENhbGxUcmFjZSwgY3R4OiBNdWx0aWNhbGwyQ29udGV4dCkgPT4gdm9pZCxcbiAgICBmZXRjaENvbmZpZz86IFBhcnRpYWw8RXRoRmV0Y2hDb25maWc+LFxuICAgIHByZXByb2Nlc3NIYW5kbGVyPzogKFxuICAgICAgY2FsbDogR2V0QmxvY2tIYXNoQ2FsbFRyYWNlLFxuICAgICAgY3R4OiBNdWx0aWNhbGwyQ29udGV4dCxcbiAgICApID0+IFByb21pc2U8UHJlcHJvY2Vzc1Jlc3VsdD4sXG4gICk6IHRoaXMge1xuICAgIHJldHVybiBzdXBlci5vbkV0aFRyYWNlKFxuICAgICAgXCIweGVlODJhYzVlXCIsXG4gICAgICBoYW5kbGVyIGFzIGFueSxcbiAgICAgIGZldGNoQ29uZmlnLFxuICAgICAgcHJlcHJvY2Vzc0hhbmRsZXIsXG4gICAgKTtcbiAgfVxuXG4gIG9uQ2FsbEdldEJsb2NrTnVtYmVyKFxuICAgIGhhbmRsZXI6IChjYWxsOiBHZXRCbG9ja051bWJlckNhbGxUcmFjZSwgY3R4OiBNdWx0aWNhbGwyQ29udGV4dCkgPT4gdm9pZCxcbiAgICBmZXRjaENvbmZpZz86IFBhcnRpYWw8RXRoRmV0Y2hDb25maWc+LFxuICAgIHByZXByb2Nlc3NIYW5kbGVyPzogKFxuICAgICAgY2FsbDogR2V0QmxvY2tOdW1iZXJDYWxsVHJhY2UsXG4gICAgICBjdHg6IE11bHRpY2FsbDJDb250ZXh0LFxuICAgICkgPT4gUHJvbWlzZTxQcmVwcm9jZXNzUmVzdWx0PixcbiAgKTogdGhpcyB7XG4gICAgcmV0dXJuIHN1cGVyLm9uRXRoVHJhY2UoXG4gICAgICBcIjB4NDJjYmIxNWNcIixcbiAgICAgIGhhbmRsZXIgYXMgYW55LFxuICAgICAgZmV0Y2hDb25maWcsXG4gICAgICBwcmVwcm9jZXNzSGFuZGxlcixcbiAgICApO1xuICB9XG5cbiAgb25DYWxsR2V0Q3VycmVudEJsb2NrQ29pbmJhc2UoXG4gICAgaGFuZGxlcjogKFxuICAgICAgY2FsbDogR2V0Q3VycmVudEJsb2NrQ29pbmJhc2VDYWxsVHJhY2UsXG4gICAgICBjdHg6IE11bHRpY2FsbDJDb250ZXh0LFxuICAgICkgPT4gdm9pZCxcbiAgICBmZXRjaENvbmZpZz86IFBhcnRpYWw8RXRoRmV0Y2hDb25maWc+LFxuICAgIHByZXByb2Nlc3NIYW5kbGVyPzogKFxuICAgICAgY2FsbDogR2V0Q3VycmVudEJsb2NrQ29pbmJhc2VDYWxsVHJhY2UsXG4gICAgICBjdHg6IE11bHRpY2FsbDJDb250ZXh0LFxuICAgICkgPT4gUHJvbWlzZTxQcmVwcm9jZXNzUmVzdWx0PixcbiAgKTogdGhpcyB7XG4gICAgcmV0dXJuIHN1cGVyLm9uRXRoVHJhY2UoXG4gICAgICBcIjB4YThiMDU3NGVcIixcbiAgICAgIGhhbmRsZXIgYXMgYW55LFxuICAgICAgZmV0Y2hDb25maWcsXG4gICAgICBwcmVwcm9jZXNzSGFuZGxlcixcbiAgICApO1xuICB9XG5cbiAgb25DYWxsR2V0Q3VycmVudEJsb2NrRGlmZmljdWx0eShcbiAgICBoYW5kbGVyOiAoXG4gICAgICBjYWxsOiBHZXRDdXJyZW50QmxvY2tEaWZmaWN1bHR5Q2FsbFRyYWNlLFxuICAgICAgY3R4OiBNdWx0aWNhbGwyQ29udGV4dCxcbiAgICApID0+IHZvaWQsXG4gICAgZmV0Y2hDb25maWc/OiBQYXJ0aWFsPEV0aEZldGNoQ29uZmlnPixcbiAgICBwcmVwcm9jZXNzSGFuZGxlcj86IChcbiAgICAgIGNhbGw6IEdldEN1cnJlbnRCbG9ja0RpZmZpY3VsdHlDYWxsVHJhY2UsXG4gICAgICBjdHg6IE11bHRpY2FsbDJDb250ZXh0LFxuICAgICkgPT4gUHJvbWlzZTxQcmVwcm9jZXNzUmVzdWx0PixcbiAgKTogdGhpcyB7XG4gICAgcmV0dXJuIHN1cGVyLm9uRXRoVHJhY2UoXG4gICAgICBcIjB4NzI0MjVkOWRcIixcbiAgICAgIGhhbmRsZXIgYXMgYW55LFxuICAgICAgZmV0Y2hDb25maWcsXG4gICAgICBwcmVwcm9jZXNzSGFuZGxlcixcbiAgICApO1xuICB9XG5cbiAgb25DYWxsR2V0Q3VycmVudEJsb2NrR2FzTGltaXQoXG4gICAgaGFuZGxlcjogKFxuICAgICAgY2FsbDogR2V0Q3VycmVudEJsb2NrR2FzTGltaXRDYWxsVHJhY2UsXG4gICAgICBjdHg6IE11bHRpY2FsbDJDb250ZXh0LFxuICAgICkgPT4gdm9pZCxcbiAgICBmZXRjaENvbmZpZz86IFBhcnRpYWw8RXRoRmV0Y2hDb25maWc+LFxuICAgIHByZXByb2Nlc3NIYW5kbGVyPzogKFxuICAgICAgY2FsbDogR2V0Q3VycmVudEJsb2NrR2FzTGltaXRDYWxsVHJhY2UsXG4gICAgICBjdHg6IE11bHRpY2FsbDJDb250ZXh0LFxuICAgICkgPT4gUHJvbWlzZTxQcmVwcm9jZXNzUmVzdWx0PixcbiAgKTogdGhpcyB7XG4gICAgcmV0dXJuIHN1cGVyLm9uRXRoVHJhY2UoXG4gICAgICBcIjB4ODZkNTE2ZThcIixcbiAgICAgIGhhbmRsZXIgYXMgYW55LFxuICAgICAgZmV0Y2hDb25maWcsXG4gICAgICBwcmVwcm9jZXNzSGFuZGxlcixcbiAgICApO1xuICB9XG5cbiAgb25DYWxsR2V0Q3VycmVudEJsb2NrVGltZXN0YW1wKFxuICAgIGhhbmRsZXI6IChcbiAgICAgIGNhbGw6IEdldEN1cnJlbnRCbG9ja1RpbWVzdGFtcENhbGxUcmFjZSxcbiAgICAgIGN0eDogTXVsdGljYWxsMkNvbnRleHQsXG4gICAgKSA9PiB2b2lkLFxuICAgIGZldGNoQ29uZmlnPzogUGFydGlhbDxFdGhGZXRjaENvbmZpZz4sXG4gICAgcHJlcHJvY2Vzc0hhbmRsZXI/OiAoXG4gICAgICBjYWxsOiBHZXRDdXJyZW50QmxvY2tUaW1lc3RhbXBDYWxsVHJhY2UsXG4gICAgICBjdHg6IE11bHRpY2FsbDJDb250ZXh0LFxuICAgICkgPT4gUHJvbWlzZTxQcmVwcm9jZXNzUmVzdWx0PixcbiAgKTogdGhpcyB7XG4gICAgcmV0dXJuIHN1cGVyLm9uRXRoVHJhY2UoXG4gICAgICBcIjB4MGYyOGM5N2RcIixcbiAgICAgIGhhbmRsZXIgYXMgYW55LFxuICAgICAgZmV0Y2hDb25maWcsXG4gICAgICBwcmVwcm9jZXNzSGFuZGxlcixcbiAgICApO1xuICB9XG5cbiAgb25DYWxsR2V0RXRoQmFsYW5jZShcbiAgICBoYW5kbGVyOiAoY2FsbDogR2V0RXRoQmFsYW5jZUNhbGxUcmFjZSwgY3R4OiBNdWx0aWNhbGwyQ29udGV4dCkgPT4gdm9pZCxcbiAgICBmZXRjaENvbmZpZz86IFBhcnRpYWw8RXRoRmV0Y2hDb25maWc+LFxuICAgIHByZXByb2Nlc3NIYW5kbGVyPzogKFxuICAgICAgY2FsbDogR2V0RXRoQmFsYW5jZUNhbGxUcmFjZSxcbiAgICAgIGN0eDogTXVsdGljYWxsMkNvbnRleHQsXG4gICAgKSA9PiBQcm9taXNlPFByZXByb2Nlc3NSZXN1bHQ+LFxuICApOiB0aGlzIHtcbiAgICByZXR1cm4gc3VwZXIub25FdGhUcmFjZShcbiAgICAgIFwiMHg0ZDIzMDFjY1wiLFxuICAgICAgaGFuZGxlciBhcyBhbnksXG4gICAgICBmZXRjaENvbmZpZyxcbiAgICAgIHByZXByb2Nlc3NIYW5kbGVyLFxuICAgICk7XG4gIH1cblxuICBvbkNhbGxHZXRMMUJsb2NrTnVtYmVyKFxuICAgIGhhbmRsZXI6IChjYWxsOiBHZXRMMUJsb2NrTnVtYmVyQ2FsbFRyYWNlLCBjdHg6IE11bHRpY2FsbDJDb250ZXh0KSA9PiB2b2lkLFxuICAgIGZldGNoQ29uZmlnPzogUGFydGlhbDxFdGhGZXRjaENvbmZpZz4sXG4gICAgcHJlcHJvY2Vzc0hhbmRsZXI/OiAoXG4gICAgICBjYWxsOiBHZXRMMUJsb2NrTnVtYmVyQ2FsbFRyYWNlLFxuICAgICAgY3R4OiBNdWx0aWNhbGwyQ29udGV4dCxcbiAgICApID0+IFByb21pc2U8UHJlcHJvY2Vzc1Jlc3VsdD4sXG4gICk6IHRoaXMge1xuICAgIHJldHVybiBzdXBlci5vbkV0aFRyYWNlKFxuICAgICAgXCIweGI5YjNlZmU5XCIsXG4gICAgICBoYW5kbGVyIGFzIGFueSxcbiAgICAgIGZldGNoQ29uZmlnLFxuICAgICAgcHJlcHJvY2Vzc0hhbmRsZXIsXG4gICAgKTtcbiAgfVxuXG4gIG9uQ2FsbEdldExhc3RCbG9ja0hhc2goXG4gICAgaGFuZGxlcjogKGNhbGw6IEdldExhc3RCbG9ja0hhc2hDYWxsVHJhY2UsIGN0eDogTXVsdGljYWxsMkNvbnRleHQpID0+IHZvaWQsXG4gICAgZmV0Y2hDb25maWc/OiBQYXJ0aWFsPEV0aEZldGNoQ29uZmlnPixcbiAgICBwcmVwcm9jZXNzSGFuZGxlcj86IChcbiAgICAgIGNhbGw6IEdldExhc3RCbG9ja0hhc2hDYWxsVHJhY2UsXG4gICAgICBjdHg6IE11bHRpY2FsbDJDb250ZXh0LFxuICAgICkgPT4gUHJvbWlzZTxQcmVwcm9jZXNzUmVzdWx0PixcbiAgKTogdGhpcyB7XG4gICAgcmV0dXJuIHN1cGVyLm9uRXRoVHJhY2UoXG4gICAgICBcIjB4MjdlODZkNmVcIixcbiAgICAgIGhhbmRsZXIgYXMgYW55LFxuICAgICAgZmV0Y2hDb25maWcsXG4gICAgICBwcmVwcm9jZXNzSGFuZGxlcixcbiAgICApO1xuICB9XG5cbiAgb25DYWxsVHJ5QWdncmVnYXRlKFxuICAgIGhhbmRsZXI6IChjYWxsOiBUcnlBZ2dyZWdhdGVDYWxsVHJhY2UsIGN0eDogTXVsdGljYWxsMkNvbnRleHQpID0+IHZvaWQsXG4gICAgZmV0Y2hDb25maWc/OiBQYXJ0aWFsPEV0aEZldGNoQ29uZmlnPixcbiAgICBwcmVwcm9jZXNzSGFuZGxlcj86IChcbiAgICAgIGNhbGw6IFRyeUFnZ3JlZ2F0ZUNhbGxUcmFjZSxcbiAgICAgIGN0eDogTXVsdGljYWxsMkNvbnRleHQsXG4gICAgKSA9PiBQcm9taXNlPFByZXByb2Nlc3NSZXN1bHQ+LFxuICApOiB0aGlzIHtcbiAgICByZXR1cm4gc3VwZXIub25FdGhUcmFjZShcbiAgICAgIFwiMHhiY2UzOGJkN1wiLFxuICAgICAgaGFuZGxlciBhcyBhbnksXG4gICAgICBmZXRjaENvbmZpZyxcbiAgICAgIHByZXByb2Nlc3NIYW5kbGVyLFxuICAgICk7XG4gIH1cblxuICBvbkNhbGxUcnlCbG9ja0FuZEFnZ3JlZ2F0ZShcbiAgICBoYW5kbGVyOiAoXG4gICAgICBjYWxsOiBUcnlCbG9ja0FuZEFnZ3JlZ2F0ZUNhbGxUcmFjZSxcbiAgICAgIGN0eDogTXVsdGljYWxsMkNvbnRleHQsXG4gICAgKSA9PiB2b2lkLFxuICAgIGZldGNoQ29uZmlnPzogUGFydGlhbDxFdGhGZXRjaENvbmZpZz4sXG4gICAgcHJlcHJvY2Vzc0hhbmRsZXI/OiAoXG4gICAgICBjYWxsOiBUcnlCbG9ja0FuZEFnZ3JlZ2F0ZUNhbGxUcmFjZSxcbiAgICAgIGN0eDogTXVsdGljYWxsMkNvbnRleHQsXG4gICAgKSA9PiBQcm9taXNlPFByZXByb2Nlc3NSZXN1bHQ+LFxuICApOiB0aGlzIHtcbiAgICByZXR1cm4gc3VwZXIub25FdGhUcmFjZShcbiAgICAgIFwiMHgzOTk1NDJlOVwiLFxuICAgICAgaGFuZGxlciBhcyBhbnksXG4gICAgICBmZXRjaENvbmZpZyxcbiAgICAgIHByZXByb2Nlc3NIYW5kbGVyLFxuICAgICk7XG4gIH1cblxuICBwdWJsaWMgc3RhdGljIGZpbHRlcnMgPSB7fTtcblxuICBwcm90ZWN0ZWQgQ3JlYXRlQm91bmRDb250cmFjdFZpZXcoKTogTXVsdGljYWxsMkJvdW5kQ29udHJhY3RWaWV3IHtcbiAgICBjb25zdCB2aWV3ID0gZ2V0TXVsdGljYWxsMkNvbnRyYWN0KFxuICAgICAgdGhpcy5jb25maWcubmV0d29yayxcbiAgICAgIHRoaXMuY29uZmlnLmFkZHJlc3MsXG4gICAgKTtcbiAgICByZXR1cm4gbmV3IE11bHRpY2FsbDJCb3VuZENvbnRyYWN0Vmlldyh0aGlzLmNvbmZpZy5hZGRyZXNzLCB2aWV3KTtcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgYmluZChvcHRpb25zOiBCaW5kT3B0aW9ucyk6IE11bHRpY2FsbDJQcm9jZXNzb3Ige1xuICAgIGlmICghb3B0aW9ucy5uYW1lKSB7XG4gICAgICBvcHRpb25zLm5hbWUgPSBcIk11bHRpY2FsbDJcIjtcbiAgICB9XG4gICAgbGV0IHByb2Nlc3NvciA9IGdldFByb2Nlc3NvcihvcHRpb25zKSBhcyBNdWx0aWNhbGwyUHJvY2Vzc29yO1xuICAgIGlmICghcHJvY2Vzc29yKSB7XG4gICAgICBwcm9jZXNzb3IgPSBuZXcgTXVsdGljYWxsMlByb2Nlc3NvcihvcHRpb25zKTtcbiAgICAgIGFkZFByb2Nlc3NvcihvcHRpb25zLCBwcm9jZXNzb3IpO1xuICAgIH1cbiAgICByZXR1cm4gcHJvY2Vzc29yO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBNdWx0aWNhbGwyUHJvY2Vzc29yVGVtcGxhdGUgZXh0ZW5kcyBCYXNlUHJvY2Vzc29yVGVtcGxhdGU8XG4gIE11bHRpY2FsbDIsXG4gIE11bHRpY2FsbDJCb3VuZENvbnRyYWN0Vmlld1xuPiB7XG4gIGJpbmRJbnRlcm5hbChvcHRpb25zOiBCaW5kT3B0aW9ucykge1xuICAgIGlmICghb3B0aW9ucy5uYW1lKSB7XG4gICAgICBvcHRpb25zLm5hbWUgPSBcIk11bHRpY2FsbDJcIjtcbiAgICB9XG4gICAgbGV0IHByb2Nlc3NvciA9IGdldFByb2Nlc3NvcihvcHRpb25zKSBhcyBNdWx0aWNhbGwyUHJvY2Vzc29yO1xuICAgIGlmICghcHJvY2Vzc29yKSB7XG4gICAgICBwcm9jZXNzb3IgPSBuZXcgTXVsdGljYWxsMlByb2Nlc3NvcihvcHRpb25zKTtcbiAgICAgIGFkZFByb2Nlc3NvcihvcHRpb25zLCBwcm9jZXNzb3IpO1xuICAgIH1cbiAgICByZXR1cm4gcHJvY2Vzc29yO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRNdWx0aWNhbGwyQ29udHJhY3QoXG4gIGNoYWluSWQ6IEV0aENoYWluSWQsXG4gIGFkZHJlc3M6IHN0cmluZyxcbik6IE11bHRpY2FsbDJDb250cmFjdFZpZXcge1xuICBsZXQgY29udHJhY3QgPSBnZXRDb250cmFjdEJ5QUJJKFxuICAgIFwiTXVsdGljYWxsMlwiLFxuICAgIGFkZHJlc3MsXG4gICAgY2hhaW5JZCxcbiAgKSBhcyBNdWx0aWNhbGwyQ29udHJhY3RWaWV3O1xuICBpZiAoIWNvbnRyYWN0KSB7XG4gICAgY29uc3QgcmF3Q29udHJhY3QgPSBNdWx0aWNhbGwyX19mYWN0b3J5LmNvbm5lY3QoXG4gICAgICBhZGRyZXNzLFxuICAgICAgZ2V0UHJvdmlkZXIoY2hhaW5JZCksXG4gICAgKTtcbiAgICBjb250cmFjdCA9IG5ldyBNdWx0aWNhbGwyQ29udHJhY3RWaWV3KHJhd0NvbnRyYWN0KTtcbiAgICBhZGRDb250cmFjdEJ5QUJJKFwiTXVsdGljYWxsMlwiLCBhZGRyZXNzLCBjaGFpbklkLCBjb250cmFjdCk7XG4gIH1cbiAgcmV0dXJuIGNvbnRyYWN0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0TXVsdGljYWxsMkNvbnRyYWN0T25Db250ZXh0KFxuICBjb250ZXh0OiBFdGhDb250ZXh0LFxuICBhZGRyZXNzOiBzdHJpbmcsXG4pOiBNdWx0aWNhbGwyQm91bmRDb250cmFjdFZpZXcge1xuICBjb25zdCB2aWV3ID0gZ2V0TXVsdGljYWxsMkNvbnRyYWN0KGNvbnRleHQuZ2V0Q2hhaW5JZCgpLCBhZGRyZXNzKTtcbiAgY29uc3QgYm91bmRWaWV3ID0gbmV3IE11bHRpY2FsbDJCb3VuZENvbnRyYWN0VmlldyhhZGRyZXNzLCB2aWV3KTtcbiAgYm91bmRWaWV3LmNvbnRleHQgPSBjb250ZXh0O1xuICBpZiAoYm91bmRWaWV3LmNhbGxTdGF0aWMpIHtcbiAgICBib3VuZFZpZXcuY2FsbFN0YXRpYy5jb250ZXh0ID0gY29udGV4dDtcbiAgfVxuICByZXR1cm4gYm91bmRWaWV3O1xufVxuIiwgImltcG9ydCB7IEV0aENvbnRleHQgfSBmcm9tICdAc2VudGlvL3Nkay9ldGgnO1xuaW1wb3J0IHsgZ2V0TXVsdGljYWxsMkNvbnRyYWN0T25Db250ZXh0LCBNdWx0aWNhbGwyIH0gZnJvbSAnLi90eXBlcy9ldGgvbXVsdGljYWxsMi5qcyc7XG5pbXBvcnQgeyBnZXRFUkMyMENvbnRyYWN0T25Db250ZXh0IH0gZnJvbSAnQHNlbnRpby9zZGsvZXRoL2J1aWx0aW4vZXJjMjAnO1xuaW1wb3J0IHsgZ2V0UGVuZGxlTWFya2V0Q29udHJhY3RPbkNvbnRleHQgfSBmcm9tICcuL3R5cGVzL2V0aC9wZW5kbGVtYXJrZXQuanMnO1xuaW1wb3J0IHsgZ2V0UGVuZGxlWWllbGRUb2tlbkNvbnRyYWN0T25Db250ZXh0IH0gZnJvbSAnLi90eXBlcy9ldGgvcGVuZGxleWllbGR0b2tlbi5qcyc7XG5pbXBvcnQgeyBNVUxUSUNBTExfQUREUkVTUywgTVVMVElDQUxMX0JBVENIX1NJWkUgfSBmcm9tICcuL2NvbnN0cy5qcyc7XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiByZWFkQWxsVXNlckFjdGl2ZUJhbGFuY2VzKFxuICBjdHg6IEV0aENvbnRleHQsXG4gIG1hcmtldEFkZHI6IHN0cmluZyxcbiAgYWxsQWRkcmVzc2VzOiBzdHJpbmdbXVxuKTogUHJvbWlzZTxiaWdpbnRbXT4ge1xuICBjb25zdCBtdWx0aWNhbGwgPSBnZXRNdWx0aWNhbGwyQ29udHJhY3RPbkNvbnRleHQoY3R4LCBNVUxUSUNBTExfQUREUkVTUyk7XG4gIGNvbnN0IG1hcmtldCA9IGdldFBlbmRsZU1hcmtldENvbnRyYWN0T25Db250ZXh0KGN0eCwgbWFya2V0QWRkcik7XG5cbiAgY29uc3QgYWxsQ2FsbHM6IFByb21pc2U8TXVsdGljYWxsMi5SZXN1bHRTdHJ1Y3RPdXRwdXRbXT5bXSA9IFtdO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGFsbEFkZHJlc3Nlcy5sZW5ndGg7IGkgKz0gTVVMVElDQUxMX0JBVENIX1NJWkUpIHtcbiAgICBjb25zdCBiYXRjaCA9IGFsbEFkZHJlc3Nlcy5zbGljZShpLCBpICsgTVVMVElDQUxMX0JBVENIX1NJWkUpO1xuICAgIGNvbnN0IGNhbGxzID0gYmF0Y2gubWFwKChhZGRyZXNzKSA9PiB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0YXJnZXQ6IG1hcmtldC5hZGRyZXNzLFxuICAgICAgICBjYWxsRGF0YTogbWFya2V0LnJhd0NvbnRyYWN0LmludGVyZmFjZS5lbmNvZGVGdW5jdGlvbkRhdGEoJ2FjdGl2ZUJhbGFuY2UnLCBbYWRkcmVzc10pLFxuICAgICAgfTtcbiAgICB9KTtcbiAgICBhbGxDYWxscy5wdXNoKG11bHRpY2FsbC5jYWxsU3RhdGljLnRyeUFnZ3JlZ2F0ZSh0cnVlLCBjYWxscykpO1xuICB9XG5cbiAgY29uc3QgY2FsbE91dHB1dHMgPSAoYXdhaXQgUHJvbWlzZS5hbGwoYWxsQ2FsbHMpKS5mbGF0KCk7XG4gIHJldHVybiBjYWxsT3V0cHV0cy5tYXAoKGQpID0+IHtcbiAgICByZXR1cm4gQmlnSW50KGQucmV0dXJuRGF0YSk7XG4gIH0pO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gcmVhZEFsbFVzZXJFUkMyMEJhbGFuY2VzKFxuICBjdHg6IEV0aENvbnRleHQsXG4gIHRva2VuQWRkcmVzczogc3RyaW5nLFxuICBhbGxBZGRyZXNzZXM6IHN0cmluZ1tdXG4pOiBQcm9taXNlPGJpZ2ludFtdPiB7XG4gIGNvbnN0IG11bHRpY2FsbCA9IGdldE11bHRpY2FsbDJDb250cmFjdE9uQ29udGV4dChjdHgsIE1VTFRJQ0FMTF9BRERSRVNTKTtcbiAgY29uc3QgZXJjMjAgPSBnZXRFUkMyMENvbnRyYWN0T25Db250ZXh0KGN0eCwgdG9rZW5BZGRyZXNzKTtcbiAgY29uc3QgYWxsQ2FsbHM6IFByb21pc2U8TXVsdGljYWxsMi5SZXN1bHRTdHJ1Y3RPdXRwdXRbXT5bXSA9IFtdO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGFsbEFkZHJlc3Nlcy5sZW5ndGg7IGkgKz0gTVVMVElDQUxMX0JBVENIX1NJWkUpIHtcbiAgICBjb25zdCBiYXRjaCA9IGFsbEFkZHJlc3Nlcy5zbGljZShpLCBpICsgTVVMVElDQUxMX0JBVENIX1NJWkUpO1xuICAgIGNvbnN0IGNhbGxzID0gYmF0Y2gubWFwKChhZGRyZXNzKSA9PiB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0YXJnZXQ6IGVyYzIwLmFkZHJlc3MsXG4gICAgICAgIGNhbGxEYXRhOiBlcmMyMC5yYXdDb250cmFjdC5pbnRlcmZhY2UuZW5jb2RlRnVuY3Rpb25EYXRhKCdiYWxhbmNlT2YnLCBbYWRkcmVzc10pLFxuICAgICAgfTtcbiAgICB9KTtcbiAgICBhbGxDYWxscy5wdXNoKG11bHRpY2FsbC5jYWxsU3RhdGljLnRyeUFnZ3JlZ2F0ZSh0cnVlLCBjYWxscykpO1xuICB9XG4gIGNvbnN0IGNhbGxPdXRwdXRzID0gKGF3YWl0IFByb21pc2UuYWxsKGFsbENhbGxzKSkuZmxhdCgpO1xuICByZXR1cm4gY2FsbE91dHB1dHMubWFwKChkKSA9PiB7XG4gICAgcmV0dXJuIEJpZ0ludChkLnJldHVybkRhdGEpO1xuICB9KTtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHJlYWRBbGxZVFBvc2l0aW9ucyhcbiAgY3R4OiBFdGhDb250ZXh0LFxuICB5dEFkZHI6IHN0cmluZyxcbiAgYWxsVXNlckFkZHJlc3Nlczogc3RyaW5nW11cbik6IFByb21pc2U8XG4gIHtcbiAgICBsYXN0UFlJbmRleDogYmlnaW50O1xuICAgIGFjY3J1ZWRJbnRlcmVzdDogYmlnaW50O1xuICB9W11cbj4ge1xuICBjb25zdCBtdWx0aWNhbGwgPSBnZXRNdWx0aWNhbGwyQ29udHJhY3RPbkNvbnRleHQoY3R4LCBNVUxUSUNBTExfQUREUkVTUyk7XG4gIGNvbnN0IHl0ID0gZ2V0UGVuZGxlWWllbGRUb2tlbkNvbnRyYWN0T25Db250ZXh0KGN0eCwgeXRBZGRyKTtcbiAgY29uc3QgYWxsQ2FsbHM6IFByb21pc2U8TXVsdGljYWxsMi5SZXN1bHRTdHJ1Y3RPdXRwdXRbXT5bXSA9IFtdO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGFsbFVzZXJBZGRyZXNzZXMubGVuZ3RoOyBpICs9IE1VTFRJQ0FMTF9CQVRDSF9TSVpFKSB7XG4gICAgY29uc3QgYmF0Y2ggPSBhbGxVc2VyQWRkcmVzc2VzLnNsaWNlKGksIGkgKyBNVUxUSUNBTExfQkFUQ0hfU0laRSk7XG4gICAgY29uc3QgY2FsbHMgPSBiYXRjaC5tYXAoKGFkZHJlc3MpID0+IHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHRhcmdldDogeXQuYWRkcmVzcyxcbiAgICAgICAgY2FsbERhdGE6IHl0LnJhd0NvbnRyYWN0LmludGVyZmFjZS5lbmNvZGVGdW5jdGlvbkRhdGEoJ3VzZXJJbnRlcmVzdCcsIFthZGRyZXNzXSksXG4gICAgICB9O1xuICAgIH0pO1xuICAgIGFsbENhbGxzLnB1c2gobXVsdGljYWxsLmNhbGxTdGF0aWMudHJ5QWdncmVnYXRlKHRydWUsIGNhbGxzKSk7XG4gIH1cbiAgY29uc3QgY2FsbE91dHB1dHMgPSAoYXdhaXQgUHJvbWlzZS5hbGwoYWxsQ2FsbHMpKS5mbGF0KCk7XG4gIHJldHVybiBjYWxsT3V0cHV0cy5tYXAoKGQpID0+IHtcbiAgICBjb25zdCBkYXRhID0geXQucmF3Q29udHJhY3QuaW50ZXJmYWNlLmRlY29kZUZ1bmN0aW9uUmVzdWx0KCd1c2VySW50ZXJlc3QnLCBkLnJldHVybkRhdGEpO1xuICAgIHJldHVybiB7XG4gICAgICBsYXN0UFlJbmRleDogQmlnSW50KGRhdGFbMF0pLFxuICAgICAgYWNjcnVlZEludGVyZXN0OiBCaWdJbnQoZGF0YVsxXSksXG4gICAgfTtcbiAgfSk7XG59XG4iLCAiLyogQXV0b2dlbmVyYXRlZCBmaWxlLiBEbyBub3QgZWRpdCBtYW51YWxseS4gKi9cbi8qIHRzbGludDpkaXNhYmxlICovXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xuaW1wb3J0IHsgQmlnTnVtYmVyaXNoLCBPdmVycmlkZXMgfSBmcm9tIFwiZXRoZXJzXCI7XG5pbXBvcnQge1xuICBhZGRDb250cmFjdEJ5QUJJLFxuICBnZXRDb250cmFjdEJ5QUJJLFxuICBhZGRQcm9jZXNzb3IsXG4gIGdldFByb2Nlc3NvcixcbiAgZ2V0UHJvdmlkZXIsXG4gIHRyYW5zZm9ybUV0aGVyRXJyb3IsXG4gIEJpbmRPcHRpb25zLFxuICBCYXNlUHJvY2Vzc29yLFxuICBCYXNlUHJvY2Vzc29yVGVtcGxhdGUsXG4gIEJvdW5kQ29udHJhY3RWaWV3LFxuICBDb250cmFjdENvbnRleHQsXG4gIENvbnRyYWN0VmlldyxcbiAgRHVtbXlQcm92aWRlcixcbiAgRXRoQ2hhaW5JZCxcbiAgVHlwZWRDYWxsVHJhY2UsXG4gIEV0aENvbnRleHQsXG4gIEV0aEZldGNoQ29uZmlnLFxuICBQcmVwcm9jZXNzUmVzdWx0LFxuICBlbmNvZGVDYWxsRGF0YSxcbn0gZnJvbSBcIkBzZW50aW8vc2RrL2V0aFwiO1xuaW1wb3J0IHsgRXRoQ2FsbFBhcmFtLCBFdGhDYWxsQ29udGV4dCwgUHJlcGFyZWREYXRhIH0gZnJvbSBcIkBzZW50aW8vcHJvdG9zXCI7XG5cbmltcG9ydCB7IFBlbmRsZVlpZWxkVG9rZW5fX2ZhY3RvcnkgfSBmcm9tIFwiLi9pbmRleC5qc1wiO1xuaW1wb3J0IHtcbiAgUGVuZGxlWWllbGRUb2tlbixcbiAgQXBwcm92YWxFdmVudCxcbiAgQXBwcm92YWxFdmVudEZpbHRlcixcbiAgQnVybkV2ZW50LFxuICBCdXJuRXZlbnRGaWx0ZXIsXG4gIENvbGxlY3RJbnRlcmVzdEZlZUV2ZW50LFxuICBDb2xsZWN0SW50ZXJlc3RGZWVFdmVudEZpbHRlcixcbiAgQ29sbGVjdFJld2FyZEZlZUV2ZW50LFxuICBDb2xsZWN0UmV3YXJkRmVlRXZlbnRGaWx0ZXIsXG4gIE1pbnRFdmVudCxcbiAgTWludEV2ZW50RmlsdGVyLFxuICBOZXdJbnRlcmVzdEluZGV4RXZlbnQsXG4gIE5ld0ludGVyZXN0SW5kZXhFdmVudEZpbHRlcixcbiAgUmVkZWVtSW50ZXJlc3RFdmVudCxcbiAgUmVkZWVtSW50ZXJlc3RFdmVudEZpbHRlcixcbiAgUmVkZWVtUmV3YXJkc0V2ZW50LFxuICBSZWRlZW1SZXdhcmRzRXZlbnRGaWx0ZXIsXG4gIFRyYW5zZmVyRXZlbnQsXG4gIFRyYW5zZmVyRXZlbnRGaWx0ZXIsXG59IGZyb20gXCIuL1BlbmRsZVlpZWxkVG9rZW4uanNcIjtcblxuZXhwb3J0IGludGVyZmFjZSBQVENhbGxPYmplY3Qge31cblxuZXhwb3J0IHR5cGUgUFRDYWxsVHJhY2UgPSBUeXBlZENhbGxUcmFjZTxbXSwgUFRDYWxsT2JqZWN0PjtcblxuZXhwb3J0IGludGVyZmFjZSBTWUNhbGxPYmplY3Qge31cblxuZXhwb3J0IHR5cGUgU1lDYWxsVHJhY2UgPSBUeXBlZENhbGxUcmFjZTxbXSwgU1lDYWxsT2JqZWN0PjtcblxuZXhwb3J0IGludGVyZmFjZSBBbGxvd2FuY2VDYWxsT2JqZWN0IHtcbiAgb3duZXI6IHN0cmluZztcbiAgc3BlbmRlcjogc3RyaW5nO1xufVxuXG5leHBvcnQgdHlwZSBBbGxvd2FuY2VDYWxsVHJhY2UgPSBUeXBlZENhbGxUcmFjZTxcbiAgW3N0cmluZywgc3RyaW5nXSxcbiAgQWxsb3dhbmNlQ2FsbE9iamVjdFxuPjtcblxuZXhwb3J0IGludGVyZmFjZSBBcHByb3ZlQ2FsbE9iamVjdCB7XG4gIHNwZW5kZXI6IHN0cmluZztcbiAgYW1vdW50OiBiaWdpbnQ7XG59XG5cbmV4cG9ydCB0eXBlIEFwcHJvdmVDYWxsVHJhY2UgPSBUeXBlZENhbGxUcmFjZTxcbiAgW3N0cmluZywgYmlnaW50XSxcbiAgQXBwcm92ZUNhbGxPYmplY3Rcbj47XG5cbmV4cG9ydCBpbnRlcmZhY2UgQmFsYW5jZU9mQ2FsbE9iamVjdCB7XG4gIGFjY291bnQ6IHN0cmluZztcbn1cblxuZXhwb3J0IHR5cGUgQmFsYW5jZU9mQ2FsbFRyYWNlID0gVHlwZWRDYWxsVHJhY2U8W3N0cmluZ10sIEJhbGFuY2VPZkNhbGxPYmplY3Q+O1xuXG5leHBvcnQgaW50ZXJmYWNlIERlY2ltYWxzQ2FsbE9iamVjdCB7fVxuXG5leHBvcnQgdHlwZSBEZWNpbWFsc0NhbGxUcmFjZSA9IFR5cGVkQ2FsbFRyYWNlPFtdLCBEZWNpbWFsc0NhbGxPYmplY3Q+O1xuXG5leHBvcnQgaW50ZXJmYWNlIERvQ2FjaGVJbmRleFNhbWVCbG9ja0NhbGxPYmplY3Qge31cblxuZXhwb3J0IHR5cGUgRG9DYWNoZUluZGV4U2FtZUJsb2NrQ2FsbFRyYWNlID0gVHlwZWRDYWxsVHJhY2U8XG4gIFtdLFxuICBEb0NhY2hlSW5kZXhTYW1lQmxvY2tDYWxsT2JqZWN0XG4+O1xuXG5leHBvcnQgaW50ZXJmYWNlIEV4cGlyeUNhbGxPYmplY3Qge31cblxuZXhwb3J0IHR5cGUgRXhwaXJ5Q2FsbFRyYWNlID0gVHlwZWRDYWxsVHJhY2U8W10sIEV4cGlyeUNhbGxPYmplY3Q+O1xuXG5leHBvcnQgaW50ZXJmYWNlIEZhY3RvcnlDYWxsT2JqZWN0IHt9XG5cbmV4cG9ydCB0eXBlIEZhY3RvcnlDYWxsVHJhY2UgPSBUeXBlZENhbGxUcmFjZTxbXSwgRmFjdG9yeUNhbGxPYmplY3Q+O1xuXG5leHBvcnQgaW50ZXJmYWNlIEdldFBvc3RFeHBpcnlEYXRhQ2FsbE9iamVjdCB7fVxuXG5leHBvcnQgdHlwZSBHZXRQb3N0RXhwaXJ5RGF0YUNhbGxUcmFjZSA9IFR5cGVkQ2FsbFRyYWNlPFxuICBbXSxcbiAgR2V0UG9zdEV4cGlyeURhdGFDYWxsT2JqZWN0XG4+O1xuXG5leHBvcnQgaW50ZXJmYWNlIEdldFJld2FyZFRva2Vuc0NhbGxPYmplY3Qge31cblxuZXhwb3J0IHR5cGUgR2V0UmV3YXJkVG9rZW5zQ2FsbFRyYWNlID0gVHlwZWRDYWxsVHJhY2U8XG4gIFtdLFxuICBHZXRSZXdhcmRUb2tlbnNDYWxsT2JqZWN0XG4+O1xuXG5leHBvcnQgaW50ZXJmYWNlIElzRXhwaXJlZENhbGxPYmplY3Qge31cblxuZXhwb3J0IHR5cGUgSXNFeHBpcmVkQ2FsbFRyYWNlID0gVHlwZWRDYWxsVHJhY2U8W10sIElzRXhwaXJlZENhbGxPYmplY3Q+O1xuXG5leHBvcnQgaW50ZXJmYWNlIE1pbnRQWUNhbGxPYmplY3Qge1xuICByZWNlaXZlclBUOiBzdHJpbmc7XG4gIHJlY2VpdmVyWVQ6IHN0cmluZztcbn1cblxuZXhwb3J0IHR5cGUgTWludFBZQ2FsbFRyYWNlID0gVHlwZWRDYWxsVHJhY2U8XG4gIFtzdHJpbmcsIHN0cmluZ10sXG4gIE1pbnRQWUNhbGxPYmplY3Rcbj47XG5cbmV4cG9ydCBpbnRlcmZhY2UgTWludFBZTXVsdGlDYWxsT2JqZWN0IHtcbiAgcmVjZWl2ZXJQVHM6IHN0cmluZ1tdO1xuICByZWNlaXZlcllUczogc3RyaW5nW107XG4gIGFtb3VudFN5VG9NaW50czogYmlnaW50W107XG59XG5cbmV4cG9ydCB0eXBlIE1pbnRQWU11bHRpQ2FsbFRyYWNlID0gVHlwZWRDYWxsVHJhY2U8XG4gIFtzdHJpbmdbXSwgc3RyaW5nW10sIGJpZ2ludFtdXSxcbiAgTWludFBZTXVsdGlDYWxsT2JqZWN0XG4+O1xuXG5leHBvcnQgaW50ZXJmYWNlIE5hbWVDYWxsT2JqZWN0IHt9XG5cbmV4cG9ydCB0eXBlIE5hbWVDYWxsVHJhY2UgPSBUeXBlZENhbGxUcmFjZTxbXSwgTmFtZUNhbGxPYmplY3Q+O1xuXG5leHBvcnQgaW50ZXJmYWNlIFBvc3RFeHBpcnlDYWxsT2JqZWN0IHt9XG5cbmV4cG9ydCB0eXBlIFBvc3RFeHBpcnlDYWxsVHJhY2UgPSBUeXBlZENhbGxUcmFjZTxbXSwgUG9zdEV4cGlyeUNhbGxPYmplY3Q+O1xuXG5leHBvcnQgaW50ZXJmYWNlIFB5SW5kZXhDdXJyZW50Q2FsbE9iamVjdCB7fVxuXG5leHBvcnQgdHlwZSBQeUluZGV4Q3VycmVudENhbGxUcmFjZSA9IFR5cGVkQ2FsbFRyYWNlPFxuICBbXSxcbiAgUHlJbmRleEN1cnJlbnRDYWxsT2JqZWN0XG4+O1xuXG5leHBvcnQgaW50ZXJmYWNlIFB5SW5kZXhMYXN0VXBkYXRlZEJsb2NrQ2FsbE9iamVjdCB7fVxuXG5leHBvcnQgdHlwZSBQeUluZGV4TGFzdFVwZGF0ZWRCbG9ja0NhbGxUcmFjZSA9IFR5cGVkQ2FsbFRyYWNlPFxuICBbXSxcbiAgUHlJbmRleExhc3RVcGRhdGVkQmxvY2tDYWxsT2JqZWN0XG4+O1xuXG5leHBvcnQgaW50ZXJmYWNlIFB5SW5kZXhTdG9yZWRDYWxsT2JqZWN0IHt9XG5cbmV4cG9ydCB0eXBlIFB5SW5kZXhTdG9yZWRDYWxsVHJhY2UgPSBUeXBlZENhbGxUcmFjZTxcbiAgW10sXG4gIFB5SW5kZXhTdG9yZWRDYWxsT2JqZWN0XG4+O1xuXG5leHBvcnQgaW50ZXJmYWNlIFJlZGVlbUR1ZUludGVyZXN0QW5kUmV3YXJkc0NhbGxPYmplY3Qge1xuICB1c2VyOiBzdHJpbmc7XG4gIHJlZGVlbUludGVyZXN0OiBib29sZWFuO1xuICByZWRlZW1SZXdhcmRzOiBib29sZWFuO1xufVxuXG5leHBvcnQgdHlwZSBSZWRlZW1EdWVJbnRlcmVzdEFuZFJld2FyZHNDYWxsVHJhY2UgPSBUeXBlZENhbGxUcmFjZTxcbiAgW3N0cmluZywgYm9vbGVhbiwgYm9vbGVhbl0sXG4gIFJlZGVlbUR1ZUludGVyZXN0QW5kUmV3YXJkc0NhbGxPYmplY3Rcbj47XG5cbmV4cG9ydCBpbnRlcmZhY2UgUmVkZWVtSW50ZXJlc3RBbmRSZXdhcmRzUG9zdEV4cGlyeUZvclRyZWFzdXJ5Q2FsbE9iamVjdCB7fVxuXG5leHBvcnQgdHlwZSBSZWRlZW1JbnRlcmVzdEFuZFJld2FyZHNQb3N0RXhwaXJ5Rm9yVHJlYXN1cnlDYWxsVHJhY2UgPVxuICBUeXBlZENhbGxUcmFjZTxbXSwgUmVkZWVtSW50ZXJlc3RBbmRSZXdhcmRzUG9zdEV4cGlyeUZvclRyZWFzdXJ5Q2FsbE9iamVjdD47XG5cbmV4cG9ydCBpbnRlcmZhY2UgUmVkZWVtUFlDYWxsT2JqZWN0IHtcbiAgcmVjZWl2ZXI6IHN0cmluZztcbn1cblxuZXhwb3J0IHR5cGUgUmVkZWVtUFlDYWxsVHJhY2UgPSBUeXBlZENhbGxUcmFjZTxbc3RyaW5nXSwgUmVkZWVtUFlDYWxsT2JqZWN0PjtcblxuZXhwb3J0IGludGVyZmFjZSBSZWRlZW1QWU11bHRpQ2FsbE9iamVjdCB7XG4gIHJlY2VpdmVyczogc3RyaW5nW107XG4gIGFtb3VudFBZVG9SZWRlZW1zOiBiaWdpbnRbXTtcbn1cblxuZXhwb3J0IHR5cGUgUmVkZWVtUFlNdWx0aUNhbGxUcmFjZSA9IFR5cGVkQ2FsbFRyYWNlPFxuICBbc3RyaW5nW10sIGJpZ2ludFtdXSxcbiAgUmVkZWVtUFlNdWx0aUNhbGxPYmplY3Rcbj47XG5cbmV4cG9ydCBpbnRlcmZhY2UgUmV3YXJkSW5kZXhlc0N1cnJlbnRDYWxsT2JqZWN0IHt9XG5cbmV4cG9ydCB0eXBlIFJld2FyZEluZGV4ZXNDdXJyZW50Q2FsbFRyYWNlID0gVHlwZWRDYWxsVHJhY2U8XG4gIFtdLFxuICBSZXdhcmRJbmRleGVzQ3VycmVudENhbGxPYmplY3Rcbj47XG5cbmV4cG9ydCBpbnRlcmZhY2UgU2V0UG9zdEV4cGlyeURhdGFDYWxsT2JqZWN0IHt9XG5cbmV4cG9ydCB0eXBlIFNldFBvc3RFeHBpcnlEYXRhQ2FsbFRyYWNlID0gVHlwZWRDYWxsVHJhY2U8XG4gIFtdLFxuICBTZXRQb3N0RXhwaXJ5RGF0YUNhbGxPYmplY3Rcbj47XG5cbmV4cG9ydCBpbnRlcmZhY2UgU3lSZXNlcnZlQ2FsbE9iamVjdCB7fVxuXG5leHBvcnQgdHlwZSBTeVJlc2VydmVDYWxsVHJhY2UgPSBUeXBlZENhbGxUcmFjZTxbXSwgU3lSZXNlcnZlQ2FsbE9iamVjdD47XG5cbmV4cG9ydCBpbnRlcmZhY2UgU3ltYm9sQ2FsbE9iamVjdCB7fVxuXG5leHBvcnQgdHlwZSBTeW1ib2xDYWxsVHJhY2UgPSBUeXBlZENhbGxUcmFjZTxbXSwgU3ltYm9sQ2FsbE9iamVjdD47XG5cbmV4cG9ydCBpbnRlcmZhY2UgVG90YWxTdXBwbHlDYWxsT2JqZWN0IHt9XG5cbmV4cG9ydCB0eXBlIFRvdGFsU3VwcGx5Q2FsbFRyYWNlID0gVHlwZWRDYWxsVHJhY2U8W10sIFRvdGFsU3VwcGx5Q2FsbE9iamVjdD47XG5cbmV4cG9ydCBpbnRlcmZhY2UgVHJhbnNmZXJDYWxsT2JqZWN0IHtcbiAgdG86IHN0cmluZztcbiAgYW1vdW50OiBiaWdpbnQ7XG59XG5cbmV4cG9ydCB0eXBlIFRyYW5zZmVyQ2FsbFRyYWNlID0gVHlwZWRDYWxsVHJhY2U8XG4gIFtzdHJpbmcsIGJpZ2ludF0sXG4gIFRyYW5zZmVyQ2FsbE9iamVjdFxuPjtcblxuZXhwb3J0IGludGVyZmFjZSBUcmFuc2ZlckZyb21DYWxsT2JqZWN0IHtcbiAgZnJvbTogc3RyaW5nO1xuICB0bzogc3RyaW5nO1xuICBhbW91bnQ6IGJpZ2ludDtcbn1cblxuZXhwb3J0IHR5cGUgVHJhbnNmZXJGcm9tQ2FsbFRyYWNlID0gVHlwZWRDYWxsVHJhY2U8XG4gIFtzdHJpbmcsIHN0cmluZywgYmlnaW50XSxcbiAgVHJhbnNmZXJGcm9tQ2FsbE9iamVjdFxuPjtcblxuZXhwb3J0IGludGVyZmFjZSBVc2VySW50ZXJlc3RDYWxsT2JqZWN0IHt9XG5cbmV4cG9ydCB0eXBlIFVzZXJJbnRlcmVzdENhbGxUcmFjZSA9IFR5cGVkQ2FsbFRyYWNlPFxuICBbc3RyaW5nXSxcbiAgVXNlckludGVyZXN0Q2FsbE9iamVjdFxuPjtcblxuZXhwb3J0IGludGVyZmFjZSBVc2VyUmV3YXJkQ2FsbE9iamVjdCB7fVxuXG5leHBvcnQgdHlwZSBVc2VyUmV3YXJkQ2FsbFRyYWNlID0gVHlwZWRDYWxsVHJhY2U8XG4gIFtzdHJpbmcsIHN0cmluZ10sXG4gIFVzZXJSZXdhcmRDYWxsT2JqZWN0XG4+O1xuXG5jb25zdCB0ZW1wbGF0ZUNvbnRyYWN0ID0gUGVuZGxlWWllbGRUb2tlbl9fZmFjdG9yeS5jb25uZWN0KFxuICBcIjB4MFwiLFxuICBEdW1teVByb3ZpZGVyLFxuKTtcblxuZXhwb3J0IGNsYXNzIFBlbmRsZVlpZWxkVG9rZW5Db250cmFjdFZpZXcgZXh0ZW5kcyBDb250cmFjdFZpZXc8UGVuZGxlWWllbGRUb2tlbj4ge1xuICBjb25zdHJ1Y3Rvcihjb250cmFjdDogUGVuZGxlWWllbGRUb2tlbikge1xuICAgIHN1cGVyKGNvbnRyYWN0KTtcbiAgICB0aGlzLmNhbGxTdGF0aWMuY29udHJhY3QgPSBjb250cmFjdDtcbiAgfVxuXG4gIGFzeW5jIFBUKFxuICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlcyxcbiAgICBwcmVwYXJlZERhdGE/OiBQcmVwYXJlZERhdGEsXG4gICAgZXRoQ2FsbENvbnRleHQ/OiBFdGhDYWxsQ29udGV4dCxcbiAgKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuY29udHJhY3QuZ2V0RnVuY3Rpb24oXCJQVCgpXCIpKG92ZXJyaWRlcyB8fCB7fSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgY29uc3Qgc3RhY2sgPSBuZXcgRXJyb3IoKS5zdGFjaztcbiAgICAgIHRocm93IHRyYW5zZm9ybUV0aGVyRXJyb3IoZSwgdW5kZWZpbmVkLCBzdGFjayk7XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgU1koXG4gICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzLFxuICAgIHByZXBhcmVkRGF0YT86IFByZXBhcmVkRGF0YSxcbiAgICBldGhDYWxsQ29udGV4dD86IEV0aENhbGxDb250ZXh0LFxuICApOiBQcm9taXNlPHN0cmluZz4ge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gYXdhaXQgdGhpcy5jb250cmFjdC5nZXRGdW5jdGlvbihcIlNZKClcIikob3ZlcnJpZGVzIHx8IHt9KTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBjb25zdCBzdGFjayA9IG5ldyBFcnJvcigpLnN0YWNrO1xuICAgICAgdGhyb3cgdHJhbnNmb3JtRXRoZXJFcnJvcihlLCB1bmRlZmluZWQsIHN0YWNrKTtcbiAgICB9XG4gIH1cblxuICBhc3luYyBhbGxvd2FuY2UoXG4gICAgb3duZXI6IHN0cmluZyxcbiAgICBzcGVuZGVyOiBzdHJpbmcsXG4gICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzLFxuICAgIHByZXBhcmVkRGF0YT86IFByZXBhcmVkRGF0YSxcbiAgICBldGhDYWxsQ29udGV4dD86IEV0aENhbGxDb250ZXh0LFxuICApOiBQcm9taXNlPGJpZ2ludD4ge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gYXdhaXQgdGhpcy5jb250cmFjdC5nZXRGdW5jdGlvbihcImFsbG93YW5jZShhZGRyZXNzLGFkZHJlc3MpXCIpKFxuICAgICAgICBvd25lcixcbiAgICAgICAgc3BlbmRlcixcbiAgICAgICAgb3ZlcnJpZGVzIHx8IHt9LFxuICAgICAgKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBjb25zdCBzdGFjayA9IG5ldyBFcnJvcigpLnN0YWNrO1xuICAgICAgdGhyb3cgdHJhbnNmb3JtRXRoZXJFcnJvcihlLCB1bmRlZmluZWQsIHN0YWNrKTtcbiAgICB9XG4gIH1cblxuICBhc3luYyBiYWxhbmNlT2YoXG4gICAgYWNjb3VudDogc3RyaW5nLFxuICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlcyxcbiAgICBwcmVwYXJlZERhdGE/OiBQcmVwYXJlZERhdGEsXG4gICAgZXRoQ2FsbENvbnRleHQ/OiBFdGhDYWxsQ29udGV4dCxcbiAgKTogUHJvbWlzZTxiaWdpbnQ+IHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuY29udHJhY3QuZ2V0RnVuY3Rpb24oXCJiYWxhbmNlT2YoYWRkcmVzcylcIikoXG4gICAgICAgIGFjY291bnQsXG4gICAgICAgIG92ZXJyaWRlcyB8fCB7fSxcbiAgICAgICk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgY29uc3Qgc3RhY2sgPSBuZXcgRXJyb3IoKS5zdGFjaztcbiAgICAgIHRocm93IHRyYW5zZm9ybUV0aGVyRXJyb3IoZSwgdW5kZWZpbmVkLCBzdGFjayk7XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgZGVjaW1hbHMoXG4gICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzLFxuICAgIHByZXBhcmVkRGF0YT86IFByZXBhcmVkRGF0YSxcbiAgICBldGhDYWxsQ29udGV4dD86IEV0aENhbGxDb250ZXh0LFxuICApOiBQcm9taXNlPGJpZ2ludD4ge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gYXdhaXQgdGhpcy5jb250cmFjdC5nZXRGdW5jdGlvbihcImRlY2ltYWxzKClcIikob3ZlcnJpZGVzIHx8IHt9KTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBjb25zdCBzdGFjayA9IG5ldyBFcnJvcigpLnN0YWNrO1xuICAgICAgdGhyb3cgdHJhbnNmb3JtRXRoZXJFcnJvcihlLCB1bmRlZmluZWQsIHN0YWNrKTtcbiAgICB9XG4gIH1cblxuICBhc3luYyBkb0NhY2hlSW5kZXhTYW1lQmxvY2soXG4gICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzLFxuICAgIHByZXBhcmVkRGF0YT86IFByZXBhcmVkRGF0YSxcbiAgICBldGhDYWxsQ29udGV4dD86IEV0aENhbGxDb250ZXh0LFxuICApOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuY29udHJhY3QuZ2V0RnVuY3Rpb24oXCJkb0NhY2hlSW5kZXhTYW1lQmxvY2soKVwiKShcbiAgICAgICAgb3ZlcnJpZGVzIHx8IHt9LFxuICAgICAgKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBjb25zdCBzdGFjayA9IG5ldyBFcnJvcigpLnN0YWNrO1xuICAgICAgdGhyb3cgdHJhbnNmb3JtRXRoZXJFcnJvcihlLCB1bmRlZmluZWQsIHN0YWNrKTtcbiAgICB9XG4gIH1cblxuICBhc3luYyBleHBpcnkoXG4gICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzLFxuICAgIHByZXBhcmVkRGF0YT86IFByZXBhcmVkRGF0YSxcbiAgICBldGhDYWxsQ29udGV4dD86IEV0aENhbGxDb250ZXh0LFxuICApOiBQcm9taXNlPGJpZ2ludD4ge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gYXdhaXQgdGhpcy5jb250cmFjdC5nZXRGdW5jdGlvbihcImV4cGlyeSgpXCIpKG92ZXJyaWRlcyB8fCB7fSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgY29uc3Qgc3RhY2sgPSBuZXcgRXJyb3IoKS5zdGFjaztcbiAgICAgIHRocm93IHRyYW5zZm9ybUV0aGVyRXJyb3IoZSwgdW5kZWZpbmVkLCBzdGFjayk7XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgZmFjdG9yeShcbiAgICBvdmVycmlkZXM/OiBPdmVycmlkZXMsXG4gICAgcHJlcGFyZWREYXRhPzogUHJlcGFyZWREYXRhLFxuICAgIGV0aENhbGxDb250ZXh0PzogRXRoQ2FsbENvbnRleHQsXG4gICk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBhd2FpdCB0aGlzLmNvbnRyYWN0LmdldEZ1bmN0aW9uKFwiZmFjdG9yeSgpXCIpKG92ZXJyaWRlcyB8fCB7fSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgY29uc3Qgc3RhY2sgPSBuZXcgRXJyb3IoKS5zdGFjaztcbiAgICAgIHRocm93IHRyYW5zZm9ybUV0aGVyRXJyb3IoZSwgdW5kZWZpbmVkLCBzdGFjayk7XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgZ2V0UG9zdEV4cGlyeURhdGEoXG4gICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzLFxuICAgIHByZXBhcmVkRGF0YT86IFByZXBhcmVkRGF0YSxcbiAgICBldGhDYWxsQ29udGV4dD86IEV0aENhbGxDb250ZXh0LFxuICApOiBQcm9taXNlPFxuICAgIFtiaWdpbnQsIGJpZ2ludCwgYmlnaW50W10sIGJpZ2ludFtdXSAmIHtcbiAgICAgIGZpcnN0UFlJbmRleDogYmlnaW50O1xuICAgICAgdG90YWxTeUludGVyZXN0Rm9yVHJlYXN1cnk6IGJpZ2ludDtcbiAgICAgIGZpcnN0UmV3YXJkSW5kZXhlczogYmlnaW50W107XG4gICAgICB1c2VyUmV3YXJkT3dlZDogYmlnaW50W107XG4gICAgfVxuICA+IHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuY29udHJhY3QuZ2V0RnVuY3Rpb24oXCJnZXRQb3N0RXhwaXJ5RGF0YSgpXCIpKFxuICAgICAgICBvdmVycmlkZXMgfHwge30sXG4gICAgICApO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGNvbnN0IHN0YWNrID0gbmV3IEVycm9yKCkuc3RhY2s7XG4gICAgICB0aHJvdyB0cmFuc2Zvcm1FdGhlckVycm9yKGUsIHVuZGVmaW5lZCwgc3RhY2spO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIGdldFJld2FyZFRva2VucyhcbiAgICBvdmVycmlkZXM/OiBPdmVycmlkZXMsXG4gICAgcHJlcGFyZWREYXRhPzogUHJlcGFyZWREYXRhLFxuICAgIGV0aENhbGxDb250ZXh0PzogRXRoQ2FsbENvbnRleHQsXG4gICk6IFByb21pc2U8c3RyaW5nW10+IHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuY29udHJhY3QuZ2V0RnVuY3Rpb24oXCJnZXRSZXdhcmRUb2tlbnMoKVwiKShcbiAgICAgICAgb3ZlcnJpZGVzIHx8IHt9LFxuICAgICAgKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBjb25zdCBzdGFjayA9IG5ldyBFcnJvcigpLnN0YWNrO1xuICAgICAgdGhyb3cgdHJhbnNmb3JtRXRoZXJFcnJvcihlLCB1bmRlZmluZWQsIHN0YWNrKTtcbiAgICB9XG4gIH1cblxuICBhc3luYyBpc0V4cGlyZWQoXG4gICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzLFxuICAgIHByZXBhcmVkRGF0YT86IFByZXBhcmVkRGF0YSxcbiAgICBldGhDYWxsQ29udGV4dD86IEV0aENhbGxDb250ZXh0LFxuICApOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuY29udHJhY3QuZ2V0RnVuY3Rpb24oXCJpc0V4cGlyZWQoKVwiKShvdmVycmlkZXMgfHwge30pO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGNvbnN0IHN0YWNrID0gbmV3IEVycm9yKCkuc3RhY2s7XG4gICAgICB0aHJvdyB0cmFuc2Zvcm1FdGhlckVycm9yKGUsIHVuZGVmaW5lZCwgc3RhY2spO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIG5hbWUoXG4gICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzLFxuICAgIHByZXBhcmVkRGF0YT86IFByZXBhcmVkRGF0YSxcbiAgICBldGhDYWxsQ29udGV4dD86IEV0aENhbGxDb250ZXh0LFxuICApOiBQcm9taXNlPHN0cmluZz4ge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gYXdhaXQgdGhpcy5jb250cmFjdC5nZXRGdW5jdGlvbihcIm5hbWUoKVwiKShvdmVycmlkZXMgfHwge30pO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGNvbnN0IHN0YWNrID0gbmV3IEVycm9yKCkuc3RhY2s7XG4gICAgICB0aHJvdyB0cmFuc2Zvcm1FdGhlckVycm9yKGUsIHVuZGVmaW5lZCwgc3RhY2spO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIHBvc3RFeHBpcnkoXG4gICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzLFxuICAgIHByZXBhcmVkRGF0YT86IFByZXBhcmVkRGF0YSxcbiAgICBldGhDYWxsQ29udGV4dD86IEV0aENhbGxDb250ZXh0LFxuICApOiBQcm9taXNlPFxuICAgIFtiaWdpbnQsIGJpZ2ludF0gJiB7XG4gICAgICBmaXJzdFBZSW5kZXg6IGJpZ2ludDtcbiAgICAgIHRvdGFsU3lJbnRlcmVzdEZvclRyZWFzdXJ5OiBiaWdpbnQ7XG4gICAgfVxuICA+IHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuY29udHJhY3QuZ2V0RnVuY3Rpb24oXCJwb3N0RXhwaXJ5KClcIikob3ZlcnJpZGVzIHx8IHt9KTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBjb25zdCBzdGFjayA9IG5ldyBFcnJvcigpLnN0YWNrO1xuICAgICAgdGhyb3cgdHJhbnNmb3JtRXRoZXJFcnJvcihlLCB1bmRlZmluZWQsIHN0YWNrKTtcbiAgICB9XG4gIH1cblxuICBhc3luYyBweUluZGV4TGFzdFVwZGF0ZWRCbG9jayhcbiAgICBvdmVycmlkZXM/OiBPdmVycmlkZXMsXG4gICAgcHJlcGFyZWREYXRhPzogUHJlcGFyZWREYXRhLFxuICAgIGV0aENhbGxDb250ZXh0PzogRXRoQ2FsbENvbnRleHQsXG4gICk6IFByb21pc2U8YmlnaW50PiB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBhd2FpdCB0aGlzLmNvbnRyYWN0LmdldEZ1bmN0aW9uKFwicHlJbmRleExhc3RVcGRhdGVkQmxvY2soKVwiKShcbiAgICAgICAgb3ZlcnJpZGVzIHx8IHt9LFxuICAgICAgKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBjb25zdCBzdGFjayA9IG5ldyBFcnJvcigpLnN0YWNrO1xuICAgICAgdGhyb3cgdHJhbnNmb3JtRXRoZXJFcnJvcihlLCB1bmRlZmluZWQsIHN0YWNrKTtcbiAgICB9XG4gIH1cblxuICBhc3luYyBweUluZGV4U3RvcmVkKFxuICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlcyxcbiAgICBwcmVwYXJlZERhdGE/OiBQcmVwYXJlZERhdGEsXG4gICAgZXRoQ2FsbENvbnRleHQ/OiBFdGhDYWxsQ29udGV4dCxcbiAgKTogUHJvbWlzZTxiaWdpbnQ+IHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuY29udHJhY3QuZ2V0RnVuY3Rpb24oXCJweUluZGV4U3RvcmVkKClcIikoXG4gICAgICAgIG92ZXJyaWRlcyB8fCB7fSxcbiAgICAgICk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgY29uc3Qgc3RhY2sgPSBuZXcgRXJyb3IoKS5zdGFjaztcbiAgICAgIHRocm93IHRyYW5zZm9ybUV0aGVyRXJyb3IoZSwgdW5kZWZpbmVkLCBzdGFjayk7XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgc3lSZXNlcnZlKFxuICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlcyxcbiAgICBwcmVwYXJlZERhdGE/OiBQcmVwYXJlZERhdGEsXG4gICAgZXRoQ2FsbENvbnRleHQ/OiBFdGhDYWxsQ29udGV4dCxcbiAgKTogUHJvbWlzZTxiaWdpbnQ+IHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuY29udHJhY3QuZ2V0RnVuY3Rpb24oXCJzeVJlc2VydmUoKVwiKShvdmVycmlkZXMgfHwge30pO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGNvbnN0IHN0YWNrID0gbmV3IEVycm9yKCkuc3RhY2s7XG4gICAgICB0aHJvdyB0cmFuc2Zvcm1FdGhlckVycm9yKGUsIHVuZGVmaW5lZCwgc3RhY2spO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIHN5bWJvbChcbiAgICBvdmVycmlkZXM/OiBPdmVycmlkZXMsXG4gICAgcHJlcGFyZWREYXRhPzogUHJlcGFyZWREYXRhLFxuICAgIGV0aENhbGxDb250ZXh0PzogRXRoQ2FsbENvbnRleHQsXG4gICk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBhd2FpdCB0aGlzLmNvbnRyYWN0LmdldEZ1bmN0aW9uKFwic3ltYm9sKClcIikob3ZlcnJpZGVzIHx8IHt9KTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBjb25zdCBzdGFjayA9IG5ldyBFcnJvcigpLnN0YWNrO1xuICAgICAgdGhyb3cgdHJhbnNmb3JtRXRoZXJFcnJvcihlLCB1bmRlZmluZWQsIHN0YWNrKTtcbiAgICB9XG4gIH1cblxuICBhc3luYyB0b3RhbFN1cHBseShcbiAgICBvdmVycmlkZXM/OiBPdmVycmlkZXMsXG4gICAgcHJlcGFyZWREYXRhPzogUHJlcGFyZWREYXRhLFxuICAgIGV0aENhbGxDb250ZXh0PzogRXRoQ2FsbENvbnRleHQsXG4gICk6IFByb21pc2U8YmlnaW50PiB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBhd2FpdCB0aGlzLmNvbnRyYWN0LmdldEZ1bmN0aW9uKFwidG90YWxTdXBwbHkoKVwiKShvdmVycmlkZXMgfHwge30pO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGNvbnN0IHN0YWNrID0gbmV3IEVycm9yKCkuc3RhY2s7XG4gICAgICB0aHJvdyB0cmFuc2Zvcm1FdGhlckVycm9yKGUsIHVuZGVmaW5lZCwgc3RhY2spO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIHVzZXJJbnRlcmVzdChcbiAgICBhcmcwOiBzdHJpbmcsXG4gICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzLFxuICAgIHByZXBhcmVkRGF0YT86IFByZXBhcmVkRGF0YSxcbiAgICBldGhDYWxsQ29udGV4dD86IEV0aENhbGxDb250ZXh0LFxuICApOiBQcm9taXNlPFtiaWdpbnQsIGJpZ2ludF0gJiB7IGluZGV4OiBiaWdpbnQ7IGFjY3J1ZWQ6IGJpZ2ludCB9PiB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBhd2FpdCB0aGlzLmNvbnRyYWN0LmdldEZ1bmN0aW9uKFwidXNlckludGVyZXN0KGFkZHJlc3MpXCIpKFxuICAgICAgICBhcmcwLFxuICAgICAgICBvdmVycmlkZXMgfHwge30sXG4gICAgICApO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGNvbnN0IHN0YWNrID0gbmV3IEVycm9yKCkuc3RhY2s7XG4gICAgICB0aHJvdyB0cmFuc2Zvcm1FdGhlckVycm9yKGUsIHVuZGVmaW5lZCwgc3RhY2spO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIHVzZXJSZXdhcmQoXG4gICAgYXJnMDogc3RyaW5nLFxuICAgIGFyZzE6IHN0cmluZyxcbiAgICBvdmVycmlkZXM/OiBPdmVycmlkZXMsXG4gICAgcHJlcGFyZWREYXRhPzogUHJlcGFyZWREYXRhLFxuICAgIGV0aENhbGxDb250ZXh0PzogRXRoQ2FsbENvbnRleHQsXG4gICk6IFByb21pc2U8W2JpZ2ludCwgYmlnaW50XSAmIHsgaW5kZXg6IGJpZ2ludDsgYWNjcnVlZDogYmlnaW50IH0+IHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuY29udHJhY3QuZ2V0RnVuY3Rpb24oXCJ1c2VyUmV3YXJkKGFkZHJlc3MsYWRkcmVzcylcIikoXG4gICAgICAgIGFyZzAsXG4gICAgICAgIGFyZzEsXG4gICAgICAgIG92ZXJyaWRlcyB8fCB7fSxcbiAgICAgICk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgY29uc3Qgc3RhY2sgPSBuZXcgRXJyb3IoKS5zdGFjaztcbiAgICAgIHRocm93IHRyYW5zZm9ybUV0aGVyRXJyb3IoZSwgdW5kZWZpbmVkLCBzdGFjayk7XG4gICAgfVxuICB9XG5cbiAgY2FsbFN0YXRpYyA9IHtcbiAgICBjb250cmFjdDogdGhpcy5jb250cmFjdCxcblxuICAgIGFzeW5jIGFwcHJvdmUoXG4gICAgICBzcGVuZGVyOiBzdHJpbmcsXG4gICAgICBhbW91bnQ6IEJpZ051bWJlcmlzaCxcbiAgICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlcyxcbiAgICAgIHByZXBhcmVkRGF0YT86IFByZXBhcmVkRGF0YSxcbiAgICAgIGV0aENhbGxDb250ZXh0PzogRXRoQ2FsbENvbnRleHQsXG4gICAgKTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5jb250cmFjdFxuICAgICAgICAgIC5nZXRGdW5jdGlvbihcImFwcHJvdmUoYWRkcmVzcyx1aW50MjU2KVwiKVxuICAgICAgICAgIC5zdGF0aWNDYWxsKHNwZW5kZXIsIGFtb3VudCwgb3ZlcnJpZGVzIHx8IHt9KTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY29uc3Qgc3RhY2sgPSBuZXcgRXJyb3IoKS5zdGFjaztcbiAgICAgICAgdGhyb3cgdHJhbnNmb3JtRXRoZXJFcnJvcihlLCB1bmRlZmluZWQsIHN0YWNrKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGFzeW5jIG1pbnRQWShcbiAgICAgIHJlY2VpdmVyUFQ6IHN0cmluZyxcbiAgICAgIHJlY2VpdmVyWVQ6IHN0cmluZyxcbiAgICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlcyxcbiAgICAgIHByZXBhcmVkRGF0YT86IFByZXBhcmVkRGF0YSxcbiAgICAgIGV0aENhbGxDb250ZXh0PzogRXRoQ2FsbENvbnRleHQsXG4gICAgKTogUHJvbWlzZTxiaWdpbnQ+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLmNvbnRyYWN0XG4gICAgICAgICAgLmdldEZ1bmN0aW9uKFwibWludFBZKGFkZHJlc3MsYWRkcmVzcylcIilcbiAgICAgICAgICAuc3RhdGljQ2FsbChyZWNlaXZlclBULCByZWNlaXZlcllULCBvdmVycmlkZXMgfHwge30pO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjb25zdCBzdGFjayA9IG5ldyBFcnJvcigpLnN0YWNrO1xuICAgICAgICB0aHJvdyB0cmFuc2Zvcm1FdGhlckVycm9yKGUsIHVuZGVmaW5lZCwgc3RhY2spO1xuICAgICAgfVxuICAgIH0sXG4gICAgYXN5bmMgbWludFBZTXVsdGkoXG4gICAgICByZWNlaXZlclBUczogc3RyaW5nW10sXG4gICAgICByZWNlaXZlcllUczogc3RyaW5nW10sXG4gICAgICBhbW91bnRTeVRvTWludHM6IEJpZ051bWJlcmlzaFtdLFxuICAgICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzLFxuICAgICAgcHJlcGFyZWREYXRhPzogUHJlcGFyZWREYXRhLFxuICAgICAgZXRoQ2FsbENvbnRleHQ/OiBFdGhDYWxsQ29udGV4dCxcbiAgICApOiBQcm9taXNlPGJpZ2ludFtdPiB7XG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5jb250cmFjdFxuICAgICAgICAgIC5nZXRGdW5jdGlvbihcIm1pbnRQWU11bHRpKGFkZHJlc3NbXSxhZGRyZXNzW10sdWludDI1NltdKVwiKVxuICAgICAgICAgIC5zdGF0aWNDYWxsKFxuICAgICAgICAgICAgcmVjZWl2ZXJQVHMsXG4gICAgICAgICAgICByZWNlaXZlcllUcyxcbiAgICAgICAgICAgIGFtb3VudFN5VG9NaW50cyxcbiAgICAgICAgICAgIG92ZXJyaWRlcyB8fCB7fSxcbiAgICAgICAgICApO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjb25zdCBzdGFjayA9IG5ldyBFcnJvcigpLnN0YWNrO1xuICAgICAgICB0aHJvdyB0cmFuc2Zvcm1FdGhlckVycm9yKGUsIHVuZGVmaW5lZCwgc3RhY2spO1xuICAgICAgfVxuICAgIH0sXG4gICAgYXN5bmMgcHlJbmRleEN1cnJlbnQoXG4gICAgICBvdmVycmlkZXM/OiBPdmVycmlkZXMsXG4gICAgICBwcmVwYXJlZERhdGE/OiBQcmVwYXJlZERhdGEsXG4gICAgICBldGhDYWxsQ29udGV4dD86IEV0aENhbGxDb250ZXh0LFxuICAgICk6IFByb21pc2U8YmlnaW50PiB7XG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5jb250cmFjdFxuICAgICAgICAgIC5nZXRGdW5jdGlvbihcInB5SW5kZXhDdXJyZW50KClcIilcbiAgICAgICAgICAuc3RhdGljQ2FsbChvdmVycmlkZXMgfHwge30pO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjb25zdCBzdGFjayA9IG5ldyBFcnJvcigpLnN0YWNrO1xuICAgICAgICB0aHJvdyB0cmFuc2Zvcm1FdGhlckVycm9yKGUsIHVuZGVmaW5lZCwgc3RhY2spO1xuICAgICAgfVxuICAgIH0sXG4gICAgYXN5bmMgcmVkZWVtRHVlSW50ZXJlc3RBbmRSZXdhcmRzKFxuICAgICAgdXNlcjogc3RyaW5nLFxuICAgICAgcmVkZWVtSW50ZXJlc3Q6IGJvb2xlYW4sXG4gICAgICByZWRlZW1SZXdhcmRzOiBib29sZWFuLFxuICAgICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzLFxuICAgICAgcHJlcGFyZWREYXRhPzogUHJlcGFyZWREYXRhLFxuICAgICAgZXRoQ2FsbENvbnRleHQ/OiBFdGhDYWxsQ29udGV4dCxcbiAgICApOiBQcm9taXNlPFxuICAgICAgW2JpZ2ludCwgYmlnaW50W11dICYgeyBpbnRlcmVzdE91dDogYmlnaW50OyByZXdhcmRzT3V0OiBiaWdpbnRbXSB9XG4gICAgPiB7XG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5jb250cmFjdFxuICAgICAgICAgIC5nZXRGdW5jdGlvbihcInJlZGVlbUR1ZUludGVyZXN0QW5kUmV3YXJkcyhhZGRyZXNzLGJvb2wsYm9vbClcIilcbiAgICAgICAgICAuc3RhdGljQ2FsbCh1c2VyLCByZWRlZW1JbnRlcmVzdCwgcmVkZWVtUmV3YXJkcywgb3ZlcnJpZGVzIHx8IHt9KTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY29uc3Qgc3RhY2sgPSBuZXcgRXJyb3IoKS5zdGFjaztcbiAgICAgICAgdGhyb3cgdHJhbnNmb3JtRXRoZXJFcnJvcihlLCB1bmRlZmluZWQsIHN0YWNrKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGFzeW5jIHJlZGVlbUludGVyZXN0QW5kUmV3YXJkc1Bvc3RFeHBpcnlGb3JUcmVhc3VyeShcbiAgICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlcyxcbiAgICAgIHByZXBhcmVkRGF0YT86IFByZXBhcmVkRGF0YSxcbiAgICAgIGV0aENhbGxDb250ZXh0PzogRXRoQ2FsbENvbnRleHQsXG4gICAgKTogUHJvbWlzZTxcbiAgICAgIFtiaWdpbnQsIGJpZ2ludFtdXSAmIHsgaW50ZXJlc3RPdXQ6IGJpZ2ludDsgcmV3YXJkc091dDogYmlnaW50W10gfVxuICAgID4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuY29udHJhY3RcbiAgICAgICAgICAuZ2V0RnVuY3Rpb24oXCJyZWRlZW1JbnRlcmVzdEFuZFJld2FyZHNQb3N0RXhwaXJ5Rm9yVHJlYXN1cnkoKVwiKVxuICAgICAgICAgIC5zdGF0aWNDYWxsKG92ZXJyaWRlcyB8fCB7fSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNvbnN0IHN0YWNrID0gbmV3IEVycm9yKCkuc3RhY2s7XG4gICAgICAgIHRocm93IHRyYW5zZm9ybUV0aGVyRXJyb3IoZSwgdW5kZWZpbmVkLCBzdGFjayk7XG4gICAgICB9XG4gICAgfSxcbiAgICBhc3luYyByZWRlZW1QWShcbiAgICAgIHJlY2VpdmVyOiBzdHJpbmcsXG4gICAgICBvdmVycmlkZXM/OiBPdmVycmlkZXMsXG4gICAgICBwcmVwYXJlZERhdGE/OiBQcmVwYXJlZERhdGEsXG4gICAgICBldGhDYWxsQ29udGV4dD86IEV0aENhbGxDb250ZXh0LFxuICAgICk6IFByb21pc2U8YmlnaW50PiB7XG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5jb250cmFjdFxuICAgICAgICAgIC5nZXRGdW5jdGlvbihcInJlZGVlbVBZKGFkZHJlc3MpXCIpXG4gICAgICAgICAgLnN0YXRpY0NhbGwocmVjZWl2ZXIsIG92ZXJyaWRlcyB8fCB7fSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNvbnN0IHN0YWNrID0gbmV3IEVycm9yKCkuc3RhY2s7XG4gICAgICAgIHRocm93IHRyYW5zZm9ybUV0aGVyRXJyb3IoZSwgdW5kZWZpbmVkLCBzdGFjayk7XG4gICAgICB9XG4gICAgfSxcbiAgICBhc3luYyByZWRlZW1QWU11bHRpKFxuICAgICAgcmVjZWl2ZXJzOiBzdHJpbmdbXSxcbiAgICAgIGFtb3VudFBZVG9SZWRlZW1zOiBCaWdOdW1iZXJpc2hbXSxcbiAgICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlcyxcbiAgICAgIHByZXBhcmVkRGF0YT86IFByZXBhcmVkRGF0YSxcbiAgICAgIGV0aENhbGxDb250ZXh0PzogRXRoQ2FsbENvbnRleHQsXG4gICAgKTogUHJvbWlzZTxiaWdpbnRbXT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuY29udHJhY3RcbiAgICAgICAgICAuZ2V0RnVuY3Rpb24oXCJyZWRlZW1QWU11bHRpKGFkZHJlc3NbXSx1aW50MjU2W10pXCIpXG4gICAgICAgICAgLnN0YXRpY0NhbGwocmVjZWl2ZXJzLCBhbW91bnRQWVRvUmVkZWVtcywgb3ZlcnJpZGVzIHx8IHt9KTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY29uc3Qgc3RhY2sgPSBuZXcgRXJyb3IoKS5zdGFjaztcbiAgICAgICAgdGhyb3cgdHJhbnNmb3JtRXRoZXJFcnJvcihlLCB1bmRlZmluZWQsIHN0YWNrKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGFzeW5jIHJld2FyZEluZGV4ZXNDdXJyZW50KFxuICAgICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzLFxuICAgICAgcHJlcGFyZWREYXRhPzogUHJlcGFyZWREYXRhLFxuICAgICAgZXRoQ2FsbENvbnRleHQ/OiBFdGhDYWxsQ29udGV4dCxcbiAgICApOiBQcm9taXNlPGJpZ2ludFtdPiB7XG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5jb250cmFjdFxuICAgICAgICAgIC5nZXRGdW5jdGlvbihcInJld2FyZEluZGV4ZXNDdXJyZW50KClcIilcbiAgICAgICAgICAuc3RhdGljQ2FsbChvdmVycmlkZXMgfHwge30pO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjb25zdCBzdGFjayA9IG5ldyBFcnJvcigpLnN0YWNrO1xuICAgICAgICB0aHJvdyB0cmFuc2Zvcm1FdGhlckVycm9yKGUsIHVuZGVmaW5lZCwgc3RhY2spO1xuICAgICAgfVxuICAgIH0sXG4gICAgYXN5bmMgc2V0UG9zdEV4cGlyeURhdGEoXG4gICAgICBvdmVycmlkZXM/OiBPdmVycmlkZXMsXG4gICAgICBwcmVwYXJlZERhdGE/OiBQcmVwYXJlZERhdGEsXG4gICAgICBldGhDYWxsQ29udGV4dD86IEV0aENhbGxDb250ZXh0LFxuICAgICk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuY29udHJhY3RcbiAgICAgICAgICAuZ2V0RnVuY3Rpb24oXCJzZXRQb3N0RXhwaXJ5RGF0YSgpXCIpXG4gICAgICAgICAgLnN0YXRpY0NhbGwob3ZlcnJpZGVzIHx8IHt9KTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY29uc3Qgc3RhY2sgPSBuZXcgRXJyb3IoKS5zdGFjaztcbiAgICAgICAgdGhyb3cgdHJhbnNmb3JtRXRoZXJFcnJvcihlLCB1bmRlZmluZWQsIHN0YWNrKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGFzeW5jIHRyYW5zZmVyKFxuICAgICAgdG86IHN0cmluZyxcbiAgICAgIGFtb3VudDogQmlnTnVtYmVyaXNoLFxuICAgICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzLFxuICAgICAgcHJlcGFyZWREYXRhPzogUHJlcGFyZWREYXRhLFxuICAgICAgZXRoQ2FsbENvbnRleHQ/OiBFdGhDYWxsQ29udGV4dCxcbiAgICApOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLmNvbnRyYWN0XG4gICAgICAgICAgLmdldEZ1bmN0aW9uKFwidHJhbnNmZXIoYWRkcmVzcyx1aW50MjU2KVwiKVxuICAgICAgICAgIC5zdGF0aWNDYWxsKHRvLCBhbW91bnQsIG92ZXJyaWRlcyB8fCB7fSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNvbnN0IHN0YWNrID0gbmV3IEVycm9yKCkuc3RhY2s7XG4gICAgICAgIHRocm93IHRyYW5zZm9ybUV0aGVyRXJyb3IoZSwgdW5kZWZpbmVkLCBzdGFjayk7XG4gICAgICB9XG4gICAgfSxcbiAgICBhc3luYyB0cmFuc2ZlckZyb20oXG4gICAgICBmcm9tOiBzdHJpbmcsXG4gICAgICB0bzogc3RyaW5nLFxuICAgICAgYW1vdW50OiBCaWdOdW1iZXJpc2gsXG4gICAgICBvdmVycmlkZXM/OiBPdmVycmlkZXMsXG4gICAgICBwcmVwYXJlZERhdGE/OiBQcmVwYXJlZERhdGEsXG4gICAgICBldGhDYWxsQ29udGV4dD86IEV0aENhbGxDb250ZXh0LFxuICAgICk6IFByb21pc2U8Ym9vbGVhbj4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuY29udHJhY3RcbiAgICAgICAgICAuZ2V0RnVuY3Rpb24oXCJ0cmFuc2ZlckZyb20oYWRkcmVzcyxhZGRyZXNzLHVpbnQyNTYpXCIpXG4gICAgICAgICAgLnN0YXRpY0NhbGwoZnJvbSwgdG8sIGFtb3VudCwgb3ZlcnJpZGVzIHx8IHt9KTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY29uc3Qgc3RhY2sgPSBuZXcgRXJyb3IoKS5zdGFjaztcbiAgICAgICAgdGhyb3cgdHJhbnNmb3JtRXRoZXJFcnJvcihlLCB1bmRlZmluZWQsIHN0YWNrKTtcbiAgICAgIH1cbiAgICB9LFxuICB9O1xuXG4gIGVuY29kZUNhbGwgPSB7XG4gICAgUFQoY2FsbENvbnRleHQ6IEV0aENhbGxDb250ZXh0KTogRXRoQ2FsbFBhcmFtIHtcbiAgICAgIHJldHVybiBlbmNvZGVDYWxsRGF0YShjYWxsQ29udGV4dCwgXCJQVFwiLCBcImZ1bmN0aW9uIFBUKClcIiwgW10pO1xuICAgIH0sXG4gICAgU1koY2FsbENvbnRleHQ6IEV0aENhbGxDb250ZXh0KTogRXRoQ2FsbFBhcmFtIHtcbiAgICAgIHJldHVybiBlbmNvZGVDYWxsRGF0YShjYWxsQ29udGV4dCwgXCJTWVwiLCBcImZ1bmN0aW9uIFNZKClcIiwgW10pO1xuICAgIH0sXG4gICAgYWxsb3dhbmNlKFxuICAgICAgb3duZXI6IHN0cmluZyxcbiAgICAgIHNwZW5kZXI6IHN0cmluZyxcbiAgICAgIGNhbGxDb250ZXh0OiBFdGhDYWxsQ29udGV4dCxcbiAgICApOiBFdGhDYWxsUGFyYW0ge1xuICAgICAgcmV0dXJuIGVuY29kZUNhbGxEYXRhKFxuICAgICAgICBjYWxsQ29udGV4dCxcbiAgICAgICAgXCJhbGxvd2FuY2VcIixcbiAgICAgICAgXCJmdW5jdGlvbiBhbGxvd2FuY2UoYWRkcmVzcyxhZGRyZXNzKVwiLFxuICAgICAgICBbb3duZXIsIHNwZW5kZXJdLFxuICAgICAgKTtcbiAgICB9LFxuICAgIGFwcHJvdmUoXG4gICAgICBzcGVuZGVyOiBzdHJpbmcsXG4gICAgICBhbW91bnQ6IEJpZ051bWJlcmlzaCxcbiAgICAgIGNhbGxDb250ZXh0OiBFdGhDYWxsQ29udGV4dCxcbiAgICApOiBFdGhDYWxsUGFyYW0ge1xuICAgICAgcmV0dXJuIGVuY29kZUNhbGxEYXRhKFxuICAgICAgICBjYWxsQ29udGV4dCxcbiAgICAgICAgXCJhcHByb3ZlXCIsXG4gICAgICAgIFwiZnVuY3Rpb24gYXBwcm92ZShhZGRyZXNzLHVpbnQyNTYpXCIsXG4gICAgICAgIFtzcGVuZGVyLCBhbW91bnRdLFxuICAgICAgKTtcbiAgICB9LFxuICAgIGJhbGFuY2VPZihhY2NvdW50OiBzdHJpbmcsIGNhbGxDb250ZXh0OiBFdGhDYWxsQ29udGV4dCk6IEV0aENhbGxQYXJhbSB7XG4gICAgICByZXR1cm4gZW5jb2RlQ2FsbERhdGEoXG4gICAgICAgIGNhbGxDb250ZXh0LFxuICAgICAgICBcImJhbGFuY2VPZlwiLFxuICAgICAgICBcImZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzKVwiLFxuICAgICAgICBbYWNjb3VudF0sXG4gICAgICApO1xuICAgIH0sXG4gICAgZGVjaW1hbHMoY2FsbENvbnRleHQ6IEV0aENhbGxDb250ZXh0KTogRXRoQ2FsbFBhcmFtIHtcbiAgICAgIHJldHVybiBlbmNvZGVDYWxsRGF0YShjYWxsQ29udGV4dCwgXCJkZWNpbWFsc1wiLCBcImZ1bmN0aW9uIGRlY2ltYWxzKClcIiwgW10pO1xuICAgIH0sXG4gICAgZG9DYWNoZUluZGV4U2FtZUJsb2NrKGNhbGxDb250ZXh0OiBFdGhDYWxsQ29udGV4dCk6IEV0aENhbGxQYXJhbSB7XG4gICAgICByZXR1cm4gZW5jb2RlQ2FsbERhdGEoXG4gICAgICAgIGNhbGxDb250ZXh0LFxuICAgICAgICBcImRvQ2FjaGVJbmRleFNhbWVCbG9ja1wiLFxuICAgICAgICBcImZ1bmN0aW9uIGRvQ2FjaGVJbmRleFNhbWVCbG9jaygpXCIsXG4gICAgICAgIFtdLFxuICAgICAgKTtcbiAgICB9LFxuICAgIGV4cGlyeShjYWxsQ29udGV4dDogRXRoQ2FsbENvbnRleHQpOiBFdGhDYWxsUGFyYW0ge1xuICAgICAgcmV0dXJuIGVuY29kZUNhbGxEYXRhKGNhbGxDb250ZXh0LCBcImV4cGlyeVwiLCBcImZ1bmN0aW9uIGV4cGlyeSgpXCIsIFtdKTtcbiAgICB9LFxuICAgIGZhY3RvcnkoY2FsbENvbnRleHQ6IEV0aENhbGxDb250ZXh0KTogRXRoQ2FsbFBhcmFtIHtcbiAgICAgIHJldHVybiBlbmNvZGVDYWxsRGF0YShjYWxsQ29udGV4dCwgXCJmYWN0b3J5XCIsIFwiZnVuY3Rpb24gZmFjdG9yeSgpXCIsIFtdKTtcbiAgICB9LFxuICAgIGdldFBvc3RFeHBpcnlEYXRhKGNhbGxDb250ZXh0OiBFdGhDYWxsQ29udGV4dCk6IEV0aENhbGxQYXJhbSB7XG4gICAgICByZXR1cm4gZW5jb2RlQ2FsbERhdGEoXG4gICAgICAgIGNhbGxDb250ZXh0LFxuICAgICAgICBcImdldFBvc3RFeHBpcnlEYXRhXCIsXG4gICAgICAgIFwiZnVuY3Rpb24gZ2V0UG9zdEV4cGlyeURhdGEoKVwiLFxuICAgICAgICBbXSxcbiAgICAgICk7XG4gICAgfSxcbiAgICBnZXRSZXdhcmRUb2tlbnMoY2FsbENvbnRleHQ6IEV0aENhbGxDb250ZXh0KTogRXRoQ2FsbFBhcmFtIHtcbiAgICAgIHJldHVybiBlbmNvZGVDYWxsRGF0YShcbiAgICAgICAgY2FsbENvbnRleHQsXG4gICAgICAgIFwiZ2V0UmV3YXJkVG9rZW5zXCIsXG4gICAgICAgIFwiZnVuY3Rpb24gZ2V0UmV3YXJkVG9rZW5zKClcIixcbiAgICAgICAgW10sXG4gICAgICApO1xuICAgIH0sXG4gICAgaXNFeHBpcmVkKGNhbGxDb250ZXh0OiBFdGhDYWxsQ29udGV4dCk6IEV0aENhbGxQYXJhbSB7XG4gICAgICByZXR1cm4gZW5jb2RlQ2FsbERhdGEoXG4gICAgICAgIGNhbGxDb250ZXh0LFxuICAgICAgICBcImlzRXhwaXJlZFwiLFxuICAgICAgICBcImZ1bmN0aW9uIGlzRXhwaXJlZCgpXCIsXG4gICAgICAgIFtdLFxuICAgICAgKTtcbiAgICB9LFxuICAgIG1pbnRQWShcbiAgICAgIHJlY2VpdmVyUFQ6IHN0cmluZyxcbiAgICAgIHJlY2VpdmVyWVQ6IHN0cmluZyxcbiAgICAgIGNhbGxDb250ZXh0OiBFdGhDYWxsQ29udGV4dCxcbiAgICApOiBFdGhDYWxsUGFyYW0ge1xuICAgICAgcmV0dXJuIGVuY29kZUNhbGxEYXRhKFxuICAgICAgICBjYWxsQ29udGV4dCxcbiAgICAgICAgXCJtaW50UFlcIixcbiAgICAgICAgXCJmdW5jdGlvbiBtaW50UFkoYWRkcmVzcyxhZGRyZXNzKVwiLFxuICAgICAgICBbcmVjZWl2ZXJQVCwgcmVjZWl2ZXJZVF0sXG4gICAgICApO1xuICAgIH0sXG4gICAgbWludFBZTXVsdGkoXG4gICAgICByZWNlaXZlclBUczogc3RyaW5nW10sXG4gICAgICByZWNlaXZlcllUczogc3RyaW5nW10sXG4gICAgICBhbW91bnRTeVRvTWludHM6IEJpZ051bWJlcmlzaFtdLFxuICAgICAgY2FsbENvbnRleHQ6IEV0aENhbGxDb250ZXh0LFxuICAgICk6IEV0aENhbGxQYXJhbSB7XG4gICAgICByZXR1cm4gZW5jb2RlQ2FsbERhdGEoXG4gICAgICAgIGNhbGxDb250ZXh0LFxuICAgICAgICBcIm1pbnRQWU11bHRpXCIsXG4gICAgICAgIFwiZnVuY3Rpb24gbWludFBZTXVsdGkoYWRkcmVzc1tdLGFkZHJlc3NbXSx1aW50MjU2W10pXCIsXG4gICAgICAgIFtyZWNlaXZlclBUcywgcmVjZWl2ZXJZVHMsIGFtb3VudFN5VG9NaW50c10sXG4gICAgICApO1xuICAgIH0sXG4gICAgbmFtZShjYWxsQ29udGV4dDogRXRoQ2FsbENvbnRleHQpOiBFdGhDYWxsUGFyYW0ge1xuICAgICAgcmV0dXJuIGVuY29kZUNhbGxEYXRhKGNhbGxDb250ZXh0LCBcIm5hbWVcIiwgXCJmdW5jdGlvbiBuYW1lKClcIiwgW10pO1xuICAgIH0sXG4gICAgcG9zdEV4cGlyeShjYWxsQ29udGV4dDogRXRoQ2FsbENvbnRleHQpOiBFdGhDYWxsUGFyYW0ge1xuICAgICAgcmV0dXJuIGVuY29kZUNhbGxEYXRhKFxuICAgICAgICBjYWxsQ29udGV4dCxcbiAgICAgICAgXCJwb3N0RXhwaXJ5XCIsXG4gICAgICAgIFwiZnVuY3Rpb24gcG9zdEV4cGlyeSgpXCIsXG4gICAgICAgIFtdLFxuICAgICAgKTtcbiAgICB9LFxuICAgIHB5SW5kZXhDdXJyZW50KGNhbGxDb250ZXh0OiBFdGhDYWxsQ29udGV4dCk6IEV0aENhbGxQYXJhbSB7XG4gICAgICByZXR1cm4gZW5jb2RlQ2FsbERhdGEoXG4gICAgICAgIGNhbGxDb250ZXh0LFxuICAgICAgICBcInB5SW5kZXhDdXJyZW50XCIsXG4gICAgICAgIFwiZnVuY3Rpb24gcHlJbmRleEN1cnJlbnQoKVwiLFxuICAgICAgICBbXSxcbiAgICAgICk7XG4gICAgfSxcbiAgICBweUluZGV4TGFzdFVwZGF0ZWRCbG9jayhjYWxsQ29udGV4dDogRXRoQ2FsbENvbnRleHQpOiBFdGhDYWxsUGFyYW0ge1xuICAgICAgcmV0dXJuIGVuY29kZUNhbGxEYXRhKFxuICAgICAgICBjYWxsQ29udGV4dCxcbiAgICAgICAgXCJweUluZGV4TGFzdFVwZGF0ZWRCbG9ja1wiLFxuICAgICAgICBcImZ1bmN0aW9uIHB5SW5kZXhMYXN0VXBkYXRlZEJsb2NrKClcIixcbiAgICAgICAgW10sXG4gICAgICApO1xuICAgIH0sXG4gICAgcHlJbmRleFN0b3JlZChjYWxsQ29udGV4dDogRXRoQ2FsbENvbnRleHQpOiBFdGhDYWxsUGFyYW0ge1xuICAgICAgcmV0dXJuIGVuY29kZUNhbGxEYXRhKFxuICAgICAgICBjYWxsQ29udGV4dCxcbiAgICAgICAgXCJweUluZGV4U3RvcmVkXCIsXG4gICAgICAgIFwiZnVuY3Rpb24gcHlJbmRleFN0b3JlZCgpXCIsXG4gICAgICAgIFtdLFxuICAgICAgKTtcbiAgICB9LFxuICAgIHJlZGVlbUR1ZUludGVyZXN0QW5kUmV3YXJkcyhcbiAgICAgIHVzZXI6IHN0cmluZyxcbiAgICAgIHJlZGVlbUludGVyZXN0OiBib29sZWFuLFxuICAgICAgcmVkZWVtUmV3YXJkczogYm9vbGVhbixcbiAgICAgIGNhbGxDb250ZXh0OiBFdGhDYWxsQ29udGV4dCxcbiAgICApOiBFdGhDYWxsUGFyYW0ge1xuICAgICAgcmV0dXJuIGVuY29kZUNhbGxEYXRhKFxuICAgICAgICBjYWxsQ29udGV4dCxcbiAgICAgICAgXCJyZWRlZW1EdWVJbnRlcmVzdEFuZFJld2FyZHNcIixcbiAgICAgICAgXCJmdW5jdGlvbiByZWRlZW1EdWVJbnRlcmVzdEFuZFJld2FyZHMoYWRkcmVzcyxib29sLGJvb2wpXCIsXG4gICAgICAgIFt1c2VyLCByZWRlZW1JbnRlcmVzdCwgcmVkZWVtUmV3YXJkc10sXG4gICAgICApO1xuICAgIH0sXG4gICAgcmVkZWVtSW50ZXJlc3RBbmRSZXdhcmRzUG9zdEV4cGlyeUZvclRyZWFzdXJ5KFxuICAgICAgY2FsbENvbnRleHQ6IEV0aENhbGxDb250ZXh0LFxuICAgICk6IEV0aENhbGxQYXJhbSB7XG4gICAgICByZXR1cm4gZW5jb2RlQ2FsbERhdGEoXG4gICAgICAgIGNhbGxDb250ZXh0LFxuICAgICAgICBcInJlZGVlbUludGVyZXN0QW5kUmV3YXJkc1Bvc3RFeHBpcnlGb3JUcmVhc3VyeVwiLFxuICAgICAgICBcImZ1bmN0aW9uIHJlZGVlbUludGVyZXN0QW5kUmV3YXJkc1Bvc3RFeHBpcnlGb3JUcmVhc3VyeSgpXCIsXG4gICAgICAgIFtdLFxuICAgICAgKTtcbiAgICB9LFxuICAgIHJlZGVlbVBZKHJlY2VpdmVyOiBzdHJpbmcsIGNhbGxDb250ZXh0OiBFdGhDYWxsQ29udGV4dCk6IEV0aENhbGxQYXJhbSB7XG4gICAgICByZXR1cm4gZW5jb2RlQ2FsbERhdGEoXG4gICAgICAgIGNhbGxDb250ZXh0LFxuICAgICAgICBcInJlZGVlbVBZXCIsXG4gICAgICAgIFwiZnVuY3Rpb24gcmVkZWVtUFkoYWRkcmVzcylcIixcbiAgICAgICAgW3JlY2VpdmVyXSxcbiAgICAgICk7XG4gICAgfSxcbiAgICByZWRlZW1QWU11bHRpKFxuICAgICAgcmVjZWl2ZXJzOiBzdHJpbmdbXSxcbiAgICAgIGFtb3VudFBZVG9SZWRlZW1zOiBCaWdOdW1iZXJpc2hbXSxcbiAgICAgIGNhbGxDb250ZXh0OiBFdGhDYWxsQ29udGV4dCxcbiAgICApOiBFdGhDYWxsUGFyYW0ge1xuICAgICAgcmV0dXJuIGVuY29kZUNhbGxEYXRhKFxuICAgICAgICBjYWxsQ29udGV4dCxcbiAgICAgICAgXCJyZWRlZW1QWU11bHRpXCIsXG4gICAgICAgIFwiZnVuY3Rpb24gcmVkZWVtUFlNdWx0aShhZGRyZXNzW10sdWludDI1NltdKVwiLFxuICAgICAgICBbcmVjZWl2ZXJzLCBhbW91bnRQWVRvUmVkZWVtc10sXG4gICAgICApO1xuICAgIH0sXG4gICAgcmV3YXJkSW5kZXhlc0N1cnJlbnQoY2FsbENvbnRleHQ6IEV0aENhbGxDb250ZXh0KTogRXRoQ2FsbFBhcmFtIHtcbiAgICAgIHJldHVybiBlbmNvZGVDYWxsRGF0YShcbiAgICAgICAgY2FsbENvbnRleHQsXG4gICAgICAgIFwicmV3YXJkSW5kZXhlc0N1cnJlbnRcIixcbiAgICAgICAgXCJmdW5jdGlvbiByZXdhcmRJbmRleGVzQ3VycmVudCgpXCIsXG4gICAgICAgIFtdLFxuICAgICAgKTtcbiAgICB9LFxuICAgIHNldFBvc3RFeHBpcnlEYXRhKGNhbGxDb250ZXh0OiBFdGhDYWxsQ29udGV4dCk6IEV0aENhbGxQYXJhbSB7XG4gICAgICByZXR1cm4gZW5jb2RlQ2FsbERhdGEoXG4gICAgICAgIGNhbGxDb250ZXh0LFxuICAgICAgICBcInNldFBvc3RFeHBpcnlEYXRhXCIsXG4gICAgICAgIFwiZnVuY3Rpb24gc2V0UG9zdEV4cGlyeURhdGEoKVwiLFxuICAgICAgICBbXSxcbiAgICAgICk7XG4gICAgfSxcbiAgICBzeVJlc2VydmUoY2FsbENvbnRleHQ6IEV0aENhbGxDb250ZXh0KTogRXRoQ2FsbFBhcmFtIHtcbiAgICAgIHJldHVybiBlbmNvZGVDYWxsRGF0YShcbiAgICAgICAgY2FsbENvbnRleHQsXG4gICAgICAgIFwic3lSZXNlcnZlXCIsXG4gICAgICAgIFwiZnVuY3Rpb24gc3lSZXNlcnZlKClcIixcbiAgICAgICAgW10sXG4gICAgICApO1xuICAgIH0sXG4gICAgc3ltYm9sKGNhbGxDb250ZXh0OiBFdGhDYWxsQ29udGV4dCk6IEV0aENhbGxQYXJhbSB7XG4gICAgICByZXR1cm4gZW5jb2RlQ2FsbERhdGEoY2FsbENvbnRleHQsIFwic3ltYm9sXCIsIFwiZnVuY3Rpb24gc3ltYm9sKClcIiwgW10pO1xuICAgIH0sXG4gICAgdG90YWxTdXBwbHkoY2FsbENvbnRleHQ6IEV0aENhbGxDb250ZXh0KTogRXRoQ2FsbFBhcmFtIHtcbiAgICAgIHJldHVybiBlbmNvZGVDYWxsRGF0YShcbiAgICAgICAgY2FsbENvbnRleHQsXG4gICAgICAgIFwidG90YWxTdXBwbHlcIixcbiAgICAgICAgXCJmdW5jdGlvbiB0b3RhbFN1cHBseSgpXCIsXG4gICAgICAgIFtdLFxuICAgICAgKTtcbiAgICB9LFxuICAgIHRyYW5zZmVyKFxuICAgICAgdG86IHN0cmluZyxcbiAgICAgIGFtb3VudDogQmlnTnVtYmVyaXNoLFxuICAgICAgY2FsbENvbnRleHQ6IEV0aENhbGxDb250ZXh0LFxuICAgICk6IEV0aENhbGxQYXJhbSB7XG4gICAgICByZXR1cm4gZW5jb2RlQ2FsbERhdGEoXG4gICAgICAgIGNhbGxDb250ZXh0LFxuICAgICAgICBcInRyYW5zZmVyXCIsXG4gICAgICAgIFwiZnVuY3Rpb24gdHJhbnNmZXIoYWRkcmVzcyx1aW50MjU2KVwiLFxuICAgICAgICBbdG8sIGFtb3VudF0sXG4gICAgICApO1xuICAgIH0sXG4gICAgdHJhbnNmZXJGcm9tKFxuICAgICAgZnJvbTogc3RyaW5nLFxuICAgICAgdG86IHN0cmluZyxcbiAgICAgIGFtb3VudDogQmlnTnVtYmVyaXNoLFxuICAgICAgY2FsbENvbnRleHQ6IEV0aENhbGxDb250ZXh0LFxuICAgICk6IEV0aENhbGxQYXJhbSB7XG4gICAgICByZXR1cm4gZW5jb2RlQ2FsbERhdGEoXG4gICAgICAgIGNhbGxDb250ZXh0LFxuICAgICAgICBcInRyYW5zZmVyRnJvbVwiLFxuICAgICAgICBcImZ1bmN0aW9uIHRyYW5zZmVyRnJvbShhZGRyZXNzLGFkZHJlc3MsdWludDI1NilcIixcbiAgICAgICAgW2Zyb20sIHRvLCBhbW91bnRdLFxuICAgICAgKTtcbiAgICB9LFxuICAgIHVzZXJJbnRlcmVzdChhcmcwOiBzdHJpbmcsIGNhbGxDb250ZXh0OiBFdGhDYWxsQ29udGV4dCk6IEV0aENhbGxQYXJhbSB7XG4gICAgICByZXR1cm4gZW5jb2RlQ2FsbERhdGEoXG4gICAgICAgIGNhbGxDb250ZXh0LFxuICAgICAgICBcInVzZXJJbnRlcmVzdFwiLFxuICAgICAgICBcImZ1bmN0aW9uIHVzZXJJbnRlcmVzdChhZGRyZXNzKVwiLFxuICAgICAgICBbYXJnMF0sXG4gICAgICApO1xuICAgIH0sXG4gICAgdXNlclJld2FyZChcbiAgICAgIGFyZzA6IHN0cmluZyxcbiAgICAgIGFyZzE6IHN0cmluZyxcbiAgICAgIGNhbGxDb250ZXh0OiBFdGhDYWxsQ29udGV4dCxcbiAgICApOiBFdGhDYWxsUGFyYW0ge1xuICAgICAgcmV0dXJuIGVuY29kZUNhbGxEYXRhKFxuICAgICAgICBjYWxsQ29udGV4dCxcbiAgICAgICAgXCJ1c2VyUmV3YXJkXCIsXG4gICAgICAgIFwiZnVuY3Rpb24gdXNlclJld2FyZChhZGRyZXNzLGFkZHJlc3MpXCIsXG4gICAgICAgIFthcmcwLCBhcmcxXSxcbiAgICAgICk7XG4gICAgfSxcbiAgfTtcbn1cblxuZXhwb3J0IGNsYXNzIFBlbmRsZVlpZWxkVG9rZW5Cb3VuZENvbnRyYWN0VmlldyBleHRlbmRzIEJvdW5kQ29udHJhY3RWaWV3PFxuICBQZW5kbGVZaWVsZFRva2VuLFxuICBQZW5kbGVZaWVsZFRva2VuQ29udHJhY3RWaWV3XG4+IHtcbiAgYXN5bmMgUFQob3ZlcnJpZGVzPzogT3ZlcnJpZGVzKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy52aWV3LlBUKFxuICAgICAge1xuICAgICAgICBibG9ja1RhZzogdGhpcy5jb250ZXh0LmJsb2NrTnVtYmVyLFxuICAgICAgICAuLi5vdmVycmlkZXMsXG4gICAgICB9LFxuICAgICAgdGhpcy5jb250ZXh0LnByZXBhcmVkRGF0YSxcbiAgICAgIHRoaXMuY29udGV4dC5nZXRFdGhDYWxsQ29udGV4dCgpLFxuICAgICk7XG4gIH1cblxuICBhc3luYyBTWShvdmVycmlkZXM/OiBPdmVycmlkZXMpOiBQcm9taXNlPHN0cmluZz4ge1xuICAgIHJldHVybiBhd2FpdCB0aGlzLnZpZXcuU1koXG4gICAgICB7XG4gICAgICAgIGJsb2NrVGFnOiB0aGlzLmNvbnRleHQuYmxvY2tOdW1iZXIsXG4gICAgICAgIC4uLm92ZXJyaWRlcyxcbiAgICAgIH0sXG4gICAgICB0aGlzLmNvbnRleHQucHJlcGFyZWREYXRhLFxuICAgICAgdGhpcy5jb250ZXh0LmdldEV0aENhbGxDb250ZXh0KCksXG4gICAgKTtcbiAgfVxuXG4gIGFzeW5jIGFsbG93YW5jZShcbiAgICBvd25lcjogc3RyaW5nLFxuICAgIHNwZW5kZXI6IHN0cmluZyxcbiAgICBvdmVycmlkZXM/OiBPdmVycmlkZXMsXG4gICk6IFByb21pc2U8YmlnaW50PiB7XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMudmlldy5hbGxvd2FuY2UoXG4gICAgICBvd25lcixcbiAgICAgIHNwZW5kZXIsXG4gICAgICB7XG4gICAgICAgIGJsb2NrVGFnOiB0aGlzLmNvbnRleHQuYmxvY2tOdW1iZXIsXG4gICAgICAgIC4uLm92ZXJyaWRlcyxcbiAgICAgIH0sXG4gICAgICB0aGlzLmNvbnRleHQucHJlcGFyZWREYXRhLFxuICAgICAgdGhpcy5jb250ZXh0LmdldEV0aENhbGxDb250ZXh0KCksXG4gICAgKTtcbiAgfVxuXG4gIGFzeW5jIGJhbGFuY2VPZihhY2NvdW50OiBzdHJpbmcsIG92ZXJyaWRlcz86IE92ZXJyaWRlcyk6IFByb21pc2U8YmlnaW50PiB7XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMudmlldy5iYWxhbmNlT2YoXG4gICAgICBhY2NvdW50LFxuICAgICAge1xuICAgICAgICBibG9ja1RhZzogdGhpcy5jb250ZXh0LmJsb2NrTnVtYmVyLFxuICAgICAgICAuLi5vdmVycmlkZXMsXG4gICAgICB9LFxuICAgICAgdGhpcy5jb250ZXh0LnByZXBhcmVkRGF0YSxcbiAgICAgIHRoaXMuY29udGV4dC5nZXRFdGhDYWxsQ29udGV4dCgpLFxuICAgICk7XG4gIH1cblxuICBhc3luYyBkZWNpbWFscyhvdmVycmlkZXM/OiBPdmVycmlkZXMpOiBQcm9taXNlPGJpZ2ludD4ge1xuICAgIHJldHVybiBhd2FpdCB0aGlzLnZpZXcuZGVjaW1hbHMoXG4gICAgICB7XG4gICAgICAgIGJsb2NrVGFnOiB0aGlzLmNvbnRleHQuYmxvY2tOdW1iZXIsXG4gICAgICAgIC4uLm92ZXJyaWRlcyxcbiAgICAgIH0sXG4gICAgICB0aGlzLmNvbnRleHQucHJlcGFyZWREYXRhLFxuICAgICAgdGhpcy5jb250ZXh0LmdldEV0aENhbGxDb250ZXh0KCksXG4gICAgKTtcbiAgfVxuXG4gIGFzeW5jIGRvQ2FjaGVJbmRleFNhbWVCbG9jayhvdmVycmlkZXM/OiBPdmVycmlkZXMpOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy52aWV3LmRvQ2FjaGVJbmRleFNhbWVCbG9jayhcbiAgICAgIHtcbiAgICAgICAgYmxvY2tUYWc6IHRoaXMuY29udGV4dC5ibG9ja051bWJlcixcbiAgICAgICAgLi4ub3ZlcnJpZGVzLFxuICAgICAgfSxcbiAgICAgIHRoaXMuY29udGV4dC5wcmVwYXJlZERhdGEsXG4gICAgICB0aGlzLmNvbnRleHQuZ2V0RXRoQ2FsbENvbnRleHQoKSxcbiAgICApO1xuICB9XG5cbiAgYXN5bmMgZXhwaXJ5KG92ZXJyaWRlcz86IE92ZXJyaWRlcyk6IFByb21pc2U8YmlnaW50PiB7XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMudmlldy5leHBpcnkoXG4gICAgICB7XG4gICAgICAgIGJsb2NrVGFnOiB0aGlzLmNvbnRleHQuYmxvY2tOdW1iZXIsXG4gICAgICAgIC4uLm92ZXJyaWRlcyxcbiAgICAgIH0sXG4gICAgICB0aGlzLmNvbnRleHQucHJlcGFyZWREYXRhLFxuICAgICAgdGhpcy5jb250ZXh0LmdldEV0aENhbGxDb250ZXh0KCksXG4gICAgKTtcbiAgfVxuXG4gIGFzeW5jIGZhY3Rvcnkob3ZlcnJpZGVzPzogT3ZlcnJpZGVzKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy52aWV3LmZhY3RvcnkoXG4gICAgICB7XG4gICAgICAgIGJsb2NrVGFnOiB0aGlzLmNvbnRleHQuYmxvY2tOdW1iZXIsXG4gICAgICAgIC4uLm92ZXJyaWRlcyxcbiAgICAgIH0sXG4gICAgICB0aGlzLmNvbnRleHQucHJlcGFyZWREYXRhLFxuICAgICAgdGhpcy5jb250ZXh0LmdldEV0aENhbGxDb250ZXh0KCksXG4gICAgKTtcbiAgfVxuXG4gIGFzeW5jIGdldFBvc3RFeHBpcnlEYXRhKFxuICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlcyxcbiAgKTogUHJvbWlzZTxcbiAgICBbYmlnaW50LCBiaWdpbnQsIGJpZ2ludFtdLCBiaWdpbnRbXV0gJiB7XG4gICAgICBmaXJzdFBZSW5kZXg6IGJpZ2ludDtcbiAgICAgIHRvdGFsU3lJbnRlcmVzdEZvclRyZWFzdXJ5OiBiaWdpbnQ7XG4gICAgICBmaXJzdFJld2FyZEluZGV4ZXM6IGJpZ2ludFtdO1xuICAgICAgdXNlclJld2FyZE93ZWQ6IGJpZ2ludFtdO1xuICAgIH1cbiAgPiB7XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMudmlldy5nZXRQb3N0RXhwaXJ5RGF0YShcbiAgICAgIHtcbiAgICAgICAgYmxvY2tUYWc6IHRoaXMuY29udGV4dC5ibG9ja051bWJlcixcbiAgICAgICAgLi4ub3ZlcnJpZGVzLFxuICAgICAgfSxcbiAgICAgIHRoaXMuY29udGV4dC5wcmVwYXJlZERhdGEsXG4gICAgICB0aGlzLmNvbnRleHQuZ2V0RXRoQ2FsbENvbnRleHQoKSxcbiAgICApO1xuICB9XG5cbiAgYXN5bmMgZ2V0UmV3YXJkVG9rZW5zKG92ZXJyaWRlcz86IE92ZXJyaWRlcyk6IFByb21pc2U8c3RyaW5nW10+IHtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy52aWV3LmdldFJld2FyZFRva2VucyhcbiAgICAgIHtcbiAgICAgICAgYmxvY2tUYWc6IHRoaXMuY29udGV4dC5ibG9ja051bWJlcixcbiAgICAgICAgLi4ub3ZlcnJpZGVzLFxuICAgICAgfSxcbiAgICAgIHRoaXMuY29udGV4dC5wcmVwYXJlZERhdGEsXG4gICAgICB0aGlzLmNvbnRleHQuZ2V0RXRoQ2FsbENvbnRleHQoKSxcbiAgICApO1xuICB9XG5cbiAgYXN5bmMgaXNFeHBpcmVkKG92ZXJyaWRlcz86IE92ZXJyaWRlcyk6IFByb21pc2U8Ym9vbGVhbj4ge1xuICAgIHJldHVybiBhd2FpdCB0aGlzLnZpZXcuaXNFeHBpcmVkKFxuICAgICAge1xuICAgICAgICBibG9ja1RhZzogdGhpcy5jb250ZXh0LmJsb2NrTnVtYmVyLFxuICAgICAgICAuLi5vdmVycmlkZXMsXG4gICAgICB9LFxuICAgICAgdGhpcy5jb250ZXh0LnByZXBhcmVkRGF0YSxcbiAgICAgIHRoaXMuY29udGV4dC5nZXRFdGhDYWxsQ29udGV4dCgpLFxuICAgICk7XG4gIH1cblxuICBhc3luYyBuYW1lKG92ZXJyaWRlcz86IE92ZXJyaWRlcyk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMudmlldy5uYW1lKFxuICAgICAge1xuICAgICAgICBibG9ja1RhZzogdGhpcy5jb250ZXh0LmJsb2NrTnVtYmVyLFxuICAgICAgICAuLi5vdmVycmlkZXMsXG4gICAgICB9LFxuICAgICAgdGhpcy5jb250ZXh0LnByZXBhcmVkRGF0YSxcbiAgICAgIHRoaXMuY29udGV4dC5nZXRFdGhDYWxsQ29udGV4dCgpLFxuICAgICk7XG4gIH1cblxuICBhc3luYyBwb3N0RXhwaXJ5KFxuICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlcyxcbiAgKTogUHJvbWlzZTxcbiAgICBbYmlnaW50LCBiaWdpbnRdICYge1xuICAgICAgZmlyc3RQWUluZGV4OiBiaWdpbnQ7XG4gICAgICB0b3RhbFN5SW50ZXJlc3RGb3JUcmVhc3VyeTogYmlnaW50O1xuICAgIH1cbiAgPiB7XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMudmlldy5wb3N0RXhwaXJ5KFxuICAgICAge1xuICAgICAgICBibG9ja1RhZzogdGhpcy5jb250ZXh0LmJsb2NrTnVtYmVyLFxuICAgICAgICAuLi5vdmVycmlkZXMsXG4gICAgICB9LFxuICAgICAgdGhpcy5jb250ZXh0LnByZXBhcmVkRGF0YSxcbiAgICAgIHRoaXMuY29udGV4dC5nZXRFdGhDYWxsQ29udGV4dCgpLFxuICAgICk7XG4gIH1cblxuICBhc3luYyBweUluZGV4TGFzdFVwZGF0ZWRCbG9jayhvdmVycmlkZXM/OiBPdmVycmlkZXMpOiBQcm9taXNlPGJpZ2ludD4ge1xuICAgIHJldHVybiBhd2FpdCB0aGlzLnZpZXcucHlJbmRleExhc3RVcGRhdGVkQmxvY2soXG4gICAgICB7XG4gICAgICAgIGJsb2NrVGFnOiB0aGlzLmNvbnRleHQuYmxvY2tOdW1iZXIsXG4gICAgICAgIC4uLm92ZXJyaWRlcyxcbiAgICAgIH0sXG4gICAgICB0aGlzLmNvbnRleHQucHJlcGFyZWREYXRhLFxuICAgICAgdGhpcy5jb250ZXh0LmdldEV0aENhbGxDb250ZXh0KCksXG4gICAgKTtcbiAgfVxuXG4gIGFzeW5jIHB5SW5kZXhTdG9yZWQob3ZlcnJpZGVzPzogT3ZlcnJpZGVzKTogUHJvbWlzZTxiaWdpbnQ+IHtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy52aWV3LnB5SW5kZXhTdG9yZWQoXG4gICAgICB7XG4gICAgICAgIGJsb2NrVGFnOiB0aGlzLmNvbnRleHQuYmxvY2tOdW1iZXIsXG4gICAgICAgIC4uLm92ZXJyaWRlcyxcbiAgICAgIH0sXG4gICAgICB0aGlzLmNvbnRleHQucHJlcGFyZWREYXRhLFxuICAgICAgdGhpcy5jb250ZXh0LmdldEV0aENhbGxDb250ZXh0KCksXG4gICAgKTtcbiAgfVxuXG4gIGFzeW5jIHN5UmVzZXJ2ZShvdmVycmlkZXM/OiBPdmVycmlkZXMpOiBQcm9taXNlPGJpZ2ludD4ge1xuICAgIHJldHVybiBhd2FpdCB0aGlzLnZpZXcuc3lSZXNlcnZlKFxuICAgICAge1xuICAgICAgICBibG9ja1RhZzogdGhpcy5jb250ZXh0LmJsb2NrTnVtYmVyLFxuICAgICAgICAuLi5vdmVycmlkZXMsXG4gICAgICB9LFxuICAgICAgdGhpcy5jb250ZXh0LnByZXBhcmVkRGF0YSxcbiAgICAgIHRoaXMuY29udGV4dC5nZXRFdGhDYWxsQ29udGV4dCgpLFxuICAgICk7XG4gIH1cblxuICBhc3luYyBzeW1ib2wob3ZlcnJpZGVzPzogT3ZlcnJpZGVzKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy52aWV3LnN5bWJvbChcbiAgICAgIHtcbiAgICAgICAgYmxvY2tUYWc6IHRoaXMuY29udGV4dC5ibG9ja051bWJlcixcbiAgICAgICAgLi4ub3ZlcnJpZGVzLFxuICAgICAgfSxcbiAgICAgIHRoaXMuY29udGV4dC5wcmVwYXJlZERhdGEsXG4gICAgICB0aGlzLmNvbnRleHQuZ2V0RXRoQ2FsbENvbnRleHQoKSxcbiAgICApO1xuICB9XG5cbiAgYXN5bmMgdG90YWxTdXBwbHkob3ZlcnJpZGVzPzogT3ZlcnJpZGVzKTogUHJvbWlzZTxiaWdpbnQ+IHtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy52aWV3LnRvdGFsU3VwcGx5KFxuICAgICAge1xuICAgICAgICBibG9ja1RhZzogdGhpcy5jb250ZXh0LmJsb2NrTnVtYmVyLFxuICAgICAgICAuLi5vdmVycmlkZXMsXG4gICAgICB9LFxuICAgICAgdGhpcy5jb250ZXh0LnByZXBhcmVkRGF0YSxcbiAgICAgIHRoaXMuY29udGV4dC5nZXRFdGhDYWxsQ29udGV4dCgpLFxuICAgICk7XG4gIH1cblxuICBhc3luYyB1c2VySW50ZXJlc3QoXG4gICAgYXJnMDogc3RyaW5nLFxuICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlcyxcbiAgKTogUHJvbWlzZTxbYmlnaW50LCBiaWdpbnRdICYgeyBpbmRleDogYmlnaW50OyBhY2NydWVkOiBiaWdpbnQgfT4ge1xuICAgIHJldHVybiBhd2FpdCB0aGlzLnZpZXcudXNlckludGVyZXN0KFxuICAgICAgYXJnMCxcbiAgICAgIHtcbiAgICAgICAgYmxvY2tUYWc6IHRoaXMuY29udGV4dC5ibG9ja051bWJlcixcbiAgICAgICAgLi4ub3ZlcnJpZGVzLFxuICAgICAgfSxcbiAgICAgIHRoaXMuY29udGV4dC5wcmVwYXJlZERhdGEsXG4gICAgICB0aGlzLmNvbnRleHQuZ2V0RXRoQ2FsbENvbnRleHQoKSxcbiAgICApO1xuICB9XG5cbiAgYXN5bmMgdXNlclJld2FyZChcbiAgICBhcmcwOiBzdHJpbmcsXG4gICAgYXJnMTogc3RyaW5nLFxuICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlcyxcbiAgKTogUHJvbWlzZTxbYmlnaW50LCBiaWdpbnRdICYgeyBpbmRleDogYmlnaW50OyBhY2NydWVkOiBiaWdpbnQgfT4ge1xuICAgIHJldHVybiBhd2FpdCB0aGlzLnZpZXcudXNlclJld2FyZChcbiAgICAgIGFyZzAsXG4gICAgICBhcmcxLFxuICAgICAge1xuICAgICAgICBibG9ja1RhZzogdGhpcy5jb250ZXh0LmJsb2NrTnVtYmVyLFxuICAgICAgICAuLi5vdmVycmlkZXMsXG4gICAgICB9LFxuICAgICAgdGhpcy5jb250ZXh0LnByZXBhcmVkRGF0YSxcbiAgICAgIHRoaXMuY29udGV4dC5nZXRFdGhDYWxsQ29udGV4dCgpLFxuICAgICk7XG4gIH1cblxuICBjYWxsU3RhdGljID0ge1xuICAgIHZpZXc6IHRoaXMudmlldyxcbiAgICBjb250ZXh0OiB0aGlzLmNvbnRleHQsXG5cbiAgICBhc3luYyBhcHByb3ZlKFxuICAgICAgc3BlbmRlcjogc3RyaW5nLFxuICAgICAgYW1vdW50OiBCaWdOdW1iZXJpc2gsXG4gICAgICBvdmVycmlkZXM/OiBPdmVycmlkZXMsXG4gICAgKTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgICByZXR1cm4gYXdhaXQgdGhpcy52aWV3LmNhbGxTdGF0aWMuYXBwcm92ZShcbiAgICAgICAgc3BlbmRlcixcbiAgICAgICAgYW1vdW50LFxuICAgICAgICB7XG4gICAgICAgICAgYmxvY2tUYWc6IHRoaXMuY29udGV4dC5ibG9ja051bWJlcixcbiAgICAgICAgICAuLi5vdmVycmlkZXMsXG4gICAgICAgIH0sXG4gICAgICAgIHRoaXMuY29udGV4dC5wcmVwYXJlZERhdGEsXG4gICAgICAgIHRoaXMuY29udGV4dC5nZXRFdGhDYWxsQ29udGV4dCgpLFxuICAgICAgKTtcbiAgICB9LFxuICAgIGFzeW5jIG1pbnRQWShcbiAgICAgIHJlY2VpdmVyUFQ6IHN0cmluZyxcbiAgICAgIHJlY2VpdmVyWVQ6IHN0cmluZyxcbiAgICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlcyxcbiAgICApOiBQcm9taXNlPGJpZ2ludD4ge1xuICAgICAgcmV0dXJuIGF3YWl0IHRoaXMudmlldy5jYWxsU3RhdGljLm1pbnRQWShcbiAgICAgICAgcmVjZWl2ZXJQVCxcbiAgICAgICAgcmVjZWl2ZXJZVCxcbiAgICAgICAge1xuICAgICAgICAgIGJsb2NrVGFnOiB0aGlzLmNvbnRleHQuYmxvY2tOdW1iZXIsXG4gICAgICAgICAgLi4ub3ZlcnJpZGVzLFxuICAgICAgICB9LFxuICAgICAgICB0aGlzLmNvbnRleHQucHJlcGFyZWREYXRhLFxuICAgICAgICB0aGlzLmNvbnRleHQuZ2V0RXRoQ2FsbENvbnRleHQoKSxcbiAgICAgICk7XG4gICAgfSxcbiAgICBhc3luYyBtaW50UFlNdWx0aShcbiAgICAgIHJlY2VpdmVyUFRzOiBzdHJpbmdbXSxcbiAgICAgIHJlY2VpdmVyWVRzOiBzdHJpbmdbXSxcbiAgICAgIGFtb3VudFN5VG9NaW50czogQmlnTnVtYmVyaXNoW10sXG4gICAgICBvdmVycmlkZXM/OiBPdmVycmlkZXMsXG4gICAgKTogUHJvbWlzZTxiaWdpbnRbXT4ge1xuICAgICAgcmV0dXJuIGF3YWl0IHRoaXMudmlldy5jYWxsU3RhdGljLm1pbnRQWU11bHRpKFxuICAgICAgICByZWNlaXZlclBUcyxcbiAgICAgICAgcmVjZWl2ZXJZVHMsXG4gICAgICAgIGFtb3VudFN5VG9NaW50cyxcbiAgICAgICAge1xuICAgICAgICAgIGJsb2NrVGFnOiB0aGlzLmNvbnRleHQuYmxvY2tOdW1iZXIsXG4gICAgICAgICAgLi4ub3ZlcnJpZGVzLFxuICAgICAgICB9LFxuICAgICAgICB0aGlzLmNvbnRleHQucHJlcGFyZWREYXRhLFxuICAgICAgICB0aGlzLmNvbnRleHQuZ2V0RXRoQ2FsbENvbnRleHQoKSxcbiAgICAgICk7XG4gICAgfSxcbiAgICBhc3luYyBweUluZGV4Q3VycmVudChvdmVycmlkZXM/OiBPdmVycmlkZXMpOiBQcm9taXNlPGJpZ2ludD4ge1xuICAgICAgcmV0dXJuIGF3YWl0IHRoaXMudmlldy5jYWxsU3RhdGljLnB5SW5kZXhDdXJyZW50KFxuICAgICAgICB7XG4gICAgICAgICAgYmxvY2tUYWc6IHRoaXMuY29udGV4dC5ibG9ja051bWJlcixcbiAgICAgICAgICAuLi5vdmVycmlkZXMsXG4gICAgICAgIH0sXG4gICAgICAgIHRoaXMuY29udGV4dC5wcmVwYXJlZERhdGEsXG4gICAgICAgIHRoaXMuY29udGV4dC5nZXRFdGhDYWxsQ29udGV4dCgpLFxuICAgICAgKTtcbiAgICB9LFxuICAgIGFzeW5jIHJlZGVlbUR1ZUludGVyZXN0QW5kUmV3YXJkcyhcbiAgICAgIHVzZXI6IHN0cmluZyxcbiAgICAgIHJlZGVlbUludGVyZXN0OiBib29sZWFuLFxuICAgICAgcmVkZWVtUmV3YXJkczogYm9vbGVhbixcbiAgICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlcyxcbiAgICApOiBQcm9taXNlPFxuICAgICAgW2JpZ2ludCwgYmlnaW50W11dICYgeyBpbnRlcmVzdE91dDogYmlnaW50OyByZXdhcmRzT3V0OiBiaWdpbnRbXSB9XG4gICAgPiB7XG4gICAgICByZXR1cm4gYXdhaXQgdGhpcy52aWV3LmNhbGxTdGF0aWMucmVkZWVtRHVlSW50ZXJlc3RBbmRSZXdhcmRzKFxuICAgICAgICB1c2VyLFxuICAgICAgICByZWRlZW1JbnRlcmVzdCxcbiAgICAgICAgcmVkZWVtUmV3YXJkcyxcbiAgICAgICAge1xuICAgICAgICAgIGJsb2NrVGFnOiB0aGlzLmNvbnRleHQuYmxvY2tOdW1iZXIsXG4gICAgICAgICAgLi4ub3ZlcnJpZGVzLFxuICAgICAgICB9LFxuICAgICAgICB0aGlzLmNvbnRleHQucHJlcGFyZWREYXRhLFxuICAgICAgICB0aGlzLmNvbnRleHQuZ2V0RXRoQ2FsbENvbnRleHQoKSxcbiAgICAgICk7XG4gICAgfSxcbiAgICBhc3luYyByZWRlZW1JbnRlcmVzdEFuZFJld2FyZHNQb3N0RXhwaXJ5Rm9yVHJlYXN1cnkoXG4gICAgICBvdmVycmlkZXM/OiBPdmVycmlkZXMsXG4gICAgKTogUHJvbWlzZTxcbiAgICAgIFtiaWdpbnQsIGJpZ2ludFtdXSAmIHsgaW50ZXJlc3RPdXQ6IGJpZ2ludDsgcmV3YXJkc091dDogYmlnaW50W10gfVxuICAgID4ge1xuICAgICAgcmV0dXJuIGF3YWl0IHRoaXMudmlldy5jYWxsU3RhdGljLnJlZGVlbUludGVyZXN0QW5kUmV3YXJkc1Bvc3RFeHBpcnlGb3JUcmVhc3VyeShcbiAgICAgICAge1xuICAgICAgICAgIGJsb2NrVGFnOiB0aGlzLmNvbnRleHQuYmxvY2tOdW1iZXIsXG4gICAgICAgICAgLi4ub3ZlcnJpZGVzLFxuICAgICAgICB9LFxuICAgICAgICB0aGlzLmNvbnRleHQucHJlcGFyZWREYXRhLFxuICAgICAgICB0aGlzLmNvbnRleHQuZ2V0RXRoQ2FsbENvbnRleHQoKSxcbiAgICAgICk7XG4gICAgfSxcbiAgICBhc3luYyByZWRlZW1QWShyZWNlaXZlcjogc3RyaW5nLCBvdmVycmlkZXM/OiBPdmVycmlkZXMpOiBQcm9taXNlPGJpZ2ludD4ge1xuICAgICAgcmV0dXJuIGF3YWl0IHRoaXMudmlldy5jYWxsU3RhdGljLnJlZGVlbVBZKFxuICAgICAgICByZWNlaXZlcixcbiAgICAgICAge1xuICAgICAgICAgIGJsb2NrVGFnOiB0aGlzLmNvbnRleHQuYmxvY2tOdW1iZXIsXG4gICAgICAgICAgLi4ub3ZlcnJpZGVzLFxuICAgICAgICB9LFxuICAgICAgICB0aGlzLmNvbnRleHQucHJlcGFyZWREYXRhLFxuICAgICAgICB0aGlzLmNvbnRleHQuZ2V0RXRoQ2FsbENvbnRleHQoKSxcbiAgICAgICk7XG4gICAgfSxcbiAgICBhc3luYyByZWRlZW1QWU11bHRpKFxuICAgICAgcmVjZWl2ZXJzOiBzdHJpbmdbXSxcbiAgICAgIGFtb3VudFBZVG9SZWRlZW1zOiBCaWdOdW1iZXJpc2hbXSxcbiAgICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlcyxcbiAgICApOiBQcm9taXNlPGJpZ2ludFtdPiB7XG4gICAgICByZXR1cm4gYXdhaXQgdGhpcy52aWV3LmNhbGxTdGF0aWMucmVkZWVtUFlNdWx0aShcbiAgICAgICAgcmVjZWl2ZXJzLFxuICAgICAgICBhbW91bnRQWVRvUmVkZWVtcyxcbiAgICAgICAge1xuICAgICAgICAgIGJsb2NrVGFnOiB0aGlzLmNvbnRleHQuYmxvY2tOdW1iZXIsXG4gICAgICAgICAgLi4ub3ZlcnJpZGVzLFxuICAgICAgICB9LFxuICAgICAgICB0aGlzLmNvbnRleHQucHJlcGFyZWREYXRhLFxuICAgICAgICB0aGlzLmNvbnRleHQuZ2V0RXRoQ2FsbENvbnRleHQoKSxcbiAgICAgICk7XG4gICAgfSxcbiAgICBhc3luYyByZXdhcmRJbmRleGVzQ3VycmVudChvdmVycmlkZXM/OiBPdmVycmlkZXMpOiBQcm9taXNlPGJpZ2ludFtdPiB7XG4gICAgICByZXR1cm4gYXdhaXQgdGhpcy52aWV3LmNhbGxTdGF0aWMucmV3YXJkSW5kZXhlc0N1cnJlbnQoXG4gICAgICAgIHtcbiAgICAgICAgICBibG9ja1RhZzogdGhpcy5jb250ZXh0LmJsb2NrTnVtYmVyLFxuICAgICAgICAgIC4uLm92ZXJyaWRlcyxcbiAgICAgICAgfSxcbiAgICAgICAgdGhpcy5jb250ZXh0LnByZXBhcmVkRGF0YSxcbiAgICAgICAgdGhpcy5jb250ZXh0LmdldEV0aENhbGxDb250ZXh0KCksXG4gICAgICApO1xuICAgIH0sXG4gICAgYXN5bmMgc2V0UG9zdEV4cGlyeURhdGEob3ZlcnJpZGVzPzogT3ZlcnJpZGVzKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICByZXR1cm4gYXdhaXQgdGhpcy52aWV3LmNhbGxTdGF0aWMuc2V0UG9zdEV4cGlyeURhdGEoXG4gICAgICAgIHtcbiAgICAgICAgICBibG9ja1RhZzogdGhpcy5jb250ZXh0LmJsb2NrTnVtYmVyLFxuICAgICAgICAgIC4uLm92ZXJyaWRlcyxcbiAgICAgICAgfSxcbiAgICAgICAgdGhpcy5jb250ZXh0LnByZXBhcmVkRGF0YSxcbiAgICAgICAgdGhpcy5jb250ZXh0LmdldEV0aENhbGxDb250ZXh0KCksXG4gICAgICApO1xuICAgIH0sXG4gICAgYXN5bmMgdHJhbnNmZXIoXG4gICAgICB0bzogc3RyaW5nLFxuICAgICAgYW1vdW50OiBCaWdOdW1iZXJpc2gsXG4gICAgICBvdmVycmlkZXM/OiBPdmVycmlkZXMsXG4gICAgKTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgICByZXR1cm4gYXdhaXQgdGhpcy52aWV3LmNhbGxTdGF0aWMudHJhbnNmZXIoXG4gICAgICAgIHRvLFxuICAgICAgICBhbW91bnQsXG4gICAgICAgIHtcbiAgICAgICAgICBibG9ja1RhZzogdGhpcy5jb250ZXh0LmJsb2NrTnVtYmVyLFxuICAgICAgICAgIC4uLm92ZXJyaWRlcyxcbiAgICAgICAgfSxcbiAgICAgICAgdGhpcy5jb250ZXh0LnByZXBhcmVkRGF0YSxcbiAgICAgICAgdGhpcy5jb250ZXh0LmdldEV0aENhbGxDb250ZXh0KCksXG4gICAgICApO1xuICAgIH0sXG4gICAgYXN5bmMgdHJhbnNmZXJGcm9tKFxuICAgICAgZnJvbTogc3RyaW5nLFxuICAgICAgdG86IHN0cmluZyxcbiAgICAgIGFtb3VudDogQmlnTnVtYmVyaXNoLFxuICAgICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzLFxuICAgICk6IFByb21pc2U8Ym9vbGVhbj4ge1xuICAgICAgcmV0dXJuIGF3YWl0IHRoaXMudmlldy5jYWxsU3RhdGljLnRyYW5zZmVyRnJvbShcbiAgICAgICAgZnJvbSxcbiAgICAgICAgdG8sXG4gICAgICAgIGFtb3VudCxcbiAgICAgICAge1xuICAgICAgICAgIGJsb2NrVGFnOiB0aGlzLmNvbnRleHQuYmxvY2tOdW1iZXIsXG4gICAgICAgICAgLi4ub3ZlcnJpZGVzLFxuICAgICAgICB9LFxuICAgICAgICB0aGlzLmNvbnRleHQucHJlcGFyZWREYXRhLFxuICAgICAgICB0aGlzLmNvbnRleHQuZ2V0RXRoQ2FsbENvbnRleHQoKSxcbiAgICAgICk7XG4gICAgfSxcbiAgfTtcblxuICBlbmNvZGVDYWxsID0ge1xuICAgIHZpZXc6IHRoaXMudmlldyxcbiAgICBjb250ZXh0OiB0aGlzLmNvbnRleHQsXG5cbiAgICBQVChvdmVycmlkZXM/OiBPdmVycmlkZXMpOiBFdGhDYWxsUGFyYW0ge1xuICAgICAgcmV0dXJuIHRoaXMudmlldy5lbmNvZGVDYWxsLlBUKHtcbiAgICAgICAgY2hhaW5JZDogdGhpcy5jb250ZXh0LmNoYWluSWQudG9TdHJpbmcoKSxcbiAgICAgICAgYWRkcmVzczogdGhpcy5jb250ZXh0LmFkZHJlc3MsXG4gICAgICAgIGJsb2NrVGFnOiB0aGlzLmNvbnRleHQuZ2V0QmxvY2tUYWcob3ZlcnJpZGVzKSxcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgU1kob3ZlcnJpZGVzPzogT3ZlcnJpZGVzKTogRXRoQ2FsbFBhcmFtIHtcbiAgICAgIHJldHVybiB0aGlzLnZpZXcuZW5jb2RlQ2FsbC5TWSh7XG4gICAgICAgIGNoYWluSWQ6IHRoaXMuY29udGV4dC5jaGFpbklkLnRvU3RyaW5nKCksXG4gICAgICAgIGFkZHJlc3M6IHRoaXMuY29udGV4dC5hZGRyZXNzLFxuICAgICAgICBibG9ja1RhZzogdGhpcy5jb250ZXh0LmdldEJsb2NrVGFnKG92ZXJyaWRlcyksXG4gICAgICB9KTtcbiAgICB9LFxuICAgIGFsbG93YW5jZShcbiAgICAgIG93bmVyOiBzdHJpbmcsXG4gICAgICBzcGVuZGVyOiBzdHJpbmcsXG4gICAgICBvdmVycmlkZXM/OiBPdmVycmlkZXMsXG4gICAgKTogRXRoQ2FsbFBhcmFtIHtcbiAgICAgIHJldHVybiB0aGlzLnZpZXcuZW5jb2RlQ2FsbC5hbGxvd2FuY2Uob3duZXIsIHNwZW5kZXIsIHtcbiAgICAgICAgY2hhaW5JZDogdGhpcy5jb250ZXh0LmNoYWluSWQudG9TdHJpbmcoKSxcbiAgICAgICAgYWRkcmVzczogdGhpcy5jb250ZXh0LmFkZHJlc3MsXG4gICAgICAgIGJsb2NrVGFnOiB0aGlzLmNvbnRleHQuZ2V0QmxvY2tUYWcob3ZlcnJpZGVzKSxcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgYXBwcm92ZShcbiAgICAgIHNwZW5kZXI6IHN0cmluZyxcbiAgICAgIGFtb3VudDogQmlnTnVtYmVyaXNoLFxuICAgICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzLFxuICAgICk6IEV0aENhbGxQYXJhbSB7XG4gICAgICByZXR1cm4gdGhpcy52aWV3LmVuY29kZUNhbGwuYXBwcm92ZShzcGVuZGVyLCBhbW91bnQsIHtcbiAgICAgICAgY2hhaW5JZDogdGhpcy5jb250ZXh0LmNoYWluSWQudG9TdHJpbmcoKSxcbiAgICAgICAgYWRkcmVzczogdGhpcy5jb250ZXh0LmFkZHJlc3MsXG4gICAgICAgIGJsb2NrVGFnOiB0aGlzLmNvbnRleHQuZ2V0QmxvY2tUYWcob3ZlcnJpZGVzKSxcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgYmFsYW5jZU9mKGFjY291bnQ6IHN0cmluZywgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzKTogRXRoQ2FsbFBhcmFtIHtcbiAgICAgIHJldHVybiB0aGlzLnZpZXcuZW5jb2RlQ2FsbC5iYWxhbmNlT2YoYWNjb3VudCwge1xuICAgICAgICBjaGFpbklkOiB0aGlzLmNvbnRleHQuY2hhaW5JZC50b1N0cmluZygpLFxuICAgICAgICBhZGRyZXNzOiB0aGlzLmNvbnRleHQuYWRkcmVzcyxcbiAgICAgICAgYmxvY2tUYWc6IHRoaXMuY29udGV4dC5nZXRCbG9ja1RhZyhvdmVycmlkZXMpLFxuICAgICAgfSk7XG4gICAgfSxcbiAgICBkZWNpbWFscyhvdmVycmlkZXM/OiBPdmVycmlkZXMpOiBFdGhDYWxsUGFyYW0ge1xuICAgICAgcmV0dXJuIHRoaXMudmlldy5lbmNvZGVDYWxsLmRlY2ltYWxzKHtcbiAgICAgICAgY2hhaW5JZDogdGhpcy5jb250ZXh0LmNoYWluSWQudG9TdHJpbmcoKSxcbiAgICAgICAgYWRkcmVzczogdGhpcy5jb250ZXh0LmFkZHJlc3MsXG4gICAgICAgIGJsb2NrVGFnOiB0aGlzLmNvbnRleHQuZ2V0QmxvY2tUYWcob3ZlcnJpZGVzKSxcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgZG9DYWNoZUluZGV4U2FtZUJsb2NrKG92ZXJyaWRlcz86IE92ZXJyaWRlcyk6IEV0aENhbGxQYXJhbSB7XG4gICAgICByZXR1cm4gdGhpcy52aWV3LmVuY29kZUNhbGwuZG9DYWNoZUluZGV4U2FtZUJsb2NrKHtcbiAgICAgICAgY2hhaW5JZDogdGhpcy5jb250ZXh0LmNoYWluSWQudG9TdHJpbmcoKSxcbiAgICAgICAgYWRkcmVzczogdGhpcy5jb250ZXh0LmFkZHJlc3MsXG4gICAgICAgIGJsb2NrVGFnOiB0aGlzLmNvbnRleHQuZ2V0QmxvY2tUYWcob3ZlcnJpZGVzKSxcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgZXhwaXJ5KG92ZXJyaWRlcz86IE92ZXJyaWRlcyk6IEV0aENhbGxQYXJhbSB7XG4gICAgICByZXR1cm4gdGhpcy52aWV3LmVuY29kZUNhbGwuZXhwaXJ5KHtcbiAgICAgICAgY2hhaW5JZDogdGhpcy5jb250ZXh0LmNoYWluSWQudG9TdHJpbmcoKSxcbiAgICAgICAgYWRkcmVzczogdGhpcy5jb250ZXh0LmFkZHJlc3MsXG4gICAgICAgIGJsb2NrVGFnOiB0aGlzLmNvbnRleHQuZ2V0QmxvY2tUYWcob3ZlcnJpZGVzKSxcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgZmFjdG9yeShvdmVycmlkZXM/OiBPdmVycmlkZXMpOiBFdGhDYWxsUGFyYW0ge1xuICAgICAgcmV0dXJuIHRoaXMudmlldy5lbmNvZGVDYWxsLmZhY3Rvcnkoe1xuICAgICAgICBjaGFpbklkOiB0aGlzLmNvbnRleHQuY2hhaW5JZC50b1N0cmluZygpLFxuICAgICAgICBhZGRyZXNzOiB0aGlzLmNvbnRleHQuYWRkcmVzcyxcbiAgICAgICAgYmxvY2tUYWc6IHRoaXMuY29udGV4dC5nZXRCbG9ja1RhZyhvdmVycmlkZXMpLFxuICAgICAgfSk7XG4gICAgfSxcbiAgICBnZXRQb3N0RXhwaXJ5RGF0YShvdmVycmlkZXM/OiBPdmVycmlkZXMpOiBFdGhDYWxsUGFyYW0ge1xuICAgICAgcmV0dXJuIHRoaXMudmlldy5lbmNvZGVDYWxsLmdldFBvc3RFeHBpcnlEYXRhKHtcbiAgICAgICAgY2hhaW5JZDogdGhpcy5jb250ZXh0LmNoYWluSWQudG9TdHJpbmcoKSxcbiAgICAgICAgYWRkcmVzczogdGhpcy5jb250ZXh0LmFkZHJlc3MsXG4gICAgICAgIGJsb2NrVGFnOiB0aGlzLmNvbnRleHQuZ2V0QmxvY2tUYWcob3ZlcnJpZGVzKSxcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgZ2V0UmV3YXJkVG9rZW5zKG92ZXJyaWRlcz86IE92ZXJyaWRlcyk6IEV0aENhbGxQYXJhbSB7XG4gICAgICByZXR1cm4gdGhpcy52aWV3LmVuY29kZUNhbGwuZ2V0UmV3YXJkVG9rZW5zKHtcbiAgICAgICAgY2hhaW5JZDogdGhpcy5jb250ZXh0LmNoYWluSWQudG9TdHJpbmcoKSxcbiAgICAgICAgYWRkcmVzczogdGhpcy5jb250ZXh0LmFkZHJlc3MsXG4gICAgICAgIGJsb2NrVGFnOiB0aGlzLmNvbnRleHQuZ2V0QmxvY2tUYWcob3ZlcnJpZGVzKSxcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgaXNFeHBpcmVkKG92ZXJyaWRlcz86IE92ZXJyaWRlcyk6IEV0aENhbGxQYXJhbSB7XG4gICAgICByZXR1cm4gdGhpcy52aWV3LmVuY29kZUNhbGwuaXNFeHBpcmVkKHtcbiAgICAgICAgY2hhaW5JZDogdGhpcy5jb250ZXh0LmNoYWluSWQudG9TdHJpbmcoKSxcbiAgICAgICAgYWRkcmVzczogdGhpcy5jb250ZXh0LmFkZHJlc3MsXG4gICAgICAgIGJsb2NrVGFnOiB0aGlzLmNvbnRleHQuZ2V0QmxvY2tUYWcob3ZlcnJpZGVzKSxcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgbWludFBZKFxuICAgICAgcmVjZWl2ZXJQVDogc3RyaW5nLFxuICAgICAgcmVjZWl2ZXJZVDogc3RyaW5nLFxuICAgICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzLFxuICAgICk6IEV0aENhbGxQYXJhbSB7XG4gICAgICByZXR1cm4gdGhpcy52aWV3LmVuY29kZUNhbGwubWludFBZKHJlY2VpdmVyUFQsIHJlY2VpdmVyWVQsIHtcbiAgICAgICAgY2hhaW5JZDogdGhpcy5jb250ZXh0LmNoYWluSWQudG9TdHJpbmcoKSxcbiAgICAgICAgYWRkcmVzczogdGhpcy5jb250ZXh0LmFkZHJlc3MsXG4gICAgICAgIGJsb2NrVGFnOiB0aGlzLmNvbnRleHQuZ2V0QmxvY2tUYWcob3ZlcnJpZGVzKSxcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgbWludFBZTXVsdGkoXG4gICAgICByZWNlaXZlclBUczogc3RyaW5nW10sXG4gICAgICByZWNlaXZlcllUczogc3RyaW5nW10sXG4gICAgICBhbW91bnRTeVRvTWludHM6IEJpZ051bWJlcmlzaFtdLFxuICAgICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzLFxuICAgICk6IEV0aENhbGxQYXJhbSB7XG4gICAgICByZXR1cm4gdGhpcy52aWV3LmVuY29kZUNhbGwubWludFBZTXVsdGkoXG4gICAgICAgIHJlY2VpdmVyUFRzLFxuICAgICAgICByZWNlaXZlcllUcyxcbiAgICAgICAgYW1vdW50U3lUb01pbnRzLFxuICAgICAgICB7XG4gICAgICAgICAgY2hhaW5JZDogdGhpcy5jb250ZXh0LmNoYWluSWQudG9TdHJpbmcoKSxcbiAgICAgICAgICBhZGRyZXNzOiB0aGlzLmNvbnRleHQuYWRkcmVzcyxcbiAgICAgICAgICBibG9ja1RhZzogdGhpcy5jb250ZXh0LmdldEJsb2NrVGFnKG92ZXJyaWRlcyksXG4gICAgICAgIH0sXG4gICAgICApO1xuICAgIH0sXG4gICAgbmFtZShvdmVycmlkZXM/OiBPdmVycmlkZXMpOiBFdGhDYWxsUGFyYW0ge1xuICAgICAgcmV0dXJuIHRoaXMudmlldy5lbmNvZGVDYWxsLm5hbWUoe1xuICAgICAgICBjaGFpbklkOiB0aGlzLmNvbnRleHQuY2hhaW5JZC50b1N0cmluZygpLFxuICAgICAgICBhZGRyZXNzOiB0aGlzLmNvbnRleHQuYWRkcmVzcyxcbiAgICAgICAgYmxvY2tUYWc6IHRoaXMuY29udGV4dC5nZXRCbG9ja1RhZyhvdmVycmlkZXMpLFxuICAgICAgfSk7XG4gICAgfSxcbiAgICBwb3N0RXhwaXJ5KG92ZXJyaWRlcz86IE92ZXJyaWRlcyk6IEV0aENhbGxQYXJhbSB7XG4gICAgICByZXR1cm4gdGhpcy52aWV3LmVuY29kZUNhbGwucG9zdEV4cGlyeSh7XG4gICAgICAgIGNoYWluSWQ6IHRoaXMuY29udGV4dC5jaGFpbklkLnRvU3RyaW5nKCksXG4gICAgICAgIGFkZHJlc3M6IHRoaXMuY29udGV4dC5hZGRyZXNzLFxuICAgICAgICBibG9ja1RhZzogdGhpcy5jb250ZXh0LmdldEJsb2NrVGFnKG92ZXJyaWRlcyksXG4gICAgICB9KTtcbiAgICB9LFxuICAgIHB5SW5kZXhDdXJyZW50KG92ZXJyaWRlcz86IE92ZXJyaWRlcyk6IEV0aENhbGxQYXJhbSB7XG4gICAgICByZXR1cm4gdGhpcy52aWV3LmVuY29kZUNhbGwucHlJbmRleEN1cnJlbnQoe1xuICAgICAgICBjaGFpbklkOiB0aGlzLmNvbnRleHQuY2hhaW5JZC50b1N0cmluZygpLFxuICAgICAgICBhZGRyZXNzOiB0aGlzLmNvbnRleHQuYWRkcmVzcyxcbiAgICAgICAgYmxvY2tUYWc6IHRoaXMuY29udGV4dC5nZXRCbG9ja1RhZyhvdmVycmlkZXMpLFxuICAgICAgfSk7XG4gICAgfSxcbiAgICBweUluZGV4TGFzdFVwZGF0ZWRCbG9jayhvdmVycmlkZXM/OiBPdmVycmlkZXMpOiBFdGhDYWxsUGFyYW0ge1xuICAgICAgcmV0dXJuIHRoaXMudmlldy5lbmNvZGVDYWxsLnB5SW5kZXhMYXN0VXBkYXRlZEJsb2NrKHtcbiAgICAgICAgY2hhaW5JZDogdGhpcy5jb250ZXh0LmNoYWluSWQudG9TdHJpbmcoKSxcbiAgICAgICAgYWRkcmVzczogdGhpcy5jb250ZXh0LmFkZHJlc3MsXG4gICAgICAgIGJsb2NrVGFnOiB0aGlzLmNvbnRleHQuZ2V0QmxvY2tUYWcob3ZlcnJpZGVzKSxcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgcHlJbmRleFN0b3JlZChvdmVycmlkZXM/OiBPdmVycmlkZXMpOiBFdGhDYWxsUGFyYW0ge1xuICAgICAgcmV0dXJuIHRoaXMudmlldy5lbmNvZGVDYWxsLnB5SW5kZXhTdG9yZWQoe1xuICAgICAgICBjaGFpbklkOiB0aGlzLmNvbnRleHQuY2hhaW5JZC50b1N0cmluZygpLFxuICAgICAgICBhZGRyZXNzOiB0aGlzLmNvbnRleHQuYWRkcmVzcyxcbiAgICAgICAgYmxvY2tUYWc6IHRoaXMuY29udGV4dC5nZXRCbG9ja1RhZyhvdmVycmlkZXMpLFxuICAgICAgfSk7XG4gICAgfSxcbiAgICByZWRlZW1EdWVJbnRlcmVzdEFuZFJld2FyZHMoXG4gICAgICB1c2VyOiBzdHJpbmcsXG4gICAgICByZWRlZW1JbnRlcmVzdDogYm9vbGVhbixcbiAgICAgIHJlZGVlbVJld2FyZHM6IGJvb2xlYW4sXG4gICAgICBvdmVycmlkZXM/OiBPdmVycmlkZXMsXG4gICAgKTogRXRoQ2FsbFBhcmFtIHtcbiAgICAgIHJldHVybiB0aGlzLnZpZXcuZW5jb2RlQ2FsbC5yZWRlZW1EdWVJbnRlcmVzdEFuZFJld2FyZHMoXG4gICAgICAgIHVzZXIsXG4gICAgICAgIHJlZGVlbUludGVyZXN0LFxuICAgICAgICByZWRlZW1SZXdhcmRzLFxuICAgICAgICB7XG4gICAgICAgICAgY2hhaW5JZDogdGhpcy5jb250ZXh0LmNoYWluSWQudG9TdHJpbmcoKSxcbiAgICAgICAgICBhZGRyZXNzOiB0aGlzLmNvbnRleHQuYWRkcmVzcyxcbiAgICAgICAgICBibG9ja1RhZzogdGhpcy5jb250ZXh0LmdldEJsb2NrVGFnKG92ZXJyaWRlcyksXG4gICAgICAgIH0sXG4gICAgICApO1xuICAgIH0sXG4gICAgcmVkZWVtSW50ZXJlc3RBbmRSZXdhcmRzUG9zdEV4cGlyeUZvclRyZWFzdXJ5KFxuICAgICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzLFxuICAgICk6IEV0aENhbGxQYXJhbSB7XG4gICAgICByZXR1cm4gdGhpcy52aWV3LmVuY29kZUNhbGwucmVkZWVtSW50ZXJlc3RBbmRSZXdhcmRzUG9zdEV4cGlyeUZvclRyZWFzdXJ5KFxuICAgICAgICB7XG4gICAgICAgICAgY2hhaW5JZDogdGhpcy5jb250ZXh0LmNoYWluSWQudG9TdHJpbmcoKSxcbiAgICAgICAgICBhZGRyZXNzOiB0aGlzLmNvbnRleHQuYWRkcmVzcyxcbiAgICAgICAgICBibG9ja1RhZzogdGhpcy5jb250ZXh0LmdldEJsb2NrVGFnKG92ZXJyaWRlcyksXG4gICAgICAgIH0sXG4gICAgICApO1xuICAgIH0sXG4gICAgcmVkZWVtUFkocmVjZWl2ZXI6IHN0cmluZywgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzKTogRXRoQ2FsbFBhcmFtIHtcbiAgICAgIHJldHVybiB0aGlzLnZpZXcuZW5jb2RlQ2FsbC5yZWRlZW1QWShyZWNlaXZlciwge1xuICAgICAgICBjaGFpbklkOiB0aGlzLmNvbnRleHQuY2hhaW5JZC50b1N0cmluZygpLFxuICAgICAgICBhZGRyZXNzOiB0aGlzLmNvbnRleHQuYWRkcmVzcyxcbiAgICAgICAgYmxvY2tUYWc6IHRoaXMuY29udGV4dC5nZXRCbG9ja1RhZyhvdmVycmlkZXMpLFxuICAgICAgfSk7XG4gICAgfSxcbiAgICByZWRlZW1QWU11bHRpKFxuICAgICAgcmVjZWl2ZXJzOiBzdHJpbmdbXSxcbiAgICAgIGFtb3VudFBZVG9SZWRlZW1zOiBCaWdOdW1iZXJpc2hbXSxcbiAgICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlcyxcbiAgICApOiBFdGhDYWxsUGFyYW0ge1xuICAgICAgcmV0dXJuIHRoaXMudmlldy5lbmNvZGVDYWxsLnJlZGVlbVBZTXVsdGkocmVjZWl2ZXJzLCBhbW91bnRQWVRvUmVkZWVtcywge1xuICAgICAgICBjaGFpbklkOiB0aGlzLmNvbnRleHQuY2hhaW5JZC50b1N0cmluZygpLFxuICAgICAgICBhZGRyZXNzOiB0aGlzLmNvbnRleHQuYWRkcmVzcyxcbiAgICAgICAgYmxvY2tUYWc6IHRoaXMuY29udGV4dC5nZXRCbG9ja1RhZyhvdmVycmlkZXMpLFxuICAgICAgfSk7XG4gICAgfSxcbiAgICByZXdhcmRJbmRleGVzQ3VycmVudChvdmVycmlkZXM/OiBPdmVycmlkZXMpOiBFdGhDYWxsUGFyYW0ge1xuICAgICAgcmV0dXJuIHRoaXMudmlldy5lbmNvZGVDYWxsLnJld2FyZEluZGV4ZXNDdXJyZW50KHtcbiAgICAgICAgY2hhaW5JZDogdGhpcy5jb250ZXh0LmNoYWluSWQudG9TdHJpbmcoKSxcbiAgICAgICAgYWRkcmVzczogdGhpcy5jb250ZXh0LmFkZHJlc3MsXG4gICAgICAgIGJsb2NrVGFnOiB0aGlzLmNvbnRleHQuZ2V0QmxvY2tUYWcob3ZlcnJpZGVzKSxcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgc2V0UG9zdEV4cGlyeURhdGEob3ZlcnJpZGVzPzogT3ZlcnJpZGVzKTogRXRoQ2FsbFBhcmFtIHtcbiAgICAgIHJldHVybiB0aGlzLnZpZXcuZW5jb2RlQ2FsbC5zZXRQb3N0RXhwaXJ5RGF0YSh7XG4gICAgICAgIGNoYWluSWQ6IHRoaXMuY29udGV4dC5jaGFpbklkLnRvU3RyaW5nKCksXG4gICAgICAgIGFkZHJlc3M6IHRoaXMuY29udGV4dC5hZGRyZXNzLFxuICAgICAgICBibG9ja1RhZzogdGhpcy5jb250ZXh0LmdldEJsb2NrVGFnKG92ZXJyaWRlcyksXG4gICAgICB9KTtcbiAgICB9LFxuICAgIHN5UmVzZXJ2ZShvdmVycmlkZXM/OiBPdmVycmlkZXMpOiBFdGhDYWxsUGFyYW0ge1xuICAgICAgcmV0dXJuIHRoaXMudmlldy5lbmNvZGVDYWxsLnN5UmVzZXJ2ZSh7XG4gICAgICAgIGNoYWluSWQ6IHRoaXMuY29udGV4dC5jaGFpbklkLnRvU3RyaW5nKCksXG4gICAgICAgIGFkZHJlc3M6IHRoaXMuY29udGV4dC5hZGRyZXNzLFxuICAgICAgICBibG9ja1RhZzogdGhpcy5jb250ZXh0LmdldEJsb2NrVGFnKG92ZXJyaWRlcyksXG4gICAgICB9KTtcbiAgICB9LFxuICAgIHN5bWJvbChvdmVycmlkZXM/OiBPdmVycmlkZXMpOiBFdGhDYWxsUGFyYW0ge1xuICAgICAgcmV0dXJuIHRoaXMudmlldy5lbmNvZGVDYWxsLnN5bWJvbCh7XG4gICAgICAgIGNoYWluSWQ6IHRoaXMuY29udGV4dC5jaGFpbklkLnRvU3RyaW5nKCksXG4gICAgICAgIGFkZHJlc3M6IHRoaXMuY29udGV4dC5hZGRyZXNzLFxuICAgICAgICBibG9ja1RhZzogdGhpcy5jb250ZXh0LmdldEJsb2NrVGFnKG92ZXJyaWRlcyksXG4gICAgICB9KTtcbiAgICB9LFxuICAgIHRvdGFsU3VwcGx5KG92ZXJyaWRlcz86IE92ZXJyaWRlcyk6IEV0aENhbGxQYXJhbSB7XG4gICAgICByZXR1cm4gdGhpcy52aWV3LmVuY29kZUNhbGwudG90YWxTdXBwbHkoe1xuICAgICAgICBjaGFpbklkOiB0aGlzLmNvbnRleHQuY2hhaW5JZC50b1N0cmluZygpLFxuICAgICAgICBhZGRyZXNzOiB0aGlzLmNvbnRleHQuYWRkcmVzcyxcbiAgICAgICAgYmxvY2tUYWc6IHRoaXMuY29udGV4dC5nZXRCbG9ja1RhZyhvdmVycmlkZXMpLFxuICAgICAgfSk7XG4gICAgfSxcbiAgICB0cmFuc2ZlcihcbiAgICAgIHRvOiBzdHJpbmcsXG4gICAgICBhbW91bnQ6IEJpZ051bWJlcmlzaCxcbiAgICAgIG92ZXJyaWRlcz86IE92ZXJyaWRlcyxcbiAgICApOiBFdGhDYWxsUGFyYW0ge1xuICAgICAgcmV0dXJuIHRoaXMudmlldy5lbmNvZGVDYWxsLnRyYW5zZmVyKHRvLCBhbW91bnQsIHtcbiAgICAgICAgY2hhaW5JZDogdGhpcy5jb250ZXh0LmNoYWluSWQudG9TdHJpbmcoKSxcbiAgICAgICAgYWRkcmVzczogdGhpcy5jb250ZXh0LmFkZHJlc3MsXG4gICAgICAgIGJsb2NrVGFnOiB0aGlzLmNvbnRleHQuZ2V0QmxvY2tUYWcob3ZlcnJpZGVzKSxcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgdHJhbnNmZXJGcm9tKFxuICAgICAgZnJvbTogc3RyaW5nLFxuICAgICAgdG86IHN0cmluZyxcbiAgICAgIGFtb3VudDogQmlnTnVtYmVyaXNoLFxuICAgICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzLFxuICAgICk6IEV0aENhbGxQYXJhbSB7XG4gICAgICByZXR1cm4gdGhpcy52aWV3LmVuY29kZUNhbGwudHJhbnNmZXJGcm9tKGZyb20sIHRvLCBhbW91bnQsIHtcbiAgICAgICAgY2hhaW5JZDogdGhpcy5jb250ZXh0LmNoYWluSWQudG9TdHJpbmcoKSxcbiAgICAgICAgYWRkcmVzczogdGhpcy5jb250ZXh0LmFkZHJlc3MsXG4gICAgICAgIGJsb2NrVGFnOiB0aGlzLmNvbnRleHQuZ2V0QmxvY2tUYWcob3ZlcnJpZGVzKSxcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgdXNlckludGVyZXN0KGFyZzA6IHN0cmluZywgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzKTogRXRoQ2FsbFBhcmFtIHtcbiAgICAgIHJldHVybiB0aGlzLnZpZXcuZW5jb2RlQ2FsbC51c2VySW50ZXJlc3QoYXJnMCwge1xuICAgICAgICBjaGFpbklkOiB0aGlzLmNvbnRleHQuY2hhaW5JZC50b1N0cmluZygpLFxuICAgICAgICBhZGRyZXNzOiB0aGlzLmNvbnRleHQuYWRkcmVzcyxcbiAgICAgICAgYmxvY2tUYWc6IHRoaXMuY29udGV4dC5nZXRCbG9ja1RhZyhvdmVycmlkZXMpLFxuICAgICAgfSk7XG4gICAgfSxcbiAgICB1c2VyUmV3YXJkKFxuICAgICAgYXJnMDogc3RyaW5nLFxuICAgICAgYXJnMTogc3RyaW5nLFxuICAgICAgb3ZlcnJpZGVzPzogT3ZlcnJpZGVzLFxuICAgICk6IEV0aENhbGxQYXJhbSB7XG4gICAgICByZXR1cm4gdGhpcy52aWV3LmVuY29kZUNhbGwudXNlclJld2FyZChhcmcwLCBhcmcxLCB7XG4gICAgICAgIGNoYWluSWQ6IHRoaXMuY29udGV4dC5jaGFpbklkLnRvU3RyaW5nKCksXG4gICAgICAgIGFkZHJlc3M6IHRoaXMuY29udGV4dC5hZGRyZXNzLFxuICAgICAgICBibG9ja1RhZzogdGhpcy5jb250ZXh0LmdldEJsb2NrVGFnKG92ZXJyaWRlcyksXG4gICAgICB9KTtcbiAgICB9LFxuICB9O1xufVxuXG5leHBvcnQgdHlwZSBQZW5kbGVZaWVsZFRva2VuQ29udGV4dCA9IENvbnRyYWN0Q29udGV4dDxcbiAgUGVuZGxlWWllbGRUb2tlbixcbiAgUGVuZGxlWWllbGRUb2tlbkJvdW5kQ29udHJhY3RWaWV3XG4+O1xuXG5leHBvcnQgY2xhc3MgUGVuZGxlWWllbGRUb2tlblByb2Nlc3NvciBleHRlbmRzIEJhc2VQcm9jZXNzb3I8XG4gIFBlbmRsZVlpZWxkVG9rZW4sXG4gIFBlbmRsZVlpZWxkVG9rZW5Cb3VuZENvbnRyYWN0Vmlld1xuPiB7XG4gIG9uRXZlbnRBcHByb3ZhbChcbiAgICBoYW5kbGVyOiAoZXZlbnQ6IEFwcHJvdmFsRXZlbnQsIGN0eDogUGVuZGxlWWllbGRUb2tlbkNvbnRleHQpID0+IHZvaWQsXG4gICAgZmlsdGVyPzogQXBwcm92YWxFdmVudEZpbHRlciB8IEFwcHJvdmFsRXZlbnRGaWx0ZXJbXSxcbiAgICBmZXRjaENvbmZpZz86IFBhcnRpYWw8RXRoRmV0Y2hDb25maWc+LFxuICAgIHByZXByb2Nlc3NIYW5kbGVyPzogKFxuICAgICAgZXZlbnQ6IEFwcHJvdmFsRXZlbnQsXG4gICAgICBjdHg6IFBlbmRsZVlpZWxkVG9rZW5Db250ZXh0LFxuICAgICAgcHJlcHJvY2Vzc1N0b3JlOiB7IFtrOiBzdHJpbmddOiBhbnkgfSxcbiAgICApID0+IFByb21pc2U8UHJlcHJvY2Vzc1Jlc3VsdD4sXG4gICk6IHRoaXMge1xuICAgIGlmICghZmlsdGVyKSB7XG4gICAgICBmaWx0ZXIgPSB0ZW1wbGF0ZUNvbnRyYWN0LmZpbHRlcnNbXCJBcHByb3ZhbChhZGRyZXNzLGFkZHJlc3MsdWludDI1NilcIl0oXG4gICAgICAgIG51bGwsXG4gICAgICAgIG51bGwsXG4gICAgICAgIG51bGwsXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gc3VwZXIub25FdGhFdmVudChoYW5kbGVyLCBmaWx0ZXIhLCBmZXRjaENvbmZpZywgcHJlcHJvY2Vzc0hhbmRsZXIpO1xuICB9XG5cbiAgb25FdmVudEJ1cm4oXG4gICAgaGFuZGxlcjogKGV2ZW50OiBCdXJuRXZlbnQsIGN0eDogUGVuZGxlWWllbGRUb2tlbkNvbnRleHQpID0+IHZvaWQsXG4gICAgZmlsdGVyPzogQnVybkV2ZW50RmlsdGVyIHwgQnVybkV2ZW50RmlsdGVyW10sXG4gICAgZmV0Y2hDb25maWc/OiBQYXJ0aWFsPEV0aEZldGNoQ29uZmlnPixcbiAgICBwcmVwcm9jZXNzSGFuZGxlcj86IChcbiAgICAgIGV2ZW50OiBCdXJuRXZlbnQsXG4gICAgICBjdHg6IFBlbmRsZVlpZWxkVG9rZW5Db250ZXh0LFxuICAgICAgcHJlcHJvY2Vzc1N0b3JlOiB7IFtrOiBzdHJpbmddOiBhbnkgfSxcbiAgICApID0+IFByb21pc2U8UHJlcHJvY2Vzc1Jlc3VsdD4sXG4gICk6IHRoaXMge1xuICAgIGlmICghZmlsdGVyKSB7XG4gICAgICBmaWx0ZXIgPSB0ZW1wbGF0ZUNvbnRyYWN0LmZpbHRlcnNbXG4gICAgICAgIFwiQnVybihhZGRyZXNzLGFkZHJlc3MsdWludDI1Nix1aW50MjU2KVwiXG4gICAgICBdKG51bGwsIG51bGwsIG51bGwsIG51bGwpO1xuICAgIH1cbiAgICByZXR1cm4gc3VwZXIub25FdGhFdmVudChoYW5kbGVyLCBmaWx0ZXIhLCBmZXRjaENvbmZpZywgcHJlcHJvY2Vzc0hhbmRsZXIpO1xuICB9XG5cbiAgb25FdmVudENvbGxlY3RJbnRlcmVzdEZlZShcbiAgICBoYW5kbGVyOiAoXG4gICAgICBldmVudDogQ29sbGVjdEludGVyZXN0RmVlRXZlbnQsXG4gICAgICBjdHg6IFBlbmRsZVlpZWxkVG9rZW5Db250ZXh0LFxuICAgICkgPT4gdm9pZCxcbiAgICBmaWx0ZXI/OiBDb2xsZWN0SW50ZXJlc3RGZWVFdmVudEZpbHRlciB8IENvbGxlY3RJbnRlcmVzdEZlZUV2ZW50RmlsdGVyW10sXG4gICAgZmV0Y2hDb25maWc/OiBQYXJ0aWFsPEV0aEZldGNoQ29uZmlnPixcbiAgICBwcmVwcm9jZXNzSGFuZGxlcj86IChcbiAgICAgIGV2ZW50OiBDb2xsZWN0SW50ZXJlc3RGZWVFdmVudCxcbiAgICAgIGN0eDogUGVuZGxlWWllbGRUb2tlbkNvbnRleHQsXG4gICAgICBwcmVwcm9jZXNzU3RvcmU6IHsgW2s6IHN0cmluZ106IGFueSB9LFxuICAgICkgPT4gUHJvbWlzZTxQcmVwcm9jZXNzUmVzdWx0PixcbiAgKTogdGhpcyB7XG4gICAgaWYgKCFmaWx0ZXIpIHtcbiAgICAgIGZpbHRlciA9IHRlbXBsYXRlQ29udHJhY3QuZmlsdGVyc1tcIkNvbGxlY3RJbnRlcmVzdEZlZSh1aW50MjU2KVwiXShudWxsKTtcbiAgICB9XG4gICAgcmV0dXJuIHN1cGVyLm9uRXRoRXZlbnQoaGFuZGxlciwgZmlsdGVyISwgZmV0Y2hDb25maWcsIHByZXByb2Nlc3NIYW5kbGVyKTtcbiAgfVxuXG4gIG9uRXZlbnRDb2xsZWN0UmV3YXJkRmVlKFxuICAgIGhhbmRsZXI6IChcbiAgICAgIGV2ZW50OiBDb2xsZWN0UmV3YXJkRmVlRXZlbnQsXG4gICAgICBjdHg6IFBlbmRsZVlpZWxkVG9rZW5Db250ZXh0LFxuICAgICkgPT4gdm9pZCxcbiAgICBmaWx0ZXI/OiBDb2xsZWN0UmV3YXJkRmVlRXZlbnRGaWx0ZXIgfCBDb2xsZWN0UmV3YXJkRmVlRXZlbnRGaWx0ZXJbXSxcbiAgICBmZXRjaENvbmZpZz86IFBhcnRpYWw8RXRoRmV0Y2hDb25maWc+LFxuICAgIHByZXByb2Nlc3NIYW5kbGVyPzogKFxuICAgICAgZXZlbnQ6IENvbGxlY3RSZXdhcmRGZWVFdmVudCxcbiAgICAgIGN0eDogUGVuZGxlWWllbGRUb2tlbkNvbnRleHQsXG4gICAgICBwcmVwcm9jZXNzU3RvcmU6IHsgW2s6IHN0cmluZ106IGFueSB9LFxuICAgICkgPT4gUHJvbWlzZTxQcmVwcm9jZXNzUmVzdWx0PixcbiAgKTogdGhpcyB7XG4gICAgaWYgKCFmaWx0ZXIpIHtcbiAgICAgIGZpbHRlciA9IHRlbXBsYXRlQ29udHJhY3QuZmlsdGVyc1tcIkNvbGxlY3RSZXdhcmRGZWUoYWRkcmVzcyx1aW50MjU2KVwiXShcbiAgICAgICAgbnVsbCxcbiAgICAgICAgbnVsbCxcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiBzdXBlci5vbkV0aEV2ZW50KGhhbmRsZXIsIGZpbHRlciEsIGZldGNoQ29uZmlnLCBwcmVwcm9jZXNzSGFuZGxlcik7XG4gIH1cblxuICBvbkV2ZW50TWludChcbiAgICBoYW5kbGVyOiAoZXZlbnQ6IE1pbnRFdmVudCwgY3R4OiBQZW5kbGVZaWVsZFRva2VuQ29udGV4dCkgPT4gdm9pZCxcbiAgICBmaWx0ZXI/OiBNaW50RXZlbnRGaWx0ZXIgfCBNaW50RXZlbnRGaWx0ZXJbXSxcbiAgICBmZXRjaENvbmZpZz86IFBhcnRpYWw8RXRoRmV0Y2hDb25maWc+LFxuICAgIHByZXByb2Nlc3NIYW5kbGVyPzogKFxuICAgICAgZXZlbnQ6IE1pbnRFdmVudCxcbiAgICAgIGN0eDogUGVuZGxlWWllbGRUb2tlbkNvbnRleHQsXG4gICAgICBwcmVwcm9jZXNzU3RvcmU6IHsgW2s6IHN0cmluZ106IGFueSB9LFxuICAgICkgPT4gUHJvbWlzZTxQcmVwcm9jZXNzUmVzdWx0PixcbiAgKTogdGhpcyB7XG4gICAgaWYgKCFmaWx0ZXIpIHtcbiAgICAgIGZpbHRlciA9IHRlbXBsYXRlQ29udHJhY3QuZmlsdGVyc1tcbiAgICAgICAgXCJNaW50KGFkZHJlc3MsYWRkcmVzcyxhZGRyZXNzLHVpbnQyNTYsdWludDI1NilcIlxuICAgICAgXShudWxsLCBudWxsLCBudWxsLCBudWxsLCBudWxsKTtcbiAgICB9XG4gICAgcmV0dXJuIHN1cGVyLm9uRXRoRXZlbnQoaGFuZGxlciwgZmlsdGVyISwgZmV0Y2hDb25maWcsIHByZXByb2Nlc3NIYW5kbGVyKTtcbiAgfVxuXG4gIG9uRXZlbnROZXdJbnRlcmVzdEluZGV4KFxuICAgIGhhbmRsZXI6IChcbiAgICAgIGV2ZW50OiBOZXdJbnRlcmVzdEluZGV4RXZlbnQsXG4gICAgICBjdHg6IFBlbmRsZVlpZWxkVG9rZW5Db250ZXh0LFxuICAgICkgPT4gdm9pZCxcbiAgICBmaWx0ZXI/OiBOZXdJbnRlcmVzdEluZGV4RXZlbnRGaWx0ZXIgfCBOZXdJbnRlcmVzdEluZGV4RXZlbnRGaWx0ZXJbXSxcbiAgICBmZXRjaENvbmZpZz86IFBhcnRpYWw8RXRoRmV0Y2hDb25maWc+LFxuICAgIHByZXByb2Nlc3NIYW5kbGVyPzogKFxuICAgICAgZXZlbnQ6IE5ld0ludGVyZXN0SW5kZXhFdmVudCxcbiAgICAgIGN0eDogUGVuZGxlWWllbGRUb2tlbkNvbnRleHQsXG4gICAgICBwcmVwcm9jZXNzU3RvcmU6IHsgW2s6IHN0cmluZ106IGFueSB9LFxuICAgICkgPT4gUHJvbWlzZTxQcmVwcm9jZXNzUmVzdWx0PixcbiAgKTogdGhpcyB7XG4gICAgaWYgKCFmaWx0ZXIpIHtcbiAgICAgIGZpbHRlciA9IHRlbXBsYXRlQ29udHJhY3QuZmlsdGVyc1tcIk5ld0ludGVyZXN0SW5kZXgodWludDI1NilcIl0obnVsbCk7XG4gICAgfVxuICAgIHJldHVybiBzdXBlci5vbkV0aEV2ZW50KGhhbmRsZXIsIGZpbHRlciEsIGZldGNoQ29uZmlnLCBwcmVwcm9jZXNzSGFuZGxlcik7XG4gIH1cblxuICBvbkV2ZW50UmVkZWVtSW50ZXJlc3QoXG4gICAgaGFuZGxlcjogKGV2ZW50OiBSZWRlZW1JbnRlcmVzdEV2ZW50LCBjdHg6IFBlbmRsZVlpZWxkVG9rZW5Db250ZXh0KSA9PiB2b2lkLFxuICAgIGZpbHRlcj86IFJlZGVlbUludGVyZXN0RXZlbnRGaWx0ZXIgfCBSZWRlZW1JbnRlcmVzdEV2ZW50RmlsdGVyW10sXG4gICAgZmV0Y2hDb25maWc/OiBQYXJ0aWFsPEV0aEZldGNoQ29uZmlnPixcbiAgICBwcmVwcm9jZXNzSGFuZGxlcj86IChcbiAgICAgIGV2ZW50OiBSZWRlZW1JbnRlcmVzdEV2ZW50LFxuICAgICAgY3R4OiBQZW5kbGVZaWVsZFRva2VuQ29udGV4dCxcbiAgICAgIHByZXByb2Nlc3NTdG9yZTogeyBbazogc3RyaW5nXTogYW55IH0sXG4gICAgKSA9PiBQcm9taXNlPFByZXByb2Nlc3NSZXN1bHQ+LFxuICApOiB0aGlzIHtcbiAgICBpZiAoIWZpbHRlcikge1xuICAgICAgZmlsdGVyID0gdGVtcGxhdGVDb250cmFjdC5maWx0ZXJzW1wiUmVkZWVtSW50ZXJlc3QoYWRkcmVzcyx1aW50MjU2KVwiXShcbiAgICAgICAgbnVsbCxcbiAgICAgICAgbnVsbCxcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiBzdXBlci5vbkV0aEV2ZW50KGhhbmRsZXIsIGZpbHRlciEsIGZldGNoQ29uZmlnLCBwcmVwcm9jZXNzSGFuZGxlcik7XG4gIH1cblxuICBvbkV2ZW50UmVkZWVtUmV3YXJkcyhcbiAgICBoYW5kbGVyOiAoZXZlbnQ6IFJlZGVlbVJld2FyZHNFdmVudCwgY3R4OiBQZW5kbGVZaWVsZFRva2VuQ29udGV4dCkgPT4gdm9pZCxcbiAgICBmaWx0ZXI/OiBSZWRlZW1SZXdhcmRzRXZlbnRGaWx0ZXIgfCBSZWRlZW1SZXdhcmRzRXZlbnRGaWx0ZXJbXSxcbiAgICBmZXRjaENvbmZpZz86IFBhcnRpYWw8RXRoRmV0Y2hDb25maWc+LFxuICAgIHByZXByb2Nlc3NIYW5kbGVyPzogKFxuICAgICAgZXZlbnQ6IFJlZGVlbVJld2FyZHNFdmVudCxcbiAgICAgIGN0eDogUGVuZGxlWWllbGRUb2tlbkNvbnRleHQsXG4gICAgICBwcmVwcm9jZXNzU3RvcmU6IHsgW2s6IHN0cmluZ106IGFueSB9LFxuICAgICkgPT4gUHJvbWlzZTxQcmVwcm9jZXNzUmVzdWx0PixcbiAgKTogdGhpcyB7XG4gICAgaWYgKCFmaWx0ZXIpIHtcbiAgICAgIGZpbHRlciA9IHRlbXBsYXRlQ29udHJhY3QuZmlsdGVyc1tcIlJlZGVlbVJld2FyZHMoYWRkcmVzcyx1aW50MjU2W10pXCJdKFxuICAgICAgICBudWxsLFxuICAgICAgICBudWxsLFxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIHN1cGVyLm9uRXRoRXZlbnQoaGFuZGxlciwgZmlsdGVyISwgZmV0Y2hDb25maWcsIHByZXByb2Nlc3NIYW5kbGVyKTtcbiAgfVxuXG4gIG9uRXZlbnRUcmFuc2ZlcihcbiAgICBoYW5kbGVyOiAoZXZlbnQ6IFRyYW5zZmVyRXZlbnQsIGN0eDogUGVuZGxlWWllbGRUb2tlbkNvbnRleHQpID0+IHZvaWQsXG4gICAgZmlsdGVyPzogVHJhbnNmZXJFdmVudEZpbHRlciB8IFRyYW5zZmVyRXZlbnRGaWx0ZXJbXSxcbiAgICBmZXRjaENvbmZpZz86IFBhcnRpYWw8RXRoRmV0Y2hDb25maWc+LFxuICAgIHByZXByb2Nlc3NIYW5kbGVyPzogKFxuICAgICAgZXZlbnQ6IFRyYW5zZmVyRXZlbnQsXG4gICAgICBjdHg6IFBlbmRsZVlpZWxkVG9rZW5Db250ZXh0LFxuICAgICAgcHJlcHJvY2Vzc1N0b3JlOiB7IFtrOiBzdHJpbmddOiBhbnkgfSxcbiAgICApID0+IFByb21pc2U8UHJlcHJvY2Vzc1Jlc3VsdD4sXG4gICk6IHRoaXMge1xuICAgIGlmICghZmlsdGVyKSB7XG4gICAgICBmaWx0ZXIgPSB0ZW1wbGF0ZUNvbnRyYWN0LmZpbHRlcnNbXCJUcmFuc2ZlcihhZGRyZXNzLGFkZHJlc3MsdWludDI1NilcIl0oXG4gICAgICAgIG51bGwsXG4gICAgICAgIG51bGwsXG4gICAgICAgIG51bGwsXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gc3VwZXIub25FdGhFdmVudChoYW5kbGVyLCBmaWx0ZXIhLCBmZXRjaENvbmZpZywgcHJlcHJvY2Vzc0hhbmRsZXIpO1xuICB9XG5cbiAgb25DYWxsUFQoXG4gICAgaGFuZGxlcjogKGNhbGw6IFBUQ2FsbFRyYWNlLCBjdHg6IFBlbmRsZVlpZWxkVG9rZW5Db250ZXh0KSA9PiB2b2lkLFxuICAgIGZldGNoQ29uZmlnPzogUGFydGlhbDxFdGhGZXRjaENvbmZpZz4sXG4gICAgcHJlcHJvY2Vzc0hhbmRsZXI/OiAoXG4gICAgICBjYWxsOiBQVENhbGxUcmFjZSxcbiAgICAgIGN0eDogUGVuZGxlWWllbGRUb2tlbkNvbnRleHQsXG4gICAgKSA9PiBQcm9taXNlPFByZXByb2Nlc3NSZXN1bHQ+LFxuICApOiB0aGlzIHtcbiAgICByZXR1cm4gc3VwZXIub25FdGhUcmFjZShcbiAgICAgIFwiMHhkOTQwNzNkNFwiLFxuICAgICAgaGFuZGxlciBhcyBhbnksXG4gICAgICBmZXRjaENvbmZpZyxcbiAgICAgIHByZXByb2Nlc3NIYW5kbGVyLFxuICAgICk7XG4gIH1cblxuICBvbkNhbGxTWShcbiAgICBoYW5kbGVyOiAoY2FsbDogU1lDYWxsVHJhY2UsIGN0eDogUGVuZGxlWWllbGRUb2tlbkNvbnRleHQpID0+IHZvaWQsXG4gICAgZmV0Y2hDb25maWc/OiBQYXJ0aWFsPEV0aEZldGNoQ29uZmlnPixcbiAgICBwcmVwcm9jZXNzSGFuZGxlcj86IChcbiAgICAgIGNhbGw6IFNZQ2FsbFRyYWNlLFxuICAgICAgY3R4OiBQZW5kbGVZaWVsZFRva2VuQ29udGV4dCxcbiAgICApID0+IFByb21pc2U8UHJlcHJvY2Vzc1Jlc3VsdD4sXG4gICk6IHRoaXMge1xuICAgIHJldHVybiBzdXBlci5vbkV0aFRyYWNlKFxuICAgICAgXCIweGFmZDI3YmY1XCIsXG4gICAgICBoYW5kbGVyIGFzIGFueSxcbiAgICAgIGZldGNoQ29uZmlnLFxuICAgICAgcHJlcHJvY2Vzc0hhbmRsZXIsXG4gICAgKTtcbiAgfVxuXG4gIG9uQ2FsbEFsbG93YW5jZShcbiAgICBoYW5kbGVyOiAoY2FsbDogQWxsb3dhbmNlQ2FsbFRyYWNlLCBjdHg6IFBlbmRsZVlpZWxkVG9rZW5Db250ZXh0KSA9PiB2b2lkLFxuICAgIGZldGNoQ29uZmlnPzogUGFydGlhbDxFdGhGZXRjaENvbmZpZz4sXG4gICAgcHJlcHJvY2Vzc0hhbmRsZXI/OiAoXG4gICAgICBjYWxsOiBBbGxvd2FuY2VDYWxsVHJhY2UsXG4gICAgICBjdHg6IFBlbmRsZVlpZWxkVG9rZW5Db250ZXh0LFxuICAgICkgPT4gUHJvbWlzZTxQcmVwcm9jZXNzUmVzdWx0PixcbiAgKTogdGhpcyB7XG4gICAgcmV0dXJuIHN1cGVyLm9uRXRoVHJhY2UoXG4gICAgICBcIjB4ZGQ2MmVkM2VcIixcbiAgICAgIGhhbmRsZXIgYXMgYW55LFxuICAgICAgZmV0Y2hDb25maWcsXG4gICAgICBwcmVwcm9jZXNzSGFuZGxlcixcbiAgICApO1xuICB9XG5cbiAgb25DYWxsQXBwcm92ZShcbiAgICBoYW5kbGVyOiAoY2FsbDogQXBwcm92ZUNhbGxUcmFjZSwgY3R4OiBQZW5kbGVZaWVsZFRva2VuQ29udGV4dCkgPT4gdm9pZCxcbiAgICBmZXRjaENvbmZpZz86IFBhcnRpYWw8RXRoRmV0Y2hDb25maWc+LFxuICAgIHByZXByb2Nlc3NIYW5kbGVyPzogKFxuICAgICAgY2FsbDogQXBwcm92ZUNhbGxUcmFjZSxcbiAgICAgIGN0eDogUGVuZGxlWWllbGRUb2tlbkNvbnRleHQsXG4gICAgKSA9PiBQcm9taXNlPFByZXByb2Nlc3NSZXN1bHQ+LFxuICApOiB0aGlzIHtcbiAgICByZXR1cm4gc3VwZXIub25FdGhUcmFjZShcbiAgICAgIFwiMHgwOTVlYTdiM1wiLFxuICAgICAgaGFuZGxlciBhcyBhbnksXG4gICAgICBmZXRjaENvbmZpZyxcbiAgICAgIHByZXByb2Nlc3NIYW5kbGVyLFxuICAgICk7XG4gIH1cblxuICBvbkNhbGxCYWxhbmNlT2YoXG4gICAgaGFuZGxlcjogKGNhbGw6IEJhbGFuY2VPZkNhbGxUcmFjZSwgY3R4OiBQZW5kbGVZaWVsZFRva2VuQ29udGV4dCkgPT4gdm9pZCxcbiAgICBmZXRjaENvbmZpZz86IFBhcnRpYWw8RXRoRmV0Y2hDb25maWc+LFxuICAgIHByZXByb2Nlc3NIYW5kbGVyPzogKFxuICAgICAgY2FsbDogQmFsYW5jZU9mQ2FsbFRyYWNlLFxuICAgICAgY3R4OiBQZW5kbGVZaWVsZFRva2VuQ29udGV4dCxcbiAgICApID0+IFByb21pc2U8UHJlcHJvY2Vzc1Jlc3VsdD4sXG4gICk6IHRoaXMge1xuICAgIHJldHVybiBzdXBlci5vbkV0aFRyYWNlKFxuICAgICAgXCIweDcwYTA4MjMxXCIsXG4gICAgICBoYW5kbGVyIGFzIGFueSxcbiAgICAgIGZldGNoQ29uZmlnLFxuICAgICAgcHJlcHJvY2Vzc0hhbmRsZXIsXG4gICAgKTtcbiAgfVxuXG4gIG9uQ2FsbERlY2ltYWxzKFxuICAgIGhhbmRsZXI6IChjYWxsOiBEZWNpbWFsc0NhbGxUcmFjZSwgY3R4OiBQZW5kbGVZaWVsZFRva2VuQ29udGV4dCkgPT4gdm9pZCxcbiAgICBmZXRjaENvbmZpZz86IFBhcnRpYWw8RXRoRmV0Y2hDb25maWc+LFxuICAgIHByZXByb2Nlc3NIYW5kbGVyPzogKFxuICAgICAgY2FsbDogRGVjaW1hbHNDYWxsVHJhY2UsXG4gICAgICBjdHg6IFBlbmRsZVlpZWxkVG9rZW5Db250ZXh0LFxuICAgICkgPT4gUHJvbWlzZTxQcmVwcm9jZXNzUmVzdWx0PixcbiAgKTogdGhpcyB7XG4gICAgcmV0dXJuIHN1cGVyLm9uRXRoVHJhY2UoXG4gICAgICBcIjB4MzEzY2U1NjdcIixcbiAgICAgIGhhbmRsZXIgYXMgYW55LFxuICAgICAgZmV0Y2hDb25maWcsXG4gICAgICBwcmVwcm9jZXNzSGFuZGxlcixcbiAgICApO1xuICB9XG5cbiAgb25DYWxsRG9DYWNoZUluZGV4U2FtZUJsb2NrKFxuICAgIGhhbmRsZXI6IChcbiAgICAgIGNhbGw6IERvQ2FjaGVJbmRleFNhbWVCbG9ja0NhbGxUcmFjZSxcbiAgICAgIGN0eDogUGVuZGxlWWllbGRUb2tlbkNvbnRleHQsXG4gICAgKSA9PiB2b2lkLFxuICAgIGZldGNoQ29uZmlnPzogUGFydGlhbDxFdGhGZXRjaENvbmZpZz4sXG4gICAgcHJlcHJvY2Vzc0hhbmRsZXI/OiAoXG4gICAgICBjYWxsOiBEb0NhY2hlSW5kZXhTYW1lQmxvY2tDYWxsVHJhY2UsXG4gICAgICBjdHg6IFBlbmRsZVlpZWxkVG9rZW5Db250ZXh0LFxuICAgICkgPT4gUHJvbWlzZTxQcmVwcm9jZXNzUmVzdWx0PixcbiAgKTogdGhpcyB7XG4gICAgcmV0dXJuIHN1cGVyLm9uRXRoVHJhY2UoXG4gICAgICBcIjB4NTE2Mzk5ZGZcIixcbiAgICAgIGhhbmRsZXIgYXMgYW55LFxuICAgICAgZmV0Y2hDb25maWcsXG4gICAgICBwcmVwcm9jZXNzSGFuZGxlcixcbiAgICApO1xuICB9XG5cbiAgb25DYWxsRXhwaXJ5KFxuICAgIGhhbmRsZXI6IChjYWxsOiBFeHBpcnlDYWxsVHJhY2UsIGN0eDogUGVuZGxlWWllbGRUb2tlbkNvbnRleHQpID0+IHZvaWQsXG4gICAgZmV0Y2hDb25maWc/OiBQYXJ0aWFsPEV0aEZldGNoQ29uZmlnPixcbiAgICBwcmVwcm9jZXNzSGFuZGxlcj86IChcbiAgICAgIGNhbGw6IEV4cGlyeUNhbGxUcmFjZSxcbiAgICAgIGN0eDogUGVuZGxlWWllbGRUb2tlbkNvbnRleHQsXG4gICAgKSA9PiBQcm9taXNlPFByZXByb2Nlc3NSZXN1bHQ+LFxuICApOiB0aGlzIHtcbiAgICByZXR1cm4gc3VwZXIub25FdGhUcmFjZShcbiAgICAgIFwiMHhlMTg0YzliZVwiLFxuICAgICAgaGFuZGxlciBhcyBhbnksXG4gICAgICBmZXRjaENvbmZpZyxcbiAgICAgIHByZXByb2Nlc3NIYW5kbGVyLFxuICAgICk7XG4gIH1cblxuICBvbkNhbGxGYWN0b3J5KFxuICAgIGhhbmRsZXI6IChjYWxsOiBGYWN0b3J5Q2FsbFRyYWNlLCBjdHg6IFBlbmRsZVlpZWxkVG9rZW5Db250ZXh0KSA9PiB2b2lkLFxuICAgIGZldGNoQ29uZmlnPzogUGFydGlhbDxFdGhGZXRjaENvbmZpZz4sXG4gICAgcHJlcHJvY2Vzc0hhbmRsZXI/OiAoXG4gICAgICBjYWxsOiBGYWN0b3J5Q2FsbFRyYWNlLFxuICAgICAgY3R4OiBQZW5kbGVZaWVsZFRva2VuQ29udGV4dCxcbiAgICApID0+IFByb21pc2U8UHJlcHJvY2Vzc1Jlc3VsdD4sXG4gICk6IHRoaXMge1xuICAgIHJldHVybiBzdXBlci5vbkV0aFRyYWNlKFxuICAgICAgXCIweGM0NWEwMTU1XCIsXG4gICAgICBoYW5kbGVyIGFzIGFueSxcbiAgICAgIGZldGNoQ29uZmlnLFxuICAgICAgcHJlcHJvY2Vzc0hhbmRsZXIsXG4gICAgKTtcbiAgfVxuXG4gIG9uQ2FsbEdldFBvc3RFeHBpcnlEYXRhKFxuICAgIGhhbmRsZXI6IChcbiAgICAgIGNhbGw6IEdldFBvc3RFeHBpcnlEYXRhQ2FsbFRyYWNlLFxuICAgICAgY3R4OiBQZW5kbGVZaWVsZFRva2VuQ29udGV4dCxcbiAgICApID0+IHZvaWQsXG4gICAgZmV0Y2hDb25maWc/OiBQYXJ0aWFsPEV0aEZldGNoQ29uZmlnPixcbiAgICBwcmVwcm9jZXNzSGFuZGxlcj86IChcbiAgICAgIGNhbGw6IEdldFBvc3RFeHBpcnlEYXRhQ2FsbFRyYWNlLFxuICAgICAgY3R4OiBQZW5kbGVZaWVsZFRva2VuQ29udGV4dCxcbiAgICApID0+IFByb21pc2U8UHJlcHJvY2Vzc1Jlc3VsdD4sXG4gICk6IHRoaXMge1xuICAgIHJldHVybiBzdXBlci5vbkV0aFRyYWNlKFxuICAgICAgXCIweDBiNDlmY2VmXCIsXG4gICAgICBoYW5kbGVyIGFzIGFueSxcbiAgICAgIGZldGNoQ29uZmlnLFxuICAgICAgcHJlcHJvY2Vzc0hhbmRsZXIsXG4gICAgKTtcbiAgfVxuXG4gIG9uQ2FsbEdldFJld2FyZFRva2VucyhcbiAgICBoYW5kbGVyOiAoXG4gICAgICBjYWxsOiBHZXRSZXdhcmRUb2tlbnNDYWxsVHJhY2UsXG4gICAgICBjdHg6IFBlbmRsZVlpZWxkVG9rZW5Db250ZXh0LFxuICAgICkgPT4gdm9pZCxcbiAgICBmZXRjaENvbmZpZz86IFBhcnRpYWw8RXRoRmV0Y2hDb25maWc+LFxuICAgIHByZXByb2Nlc3NIYW5kbGVyPzogKFxuICAgICAgY2FsbDogR2V0UmV3YXJkVG9rZW5zQ2FsbFRyYWNlLFxuICAgICAgY3R4OiBQZW5kbGVZaWVsZFRva2VuQ29udGV4dCxcbiAgICApID0+IFByb21pc2U8UHJlcHJvY2Vzc1Jlc3VsdD4sXG4gICk6IHRoaXMge1xuICAgIHJldHVybiBzdXBlci5vbkV0aFRyYWNlKFxuICAgICAgXCIweGM0ZjU5ZjliXCIsXG4gICAgICBoYW5kbGVyIGFzIGFueSxcbiAgICAgIGZldGNoQ29uZmlnLFxuICAgICAgcHJlcHJvY2Vzc0hhbmRsZXIsXG4gICAgKTtcbiAgfVxuXG4gIG9uQ2FsbElzRXhwaXJlZChcbiAgICBoYW5kbGVyOiAoY2FsbDogSXNFeHBpcmVkQ2FsbFRyYWNlLCBjdHg6IFBlbmRsZVlpZWxkVG9rZW5Db250ZXh0KSA9PiB2b2lkLFxuICAgIGZldGNoQ29uZmlnPzogUGFydGlhbDxFdGhGZXRjaENvbmZpZz4sXG4gICAgcHJlcHJvY2Vzc0hhbmRsZXI/OiAoXG4gICAgICBjYWxsOiBJc0V4cGlyZWRDYWxsVHJhY2UsXG4gICAgICBjdHg6IFBlbmRsZVlpZWxkVG9rZW5Db250ZXh0LFxuICAgICkgPT4gUHJvbWlzZTxQcmVwcm9jZXNzUmVzdWx0PixcbiAgKTogdGhpcyB7XG4gICAgcmV0dXJuIHN1cGVyLm9uRXRoVHJhY2UoXG4gICAgICBcIjB4MmYxM2I2MGNcIixcbiAgICAgIGhhbmRsZXIgYXMgYW55LFxuICAgICAgZmV0Y2hDb25maWcsXG4gICAgICBwcmVwcm9jZXNzSGFuZGxlcixcbiAgICApO1xuICB9XG5cbiAgb25DYWxsTWludFBZKFxuICAgIGhhbmRsZXI6IChjYWxsOiBNaW50UFlDYWxsVHJhY2UsIGN0eDogUGVuZGxlWWllbGRUb2tlbkNvbnRleHQpID0+IHZvaWQsXG4gICAgZmV0Y2hDb25maWc/OiBQYXJ0aWFsPEV0aEZldGNoQ29uZmlnPixcbiAgICBwcmVwcm9jZXNzSGFuZGxlcj86IChcbiAgICAgIGNhbGw6IE1pbnRQWUNhbGxUcmFjZSxcbiAgICAgIGN0eDogUGVuZGxlWWllbGRUb2tlbkNvbnRleHQsXG4gICAgKSA9PiBQcm9taXNlPFByZXByb2Nlc3NSZXN1bHQ+LFxuICApOiB0aGlzIHtcbiAgICByZXR1cm4gc3VwZXIub25FdGhUcmFjZShcbiAgICAgIFwiMHhkYjc0YWExNVwiLFxuICAgICAgaGFuZGxlciBhcyBhbnksXG4gICAgICBmZXRjaENvbmZpZyxcbiAgICAgIHByZXByb2Nlc3NIYW5kbGVyLFxuICAgICk7XG4gIH1cblxuICBvbkNhbGxNaW50UFlNdWx0aShcbiAgICBoYW5kbGVyOiAoY2FsbDogTWludFBZTXVsdGlDYWxsVHJhY2UsIGN0eDogUGVuZGxlWWllbGRUb2tlbkNvbnRleHQpID0+IHZvaWQsXG4gICAgZmV0Y2hDb25maWc/OiBQYXJ0aWFsPEV0aEZldGNoQ29uZmlnPixcbiAgICBwcmVwcm9jZXNzSGFuZGxlcj86IChcbiAgICAgIGNhbGw6IE1pbnRQWU11bHRpQ2FsbFRyYWNlLFxuICAgICAgY3R4OiBQZW5kbGVZaWVsZFRva2VuQ29udGV4dCxcbiAgICApID0+IFByb21pc2U8UHJlcHJvY2Vzc1Jlc3VsdD4sXG4gICk6IHRoaXMge1xuICAgIHJldHVybiBzdXBlci5vbkV0aFRyYWNlKFxuICAgICAgXCIweDUzMzM1ODE5XCIsXG4gICAgICBoYW5kbGVyIGFzIGFueSxcbiAgICAgIGZldGNoQ29uZmlnLFxuICAgICAgcHJlcHJvY2Vzc0hhbmRsZXIsXG4gICAgKTtcbiAgfVxuXG4gIG9uQ2FsbE5hbWUoXG4gICAgaGFuZGxlcjogKGNhbGw6IE5hbWVDYWxsVHJhY2UsIGN0eDogUGVuZGxlWWllbGRUb2tlbkNvbnRleHQpID0+IHZvaWQsXG4gICAgZmV0Y2hDb25maWc/OiBQYXJ0aWFsPEV0aEZldGNoQ29uZmlnPixcbiAgICBwcmVwcm9jZXNzSGFuZGxlcj86IChcbiAgICAgIGNhbGw6IE5hbWVDYWxsVHJhY2UsXG4gICAgICBjdHg6IFBlbmRsZVlpZWxkVG9rZW5Db250ZXh0LFxuICAgICkgPT4gUHJvbWlzZTxQcmVwcm9jZXNzUmVzdWx0PixcbiAgKTogdGhpcyB7XG4gICAgcmV0dXJuIHN1cGVyLm9uRXRoVHJhY2UoXG4gICAgICBcIjB4MDZmZGRlMDNcIixcbiAgICAgIGhhbmRsZXIgYXMgYW55LFxuICAgICAgZmV0Y2hDb25maWcsXG4gICAgICBwcmVwcm9jZXNzSGFuZGxlcixcbiAgICApO1xuICB9XG5cbiAgb25DYWxsUG9zdEV4cGlyeShcbiAgICBoYW5kbGVyOiAoY2FsbDogUG9zdEV4cGlyeUNhbGxUcmFjZSwgY3R4OiBQZW5kbGVZaWVsZFRva2VuQ29udGV4dCkgPT4gdm9pZCxcbiAgICBmZXRjaENvbmZpZz86IFBhcnRpYWw8RXRoRmV0Y2hDb25maWc+LFxuICAgIHByZXByb2Nlc3NIYW5kbGVyPzogKFxuICAgICAgY2FsbDogUG9zdEV4cGlyeUNhbGxUcmFjZSxcbiAgICAgIGN0eDogUGVuZGxlWWllbGRUb2tlbkNvbnRleHQsXG4gICAgKSA9PiBQcm9taXNlPFByZXByb2Nlc3NSZXN1bHQ+LFxuICApOiB0aGlzIHtcbiAgICByZXR1cm4gc3VwZXIub25FdGhUcmFjZShcbiAgICAgIFwiMHgwYTJiODNhN1wiLFxuICAgICAgaGFuZGxlciBhcyBhbnksXG4gICAgICBmZXRjaENvbmZpZyxcbiAgICAgIHByZXByb2Nlc3NIYW5kbGVyLFxuICAgICk7XG4gIH1cblxuICBvbkNhbGxQeUluZGV4Q3VycmVudChcbiAgICBoYW5kbGVyOiAoXG4gICAgICBjYWxsOiBQeUluZGV4Q3VycmVudENhbGxUcmFjZSxcbiAgICAgIGN0eDogUGVuZGxlWWllbGRUb2tlbkNvbnRleHQsXG4gICAgKSA9PiB2b2lkLFxuICAgIGZldGNoQ29uZmlnPzogUGFydGlhbDxFdGhGZXRjaENvbmZpZz4sXG4gICAgcHJlcHJvY2Vzc0hhbmRsZXI/OiAoXG4gICAgICBjYWxsOiBQeUluZGV4Q3VycmVudENhbGxUcmFjZSxcbiAgICAgIGN0eDogUGVuZGxlWWllbGRUb2tlbkNvbnRleHQsXG4gICAgKSA9PiBQcm9taXNlPFByZXByb2Nlc3NSZXN1bHQ+LFxuICApOiB0aGlzIHtcbiAgICByZXR1cm4gc3VwZXIub25FdGhUcmFjZShcbiAgICAgIFwiMHgxZDUyZWRjNFwiLFxuICAgICAgaGFuZGxlciBhcyBhbnksXG4gICAgICBmZXRjaENvbmZpZyxcbiAgICAgIHByZXByb2Nlc3NIYW5kbGVyLFxuICAgICk7XG4gIH1cblxuICBvbkNhbGxQeUluZGV4TGFzdFVwZGF0ZWRCbG9jayhcbiAgICBoYW5kbGVyOiAoXG4gICAgICBjYWxsOiBQeUluZGV4TGFzdFVwZGF0ZWRCbG9ja0NhbGxUcmFjZSxcbiAgICAgIGN0eDogUGVuZGxlWWllbGRUb2tlbkNvbnRleHQsXG4gICAgKSA9PiB2b2lkLFxuICAgIGZldGNoQ29uZmlnPzogUGFydGlhbDxFdGhGZXRjaENvbmZpZz4sXG4gICAgcHJlcHJvY2Vzc0hhbmRsZXI/OiAoXG4gICAgICBjYWxsOiBQeUluZGV4TGFzdFVwZGF0ZWRCbG9ja0NhbGxUcmFjZSxcbiAgICAgIGN0eDogUGVuZGxlWWllbGRUb2tlbkNvbnRleHQsXG4gICAgKSA9PiBQcm9taXNlPFByZXByb2Nlc3NSZXN1bHQ+LFxuICApOiB0aGlzIHtcbiAgICByZXR1cm4gc3VwZXIub25FdGhUcmFjZShcbiAgICAgIFwiMHg2MGUwYTllMVwiLFxuICAgICAgaGFuZGxlciBhcyBhbnksXG4gICAgICBmZXRjaENvbmZpZyxcbiAgICAgIHByZXByb2Nlc3NIYW5kbGVyLFxuICAgICk7XG4gIH1cblxuICBvbkNhbGxQeUluZGV4U3RvcmVkKFxuICAgIGhhbmRsZXI6IChcbiAgICAgIGNhbGw6IFB5SW5kZXhTdG9yZWRDYWxsVHJhY2UsXG4gICAgICBjdHg6IFBlbmRsZVlpZWxkVG9rZW5Db250ZXh0LFxuICAgICkgPT4gdm9pZCxcbiAgICBmZXRjaENvbmZpZz86IFBhcnRpYWw8RXRoRmV0Y2hDb25maWc+LFxuICAgIHByZXByb2Nlc3NIYW5kbGVyPzogKFxuICAgICAgY2FsbDogUHlJbmRleFN0b3JlZENhbGxUcmFjZSxcbiAgICAgIGN0eDogUGVuZGxlWWllbGRUb2tlbkNvbnRleHQsXG4gICAgKSA9PiBQcm9taXNlPFByZXByb2Nlc3NSZXN1bHQ+LFxuICApOiB0aGlzIHtcbiAgICByZXR1cm4gc3VwZXIub25FdGhUcmFjZShcbiAgICAgIFwiMHhkMmEzNTg0ZVwiLFxuICAgICAgaGFuZGxlciBhcyBhbnksXG4gICAgICBmZXRjaENvbmZpZyxcbiAgICAgIHByZXByb2Nlc3NIYW5kbGVyLFxuICAgICk7XG4gIH1cblxuICBvbkNhbGxSZWRlZW1EdWVJbnRlcmVzdEFuZFJld2FyZHMoXG4gICAgaGFuZGxlcjogKFxuICAgICAgY2FsbDogUmVkZWVtRHVlSW50ZXJlc3RBbmRSZXdhcmRzQ2FsbFRyYWNlLFxuICAgICAgY3R4OiBQZW5kbGVZaWVsZFRva2VuQ29udGV4dCxcbiAgICApID0+IHZvaWQsXG4gICAgZmV0Y2hDb25maWc/OiBQYXJ0aWFsPEV0aEZldGNoQ29uZmlnPixcbiAgICBwcmVwcm9jZXNzSGFuZGxlcj86IChcbiAgICAgIGNhbGw6IFJlZGVlbUR1ZUludGVyZXN0QW5kUmV3YXJkc0NhbGxUcmFjZSxcbiAgICAgIGN0eDogUGVuZGxlWWllbGRUb2tlbkNvbnRleHQsXG4gICAgKSA9PiBQcm9taXNlPFByZXByb2Nlc3NSZXN1bHQ+LFxuICApOiB0aGlzIHtcbiAgICByZXR1cm4gc3VwZXIub25FdGhUcmFjZShcbiAgICAgIFwiMHg3ZDI0ZGE0ZFwiLFxuICAgICAgaGFuZGxlciBhcyBhbnksXG4gICAgICBmZXRjaENvbmZpZyxcbiAgICAgIHByZXByb2Nlc3NIYW5kbGVyLFxuICAgICk7XG4gIH1cblxuICBvbkNhbGxSZWRlZW1JbnRlcmVzdEFuZFJld2FyZHNQb3N0RXhwaXJ5Rm9yVHJlYXN1cnkoXG4gICAgaGFuZGxlcjogKFxuICAgICAgY2FsbDogUmVkZWVtSW50ZXJlc3RBbmRSZXdhcmRzUG9zdEV4cGlyeUZvclRyZWFzdXJ5Q2FsbFRyYWNlLFxuICAgICAgY3R4OiBQZW5kbGVZaWVsZFRva2VuQ29udGV4dCxcbiAgICApID0+IHZvaWQsXG4gICAgZmV0Y2hDb25maWc/OiBQYXJ0aWFsPEV0aEZldGNoQ29uZmlnPixcbiAgICBwcmVwcm9jZXNzSGFuZGxlcj86IChcbiAgICAgIGNhbGw6IFJlZGVlbUludGVyZXN0QW5kUmV3YXJkc1Bvc3RFeHBpcnlGb3JUcmVhc3VyeUNhbGxUcmFjZSxcbiAgICAgIGN0eDogUGVuZGxlWWllbGRUb2tlbkNvbnRleHQsXG4gICAgKSA9PiBQcm9taXNlPFByZXByb2Nlc3NSZXN1bHQ+LFxuICApOiB0aGlzIHtcbiAgICByZXR1cm4gc3VwZXIub25FdGhUcmFjZShcbiAgICAgIFwiMHhhY2M1ZGE0Y1wiLFxuICAgICAgaGFuZGxlciBhcyBhbnksXG4gICAgICBmZXRjaENvbmZpZyxcbiAgICAgIHByZXByb2Nlc3NIYW5kbGVyLFxuICAgICk7XG4gIH1cblxuICBvbkNhbGxSZWRlZW1QWShcbiAgICBoYW5kbGVyOiAoY2FsbDogUmVkZWVtUFlDYWxsVHJhY2UsIGN0eDogUGVuZGxlWWllbGRUb2tlbkNvbnRleHQpID0+IHZvaWQsXG4gICAgZmV0Y2hDb25maWc/OiBQYXJ0aWFsPEV0aEZldGNoQ29uZmlnPixcbiAgICBwcmVwcm9jZXNzSGFuZGxlcj86IChcbiAgICAgIGNhbGw6IFJlZGVlbVBZQ2FsbFRyYWNlLFxuICAgICAgY3R4OiBQZW5kbGVZaWVsZFRva2VuQ29udGV4dCxcbiAgICApID0+IFByb21pc2U8UHJlcHJvY2Vzc1Jlc3VsdD4sXG4gICk6IHRoaXMge1xuICAgIHJldHVybiBzdXBlci5vbkV0aFRyYWNlKFxuICAgICAgXCIweGJjYjdlYTVkXCIsXG4gICAgICBoYW5kbGVyIGFzIGFueSxcbiAgICAgIGZldGNoQ29uZmlnLFxuICAgICAgcHJlcHJvY2Vzc0hhbmRsZXIsXG4gICAgKTtcbiAgfVxuXG4gIG9uQ2FsbFJlZGVlbVBZTXVsdGkoXG4gICAgaGFuZGxlcjogKFxuICAgICAgY2FsbDogUmVkZWVtUFlNdWx0aUNhbGxUcmFjZSxcbiAgICAgIGN0eDogUGVuZGxlWWllbGRUb2tlbkNvbnRleHQsXG4gICAgKSA9PiB2b2lkLFxuICAgIGZldGNoQ29uZmlnPzogUGFydGlhbDxFdGhGZXRjaENvbmZpZz4sXG4gICAgcHJlcHJvY2Vzc0hhbmRsZXI/OiAoXG4gICAgICBjYWxsOiBSZWRlZW1QWU11bHRpQ2FsbFRyYWNlLFxuICAgICAgY3R4OiBQZW5kbGVZaWVsZFRva2VuQ29udGV4dCxcbiAgICApID0+IFByb21pc2U8UHJlcHJvY2Vzc1Jlc3VsdD4sXG4gICk6IHRoaXMge1xuICAgIHJldHVybiBzdXBlci5vbkV0aFRyYWNlKFxuICAgICAgXCIweGIwZDg4OTgxXCIsXG4gICAgICBoYW5kbGVyIGFzIGFueSxcbiAgICAgIGZldGNoQ29uZmlnLFxuICAgICAgcHJlcHJvY2Vzc0hhbmRsZXIsXG4gICAgKTtcbiAgfVxuXG4gIG9uQ2FsbFJld2FyZEluZGV4ZXNDdXJyZW50KFxuICAgIGhhbmRsZXI6IChcbiAgICAgIGNhbGw6IFJld2FyZEluZGV4ZXNDdXJyZW50Q2FsbFRyYWNlLFxuICAgICAgY3R4OiBQZW5kbGVZaWVsZFRva2VuQ29udGV4dCxcbiAgICApID0+IHZvaWQsXG4gICAgZmV0Y2hDb25maWc/OiBQYXJ0aWFsPEV0aEZldGNoQ29uZmlnPixcbiAgICBwcmVwcm9jZXNzSGFuZGxlcj86IChcbiAgICAgIGNhbGw6IFJld2FyZEluZGV4ZXNDdXJyZW50Q2FsbFRyYWNlLFxuICAgICAgY3R4OiBQZW5kbGVZaWVsZFRva2VuQ29udGV4dCxcbiAgICApID0+IFByb21pc2U8UHJlcHJvY2Vzc1Jlc3VsdD4sXG4gICk6IHRoaXMge1xuICAgIHJldHVybiBzdXBlci5vbkV0aFRyYWNlKFxuICAgICAgXCIweGY4YjJmOTkxXCIsXG4gICAgICBoYW5kbGVyIGFzIGFueSxcbiAgICAgIGZldGNoQ29uZmlnLFxuICAgICAgcHJlcHJvY2Vzc0hhbmRsZXIsXG4gICAgKTtcbiAgfVxuXG4gIG9uQ2FsbFNldFBvc3RFeHBpcnlEYXRhKFxuICAgIGhhbmRsZXI6IChcbiAgICAgIGNhbGw6IFNldFBvc3RFeHBpcnlEYXRhQ2FsbFRyYWNlLFxuICAgICAgY3R4OiBQZW5kbGVZaWVsZFRva2VuQ29udGV4dCxcbiAgICApID0+IHZvaWQsXG4gICAgZmV0Y2hDb25maWc/OiBQYXJ0aWFsPEV0aEZldGNoQ29uZmlnPixcbiAgICBwcmVwcm9jZXNzSGFuZGxlcj86IChcbiAgICAgIGNhbGw6IFNldFBvc3RFeHBpcnlEYXRhQ2FsbFRyYWNlLFxuICAgICAgY3R4OiBQZW5kbGVZaWVsZFRva2VuQ29udGV4dCxcbiAgICApID0+IFByb21pc2U8UHJlcHJvY2Vzc1Jlc3VsdD4sXG4gICk6IHRoaXMge1xuICAgIHJldHVybiBzdXBlci5vbkV0aFRyYWNlKFxuICAgICAgXCIweGNkYmIwMzYxXCIsXG4gICAgICBoYW5kbGVyIGFzIGFueSxcbiAgICAgIGZldGNoQ29uZmlnLFxuICAgICAgcHJlcHJvY2Vzc0hhbmRsZXIsXG4gICAgKTtcbiAgfVxuXG4gIG9uQ2FsbFN5UmVzZXJ2ZShcbiAgICBoYW5kbGVyOiAoY2FsbDogU3lSZXNlcnZlQ2FsbFRyYWNlLCBjdHg6IFBlbmRsZVlpZWxkVG9rZW5Db250ZXh0KSA9PiB2b2lkLFxuICAgIGZldGNoQ29uZmlnPzogUGFydGlhbDxFdGhGZXRjaENvbmZpZz4sXG4gICAgcHJlcHJvY2Vzc0hhbmRsZXI/OiAoXG4gICAgICBjYWxsOiBTeVJlc2VydmVDYWxsVHJhY2UsXG4gICAgICBjdHg6IFBlbmRsZVlpZWxkVG9rZW5Db250ZXh0LFxuICAgICkgPT4gUHJvbWlzZTxQcmVwcm9jZXNzUmVzdWx0PixcbiAgKTogdGhpcyB7XG4gICAgcmV0dXJuIHN1cGVyLm9uRXRoVHJhY2UoXG4gICAgICBcIjB4NGJhNmRjZDdcIixcbiAgICAgIGhhbmRsZXIgYXMgYW55LFxuICAgICAgZmV0Y2hDb25maWcsXG4gICAgICBwcmVwcm9jZXNzSGFuZGxlcixcbiAgICApO1xuICB9XG5cbiAgb25DYWxsU3ltYm9sKFxuICAgIGhhbmRsZXI6IChjYWxsOiBTeW1ib2xDYWxsVHJhY2UsIGN0eDogUGVuZGxlWWllbGRUb2tlbkNvbnRleHQpID0+IHZvaWQsXG4gICAgZmV0Y2hDb25maWc/OiBQYXJ0aWFsPEV0aEZldGNoQ29uZmlnPixcbiAgICBwcmVwcm9jZXNzSGFuZGxlcj86IChcbiAgICAgIGNhbGw6IFN5bWJvbENhbGxUcmFjZSxcbiAgICAgIGN0eDogUGVuZGxlWWllbGRUb2tlbkNvbnRleHQsXG4gICAgKSA9PiBQcm9taXNlPFByZXByb2Nlc3NSZXN1bHQ+LFxuICApOiB0aGlzIHtcbiAgICByZXR1cm4gc3VwZXIub25FdGhUcmFjZShcbiAgICAgIFwiMHg5NWQ4OWI0MVwiLFxuICAgICAgaGFuZGxlciBhcyBhbnksXG4gICAgICBmZXRjaENvbmZpZyxcbiAgICAgIHByZXByb2Nlc3NIYW5kbGVyLFxuICAgICk7XG4gIH1cblxuICBvbkNhbGxUb3RhbFN1cHBseShcbiAgICBoYW5kbGVyOiAoY2FsbDogVG90YWxTdXBwbHlDYWxsVHJhY2UsIGN0eDogUGVuZGxlWWllbGRUb2tlbkNvbnRleHQpID0+IHZvaWQsXG4gICAgZmV0Y2hDb25maWc/OiBQYXJ0aWFsPEV0aEZldGNoQ29uZmlnPixcbiAgICBwcmVwcm9jZXNzSGFuZGxlcj86IChcbiAgICAgIGNhbGw6IFRvdGFsU3VwcGx5Q2FsbFRyYWNlLFxuICAgICAgY3R4OiBQZW5kbGVZaWVsZFRva2VuQ29udGV4dCxcbiAgICApID0+IFByb21pc2U8UHJlcHJvY2Vzc1Jlc3VsdD4sXG4gICk6IHRoaXMge1xuICAgIHJldHVybiBzdXBlci5vbkV0aFRyYWNlKFxuICAgICAgXCIweDE4MTYwZGRkXCIsXG4gICAgICBoYW5kbGVyIGFzIGFueSxcbiAgICAgIGZldGNoQ29uZmlnLFxuICAgICAgcHJlcHJvY2Vzc0hhbmRsZXIsXG4gICAgKTtcbiAgfVxuXG4gIG9uQ2FsbFRyYW5zZmVyKFxuICAgIGhhbmRsZXI6IChjYWxsOiBUcmFuc2ZlckNhbGxUcmFjZSwgY3R4OiBQZW5kbGVZaWVsZFRva2VuQ29udGV4dCkgPT4gdm9pZCxcbiAgICBmZXRjaENvbmZpZz86IFBhcnRpYWw8RXRoRmV0Y2hDb25maWc+LFxuICAgIHByZXByb2Nlc3NIYW5kbGVyPzogKFxuICAgICAgY2FsbDogVHJhbnNmZXJDYWxsVHJhY2UsXG4gICAgICBjdHg6IFBlbmRsZVlpZWxkVG9rZW5Db250ZXh0LFxuICAgICkgPT4gUHJvbWlzZTxQcmVwcm9jZXNzUmVzdWx0PixcbiAgKTogdGhpcyB7XG4gICAgcmV0dXJuIHN1cGVyLm9uRXRoVHJhY2UoXG4gICAgICBcIjB4YTkwNTljYmJcIixcbiAgICAgIGhhbmRsZXIgYXMgYW55LFxuICAgICAgZmV0Y2hDb25maWcsXG4gICAgICBwcmVwcm9jZXNzSGFuZGxlcixcbiAgICApO1xuICB9XG5cbiAgb25DYWxsVHJhbnNmZXJGcm9tKFxuICAgIGhhbmRsZXI6IChcbiAgICAgIGNhbGw6IFRyYW5zZmVyRnJvbUNhbGxUcmFjZSxcbiAgICAgIGN0eDogUGVuZGxlWWllbGRUb2tlbkNvbnRleHQsXG4gICAgKSA9PiB2b2lkLFxuICAgIGZldGNoQ29uZmlnPzogUGFydGlhbDxFdGhGZXRjaENvbmZpZz4sXG4gICAgcHJlcHJvY2Vzc0hhbmRsZXI/OiAoXG4gICAgICBjYWxsOiBUcmFuc2ZlckZyb21DYWxsVHJhY2UsXG4gICAgICBjdHg6IFBlbmRsZVlpZWxkVG9rZW5Db250ZXh0LFxuICAgICkgPT4gUHJvbWlzZTxQcmVwcm9jZXNzUmVzdWx0PixcbiAgKTogdGhpcyB7XG4gICAgcmV0dXJuIHN1cGVyLm9uRXRoVHJhY2UoXG4gICAgICBcIjB4MjNiODcyZGRcIixcbiAgICAgIGhhbmRsZXIgYXMgYW55LFxuICAgICAgZmV0Y2hDb25maWcsXG4gICAgICBwcmVwcm9jZXNzSGFuZGxlcixcbiAgICApO1xuICB9XG5cbiAgb25DYWxsVXNlckludGVyZXN0KFxuICAgIGhhbmRsZXI6IChcbiAgICAgIGNhbGw6IFVzZXJJbnRlcmVzdENhbGxUcmFjZSxcbiAgICAgIGN0eDogUGVuZGxlWWllbGRUb2tlbkNvbnRleHQsXG4gICAgKSA9PiB2b2lkLFxuICAgIGZldGNoQ29uZmlnPzogUGFydGlhbDxFdGhGZXRjaENvbmZpZz4sXG4gICAgcHJlcHJvY2Vzc0hhbmRsZXI/OiAoXG4gICAgICBjYWxsOiBVc2VySW50ZXJlc3RDYWxsVHJhY2UsXG4gICAgICBjdHg6IFBlbmRsZVlpZWxkVG9rZW5Db250ZXh0LFxuICAgICkgPT4gUHJvbWlzZTxQcmVwcm9jZXNzUmVzdWx0PixcbiAgKTogdGhpcyB7XG4gICAgcmV0dXJuIHN1cGVyLm9uRXRoVHJhY2UoXG4gICAgICBcIjB4ZDY4MDc2YzNcIixcbiAgICAgIGhhbmRsZXIgYXMgYW55LFxuICAgICAgZmV0Y2hDb25maWcsXG4gICAgICBwcmVwcm9jZXNzSGFuZGxlcixcbiAgICApO1xuICB9XG5cbiAgb25DYWxsVXNlclJld2FyZChcbiAgICBoYW5kbGVyOiAoY2FsbDogVXNlclJld2FyZENhbGxUcmFjZSwgY3R4OiBQZW5kbGVZaWVsZFRva2VuQ29udGV4dCkgPT4gdm9pZCxcbiAgICBmZXRjaENvbmZpZz86IFBhcnRpYWw8RXRoRmV0Y2hDb25maWc+LFxuICAgIHByZXByb2Nlc3NIYW5kbGVyPzogKFxuICAgICAgY2FsbDogVXNlclJld2FyZENhbGxUcmFjZSxcbiAgICAgIGN0eDogUGVuZGxlWWllbGRUb2tlbkNvbnRleHQsXG4gICAgKSA9PiBQcm9taXNlPFByZXByb2Nlc3NSZXN1bHQ+LFxuICApOiB0aGlzIHtcbiAgICByZXR1cm4gc3VwZXIub25FdGhUcmFjZShcbiAgICAgIFwiMHg1Y2JhZGJlNFwiLFxuICAgICAgaGFuZGxlciBhcyBhbnksXG4gICAgICBmZXRjaENvbmZpZyxcbiAgICAgIHByZXByb2Nlc3NIYW5kbGVyLFxuICAgICk7XG4gIH1cblxuICBwdWJsaWMgc3RhdGljIGZpbHRlcnMgPSB7XG4gICAgQXBwcm92YWwoXG4gICAgICBvd25lcj86IHN0cmluZyB8IG51bGwsXG4gICAgICBzcGVuZGVyPzogc3RyaW5nIHwgbnVsbCxcbiAgICAgIHZhbHVlPzogbnVsbCxcbiAgICApOiBBcHByb3ZhbEV2ZW50RmlsdGVyIHtcbiAgICAgIHJldHVybiB0ZW1wbGF0ZUNvbnRyYWN0LmZpbHRlcnNbXCJBcHByb3ZhbChhZGRyZXNzLGFkZHJlc3MsdWludDI1NilcIl0oXG4gICAgICAgIG93bmVyLFxuICAgICAgICBzcGVuZGVyLFxuICAgICAgICB2YWx1ZSxcbiAgICAgICk7XG4gICAgfSxcbiAgICBCdXJuKFxuICAgICAgY2FsbGVyPzogc3RyaW5nIHwgbnVsbCxcbiAgICAgIHJlY2VpdmVyPzogc3RyaW5nIHwgbnVsbCxcbiAgICAgIGFtb3VudFBZVG9SZWRlZW0/OiBudWxsLFxuICAgICAgYW1vdW50U3lPdXQ/OiBudWxsLFxuICAgICk6IEJ1cm5FdmVudEZpbHRlciB7XG4gICAgICByZXR1cm4gdGVtcGxhdGVDb250cmFjdC5maWx0ZXJzW1wiQnVybihhZGRyZXNzLGFkZHJlc3MsdWludDI1Nix1aW50MjU2KVwiXShcbiAgICAgICAgY2FsbGVyLFxuICAgICAgICByZWNlaXZlcixcbiAgICAgICAgYW1vdW50UFlUb1JlZGVlbSxcbiAgICAgICAgYW1vdW50U3lPdXQsXG4gICAgICApO1xuICAgIH0sXG4gICAgQ29sbGVjdEludGVyZXN0RmVlKFxuICAgICAgYW1vdW50SW50ZXJlc3RGZWU/OiBudWxsLFxuICAgICk6IENvbGxlY3RJbnRlcmVzdEZlZUV2ZW50RmlsdGVyIHtcbiAgICAgIHJldHVybiB0ZW1wbGF0ZUNvbnRyYWN0LmZpbHRlcnNbXCJDb2xsZWN0SW50ZXJlc3RGZWUodWludDI1NilcIl0oXG4gICAgICAgIGFtb3VudEludGVyZXN0RmVlLFxuICAgICAgKTtcbiAgICB9LFxuICAgIENvbGxlY3RSZXdhcmRGZWUoXG4gICAgICByZXdhcmRUb2tlbj86IHN0cmluZyB8IG51bGwsXG4gICAgICBhbW91bnRSZXdhcmRGZWU/OiBudWxsLFxuICAgICk6IENvbGxlY3RSZXdhcmRGZWVFdmVudEZpbHRlciB7XG4gICAgICByZXR1cm4gdGVtcGxhdGVDb250cmFjdC5maWx0ZXJzW1wiQ29sbGVjdFJld2FyZEZlZShhZGRyZXNzLHVpbnQyNTYpXCJdKFxuICAgICAgICByZXdhcmRUb2tlbixcbiAgICAgICAgYW1vdW50UmV3YXJkRmVlLFxuICAgICAgKTtcbiAgICB9LFxuICAgIE1pbnQoXG4gICAgICBjYWxsZXI/OiBzdHJpbmcgfCBudWxsLFxuICAgICAgcmVjZWl2ZXJQVD86IHN0cmluZyB8IG51bGwsXG4gICAgICByZWNlaXZlcllUPzogc3RyaW5nIHwgbnVsbCxcbiAgICAgIGFtb3VudFN5VG9NaW50PzogbnVsbCxcbiAgICAgIGFtb3VudFBZT3V0PzogbnVsbCxcbiAgICApOiBNaW50RXZlbnRGaWx0ZXIge1xuICAgICAgcmV0dXJuIHRlbXBsYXRlQ29udHJhY3QuZmlsdGVyc1tcbiAgICAgICAgXCJNaW50KGFkZHJlc3MsYWRkcmVzcyxhZGRyZXNzLHVpbnQyNTYsdWludDI1NilcIlxuICAgICAgXShjYWxsZXIsIHJlY2VpdmVyUFQsIHJlY2VpdmVyWVQsIGFtb3VudFN5VG9NaW50LCBhbW91bnRQWU91dCk7XG4gICAgfSxcbiAgICBOZXdJbnRlcmVzdEluZGV4KFxuICAgICAgbmV3SW5kZXg/OiBCaWdOdW1iZXJpc2ggfCBudWxsLFxuICAgICk6IE5ld0ludGVyZXN0SW5kZXhFdmVudEZpbHRlciB7XG4gICAgICByZXR1cm4gdGVtcGxhdGVDb250cmFjdC5maWx0ZXJzW1wiTmV3SW50ZXJlc3RJbmRleCh1aW50MjU2KVwiXShuZXdJbmRleCk7XG4gICAgfSxcbiAgICBSZWRlZW1JbnRlcmVzdChcbiAgICAgIHVzZXI/OiBzdHJpbmcgfCBudWxsLFxuICAgICAgaW50ZXJlc3RPdXQ/OiBudWxsLFxuICAgICk6IFJlZGVlbUludGVyZXN0RXZlbnRGaWx0ZXIge1xuICAgICAgcmV0dXJuIHRlbXBsYXRlQ29udHJhY3QuZmlsdGVyc1tcIlJlZGVlbUludGVyZXN0KGFkZHJlc3MsdWludDI1NilcIl0oXG4gICAgICAgIHVzZXIsXG4gICAgICAgIGludGVyZXN0T3V0LFxuICAgICAgKTtcbiAgICB9LFxuICAgIFJlZGVlbVJld2FyZHMoXG4gICAgICB1c2VyPzogc3RyaW5nIHwgbnVsbCxcbiAgICAgIGFtb3VudFJld2FyZHNPdXQ/OiBudWxsLFxuICAgICk6IFJlZGVlbVJld2FyZHNFdmVudEZpbHRlciB7XG4gICAgICByZXR1cm4gdGVtcGxhdGVDb250cmFjdC5maWx0ZXJzW1wiUmVkZWVtUmV3YXJkcyhhZGRyZXNzLHVpbnQyNTZbXSlcIl0oXG4gICAgICAgIHVzZXIsXG4gICAgICAgIGFtb3VudFJld2FyZHNPdXQsXG4gICAgICApO1xuICAgIH0sXG4gICAgVHJhbnNmZXIoXG4gICAgICBmcm9tPzogc3RyaW5nIHwgbnVsbCxcbiAgICAgIHRvPzogc3RyaW5nIHwgbnVsbCxcbiAgICAgIHZhbHVlPzogbnVsbCxcbiAgICApOiBUcmFuc2ZlckV2ZW50RmlsdGVyIHtcbiAgICAgIHJldHVybiB0ZW1wbGF0ZUNvbnRyYWN0LmZpbHRlcnNbXCJUcmFuc2ZlcihhZGRyZXNzLGFkZHJlc3MsdWludDI1NilcIl0oXG4gICAgICAgIGZyb20sXG4gICAgICAgIHRvLFxuICAgICAgICB2YWx1ZSxcbiAgICAgICk7XG4gICAgfSxcbiAgfTtcblxuICBwcm90ZWN0ZWQgQ3JlYXRlQm91bmRDb250cmFjdFZpZXcoKTogUGVuZGxlWWllbGRUb2tlbkJvdW5kQ29udHJhY3RWaWV3IHtcbiAgICBjb25zdCB2aWV3ID0gZ2V0UGVuZGxlWWllbGRUb2tlbkNvbnRyYWN0KFxuICAgICAgdGhpcy5jb25maWcubmV0d29yayxcbiAgICAgIHRoaXMuY29uZmlnLmFkZHJlc3MsXG4gICAgKTtcbiAgICByZXR1cm4gbmV3IFBlbmRsZVlpZWxkVG9rZW5Cb3VuZENvbnRyYWN0Vmlldyh0aGlzLmNvbmZpZy5hZGRyZXNzLCB2aWV3KTtcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgYmluZChvcHRpb25zOiBCaW5kT3B0aW9ucyk6IFBlbmRsZVlpZWxkVG9rZW5Qcm9jZXNzb3Ige1xuICAgIGlmICghb3B0aW9ucy5uYW1lKSB7XG4gICAgICBvcHRpb25zLm5hbWUgPSBcIlBlbmRsZVlpZWxkVG9rZW5cIjtcbiAgICB9XG4gICAgbGV0IHByb2Nlc3NvciA9IGdldFByb2Nlc3NvcihvcHRpb25zKSBhcyBQZW5kbGVZaWVsZFRva2VuUHJvY2Vzc29yO1xuICAgIGlmICghcHJvY2Vzc29yKSB7XG4gICAgICBwcm9jZXNzb3IgPSBuZXcgUGVuZGxlWWllbGRUb2tlblByb2Nlc3NvcihvcHRpb25zKTtcbiAgICAgIGFkZFByb2Nlc3NvcihvcHRpb25zLCBwcm9jZXNzb3IpO1xuICAgIH1cbiAgICByZXR1cm4gcHJvY2Vzc29yO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBQZW5kbGVZaWVsZFRva2VuUHJvY2Vzc29yVGVtcGxhdGUgZXh0ZW5kcyBCYXNlUHJvY2Vzc29yVGVtcGxhdGU8XG4gIFBlbmRsZVlpZWxkVG9rZW4sXG4gIFBlbmRsZVlpZWxkVG9rZW5Cb3VuZENvbnRyYWN0Vmlld1xuPiB7XG4gIGJpbmRJbnRlcm5hbChvcHRpb25zOiBCaW5kT3B0aW9ucykge1xuICAgIGlmICghb3B0aW9ucy5uYW1lKSB7XG4gICAgICBvcHRpb25zLm5hbWUgPSBcIlBlbmRsZVlpZWxkVG9rZW5cIjtcbiAgICB9XG4gICAgbGV0IHByb2Nlc3NvciA9IGdldFByb2Nlc3NvcihvcHRpb25zKSBhcyBQZW5kbGVZaWVsZFRva2VuUHJvY2Vzc29yO1xuICAgIGlmICghcHJvY2Vzc29yKSB7XG4gICAgICBwcm9jZXNzb3IgPSBuZXcgUGVuZGxlWWllbGRUb2tlblByb2Nlc3NvcihvcHRpb25zKTtcbiAgICAgIGFkZFByb2Nlc3NvcihvcHRpb25zLCBwcm9jZXNzb3IpO1xuICAgIH1cbiAgICByZXR1cm4gcHJvY2Vzc29yO1xuICB9XG5cbiAgb25FdmVudEFwcHJvdmFsKFxuICAgIGhhbmRsZXI6IChldmVudDogQXBwcm92YWxFdmVudCwgY3R4OiBQZW5kbGVZaWVsZFRva2VuQ29udGV4dCkgPT4gdm9pZCxcbiAgICBmaWx0ZXI/OiBBcHByb3ZhbEV2ZW50RmlsdGVyIHwgQXBwcm92YWxFdmVudEZpbHRlcltdLFxuICAgIGZldGNoQ29uZmlnPzogUGFydGlhbDxFdGhGZXRjaENvbmZpZz4sXG4gICAgcHJlcHJvY2Vzc0hhbmRsZXI/OiAoXG4gICAgICBldmVudDogQXBwcm92YWxFdmVudCxcbiAgICAgIGN0eDogUGVuZGxlWWllbGRUb2tlbkNvbnRleHQsXG4gICAgICBwcmVwcm9jZXNzU3RvcmU6IHsgW2s6IHN0cmluZ106IGFueSB9LFxuICAgICkgPT4gUHJvbWlzZTxQcmVwcm9jZXNzUmVzdWx0PixcbiAgKTogdGhpcyB7XG4gICAgaWYgKCFmaWx0ZXIpIHtcbiAgICAgIGZpbHRlciA9IHRlbXBsYXRlQ29udHJhY3QuZmlsdGVyc1tcIkFwcHJvdmFsKGFkZHJlc3MsYWRkcmVzcyx1aW50MjU2KVwiXShcbiAgICAgICAgbnVsbCxcbiAgICAgICAgbnVsbCxcbiAgICAgICAgbnVsbCxcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiBzdXBlci5vbkV0aEV2ZW50KGhhbmRsZXIsIGZpbHRlciEsIGZldGNoQ29uZmlnLCBwcmVwcm9jZXNzSGFuZGxlcik7XG4gIH1cblxuICBvbkV2ZW50QnVybihcbiAgICBoYW5kbGVyOiAoZXZlbnQ6IEJ1cm5FdmVudCwgY3R4OiBQZW5kbGVZaWVsZFRva2VuQ29udGV4dCkgPT4gdm9pZCxcbiAgICBmaWx0ZXI/OiBCdXJuRXZlbnRGaWx0ZXIgfCBCdXJuRXZlbnRGaWx0ZXJbXSxcbiAgICBmZXRjaENvbmZpZz86IFBhcnRpYWw8RXRoRmV0Y2hDb25maWc+LFxuICAgIHByZXByb2Nlc3NIYW5kbGVyPzogKFxuICAgICAgZXZlbnQ6IEJ1cm5FdmVudCxcbiAgICAgIGN0eDogUGVuZGxlWWllbGRUb2tlbkNvbnRleHQsXG4gICAgICBwcmVwcm9jZXNzU3RvcmU6IHsgW2s6IHN0cmluZ106IGFueSB9LFxuICAgICkgPT4gUHJvbWlzZTxQcmVwcm9jZXNzUmVzdWx0PixcbiAgKTogdGhpcyB7XG4gICAgaWYgKCFmaWx0ZXIpIHtcbiAgICAgIGZpbHRlciA9IHRlbXBsYXRlQ29udHJhY3QuZmlsdGVyc1tcbiAgICAgICAgXCJCdXJuKGFkZHJlc3MsYWRkcmVzcyx1aW50MjU2LHVpbnQyNTYpXCJcbiAgICAgIF0obnVsbCwgbnVsbCwgbnVsbCwgbnVsbCk7XG4gICAgfVxuICAgIHJldHVybiBzdXBlci5vbkV0aEV2ZW50KGhhbmRsZXIsIGZpbHRlciEsIGZldGNoQ29uZmlnLCBwcmVwcm9jZXNzSGFuZGxlcik7XG4gIH1cblxuICBvbkV2ZW50Q29sbGVjdEludGVyZXN0RmVlKFxuICAgIGhhbmRsZXI6IChcbiAgICAgIGV2ZW50OiBDb2xsZWN0SW50ZXJlc3RGZWVFdmVudCxcbiAgICAgIGN0eDogUGVuZGxlWWllbGRUb2tlbkNvbnRleHQsXG4gICAgKSA9PiB2b2lkLFxuICAgIGZpbHRlcj86IENvbGxlY3RJbnRlcmVzdEZlZUV2ZW50RmlsdGVyIHwgQ29sbGVjdEludGVyZXN0RmVlRXZlbnRGaWx0ZXJbXSxcbiAgICBmZXRjaENvbmZpZz86IFBhcnRpYWw8RXRoRmV0Y2hDb25maWc+LFxuICAgIHByZXByb2Nlc3NIYW5kbGVyPzogKFxuICAgICAgZXZlbnQ6IENvbGxlY3RJbnRlcmVzdEZlZUV2ZW50LFxuICAgICAgY3R4OiBQZW5kbGVZaWVsZFRva2VuQ29udGV4dCxcbiAgICAgIHByZXByb2Nlc3NTdG9yZTogeyBbazogc3RyaW5nXTogYW55IH0sXG4gICAgKSA9PiBQcm9taXNlPFByZXByb2Nlc3NSZXN1bHQ+LFxuICApOiB0aGlzIHtcbiAgICBpZiAoIWZpbHRlcikge1xuICAgICAgZmlsdGVyID0gdGVtcGxhdGVDb250cmFjdC5maWx0ZXJzW1wiQ29sbGVjdEludGVyZXN0RmVlKHVpbnQyNTYpXCJdKG51bGwpO1xuICAgIH1cbiAgICByZXR1cm4gc3VwZXIub25FdGhFdmVudChoYW5kbGVyLCBmaWx0ZXIhLCBmZXRjaENvbmZpZywgcHJlcHJvY2Vzc0hhbmRsZXIpO1xuICB9XG5cbiAgb25FdmVudENvbGxlY3RSZXdhcmRGZWUoXG4gICAgaGFuZGxlcjogKFxuICAgICAgZXZlbnQ6IENvbGxlY3RSZXdhcmRGZWVFdmVudCxcbiAgICAgIGN0eDogUGVuZGxlWWllbGRUb2tlbkNvbnRleHQsXG4gICAgKSA9PiB2b2lkLFxuICAgIGZpbHRlcj86IENvbGxlY3RSZXdhcmRGZWVFdmVudEZpbHRlciB8IENvbGxlY3RSZXdhcmRGZWVFdmVudEZpbHRlcltdLFxuICAgIGZldGNoQ29uZmlnPzogUGFydGlhbDxFdGhGZXRjaENvbmZpZz4sXG4gICAgcHJlcHJvY2Vzc0hhbmRsZXI/OiAoXG4gICAgICBldmVudDogQ29sbGVjdFJld2FyZEZlZUV2ZW50LFxuICAgICAgY3R4OiBQZW5kbGVZaWVsZFRva2VuQ29udGV4dCxcbiAgICAgIHByZXByb2Nlc3NTdG9yZTogeyBbazogc3RyaW5nXTogYW55IH0sXG4gICAgKSA9PiBQcm9taXNlPFByZXByb2Nlc3NSZXN1bHQ+LFxuICApOiB0aGlzIHtcbiAgICBpZiAoIWZpbHRlcikge1xuICAgICAgZmlsdGVyID0gdGVtcGxhdGVDb250cmFjdC5maWx0ZXJzW1wiQ29sbGVjdFJld2FyZEZlZShhZGRyZXNzLHVpbnQyNTYpXCJdKFxuICAgICAgICBudWxsLFxuICAgICAgICBudWxsLFxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIHN1cGVyLm9uRXRoRXZlbnQoaGFuZGxlciwgZmlsdGVyISwgZmV0Y2hDb25maWcsIHByZXByb2Nlc3NIYW5kbGVyKTtcbiAgfVxuXG4gIG9uRXZlbnRNaW50KFxuICAgIGhhbmRsZXI6IChldmVudDogTWludEV2ZW50LCBjdHg6IFBlbmRsZVlpZWxkVG9rZW5Db250ZXh0KSA9PiB2b2lkLFxuICAgIGZpbHRlcj86IE1pbnRFdmVudEZpbHRlciB8IE1pbnRFdmVudEZpbHRlcltdLFxuICAgIGZldGNoQ29uZmlnPzogUGFydGlhbDxFdGhGZXRjaENvbmZpZz4sXG4gICAgcHJlcHJvY2Vzc0hhbmRsZXI/OiAoXG4gICAgICBldmVudDogTWludEV2ZW50LFxuICAgICAgY3R4OiBQZW5kbGVZaWVsZFRva2VuQ29udGV4dCxcbiAgICAgIHByZXByb2Nlc3NTdG9yZTogeyBbazogc3RyaW5nXTogYW55IH0sXG4gICAgKSA9PiBQcm9taXNlPFByZXByb2Nlc3NSZXN1bHQ+LFxuICApOiB0aGlzIHtcbiAgICBpZiAoIWZpbHRlcikge1xuICAgICAgZmlsdGVyID0gdGVtcGxhdGVDb250cmFjdC5maWx0ZXJzW1xuICAgICAgICBcIk1pbnQoYWRkcmVzcyxhZGRyZXNzLGFkZHJlc3MsdWludDI1Nix1aW50MjU2KVwiXG4gICAgICBdKG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwpO1xuICAgIH1cbiAgICByZXR1cm4gc3VwZXIub25FdGhFdmVudChoYW5kbGVyLCBmaWx0ZXIhLCBmZXRjaENvbmZpZywgcHJlcHJvY2Vzc0hhbmRsZXIpO1xuICB9XG5cbiAgb25FdmVudE5ld0ludGVyZXN0SW5kZXgoXG4gICAgaGFuZGxlcjogKFxuICAgICAgZXZlbnQ6IE5ld0ludGVyZXN0SW5kZXhFdmVudCxcbiAgICAgIGN0eDogUGVuZGxlWWllbGRUb2tlbkNvbnRleHQsXG4gICAgKSA9PiB2b2lkLFxuICAgIGZpbHRlcj86IE5ld0ludGVyZXN0SW5kZXhFdmVudEZpbHRlciB8IE5ld0ludGVyZXN0SW5kZXhFdmVudEZpbHRlcltdLFxuICAgIGZldGNoQ29uZmlnPzogUGFydGlhbDxFdGhGZXRjaENvbmZpZz4sXG4gICAgcHJlcHJvY2Vzc0hhbmRsZXI/OiAoXG4gICAgICBldmVudDogTmV3SW50ZXJlc3RJbmRleEV2ZW50LFxuICAgICAgY3R4OiBQZW5kbGVZaWVsZFRva2VuQ29udGV4dCxcbiAgICAgIHByZXByb2Nlc3NTdG9yZTogeyBbazogc3RyaW5nXTogYW55IH0sXG4gICAgKSA9PiBQcm9taXNlPFByZXByb2Nlc3NSZXN1bHQ+LFxuICApOiB0aGlzIHtcbiAgICBpZiAoIWZpbHRlcikge1xuICAgICAgZmlsdGVyID0gdGVtcGxhdGVDb250cmFjdC5maWx0ZXJzW1wiTmV3SW50ZXJlc3RJbmRleCh1aW50MjU2KVwiXShudWxsKTtcbiAgICB9XG4gICAgcmV0dXJuIHN1cGVyLm9uRXRoRXZlbnQoaGFuZGxlciwgZmlsdGVyISwgZmV0Y2hDb25maWcsIHByZXByb2Nlc3NIYW5kbGVyKTtcbiAgfVxuXG4gIG9uRXZlbnRSZWRlZW1JbnRlcmVzdChcbiAgICBoYW5kbGVyOiAoZXZlbnQ6IFJlZGVlbUludGVyZXN0RXZlbnQsIGN0eDogUGVuZGxlWWllbGRUb2tlbkNvbnRleHQpID0+IHZvaWQsXG4gICAgZmlsdGVyPzogUmVkZWVtSW50ZXJlc3RFdmVudEZpbHRlciB8IFJlZGVlbUludGVyZXN0RXZlbnRGaWx0ZXJbXSxcbiAgICBmZXRjaENvbmZpZz86IFBhcnRpYWw8RXRoRmV0Y2hDb25maWc+LFxuICAgIHByZXByb2Nlc3NIYW5kbGVyPzogKFxuICAgICAgZXZlbnQ6IFJlZGVlbUludGVyZXN0RXZlbnQsXG4gICAgICBjdHg6IFBlbmRsZVlpZWxkVG9rZW5Db250ZXh0LFxuICAgICAgcHJlcHJvY2Vzc1N0b3JlOiB7IFtrOiBzdHJpbmddOiBhbnkgfSxcbiAgICApID0+IFByb21pc2U8UHJlcHJvY2Vzc1Jlc3VsdD4sXG4gICk6IHRoaXMge1xuICAgIGlmICghZmlsdGVyKSB7XG4gICAgICBmaWx0ZXIgPSB0ZW1wbGF0ZUNvbnRyYWN0LmZpbHRlcnNbXCJSZWRlZW1JbnRlcmVzdChhZGRyZXNzLHVpbnQyNTYpXCJdKFxuICAgICAgICBudWxsLFxuICAgICAgICBudWxsLFxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIHN1cGVyLm9uRXRoRXZlbnQoaGFuZGxlciwgZmlsdGVyISwgZmV0Y2hDb25maWcsIHByZXByb2Nlc3NIYW5kbGVyKTtcbiAgfVxuXG4gIG9uRXZlbnRSZWRlZW1SZXdhcmRzKFxuICAgIGhhbmRsZXI6IChldmVudDogUmVkZWVtUmV3YXJkc0V2ZW50LCBjdHg6IFBlbmRsZVlpZWxkVG9rZW5Db250ZXh0KSA9PiB2b2lkLFxuICAgIGZpbHRlcj86IFJlZGVlbVJld2FyZHNFdmVudEZpbHRlciB8IFJlZGVlbVJld2FyZHNFdmVudEZpbHRlcltdLFxuICAgIGZldGNoQ29uZmlnPzogUGFydGlhbDxFdGhGZXRjaENvbmZpZz4sXG4gICAgcHJlcHJvY2Vzc0hhbmRsZXI/OiAoXG4gICAgICBldmVudDogUmVkZWVtUmV3YXJkc0V2ZW50LFxuICAgICAgY3R4OiBQZW5kbGVZaWVsZFRva2VuQ29udGV4dCxcbiAgICAgIHByZXByb2Nlc3NTdG9yZTogeyBbazogc3RyaW5nXTogYW55IH0sXG4gICAgKSA9PiBQcm9taXNlPFByZXByb2Nlc3NSZXN1bHQ+LFxuICApOiB0aGlzIHtcbiAgICBpZiAoIWZpbHRlcikge1xuICAgICAgZmlsdGVyID0gdGVtcGxhdGVDb250cmFjdC5maWx0ZXJzW1wiUmVkZWVtUmV3YXJkcyhhZGRyZXNzLHVpbnQyNTZbXSlcIl0oXG4gICAgICAgIG51bGwsXG4gICAgICAgIG51bGwsXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gc3VwZXIub25FdGhFdmVudChoYW5kbGVyLCBmaWx0ZXIhLCBmZXRjaENvbmZpZywgcHJlcHJvY2Vzc0hhbmRsZXIpO1xuICB9XG5cbiAgb25FdmVudFRyYW5zZmVyKFxuICAgIGhhbmRsZXI6IChldmVudDogVHJhbnNmZXJFdmVudCwgY3R4OiBQZW5kbGVZaWVsZFRva2VuQ29udGV4dCkgPT4gdm9pZCxcbiAgICBmaWx0ZXI/OiBUcmFuc2ZlckV2ZW50RmlsdGVyIHwgVHJhbnNmZXJFdmVudEZpbHRlcltdLFxuICAgIGZldGNoQ29uZmlnPzogUGFydGlhbDxFdGhGZXRjaENvbmZpZz4sXG4gICAgcHJlcHJvY2Vzc0hhbmRsZXI/OiAoXG4gICAgICBldmVudDogVHJhbnNmZXJFdmVudCxcbiAgICAgIGN0eDogUGVuZGxlWWllbGRUb2tlbkNvbnRleHQsXG4gICAgICBwcmVwcm9jZXNzU3RvcmU6IHsgW2s6IHN0cmluZ106IGFueSB9LFxuICAgICkgPT4gUHJvbWlzZTxQcmVwcm9jZXNzUmVzdWx0PixcbiAgKTogdGhpcyB7XG4gICAgaWYgKCFmaWx0ZXIpIHtcbiAgICAgIGZpbHRlciA9IHRlbXBsYXRlQ29udHJhY3QuZmlsdGVyc1tcIlRyYW5zZmVyKGFkZHJlc3MsYWRkcmVzcyx1aW50MjU2KVwiXShcbiAgICAgICAgbnVsbCxcbiAgICAgICAgbnVsbCxcbiAgICAgICAgbnVsbCxcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiBzdXBlci5vbkV0aEV2ZW50KGhhbmRsZXIsIGZpbHRlciEsIGZldGNoQ29uZmlnLCBwcmVwcm9jZXNzSGFuZGxlcik7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFBlbmRsZVlpZWxkVG9rZW5Db250cmFjdChcbiAgY2hhaW5JZDogRXRoQ2hhaW5JZCxcbiAgYWRkcmVzczogc3RyaW5nLFxuKTogUGVuZGxlWWllbGRUb2tlbkNvbnRyYWN0VmlldyB7XG4gIGxldCBjb250cmFjdCA9IGdldENvbnRyYWN0QnlBQkkoXG4gICAgXCJQZW5kbGVZaWVsZFRva2VuXCIsXG4gICAgYWRkcmVzcyxcbiAgICBjaGFpbklkLFxuICApIGFzIFBlbmRsZVlpZWxkVG9rZW5Db250cmFjdFZpZXc7XG4gIGlmICghY29udHJhY3QpIHtcbiAgICBjb25zdCByYXdDb250cmFjdCA9IFBlbmRsZVlpZWxkVG9rZW5fX2ZhY3RvcnkuY29ubmVjdChcbiAgICAgIGFkZHJlc3MsXG4gICAgICBnZXRQcm92aWRlcihjaGFpbklkKSxcbiAgICApO1xuICAgIGNvbnRyYWN0ID0gbmV3IFBlbmRsZVlpZWxkVG9rZW5Db250cmFjdFZpZXcocmF3Q29udHJhY3QpO1xuICAgIGFkZENvbnRyYWN0QnlBQkkoXCJQZW5kbGVZaWVsZFRva2VuXCIsIGFkZHJlc3MsIGNoYWluSWQsIGNvbnRyYWN0KTtcbiAgfVxuICByZXR1cm4gY29udHJhY3Q7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRQZW5kbGVZaWVsZFRva2VuQ29udHJhY3RPbkNvbnRleHQoXG4gIGNvbnRleHQ6IEV0aENvbnRleHQsXG4gIGFkZHJlc3M6IHN0cmluZyxcbik6IFBlbmRsZVlpZWxkVG9rZW5Cb3VuZENvbnRyYWN0VmlldyB7XG4gIGNvbnN0IHZpZXcgPSBnZXRQZW5kbGVZaWVsZFRva2VuQ29udHJhY3QoY29udGV4dC5nZXRDaGFpbklkKCksIGFkZHJlc3MpO1xuICBjb25zdCBib3VuZFZpZXcgPSBuZXcgUGVuZGxlWWllbGRUb2tlbkJvdW5kQ29udHJhY3RWaWV3KGFkZHJlc3MsIHZpZXcpO1xuICBib3VuZFZpZXcuY29udGV4dCA9IGNvbnRleHQ7XG4gIGlmIChib3VuZFZpZXcuY2FsbFN0YXRpYykge1xuICAgIGJvdW5kVmlldy5jYWxsU3RhdGljLmNvbnRleHQgPSBjb250ZXh0O1xuICB9XG4gIHJldHVybiBib3VuZFZpZXc7XG59XG4iLCAiLyogQXV0b2dlbmVyYXRlZCBmaWxlLiBEbyBub3QgZWRpdCBtYW51YWxseS4gKi9cbi8qIHRzbGludDpkaXNhYmxlICovXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xuaW1wb3J0IHsgTG9nUGFyYW1zIH0gZnJvbSBcImV0aGVycy9wcm92aWRlcnNcIjtcbmltcG9ydCB7IEV0aENoYWluSWQgfSBmcm9tIFwiQHNlbnRpby9zZGsvZXRoXCI7XG5pbXBvcnQge1xuICBBcHByb3ZhbEV2ZW50T2JqZWN0LFxuICBCdXJuRXZlbnRPYmplY3QsXG4gIENvbGxlY3RJbnRlcmVzdEZlZUV2ZW50T2JqZWN0LFxuICBDb2xsZWN0UmV3YXJkRmVlRXZlbnRPYmplY3QsXG4gIE1pbnRFdmVudE9iamVjdCxcbiAgTmV3SW50ZXJlc3RJbmRleEV2ZW50T2JqZWN0LFxuICBSZWRlZW1JbnRlcmVzdEV2ZW50T2JqZWN0LFxuICBSZWRlZW1SZXdhcmRzRXZlbnRPYmplY3QsXG4gIFRyYW5zZmVyRXZlbnRPYmplY3QsXG59IGZyb20gXCIuL1BlbmRsZVlpZWxkVG9rZW4uanNcIjtcbmltcG9ydCB7IGdldFBlbmRsZVlpZWxkVG9rZW5Db250cmFjdCB9IGZyb20gXCIuL3BlbmRsZXlpZWxkdG9rZW4tcHJvY2Vzc29yLmpzXCI7XG5jb25zdCBtb2NrRmllbGQgPSB7XG4gIGJsb2NrSGFzaDpcbiAgICBcIjB4MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMFwiLFxuICBibG9ja051bWJlcjogMCxcbiAgbG9nSW5kZXg6IDAsXG4gIHJlbW92ZWQ6IGZhbHNlLFxuICB0cmFuc2FjdGlvbkhhc2g6XG4gICAgXCIweDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDBcIixcbiAgdHJhbnNhY3Rpb25JbmRleDogMCxcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBtb2NrQXBwcm92YWxMb2coXG4gIGNvbnRyYWN0QWRkcmVzczogc3RyaW5nLFxuICBldmVudDogQXBwcm92YWxFdmVudE9iamVjdCxcbik6IExvZ1BhcmFtcyB7XG4gIGNvbnN0IGNvbnRyYWN0ID0gZ2V0UGVuZGxlWWllbGRUb2tlbkNvbnRyYWN0KFxuICAgIEV0aENoYWluSWQuRVRIRVJFVU0sXG4gICAgY29udHJhY3RBZGRyZXNzLFxuICApO1xuICBjb25zdCBlbmNvZGVkTG9nID0gY29udHJhY3QucmF3Q29udHJhY3QuaW50ZXJmYWNlLmVuY29kZUV2ZW50TG9nKFxuICAgIFwiQXBwcm92YWwoYWRkcmVzcyxhZGRyZXNzLHVpbnQyNTYpXCIsXG4gICAgW2V2ZW50Lm93bmVyLCBldmVudC5zcGVuZGVyLCBldmVudC52YWx1ZV0sXG4gICk7XG4gIHJldHVybiB7XG4gICAgLi4ubW9ja0ZpZWxkLFxuICAgIGluZGV4OiAwLFxuICAgIGFkZHJlc3M6IGNvbnRyYWN0QWRkcmVzcyxcbiAgICBkYXRhOiBlbmNvZGVkTG9nLmRhdGEsXG4gICAgdG9waWNzOiBlbmNvZGVkTG9nLnRvcGljcyxcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1vY2tCdXJuTG9nKFxuICBjb250cmFjdEFkZHJlc3M6IHN0cmluZyxcbiAgZXZlbnQ6IEJ1cm5FdmVudE9iamVjdCxcbik6IExvZ1BhcmFtcyB7XG4gIGNvbnN0IGNvbnRyYWN0ID0gZ2V0UGVuZGxlWWllbGRUb2tlbkNvbnRyYWN0KFxuICAgIEV0aENoYWluSWQuRVRIRVJFVU0sXG4gICAgY29udHJhY3RBZGRyZXNzLFxuICApO1xuICBjb25zdCBlbmNvZGVkTG9nID0gY29udHJhY3QucmF3Q29udHJhY3QuaW50ZXJmYWNlLmVuY29kZUV2ZW50TG9nKFxuICAgIFwiQnVybihhZGRyZXNzLGFkZHJlc3MsdWludDI1Nix1aW50MjU2KVwiLFxuICAgIFtldmVudC5jYWxsZXIsIGV2ZW50LnJlY2VpdmVyLCBldmVudC5hbW91bnRQWVRvUmVkZWVtLCBldmVudC5hbW91bnRTeU91dF0sXG4gICk7XG4gIHJldHVybiB7XG4gICAgLi4ubW9ja0ZpZWxkLFxuICAgIGluZGV4OiAwLFxuICAgIGFkZHJlc3M6IGNvbnRyYWN0QWRkcmVzcyxcbiAgICBkYXRhOiBlbmNvZGVkTG9nLmRhdGEsXG4gICAgdG9waWNzOiBlbmNvZGVkTG9nLnRvcGljcyxcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1vY2tDb2xsZWN0SW50ZXJlc3RGZWVMb2coXG4gIGNvbnRyYWN0QWRkcmVzczogc3RyaW5nLFxuICBldmVudDogQ29sbGVjdEludGVyZXN0RmVlRXZlbnRPYmplY3QsXG4pOiBMb2dQYXJhbXMge1xuICBjb25zdCBjb250cmFjdCA9IGdldFBlbmRsZVlpZWxkVG9rZW5Db250cmFjdChcbiAgICBFdGhDaGFpbklkLkVUSEVSRVVNLFxuICAgIGNvbnRyYWN0QWRkcmVzcyxcbiAgKTtcbiAgY29uc3QgZW5jb2RlZExvZyA9IGNvbnRyYWN0LnJhd0NvbnRyYWN0LmludGVyZmFjZS5lbmNvZGVFdmVudExvZyhcbiAgICBcIkNvbGxlY3RJbnRlcmVzdEZlZSh1aW50MjU2KVwiLFxuICAgIFtldmVudC5hbW91bnRJbnRlcmVzdEZlZV0sXG4gICk7XG4gIHJldHVybiB7XG4gICAgLi4ubW9ja0ZpZWxkLFxuICAgIGluZGV4OiAwLFxuICAgIGFkZHJlc3M6IGNvbnRyYWN0QWRkcmVzcyxcbiAgICBkYXRhOiBlbmNvZGVkTG9nLmRhdGEsXG4gICAgdG9waWNzOiBlbmNvZGVkTG9nLnRvcGljcyxcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1vY2tDb2xsZWN0UmV3YXJkRmVlTG9nKFxuICBjb250cmFjdEFkZHJlc3M6IHN0cmluZyxcbiAgZXZlbnQ6IENvbGxlY3RSZXdhcmRGZWVFdmVudE9iamVjdCxcbik6IExvZ1BhcmFtcyB7XG4gIGNvbnN0IGNvbnRyYWN0ID0gZ2V0UGVuZGxlWWllbGRUb2tlbkNvbnRyYWN0KFxuICAgIEV0aENoYWluSWQuRVRIRVJFVU0sXG4gICAgY29udHJhY3RBZGRyZXNzLFxuICApO1xuICBjb25zdCBlbmNvZGVkTG9nID0gY29udHJhY3QucmF3Q29udHJhY3QuaW50ZXJmYWNlLmVuY29kZUV2ZW50TG9nKFxuICAgIFwiQ29sbGVjdFJld2FyZEZlZShhZGRyZXNzLHVpbnQyNTYpXCIsXG4gICAgW2V2ZW50LnJld2FyZFRva2VuLCBldmVudC5hbW91bnRSZXdhcmRGZWVdLFxuICApO1xuICByZXR1cm4ge1xuICAgIC4uLm1vY2tGaWVsZCxcbiAgICBpbmRleDogMCxcbiAgICBhZGRyZXNzOiBjb250cmFjdEFkZHJlc3MsXG4gICAgZGF0YTogZW5jb2RlZExvZy5kYXRhLFxuICAgIHRvcGljczogZW5jb2RlZExvZy50b3BpY3MsXG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtb2NrTWludExvZyhcbiAgY29udHJhY3RBZGRyZXNzOiBzdHJpbmcsXG4gIGV2ZW50OiBNaW50RXZlbnRPYmplY3QsXG4pOiBMb2dQYXJhbXMge1xuICBjb25zdCBjb250cmFjdCA9IGdldFBlbmRsZVlpZWxkVG9rZW5Db250cmFjdChcbiAgICBFdGhDaGFpbklkLkVUSEVSRVVNLFxuICAgIGNvbnRyYWN0QWRkcmVzcyxcbiAgKTtcbiAgY29uc3QgZW5jb2RlZExvZyA9IGNvbnRyYWN0LnJhd0NvbnRyYWN0LmludGVyZmFjZS5lbmNvZGVFdmVudExvZyhcbiAgICBcIk1pbnQoYWRkcmVzcyxhZGRyZXNzLGFkZHJlc3MsdWludDI1Nix1aW50MjU2KVwiLFxuICAgIFtcbiAgICAgIGV2ZW50LmNhbGxlcixcbiAgICAgIGV2ZW50LnJlY2VpdmVyUFQsXG4gICAgICBldmVudC5yZWNlaXZlcllULFxuICAgICAgZXZlbnQuYW1vdW50U3lUb01pbnQsXG4gICAgICBldmVudC5hbW91bnRQWU91dCxcbiAgICBdLFxuICApO1xuICByZXR1cm4ge1xuICAgIC4uLm1vY2tGaWVsZCxcbiAgICBpbmRleDogMCxcbiAgICBhZGRyZXNzOiBjb250cmFjdEFkZHJlc3MsXG4gICAgZGF0YTogZW5jb2RlZExvZy5kYXRhLFxuICAgIHRvcGljczogZW5jb2RlZExvZy50b3BpY3MsXG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtb2NrTmV3SW50ZXJlc3RJbmRleExvZyhcbiAgY29udHJhY3RBZGRyZXNzOiBzdHJpbmcsXG4gIGV2ZW50OiBOZXdJbnRlcmVzdEluZGV4RXZlbnRPYmplY3QsXG4pOiBMb2dQYXJhbXMge1xuICBjb25zdCBjb250cmFjdCA9IGdldFBlbmRsZVlpZWxkVG9rZW5Db250cmFjdChcbiAgICBFdGhDaGFpbklkLkVUSEVSRVVNLFxuICAgIGNvbnRyYWN0QWRkcmVzcyxcbiAgKTtcbiAgY29uc3QgZW5jb2RlZExvZyA9IGNvbnRyYWN0LnJhd0NvbnRyYWN0LmludGVyZmFjZS5lbmNvZGVFdmVudExvZyhcbiAgICBcIk5ld0ludGVyZXN0SW5kZXgodWludDI1NilcIixcbiAgICBbZXZlbnQubmV3SW5kZXhdLFxuICApO1xuICByZXR1cm4ge1xuICAgIC4uLm1vY2tGaWVsZCxcbiAgICBpbmRleDogMCxcbiAgICBhZGRyZXNzOiBjb250cmFjdEFkZHJlc3MsXG4gICAgZGF0YTogZW5jb2RlZExvZy5kYXRhLFxuICAgIHRvcGljczogZW5jb2RlZExvZy50b3BpY3MsXG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtb2NrUmVkZWVtSW50ZXJlc3RMb2coXG4gIGNvbnRyYWN0QWRkcmVzczogc3RyaW5nLFxuICBldmVudDogUmVkZWVtSW50ZXJlc3RFdmVudE9iamVjdCxcbik6IExvZ1BhcmFtcyB7XG4gIGNvbnN0IGNvbnRyYWN0ID0gZ2V0UGVuZGxlWWllbGRUb2tlbkNvbnRyYWN0KFxuICAgIEV0aENoYWluSWQuRVRIRVJFVU0sXG4gICAgY29udHJhY3RBZGRyZXNzLFxuICApO1xuICBjb25zdCBlbmNvZGVkTG9nID0gY29udHJhY3QucmF3Q29udHJhY3QuaW50ZXJmYWNlLmVuY29kZUV2ZW50TG9nKFxuICAgIFwiUmVkZWVtSW50ZXJlc3QoYWRkcmVzcyx1aW50MjU2KVwiLFxuICAgIFtldmVudC51c2VyLCBldmVudC5pbnRlcmVzdE91dF0sXG4gICk7XG4gIHJldHVybiB7XG4gICAgLi4ubW9ja0ZpZWxkLFxuICAgIGluZGV4OiAwLFxuICAgIGFkZHJlc3M6IGNvbnRyYWN0QWRkcmVzcyxcbiAgICBkYXRhOiBlbmNvZGVkTG9nLmRhdGEsXG4gICAgdG9waWNzOiBlbmNvZGVkTG9nLnRvcGljcyxcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1vY2tSZWRlZW1SZXdhcmRzTG9nKFxuICBjb250cmFjdEFkZHJlc3M6IHN0cmluZyxcbiAgZXZlbnQ6IFJlZGVlbVJld2FyZHNFdmVudE9iamVjdCxcbik6IExvZ1BhcmFtcyB7XG4gIGNvbnN0IGNvbnRyYWN0ID0gZ2V0UGVuZGxlWWllbGRUb2tlbkNvbnRyYWN0KFxuICAgIEV0aENoYWluSWQuRVRIRVJFVU0sXG4gICAgY29udHJhY3RBZGRyZXNzLFxuICApO1xuICBjb25zdCBlbmNvZGVkTG9nID0gY29udHJhY3QucmF3Q29udHJhY3QuaW50ZXJmYWNlLmVuY29kZUV2ZW50TG9nKFxuICAgIFwiUmVkZWVtUmV3YXJkcyhhZGRyZXNzLHVpbnQyNTZbXSlcIixcbiAgICBbZXZlbnQudXNlciwgZXZlbnQuYW1vdW50UmV3YXJkc091dF0sXG4gICk7XG4gIHJldHVybiB7XG4gICAgLi4ubW9ja0ZpZWxkLFxuICAgIGluZGV4OiAwLFxuICAgIGFkZHJlc3M6IGNvbnRyYWN0QWRkcmVzcyxcbiAgICBkYXRhOiBlbmNvZGVkTG9nLmRhdGEsXG4gICAgdG9waWNzOiBlbmNvZGVkTG9nLnRvcGljcyxcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1vY2tUcmFuc2ZlckxvZyhcbiAgY29udHJhY3RBZGRyZXNzOiBzdHJpbmcsXG4gIGV2ZW50OiBUcmFuc2ZlckV2ZW50T2JqZWN0LFxuKTogTG9nUGFyYW1zIHtcbiAgY29uc3QgY29udHJhY3QgPSBnZXRQZW5kbGVZaWVsZFRva2VuQ29udHJhY3QoXG4gICAgRXRoQ2hhaW5JZC5FVEhFUkVVTSxcbiAgICBjb250cmFjdEFkZHJlc3MsXG4gICk7XG4gIGNvbnN0IGVuY29kZWRMb2cgPSBjb250cmFjdC5yYXdDb250cmFjdC5pbnRlcmZhY2UuZW5jb2RlRXZlbnRMb2coXG4gICAgXCJUcmFuc2ZlcihhZGRyZXNzLGFkZHJlc3MsdWludDI1NilcIixcbiAgICBbZXZlbnQuZnJvbSwgZXZlbnQudG8sIGV2ZW50LnZhbHVlXSxcbiAgKTtcbiAgcmV0dXJuIHtcbiAgICAuLi5tb2NrRmllbGQsXG4gICAgaW5kZXg6IDAsXG4gICAgYWRkcmVzczogY29udHJhY3RBZGRyZXNzLFxuICAgIGRhdGE6IGVuY29kZWRMb2cuZGF0YSxcbiAgICB0b3BpY3M6IGVuY29kZWRMb2cudG9waWNzLFxuICB9O1xufVxuIiwgImltcG9ydCB7IEV0aENvbnRleHQgfSBmcm9tICdAc2VudGlvL3Nkay9ldGgnO1xuaW1wb3J0IHsgUmV3Y2FjaGUsIFJld2FyZFBvb2xVc2VyIH0gZnJvbSAnLi9zY2hlbWEvc2NoZW1hLmpzJztcbmltcG9ydCB7IGFkZCwgVXNlclBvc2l0aW9uUmF3IH0gZnJvbSAnLi9wb3NpdGlvbi1yYXcuanMnO1xuaW1wb3J0IHsgZ2V0UGVuZGxlTWFya2V0Q29udHJhY3RPbkNvbnRleHQgfSBmcm9tICcuL3R5cGVzL2V0aC9wZW5kbGVtYXJrZXQuanMnO1xuaW1wb3J0IHtcbiAgcmVhZEFsbFVzZXJBY3RpdmVCYWxhbmNlcyxcbiAgcmVhZEFsbFVzZXJFUkMyMEJhbGFuY2VzLFxuICByZWFkQWxsWVRQb3NpdGlvbnMsXG59IGZyb20gJy4vbXVsdGljYWxsLmpzJztcbmltcG9ydCB7IGdldFBlbmRsZVlpZWxkVG9rZW5Db250cmFjdE9uQ29udGV4dCB9IGZyb20gJy4vdHlwZXMvZXRoL3BlbmRsZXlpZWxkdG9rZW4uanMnO1xuaW1wb3J0IHsgT05FLCBQRU5QSUVfU1RBS0lOR19BRERSRVNTIH0gZnJvbSAnLi9jb25zdHMuanMnO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gYWRkTFBQb3NpdGlvblNuYXBzaG90KFxuICBjdHg6IEV0aENvbnRleHQsXG4gIG1hcmNhY2hlOiBSZXdjYWNoZSxcbiAgcmM6IFVzZXJQb3NpdGlvblJhd1xuKSB7XG4gIGNvbnN0IG1hcmtldCA9IGdldFBlbmRsZU1hcmtldENvbnRyYWN0T25Db250ZXh0KGN0eCwgbWFyY2FjaGUuTFApO1xuICBjb25zdCBbaXNFeHBpcmVkLCBzdGF0ZV0gPSBhd2FpdCBQcm9taXNlLmFsbChbXG4gICAgYXdhaXQgbWFya2V0LmlzRXhwaXJlZCgpLFxuICAgIGF3YWl0IG1hcmtldC5yZWFkU3RhdGUobWFya2V0LmFkZHJlc3MpLFxuICBdKTtcbiAgaWYgKGlzRXhwaXJlZCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGNvbnN0IHVzZXJzID0gKFxuICAgIGF3YWl0IGN0eC5zdG9yZS5saXN0KFJld2FyZFBvb2xVc2VyLCBbXG4gICAgICB7XG4gICAgICAgIGZpZWxkOiAncmV3YXJkX3Bvb2wnLFxuICAgICAgICBvcDogJz0nLFxuICAgICAgICB2YWx1ZTogbWFyY2FjaGUucmV3YXJkUG9vbCxcbiAgICAgIH0sXG4gICAgXSlcbiAgKS5tYXAoKGUpID0+IGUudXNlcik7XG5cblxuICBjb25zdCBiYWxhbmNlcyA9IGF3YWl0IHJlYWRBbGxVc2VyRVJDMjBCYWxhbmNlcyhjdHgsIG1hcmNhY2hlLnJld2FyZFBvb2wsIHVzZXJzKTtcbiAgY29uc3QgdG90YWxBY3RpdmVTdXBwbHkgPSBhd2FpdCBtYXJrZXQudG90YWxBY3RpdmVTdXBwbHkoKTtcbiAgY29uc3QgcGVucGllQWN0aXZlQmFsYW5jZSA9IGF3YWl0IG1hcmtldC5hY3RpdmVCYWxhbmNlKFBFTlBJRV9TVEFLSU5HX0FERFJFU1MpO1xuICBjb25zdCBwZW5waWVCYWxhbmNlT2YgPSBhd2FpdCBtYXJrZXQuYmFsYW5jZU9mKFBFTlBJRV9TVEFLSU5HX0FERFJFU1MpO1xuXG4gIGlmICh0b3RhbEFjdGl2ZVN1cHBseSA9PT0gMG4pIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKHBlbnBpZUJhbGFuY2VPZiA9PT0gMG4pIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBmb3IgKGxldCBpID0gMDsgaSA8IHVzZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgaG9sZGluZyA9IChzdGF0ZS50b3RhbFN5ICogcGVucGllQWN0aXZlQmFsYW5jZSAqIGJhbGFuY2VzW2ldKSAvICh0b3RhbEFjdGl2ZVN1cHBseSAqIHBlbnBpZUJhbGFuY2VPZik7XG4gICAgYWRkKHJjLCB1c2Vyc1tpXSwgaG9sZGluZyk7XG4gIH1cbn1cblxuIiwgImltcG9ydCB7IEV0aENvbnRleHQgfSBmcm9tICdAc2VudGlvL3Nkay9ldGgnO1xuaW1wb3J0IHsgUmV3Y2FjaGUsIFBvb2xzLCBQb29sU25hcHNob3QgfSBmcm9tICcuL3NjaGVtYS9zY2hlbWEuanMnO1xuaW1wb3J0IHsgZ2V0U3RhbmRhcmRpemVkWWllbGRDb250cmFjdE9uQ29udGV4dCB9IGZyb20gJy4vdHlwZXMvZXRoL3N0YW5kYXJkaXplZHlpZWxkLmpzJztcbmltcG9ydCB7IGdldFBlbmRsZU1hcmtldENvbnRyYWN0T25Db250ZXh0IH0gZnJvbSAnLi90eXBlcy9ldGgvcGVuZGxlbWFya2V0LmpzJztcblxuaW1wb3J0IHsgZ2V0RVJDMjBDb250cmFjdE9uQ29udGV4dCB9IGZyb20gJ0BzZW50aW8vc2RrL2V0aC9idWlsdGluL2VyYzIwJztcbmltcG9ydCB7IENIQUlOX0lELFBFTlBJRV9TVEFLSU5HX0FERFJFU1MgfSBmcm9tICcuL2NvbnN0cy5qcyc7XG5pbXBvcnQgeyBnZXREYXRlSW5mbyB9IGZyb20gJy4vaGVscGVyLmpzJztcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGNyZWF0ZVBvb2xTbmFwc2hvdElmTm90RXhpc3QoY3R4OiBFdGhDb250ZXh0LCByZXdjYWNoZTogUmV3Y2FjaGUpIHtcbiAgY29uc3QgeyBkLCBibG9ja0RhdGUgfSA9IGdldERhdGVJbmZvKGN0eCk7XG4gIGNvbnN0IHN5ID0gZ2V0U3RhbmRhcmRpemVkWWllbGRDb250cmFjdE9uQ29udGV4dChjdHgsIHJld2NhY2hlLlNZKTtcbiAgY29uc3QgaWQgPSBgJHtzeS5hZGRyZXNzLnRvTG93ZXJDYXNlKCl9LSR7ZH1gO1xuXG4gIGlmIChhd2FpdCBjdHguc3RvcmUuZ2V0KFBvb2xTbmFwc2hvdCwgaWQpKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3QgeWllbGRUb2tlbiA9IGdldEVSQzIwQ29udHJhY3RPbkNvbnRleHQoY3R4LCByZXdjYWNoZS51bmRlcmx5aW5nX3Rva2VuX2FkZHJlc3MpO1xuICBjb25zdCBkZWNpbWFscyA9IHJld2NhY2hlLnVuZGVybHlpbmdfdG9rZW5fZGVjaW1hbHM7XG4gIGNvbnN0IG1hcmtldCA9IGdldFBlbmRsZU1hcmtldENvbnRyYWN0T25Db250ZXh0KGN0eCwgcmV3Y2FjaGUuTFApO1xuICBjb25zdCBwZW5waWVBY3RpdmVCYWxhbmNlID0gKGF3YWl0IG1hcmtldC5hY3RpdmVCYWxhbmNlKFBFTlBJRV9TVEFLSU5HX0FERFJFU1MpKS5zY2FsZURvd24oZGVjaW1hbHMpO1xuICBjb25zdCB0b3RhbEFjdGl2ZVN1cHBseSA9IChhd2FpdCBtYXJrZXQudG90YWxBY3RpdmVTdXBwbHkoKSkuc2NhbGVEb3duKGRlY2ltYWxzKTtcbiAgY29uc3QgdG90YWxfYW1vdW50ID0gKGF3YWl0IHN5LnRvdGFsU3VwcGx5KCkpLnNjYWxlRG93bihkZWNpbWFscyk7XG4gIGNvbnN0IHBlbnBpZV9yYXRlID0gcGVucGllQWN0aXZlQmFsYW5jZS5kaXZpZGVkQnkodG90YWxBY3RpdmVTdXBwbHkpO1xuICBjb25zdCBhbW91bnQgPSB0b3RhbF9hbW91bnQubXVsdGlwbGllZEJ5KHBlbnBpZV9yYXRlKTtcbiAgLy8gY29uc29sZS5sb2coYGJsb2NrX251bWJlcjoke2N0eC5ibG9ja051bWJlcn0scGVucGllQWN0aXZlQmFsYW5jZTogJHtwZW5waWVBY3RpdmVCYWxhbmNlfSwgdG90YWxBY3RpdmVTdXBwbHk6ICR7dG90YWxBY3RpdmVTdXBwbHl9LGFtb3VudDogJHthbW91bnR9LCBwZW5waWVfcmF0ZTogJHtwZW5waWVfcmF0ZX1gKTtcblxuICBjb25zdCBlbnRpdHkgPSBuZXcgUG9vbFNuYXBzaG90KHtcbiAgICBpZDogaWQsXG4gICAgdGltZXN0YW1wOiBkLFxuICAgIGJsb2NrX2RhdGU6IGJsb2NrRGF0ZSxcbiAgICBjaGFpbl9pZDogQ0hBSU5fSUQsXG4gICAgdW5kZXJseWluZ190b2tlbl9hZGRyZXNzOiB5aWVsZFRva2VuLmFkZHJlc3MsXG4gICAgdW5kZXJseWluZ190b2tlbl9pbmRleDogMCxcbiAgICBwb29sX2FkZHJlc3M6IHJld2NhY2hlLnJld2FyZFBvb2wsXG4gICAgdW5kZXJseWluZ190b2tlbl9hbW91bnQ6IGFtb3VudC50b051bWJlcigpLFxuICB9KTtcblxuICBhd2FpdCBjdHguc3RvcmUudXBzZXJ0KGVudGl0eSk7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBjcmVhdGVQb29sSWZOb3RFeGlzdChjdHg6IEV0aENvbnRleHQsc3lBZGRyOnN0cmluZywgcmV3YXJkUG9vbEFkZHI6IHN0cmluZywgcmVjZWlwdFRva2VuQWRkcjogc3RyaW5nLCBwZW5kbGVNYXJrZXRBZGRyOiBzdHJpbmcpIHtcbiAgc3lBZGRyID0gc3lBZGRyLnRvTG93ZXJDYXNlKCk7XG5cbiAgaWYgKGF3YWl0IGN0eC5zdG9yZS5nZXQoUG9vbHMsIHN5QWRkcikpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCBjb250cmFjdCA9IGdldFN0YW5kYXJkaXplZFlpZWxkQ29udHJhY3RPbkNvbnRleHQoY3R4LCBzeUFkZHIpO1xuICBjb25zdCB5aWVsZFRva2VuID0gZ2V0RVJDMjBDb250cmFjdE9uQ29udGV4dChjdHgsIGF3YWl0IGNvbnRyYWN0LnlpZWxkVG9rZW4oKSk7XG4gIGNvbnN0IHJlY2VpcHRUb2tlbiA9IGdldEVSQzIwQ29udHJhY3RPbkNvbnRleHQoY3R4LCByZWNlaXB0VG9rZW5BZGRyKTtcbiAgY29uc3QgcGVuZGxlTWFya2V0ID0gZ2V0UGVuZGxlTWFya2V0Q29udHJhY3RPbkNvbnRleHQoY3R4LCBwZW5kbGVNYXJrZXRBZGRyKTtcblxuICBjb25zdCBwb29sID0gbmV3IFBvb2xzKHtcbiAgICBpZDogc3lBZGRyLFxuICAgIGNoYWluX2lkOiBDSEFJTl9JRCxcbiAgICB0aW1lc3RhbXA6IE1hdGguZmxvb3IoY3R4LnRpbWVzdGFtcC5nZXRUaW1lKCkgLyAxMDAwKSxcbiAgICBjcmVhdGlvbl9ibG9ja19udW1iZXI6IGN0eC5ibG9ja051bWJlcixcbiAgICB1bmRlcmx5aW5nX3Rva2VuX2FkZHJlc3M6IHlpZWxkVG9rZW4uYWRkcmVzcyxcbiAgICB1bmRlcmx5aW5nX3Rva2VuX2luZGV4OiAwLFxuICAgIHVuZGVybHlpbmdfdG9rZW5fc3ltYm9sOiBhd2FpdCB5aWVsZFRva2VuLnN5bWJvbCgpLFxuICAgIHVuZGVybHlpbmdfdG9rZW5fZGVjaW1hbHM6IChhd2FpdCB5aWVsZFRva2VuLmRlY2ltYWxzKCkpLnRvU3RyaW5nKCksXG4gICAgcmVjZWlwdF90b2tlbl9hZGRyZXNzOiByZWNlaXB0VG9rZW5BZGRyLFxuICAgIHJlY2VpcHRfdG9rZW5fc3ltYm9sOiBhd2FpdCByZWNlaXB0VG9rZW4uc3ltYm9sKCksXG4gICAgcmVjZWlwdF90b2tlbl9kZWNpbWFsczogKGF3YWl0IHJlY2VpcHRUb2tlbi5kZWNpbWFscygpKS50b1N0cmluZygpLFxuICAgIHBvb2xfYWRkcmVzczogcmVjZWlwdFRva2VuQWRkci50b0xvd2VyQ2FzZSgpLFxuICAgIHBvb2xfc3ltYm9sOiBcIioqXCIsXG4gIH0pO1xuXG4gIGF3YWl0IGN0eC5zdG9yZS51cHNlcnQocG9vbCk7XG59XG4iLCAiaW1wb3J0IHsgRXRoQ29udGV4dCB9IGZyb20gJ0BzZW50aW8vc2RrL2V0aCc7XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXREYXRlSW5mbyhjdHg6IEV0aENvbnRleHQpIHtcbiAgY29uc3QgZCA9IE1hdGguZmxvb3IoY3R4LnRpbWVzdGFtcC5nZXRUaW1lKCkgLyAxMDAwKTtcbiAgY29uc3QgYmxvY2tEYXRlID0gYCR7Y3R4LnRpbWVzdGFtcC5nZXRGdWxsWWVhcigpfS0ke2N0eC50aW1lc3RhbXAuZ2V0TW9udGgoKSArIDF9LSR7Y3R4LnRpbWVzdGFtcC5nZXREYXRlKCl9YDtcbiAgcmV0dXJuIHsgZCwgYmxvY2tEYXRlIH07XG59XG4iXSwKICAibWFwcGluZ3MiOiAiO2dRQUFBLE9BQVMsY0FBQUEsT0FBOEIsa0JDSXZDLE9BQ0Usb0JBQUFDLEdBQ0Esb0JBQUFDLEdBQ0EsZ0JBQUFDLEdBQ0EsZ0JBQUFDLEdBQ0EsZUFBQUMsR0FDQSx1QkFBQUMsRUFFQSxpQkFBQUMsR0FDQSx5QkFBQUMsR0FDQSxxQkFBQUMsR0FFQSxnQkFBQUMsR0FDQSxpQkFBQUMsR0FNQSxrQkFBQUMsTUFDSyxrQkNwQlAsT0FBUyxlQUFBQyxHQUFhLGdCQUFBQyxPQUFvQixrQkNBMUMsT0FBUyxlQUFBQyxHQUFhLGdCQUFBQyxPQUFvQixrQkNBMUMsT0FBUyxlQUFBQyxHQUFhLGdCQUFBQyxPQUFvQixrQkNBMUMsT0FBUyxlQUFBQyxHQUFhLGdCQUFBQyxPQUFvQixrQkNBMUMsT0FBUyxlQUFBQyxHQUFhLGdCQUFBQyxPQUFvQixrQkNBMUMsT0FBUyxlQUFBQyxHQUFhLGdCQUFBQyxPQUFvQixrQkNBMUMsT0FBUyxlQUFBQyxHQUFhLGdCQUFBQyxPQUFvQixrQkFLMUMsSUFBTUMsRUFBTyxDQUNYLENBQ0UsT0FBUSxDQUNOLENBQ0UsV0FBWSxDQUNWLENBQ0UsYUFBYyxVQUNkLEtBQU0sU0FDTixLQUFNLFNBQ1IsRUFDQSxDQUNFLGFBQWMsUUFDZCxLQUFNLFdBQ04sS0FBTSxPQUNSLENBQ0YsRUFDQSxhQUFjLDJCQUNkLEtBQU0sUUFDTixLQUFNLFNBQ1IsQ0FDRixFQUNBLEtBQU0sWUFDTixRQUFTLENBQ1AsQ0FDRSxhQUFjLFVBQ2QsS0FBTSxjQUNOLEtBQU0sU0FDUixFQUNBLENBQ0UsYUFBYyxVQUNkLEtBQU0sYUFDTixLQUFNLFNBQ1IsQ0FDRixFQUNBLGdCQUFpQixhQUNqQixLQUFNLFVBQ1IsRUFDQSxDQUNFLE9BQVEsQ0FDTixDQUNFLFdBQVksQ0FDVixDQUNFLGFBQWMsVUFDZCxLQUFNLFNBQ04sS0FBTSxTQUNSLEVBQ0EsQ0FDRSxhQUFjLFFBQ2QsS0FBTSxXQUNOLEtBQU0sT0FDUixDQUNGLEVBQ0EsYUFBYywyQkFDZCxLQUFNLFFBQ04sS0FBTSxTQUNSLENBQ0YsRUFDQSxLQUFNLG9CQUNOLFFBQVMsQ0FDUCxDQUNFLGFBQWMsVUFDZCxLQUFNLGNBQ04sS0FBTSxTQUNSLEVBQ0EsQ0FDRSxhQUFjLFVBQ2QsS0FBTSxZQUNOLEtBQU0sU0FDUixFQUNBLENBQ0UsV0FBWSxDQUNWLENBQ0UsYUFBYyxPQUNkLEtBQU0sVUFDTixLQUFNLE1BQ1IsRUFDQSxDQUNFLGFBQWMsUUFDZCxLQUFNLGFBQ04sS0FBTSxPQUNSLENBQ0YsRUFDQSxhQUFjLDZCQUNkLEtBQU0sYUFDTixLQUFNLFNBQ1IsQ0FDRixFQUNBLGdCQUFpQixhQUNqQixLQUFNLFVBQ1IsRUFDQSxDQUNFLE9BQVEsQ0FDTixDQUNFLGFBQWMsVUFDZCxLQUFNLGNBQ04sS0FBTSxTQUNSLENBQ0YsRUFDQSxLQUFNLGVBQ04sUUFBUyxDQUNQLENBQ0UsYUFBYyxVQUNkLEtBQU0sWUFDTixLQUFNLFNBQ1IsQ0FDRixFQUNBLGdCQUFpQixPQUNqQixLQUFNLFVBQ1IsRUFDQSxDQUNFLE9BQVEsQ0FBQyxFQUNULEtBQU0saUJBQ04sUUFBUyxDQUNQLENBQ0UsYUFBYyxVQUNkLEtBQU0sY0FDTixLQUFNLFNBQ1IsQ0FDRixFQUNBLGdCQUFpQixPQUNqQixLQUFNLFVBQ1IsRUFDQSxDQUNFLE9BQVEsQ0FBQyxFQUNULEtBQU0sMEJBQ04sUUFBUyxDQUNQLENBQ0UsYUFBYyxVQUNkLEtBQU0sV0FDTixLQUFNLFNBQ1IsQ0FDRixFQUNBLGdCQUFpQixPQUNqQixLQUFNLFVBQ1IsRUFDQSxDQUNFLE9BQVEsQ0FBQyxFQUNULEtBQU0sNEJBQ04sUUFBUyxDQUNQLENBQ0UsYUFBYyxVQUNkLEtBQU0sYUFDTixLQUFNLFNBQ1IsQ0FDRixFQUNBLGdCQUFpQixPQUNqQixLQUFNLFVBQ1IsRUFDQSxDQUNFLE9BQVEsQ0FBQyxFQUNULEtBQU0sMEJBQ04sUUFBUyxDQUNQLENBQ0UsYUFBYyxVQUNkLEtBQU0sV0FDTixLQUFNLFNBQ1IsQ0FDRixFQUNBLGdCQUFpQixPQUNqQixLQUFNLFVBQ1IsRUFDQSxDQUNFLE9BQVEsQ0FBQyxFQUNULEtBQU0sMkJBQ04sUUFBUyxDQUNQLENBQ0UsYUFBYyxVQUNkLEtBQU0sWUFDTixLQUFNLFNBQ1IsQ0FDRixFQUNBLGdCQUFpQixPQUNqQixLQUFNLFVBQ1IsRUFDQSxDQUNFLE9BQVEsQ0FDTixDQUNFLGFBQWMsVUFDZCxLQUFNLE9BQ04sS0FBTSxTQUNSLENBQ0YsRUFDQSxLQUFNLGdCQUNOLFFBQVMsQ0FDUCxDQUNFLGFBQWMsVUFDZCxLQUFNLFVBQ04sS0FBTSxTQUNSLENB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QzFCLE1BQU1DLEVBQW9CRixFQUFHLE9BQVdDLENBQUssQ0FDL0MsQ0FDRixDQUVBLE1BQU0sS0FDSkosRUFDQUMsRUFDQUMsRUFDaUIsQ0FDakIsR0FBSSxDQUNGLE9BQU8sTUFBTSxLQUFLLFNBQVMsWUFBWSxRQUFRLEVBQUVGLEdBQWEsQ0FBQyxDQUFDLENBQ2xFLE9BQVNHLEVBQUcsQ0FDVixJQUFNQyxFQUFRLElBQUksTUFBTSxFQUFFLE1BQzFCLE1BQU1DLEVBQW9CRixFQUFHLE9BQVdDLENBQUssQ0FDL0MsQ0FDRixDQUVBLE1BQU0sTUFDSkosRUFDQUMsRUFDQUMsRUFDaUIsQ0FDakIsR0FBSSxDQUNGLE9BQU8sTUFBTSxLQUFLLFNBQVMsWUFBWSxTQUFTLEVBQUVGLEdBQWEsQ0FBQyxDQUFDLENBQ25FLE9BQVNHLEVBQUcsQ0FDVixJQUFNQyxFQUFRLElBQUksTUFBTSxFQUFFLE1BQzFCLE1BQU1DLEVBQW9CRixFQUFHLE9BQVdDLENBQUssQ0FDL0MsQ0FDRixDQUVBLE1BQU0sT0FDSkosRUFDQUMsRUFDQUMsRUFDaUIsQ0FDakIsR0FBSSxDQUNGLE9BQU8sTUFBTSxLQUFLLFNBQVMsWUFBWSxVQUFVLEVBQUVGLEdBQWEsQ0FBQyxDQUFDLENBQ3BFLE9BQVNHLEVBQUcsQ0FDVixJQUFNQyxFQUFRLElBQUksTUFBTSxFQUFFLE1BQzFCLE1BQU1DLEVBQW9CRixFQUFHLE9BQVdDLENBQUssQ0FDL0MsQ0FDRixDQUVBLE1BQU0sWUFDSkosRUFDQUMsRUFDQUMsRUFDaUIsQ0FDakIsR0FBSSxDQUNGLE9BQU8sTUFBTSxLQUFLLFNBQVMsWUFBWSxlQUFlLEVBQUVGLEdBQWEsQ0FBQyxDQUFDLENBQ3pFLE9BQVNHLEVBQUcsQ0FDVixJQUFNQyxFQUFRLElBQUksTUFBTSxFQUFFLE1BQzFCLE1BQU1DLEVBQW9CRixFQUFHLE9BQVdDLENBQUssQ0FDL0MsQ0FDRixDQUVBLE1BQU0sV0FDSkosRUFDQUMsRUFDQUMsRUFDaUIsQ0FDakIsR0FBSSxDQUNGLE9BQU8sTUFBTSxLQUFLLFNBQVMsWUFBWSxj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V0FBVyxDQUFDLEVBRWpFSSxFQUFXLE1BQU1GLEVBQVcsU0FBUyxFQUMzQyxNQUFNcEMsRUFBSSxNQUFNLE9BQ2QsSUFBSW1CLEVBQVMsQ0FDWCxHQUFJYyxFQUFpQixZQUFZLEVBQ2pDLEdBQUlDLEVBQUcsUUFBUSxZQUFZLEVBQzNCLEdBQUlILEVBQVcsWUFBWSxFQUMzQixXQUFZRSxFQUFpQixZQUFZLEVBQ3pDLHlCQUEwQkcsRUFBVyxRQUFRLFlBQVksRUFDekQsMEJBQTJCLE9BQU9FLEVBQVMsU0FBUyxDQUFDLENBQ3ZELENBQUMsQ0FDSCxDQUNGLENBdEJlQyxFQUFBOUIsR0FBQSIsCiAgIm5hbWVzIjogWyJFdGhDaGFpbklkIiwgImFkZENvbnRyYWN0QnlBQkkiLCAiZ2V0Q29udHJhY3RCeUFCSSIsICJhZGRQcm9jZXNzb3IiLCAiZ2V0UHJvY2Vzc29yIiwgImdldFByb3ZpZGVyIiwgInRyYW5zZm9ybUV0aGVyRXJyb3IiLCAiQmFzZVByb2Nlc3NvciIsICJCYXNlUHJvY2Vzc29yVGVtcGxhdGUiLCAiQm91bmRDb250cmFjdFZpZXciLCAiQ29udHJhY3RWaWV3IiwgIkR1bW15UHJvdmlkZXIiLCAiZW5jb2RlQ2FsbERhdGEiLCAibmV3Q29udHJhY3QiLCAibmV3SW50ZXJmYWNlIiwgIm5ld0NvbnRyYWN0IiwgIm5ld0ludGVyZmFjZSIsICJuZXdDb250cmFjdCIsICJuZXdJbnRlcmZhY2UiLCAibmV3Q29udHJhY3QiLCAibmV3SW50ZXJmYWNlIiwgIm5ld0NvbnRyYWN0IiwgIm5ld0ludGVyZmFjZSIsICJuZXdDb250cmFjdCIsICJuZXdJbnRlcmZhY2UiLCAibmV3Q29udHJhY3QiLCAibmV3SW50ZXJmYWNlIiwgIl9hYmkiLCAiTXVsdGljYWxsMl9fZmFjdG9yeSIsICJfX25hbWUiLCAibmV3SW50ZXJmYWNlIiwgImFkZHJlc3MiLCAic2lnbmVyT3JQcm92aWRlciIsICJuZXdDb250cmFjdCIsICJuZXdDb250cmFjdCIsICJuZXdJbnRlcmZhY2UiLCAibmV3Q29udHJhY3QiLCAibmV3SW50ZXJmYWNlIiwgIm5ld0NvbnRyYWN0IiwgIm5ld0ludGVyZmFjZSIsICJuZXdDb250cmFjdCIsICJuZXdJbnRlcmZhY2UiLCAiX2FiaSIsICJQZW5kbGVNYXJrZXRfX2ZhY3RvcnkiLCAiX19uYW1lIiwgIm5ld0ludGVyZmFjZSIsICJhZGRyZXNzIiwgInNpZ25lck9yUHJvdmlkZXIiLCAibmV3Q29udHJhY3QiLCAibmV3Q29udHJhY3QiLCAibmV3SW50ZXJmYWNlIiwgIm5ld0NvbnRyYWN0IiwgIm5ld0ludGVyZmFjZSIsICJuZXdDb250cmFjdCIsICJuZXdJbnRlcmZhY2UiLCAibmV3Q29udHJhY3QiLCAibmV3SW50ZXJmYWNlIiwgIm5ld0NvbnRyYWN0IiwgIm5ld0ludGVyZmFjZSIsICJuZXdDb250cmFjdCIsICJuZXdJbnRlcmZhY2UiLCAibmV3Q29udHJhY3QiLCAibmV3SW50ZXJmYWNlIiwgIm5ld0NvbnRyYWN0IiwgIm5ld0ludGVyZmFjZSIsICJuZXdDb250cmFjdCIsICJuZXdJbnRlcmZhY2UiLCAibmV3Q29udHJhY3QiLCAibmV3SW50ZXJmYWNlIiwgIm5ld0NvbnRyYWN0IiwgIm5ld0ludGVyZmFjZSIsICJfYWJpIiwgIlBlbmRsZVlpZWxkVG9rZW5fX2ZhY3RvcnkiLCAiX19uYW1lIiwgIm5ld0ludGVyZmFjZSIsICJhZGRyZXNzIiwgInNpZ25lck9yUHJvdmlkZXIiLCAibmV3Q29udHJhY3QiLCAibmV3Q29udHJhY3QiLCAibmV3SW50ZXJmYWNlIiwgIl9hYmkiLCAiUGVucGllUmVjZWlwdFRva2VuX19mYWN0b3J5IiwgIl9fbmFtZSIsICJuZXdJbnRlcmZhY2UiLCAiYWRkcmVzcyIsICJzaWduZXJPclByb3ZpZGVyIiwgIm5ld0NvbnRyYWN0IiwgIm5ld0NvbnRyYWN0IiwgIm5ld0ludGVyZmFjZSIsICJfYWJpIiwgIlBlbnBpZVN0YWtpbmdfX2ZhY3RvcnkiLCAiX19uYW1lIiwgIm5ld0ludGVyZmFjZSIsICJhZGRyZXNzIiwgInNpZ25lck9yUHJvdmlkZXIiLCAibmV3Q29udHJhY3QiLCAibmV3Q29udHJhY3QiLCAibmV3SW50ZXJmYWNlIiwgIl9hYmkiLCAiU3RhbmRhcmRpemVkWWllbGRfX2ZhY3RvcnkiLCAiX19uYW1lIiwgIm5ld0ludGVyZmFjZSIsICJhZGRyZXNzIiwgInNpZ25lck9yUHJvdmlkZXIiLCAibmV3Q29udHJhY3QiLCAidGVtcGxhdGVDb250cmFjdCIsICJQZW5waWVSZWNlaXB0VG9rZW5fX2ZhY3RvcnkiLCAiRHVtbXlQcm92aWRlciIsICJQZW5waWVSZWNlaXB0VG9rZW5Db250cmFjdFZpZXciLCAiQ29udHJhY3RWaWV3IiwgIl9fbmFtZSIsICJjb250cmFjdCIsICJvd25lciIsICJzcGVuZGVyIiwgIm92ZXJyaWRlcyIsICJwcmVwYXJlZERhdGEiLCAiZXRoQ2FsbENvbnRleHQiLCAiZSIsICJzdGFjayIsICJ0cmFuc2Zvcm1FdGhlckVycm9yIiwgImFjY291bnQiLCAiYW1vdW50IiwgInN1YnRyYWN0ZWRWYWx1ZSIsICJhZGRlZFZhbHVlIiwgInRvIiwgImZyb20iLCAibmV3T3duZXIiLCAiY2FsbENvbnRleHQiLCAiZW5jb2RlQ2FsbERhdGEiLCAiUGVucGllUmVjZWlwdFRva2VuQm91bmRDb250cmFjdFZpZXciLCAiQm91bmRDb250cmFjdFZpZXciLCAiUGVucGllUmVjZWlwdFRva2VuUHJvY2Vzc29yIiwgIl9QZW5waWVSZWNlaXB0VG9rZW5Qcm9jZXNzb3IiLCAiQmFzZVByb2Nlc3NvciIsICJoYW5kbGVyIiwgImZpbHRlciIsICJmZXRjaENvbmZpZyIsICJwcmVwcm9jZXNzSGFuZGxlciIsICJ2YWx1ZSIsICJwcmV2aW91c093bmVyIiwgInZpZXciLCAiZ2V0UGVucGllUmVjZWlwdFRva2VuQ29udHJhY3QiLCAib3B0aW9ucyIsICJwcm9jZXNzb3IiLCAiZ2V0UHJvY2Vzc29yIiwgImFkZFByb2Nlc3NvciIsICJQZW5waWVSZWNlaXB0VG9rZW5Qcm9jZXNzb3JUZW1wbGF0ZSIsICJCYXNlUHJvY2Vzc29yVGVtcGxhdGUiLCAiY2hhaW5JZCIsICJhZGRyZXNzIiwgImdldENvbnRyYWN0QnlBQkkiLCAicmF3Q29udHJhY3QiLCAiZ2V0UHJvdmlkZXIiLCAiYWRkQ29udHJhY3RCeUFCSSIsICJFdGhDaGFpbklkIiwgImFkZENvbnRyYWN0QnlBQkkiLCAiZ2V0Q29udHJhY3RCeUFCSSIsICJhZGRQcm9jZXNzb3IiLCAiZ2V0UHJvY2Vzc29yIiwgImdldFByb3ZpZGVyIiwgInRyYW5zZm9ybUV0aGVyRXJyb3IiLCAiQmFzZVByb2Nlc3NvciIsICJCYXNlUHJvY2Vzc29yVGVtcGxhdGUiLCAiQm91bmRDb250cmFjdFZpZXciLCAiQ29udHJhY3RWaWV3IiwgIkR1bW15UHJvdmlkZXIiLCAiZW5jb2RlQ2FsbERhdGEiLCAidGVtcGxhdGVDb250cmFjdCIsICJQZW5waWVTdGFraW5nX19mYWN0b3J5IiwgIkR1bW15UHJvdmlkZXIiLCAiUGVucGllU3Rha2luZ0NvbnRyYWN0VmlldyIsICJDb250cmFjdFZpZXciLCAiX19uYW1lIiwgImNvbnRyYWN0IiwgIm92ZXJyaWRlcyIsICJwcmVwYXJlZERhdGEiLCAiZXRoQ2FsbENvbnRleHQiLCAiZSIsICJzdGFjayIsICJ0cmFuc2Zvcm1FdGhlckVycm9yIiwgImFyZzAiLCAiX3BlbmRsZSIsICJfV0VUSCIsICJfdmVQZW5kbGUiLCAiX2Rpc3RyaWJ1dG9yRVRIIiwgIl9wZW5kbGVSb3V0ZXIiLCAiX21hc3RlclBlbnBpZSIsICJfdmFsdWUiLCAiX3RvIiwgIl9pc01QRU5ETEUiLCAiX2lzQWRkcmVzcyIsICJfbWFya2V0cyIsICJtaW5FdGhUb1JlY2lldmUiLCAiY2hhaW5JZCIsICJfYW1vdW50IiwgIl9tYXJrZXQiLCAiX2ZvciIsICJfZnJvbSIsICJfY2FsbGVyIiwgIl9taW5FdGhSZWNpdmUiLCAiX3Bvb2xzIiwgIl91bmxvY2tUaW1lIiwgIl9hbGxvY1BvaW50cyIsICJuYW1lIiwgInN5bWJvbCIsICJfaW5kZXgiLCAiX2F1dG9CcmliZUZlZSIsICJfYnJpYmVNYW5hZ2VyIiwgIl9icmliZU1hbmFnZXJFT0EiLCAiX0VUSFphcHBlciIsICJfcGVyaW9kIiwgIl9uZXdMb2NrUGVyaW9kIiwgIl9tUGVuZGxlQ29udmVydG9yIiwgIl9zZXRNUGVuZGxlT0ZUIiwgIl9oZWxwZXIiLCAiX2lzQWN0aXZlIiwgIl9zbWFydFBlbmRsZUNvbnZlcnQiLCAiX3BlbmRsZVZvdGUiLCAiX3ZlUGVuZGxlSGFydmVzdENhbGxlckZlZSIsICJfaGFydmVzdENhbGxlclBlbmRsZUZlZSIsICJfcHJvdG9jb2xGZWUiLCAiX2ZlZUNvbGxlY3RvciIsICJfdm90ZU1hbmFnZXIiLCAibmV3T3duZXIiLCAiYW1vdW50cyIsICJfd2VpZ2h0cyIsICJjYWxsQ29udGV4dCIsICJlbmNvZGVDYWxsRGF0YSIsICJQZW5waWVTdGFraW5nQm91bmRDb250cmFjdFZpZXciLCAiQm91bmRDb250cmFjdFZpZXciLCAiUGVucGllU3Rha2luZ1Byb2Nlc3NvciIsICJfUGVucGllU3Rha2luZ1Byb2Nlc3NvciIsICJCYXNlUHJvY2Vzc29yIiwgImhhbmRsZXIiLCAiZmlsdGVyIiwgImZldGNoQ29uZmlnIiwgInByZXByb2Nlc3NIYW5kbGVyIiwgIl9vbGRCcmliZU1hbmFnZXJFT0EiLCAiX29sZEJyaWJlTWFuYWdlciIsICJ2ZXJzaW9uIiwgIl91c2VyIiwgIl9scEFtb3VudCIsICJfcmVjZXB0VG9rZW4iLCAiX3JlY2VwdEFtb3VudCIsICJwcmV2aW91c093bmVyIiwgImFjY291bnQiLCAiX2xvY2tEYXlzIiwgIl92ZVBlbmRsZUFjY3VtdWxhdGVkIiwgIl9yZXdhcmRlciIsICJfcmVjZWlwdFRva2VuIiwgIl9waWQiLCAiX2xwVG9rZW4iLCAidmFsdWUiLCAidG8iLCAiX3Jld2FyZFRva2VuIiwgIl9mZWVBbW91bnQiLCAiX29sZExvY2tEYXlzIiwgIl9uZXdMb2NrRGF5cyIsICJfb2xkbVBlbmRsZUNvbnZlcnRvciIsICJfbmV3bVBlbmRsZUNvbnZlcnRvciIsICJfT2xkU21hcnRQZW5kbGVDb252ZXJ0IiwgIl90b3RhbCIsICJfcG9vbCIsICJfdG90YWxBbW91bnRzIiwgIl9jYWxsZXJGZWUiLCAiX3Jlc3QiLCAiX29sZFZvdGVNYW5hZ2VyIiwgIl92b3RlciIsICJfdm90ZVByb3RvY29sRmVlIiwgIl92b3RlRmVlQ29sbGVjdG9yIiwgInZpZXciLCAiZ2V0UGVucGllU3Rha2luZ0NvbnRyYWN0IiwgIm9wdGlvbnMiLCAicHJvY2Vzc29yIiwgImdldFByb2Nlc3NvciIsICJhZGRQcm9jZXNzb3IiLCAiZ2V0UGVucGllU3Rha2luZ0NvbnRyYWN0IiwgImNoYWluSWQiLCAiYWRkcmVzcyIsICJjb250cmFjdCIsICJnZXRDb250cmFjdEJ5QUJJIiwgInJhd0NvbnRyYWN0IiwgIlBlbnBpZVN0YWtpbmdfX2ZhY3RvcnkiLCAiZ2V0UHJvdmlkZXIiLCAiUGVucGllU3Rha2luZ0NvbnRyYWN0VmlldyIsICJhZGRDb250cmFjdEJ5QUJJIiwgIl9fbmFtZSIsICJnZXRQZW5waWVTdGFraW5nQ29udHJhY3RPbkNvbnRleHQiLCAiY29udGV4dCIsICJ2aWV3IiwgImJvdW5kVmlldyIsICJQZW5waWVTdGFraW5nQm91bmRDb250cmFjdFZpZXciLCAiRXRoQ2hhaW5JZCIsICJhZGRDb250cmFjdEJ5QUJJIiwgImdldENvbnRyYWN0QnlBQkkiLCAiYWRkUHJvY2Vzc29yIiwgImdldFByb2Nlc3NvciIsICJnZXRQcm92aWRlciIsICJ0cmFuc2Zvcm1FdGhlckVycm9yIiwgIkJhc2VQcm9jZXNzb3IiLCAiQmFzZVByb2Nlc3NvclRlbXBsYXRlIiwgIkJvdW5kQ29udHJhY3RWaWV3IiwgIkNvbnRyYWN0VmlldyIsICJEdW1teVByb3ZpZGVyIiwgImVuY29kZUNhbGxEYXRhIiwgInRlbXBsYXRlQ29udHJhY3QiLCAiU3RhbmRhcmRpemVkWWllbGRfX2ZhY3RvcnkiLCAiRHVtbXlQcm92aWRlciIsICJTdGFuZGFyZGl6ZWRZaWVsZENvbnRyYWN0VmlldyIsICJDb250cmFjdFZpZXciLCAiX19uYW1lIiwgImNvbnRyYWN0IiwgInVzZXIiLCAib3ZlcnJpZGVzIiwgInByZXBhcmVkRGF0YSIsICJldGhDYWxsQ29udGV4dCIsICJlIiwgInN0YWNrIiwgInRyYW5zZm9ybUV0aGVyRXJyb3IiLCAib3duZXIiLCAic3BlbmRlciIsICJhY2NvdW50IiwgInRva2VuIiwgInRva2VuSW4iLCAiYW1vdW50VG9rZW5Ub0RlcG9zaXQiLCAidG9rZW5PdXQiLCAiYW1vdW50U2hhcmVzVG9SZWRlZW0iLCAiYW1vdW50IiwgInJlY2VpdmVyIiwgIm1pblNoYXJlc091dCIsICJtaW5Ub2tlbk91dCIsICJidXJuRnJvbUludGVybmFsQmFsYW5jZSIsICJ0byIsICJmcm9tIiwgImNhbGxDb250ZXh0IiwgImVuY29kZUNhbGxEYXRhIiwgIlN0YW5kYXJkaXplZFlpZWxkQm91bmRDb250cmFjdFZpZXciLCAiQm91bmRDb250cmFjdFZpZXciLCAiZ2V0U3RhbmRhcmRpemVkWWllbGRDb250cmFjdCIsICJjaGFpbklkIiwgImFkZHJlc3MiLCAiY29udHJhY3QiLCAiZ2V0Q29udHJhY3RCeUFCSSIsICJyYXdDb250cmFjdCIsICJTdGFuZGFyZGl6ZWRZaWVsZF9fZmFjdG9yeSIsICJnZXRQcm92aWRlciIsICJTdGFuZGFyZGl6ZWRZaWVsZENvbnRyYWN0VmlldyIsICJhZGRDb250cmFjdEJ5QUJJIiwgIl9fbmFtZSIsICJnZXRTdGFuZGFyZGl6ZWRZaWVsZENvbnRyYWN0T25Db250ZXh0IiwgImNvbnRleHQiLCAidmlldyIsICJib3VuZFZpZXciLCAiU3RhbmRhcmRpemVkWWllbGRCb3VuZENvbnRyYWN0VmlldyIsICJFdGhDaGFpbklkIiwgImdldEVSQzIwQ29udHJhY3RPbkNvbnRleHQiLCAiYWRkQ29udHJhY3RCeUFCSSIsICJnZXRDb250cmFjdEJ5QUJJIiwgImFkZFByb2Nlc3NvciIsICJnZXRQcm9jZXNzb3IiLCAiZ2V0UHJvdmlkZXIiLCAidHJhbnNmb3JtRXRoZXJFcnJvciIsICJCYXNlUHJvY2Vzc29yIiwgIkJhc2VQcm9jZXNzb3JUZW1wbGF0ZSIsICJCb3VuZENvbnRyYWN0VmlldyIsICJDb250cmFjdFZpZXciLCAiRHVtbXlQcm92aWRlciIsICJlbmNvZGVDYWxsRGF0YSIsICJ0ZW1wbGF0ZUNvbnRyYWN0IiwgIlBlbmRsZU1hcmtldF9fZmFjdG9yeSIsICJEdW1teVByb3ZpZGVyIiwgIlBlbmRsZU1hcmtldENvbnRyYWN0VmlldyIsICJDb250cmFjdFZpZXciLCAiX19uYW1lIiwgImNvbnRyYWN0IiwgIm92ZXJyaWRlcyIsICJwcmVwYXJlZERhdGEiLCAiZXRoQ2FsbENvbnRleHQiLCAiZSIsICJzdGFjayIsICJ0cmFuc2Zvcm1FdGhlckVycm9yIiwgInVzZXIiLCAib3duZXIiLCAic3BlbmRlciIsICJhY2NvdW50IiwgImluZGV4IiwgInNlY29uZHNBZ29zIiwgInJvdXRlciIsICJhbW91bnQiLCAicmVjZWl2ZXJTeSIsICJyZWNlaXZlclB0IiwgIm5ldExwVG9CdXJuIiwgImNhcmRpbmFsaXR5TmV4dCIsICJyZWNlaXZlciIsICJuZXRTeURlc2lyZWQiLCAibmV0UHREZXNpcmVkIiwgImV4YWN0UHRJbiIsICJkYXRhIiwgImV4YWN0UHRPdXQiLCAidG8iLCAiZnJvbSIsICJjYWxsQ29udGV4dCIsICJlbmNvZGVDYWxsRGF0YSIsICJQZW5kbGVNYXJrZXRCb3VuZENvbnRyYWN0VmlldyIsICJCb3VuZENvbnRyYWN0VmlldyIsICJnZXRQZW5kbGVNYXJrZXRDb250cmFjdCIsICJjaGFpbklkIiwgImFkZHJlc3MiLCAiY29udHJhY3QiLCAiZ2V0Q29udHJhY3RCeUFCSSIsICJyYXdDb250cmFjdCIsICJQZW5kbGVNYXJrZXRfX2ZhY3RvcnkiLCAiZ2V0UHJvdmlkZXIiLCAiUGVuZGxlTWFya2V0Q29udHJhY3RWaWV3IiwgImFkZENvbnRyYWN0QnlBQkkiLCAiX19uYW1lIiwgImdldFBlbmRsZU1hcmtldENvbnRyYWN0T25Db250ZXh0IiwgImNvbnRleHQiLCAidmlldyIsICJib3VuZFZpZXciLCAiUGVuZGxlTWFya2V0Qm91bmRDb250cmFjdFZpZXciLCAiRXRoQ2hhaW5JZCIsICJFbnRpdHkiLCAiUmVxdWlyZWQiLCAiQ29sdW1uIiwgIkFic3RyYWN0RW50aXR5IiwgIkRhdGFiYXNlU2NoZW1hIiwgIlBvb2xzIiwgIkFic3RyYWN0RW50aXR5IiwgImRhdGEiLCAiX19uYW1lIiwgIl9fZGVjb3JhdGVDbGFzcyIsICJSZXF1aXJlZCIsICJDb2x1bW4iLCAiRW50aXR5IiwgIlBvb2xTbmFwc2hvdCIsICJQb3NpdGlvblNuYXBzaG90IiwgIlJld2FyZFBvb2xVc2VyIiwgIlJld2NhY2hlIiwgInNvdXJjZSIsICJEYXRhYmFzZVNjaGVtYSIsICJNVUxUSUNBTExfQUREUkVTUyIsICJPTkUiLCAiQ0hBSU5fSUQiLCAiUEVOUElFX1NUQUtJTkdfQUREUkVTUyIsICJQRU5QSUVfU1RBS0lOR19TVEFSVF9CTE9DSyIsICJPTkVfREFZX0lOX01JTlVURSIsICJhZGQiLCAicmMiLCAia2V5IiwgInZhbHVlIiwgIl9fbmFtZSIsICJhZGRDb250cmFjdEJ5QUJJIiwgImdldENvbnRyYWN0QnlBQkkiLCAiYWRkUHJvY2Vzc29yIiwgImdldFByb2Nlc3NvciIsICJnZXRQcm92aWRlciIsICJ0cmFuc2Zvcm1FdGhlckVycm9yIiwgIkJhc2VQcm9jZXNzb3IiLCAiQmFzZVByb2Nlc3NvclRlbXBsYXRlIiwgIkJvdW5kQ29udHJhY3RWaWV3IiwgIkNvbnRyYWN0VmlldyIsICJEdW1teVByb3ZpZGVyIiwgImVuY29kZUNhbGxEYXRhIiwgInRlbXBsYXRlQ29udHJhY3QiLCAiTXVsdGljYWxsMl9fZmFjdG9yeSIsICJEdW1teVByb3ZpZGVyIiwgIk11bHRpY2FsbDJDb250cmFjdFZpZXciLCAiQ29udHJhY3RWaWV3IiwgIl9fbmFtZSIsICJjb250cmFjdCIsICJibG9ja051bWJlciIsICJvdmVycmlkZXMiLCAicHJlcGFyZWREYXRhIiwgImV0aENhbGxDb250ZXh0IiwgImUiLCAic3RhY2siLCAidHJhbnNmb3JtRXRoZXJFcnJvciIsICJhZGRyIiwgImNhbGxzIiwgInJlcXVpcmVTdWNjZXNzIiwgImNhbGxDb250ZXh0IiwgImVuY29kZUNhbGxEYXRhIiwgIk11bHRpY2FsbDJCb3VuZENvbnRyYWN0VmlldyIsICJCb3VuZENvbnRyYWN0VmlldyIsICJnZXRNdWx0aWNhbGwyQ29udHJhY3QiLCAiY2hhaW5JZCIsICJhZGRyZXNzIiwgImNvbnRyYWN0IiwgImdldENvbnRyYWN0QnlBQkkiLCAicmF3Q29udHJhY3QiLCAiTXVsdGljYWxsMl9fZmFjdG9yeSIsICJnZXRQcm92aWRlciIsICJNdWx0aWNhbGwyQ29udHJhY3RWaWV3IiwgImFkZENvbnRyYWN0QnlBQkkiLCAiX19uYW1lIiwgImdldE11bHRpY2FsbDJDb250cmFjdE9uQ29udGV4dCIsICJjb250ZXh0IiwgInZpZXciLCAiYm91bmRWaWV3IiwgIk11bHRpY2FsbDJCb3VuZENvbnRyYWN0VmlldyIsICJnZXRFUkMyMENvbnRyYWN0T25Db250ZXh0IiwgImFkZENvbnRyYWN0QnlBQkkiLCAiZ2V0Q29udHJhY3RCeUFCSSIsICJhZGRQcm9jZXNzb3IiLCAiZ2V0UHJvY2Vzc29yIiwgImdldFByb3ZpZGVyIiwgInRyYW5zZm9ybUV0aGVyRXJyb3IiLCAiQmFzZVByb2Nlc3NvciIsICJCYXNlUHJvY2Vzc29yVGVtcGxhdGUiLCAiQm91bmRDb250cmFjdFZpZXciLCAiQ29udHJhY3RWaWV3IiwgIkR1bW15UHJvdmlkZXIiLCAiZW5jb2RlQ2FsbERhdGEiLCAidGVtcGxhdGVDb250cmFjdCIsICJQZW5kbGVZaWVsZFRva2VuX19mYWN0b3J5IiwgIkR1bW15UHJvdmlkZXIiLCAiRXRoQ2hhaW5JZCIsICJyZWFkQWxsVXNlckVSQzIwQmFsYW5jZXMiLCAiY3R4IiwgInRva2VuQWRkcmVzcyIsICJhbGxBZGRyZXNzZXMiLCAibXVsdGljYWxsIiwgImdldE11bHRpY2FsbDJDb250cmFjdE9uQ29udGV4dCIsICJNVUxUSUNBTExfQUREUkVTUyIsICJlcmMyMCIsICJnZXRFUkMyMENvbnRyYWN0T25Db250ZXh0IiwgImFsbENhbGxzIiwgImkiLCAiY2FsbHMiLCAiYWRkcmVzcyIsICJkIiwgIl9fbmFtZSIsICJhZGRMUFBvc2l0aW9uU25hcHNob3QiLCAiY3R4IiwgIm1hcmNhY2hlIiwgInJjIiwgIm1hcmtldCIsICJnZXRQZW5kbGVNYXJrZXRDb250cmFjdE9uQ29udGV4dCIsICJpc0V4cGlyZWQiLCAic3RhdGUiLCAidXNlcnMiLCAiUmV3YXJkUG9vbFVzZXIiLCAiZSIsICJiYWxhbmNlcyIsICJyZWFkQWxsVXNlckVSQzIwQmFsYW5jZXMiLCAidG90YWxBY3RpdmVTdXBwbHkiLCAicGVucGllQWN0aXZlQmFsYW5jZSIsICJQRU5QSUVfU1RBS0lOR19BRERSRVNTIiwgInBlbnBpZUJhbGFuY2VPZiIsICJpIiwgImhvbGRpbmciLCAiYWRkIiwgIl9fbmFtZSIsICJnZXRFUkMyMENvbnRyYWN0T25Db250ZXh0IiwgImdldERhdGVJbmZvIiwgImN0eCIsICJkIiwgImJsb2NrRGF0ZSIsICJfX25hbWUiLCAiY3JlYXRlUG9vbFNuYXBzaG90SWZOb3RFeGlzdCIsICJjdHgiLCAicmV3Y2FjaGUiLCAiZCIsICJibG9ja0RhdGUiLCAiZ2V0RGF0ZUluZm8iLCAic3kiLCAiZ2V0U3RhbmRhcmRpemVkWWllbGRDb250cmFjdE9uQ29udGV4dCIsICJpZCIsICJQb29sU25hcHNob3QiLCAieWllbGRUb2tlbiIsICJnZXRFUkMyMENvbnRyYWN0T25Db250ZXh0IiwgImRlY2ltYWxzIiwgIm1hcmtldCIsICJnZXRQZW5kbGVNYXJrZXRDb250cmFjdE9uQ29udGV4dCIsICJwZW5waWVBY3RpdmVCYWxhbmNlIiwgIlBFTlBJRV9TVEFLSU5HX0FERFJFU1MiLCAidG90YWxBY3RpdmVTdXBwbHkiLCAidG90YWxfYW1vdW50IiwgInBlbnBpZV9yYXRlIiwgImFtb3VudCIsICJlbnRpdHkiLCAiQ0hBSU5fSUQiLCAiX19uYW1lIiwgImNyZWF0ZVBvb2xJZk5vdEV4aXN0IiwgInN5QWRkciIsICJyZXdhcmRQb29sQWRkciIsICJyZWNlaXB0VG9rZW5BZGRyIiwgInBlbmRsZU1hcmtldEFkZHIiLCAiUG9vbHMiLCAiY29udHJhY3QiLCAicmVjZWlwdFRva2VuIiwgInBlbmRsZU1hcmtldCIsICJwb29sIiwgIlBlbnBpZVN0YWtpbmdQcm9jZXNzb3IiLCAiUEVOUElFX1NUQUtJTkdfQUREUkVTUyIsICJFdGhDaGFpbklkIiwgIlBFTlBJRV9TVEFLSU5HX1NUQVJUX0JMT0NLIiwgImV2ZW50IiwgImN0eCIsICJwZW5waWVTdGFraW5nIiwgImdldFBlbnBpZVN0YWtpbmdDb250cmFjdE9uQ29udGV4dCIsICJtYXJrZXRBZGRyZXNzIiwgInJld2FyZGVyQWRkcmVzcyIsICJyZWNlaXB0VG9rZW5BZGRyZXNzIiwgInRva2VucyIsICJnZXRQZW5kbGVNYXJrZXRDb250cmFjdE9uQ29udGV4dCIsICJjcmVhdGVQb29sSWZOb3RFeGlzdCIsICJjcmVhdGVSZXdjYWNoZSIsICJQZW5waWVSZWNlaXB0VGVtcGxhdGUiLCAiUGVucGllUG9vbFRlbXBsYXRlIiwgIlBlbnBpZVJlY2VpcHRUb2tlblByb2Nlc3NvclRlbXBsYXRlIiwgImlkIiwgIlJld2FyZFBvb2xVc2VyIiwgIm5ld0VudGl0eSIsICJDSEFJTl9JRCIsICJfIiwgInJld2NhY2hlIiwgIlJld2NhY2hlIiwgImNyZWF0ZVBvb2xTbmFwc2hvdElmTm90RXhpc3QiLCAicmMiLCAiYWRkTFBQb3NpdGlvblNuYXBzaG90IiwgInVzZXJzIiwgInVzZXIiLCAiZCIsICJibG9ja0RhdGUiLCAiZ2V0RGF0ZUluZm8iLCAiZW50aXR5IiwgIlBvc2l0aW9uU25hcHNob3QiLCAiT05FX0RBWV9JTl9NSU5VVEUiLCAibWFya2V0QWRkciIsICJyZXdhcmRQb29sQWRkciIsICJyZWNlaXB0VG9rZW5BZGRyIiwgInN5IiwgImdldFN0YW5kYXJkaXplZFlpZWxkQ29udHJhY3RPbkNvbnRleHQiLCAieWllbGRUb2tlbiIsICJnZXRFUkMyMENvbnRyYWN0T25Db250ZXh0IiwgImRlY2ltYWxzIiwgIl9fbmFtZSJdCn0K