
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { String, Int, BigInt, Float, ID, Bytes, Timestamp, Boolean, Int8 } from '@sentio/sdk/store'
import { Entity, Required, One, Many, Column, ListColumn, AbstractEntity } from '@sentio/sdk/store'
import { BigDecimal } from '@sentio/bigdecimal'
import { DatabaseSchema } from '@sentio/sdk'







interface PoolsConstructorInput {
  id: ID;
  chain_id: Int;
  timestamp: Int;
  creation_block_number: Int;
  underlying_token_address: String;
  underlying_token_index: Int;
  underlying_token_symbol: String;
  underlying_token_decimals: String;
  receipt_token_address?: String;
  receipt_token_symbol?: String;
  receipt_token_decimals?: String;
  pool_address: String;
  pool_symbol: String;
}
@Entity("Pools")
export class Pools extends AbstractEntity  {

	@Required
	@Column("ID")
	id: ID

	@Required
	@Column("Int")
	chain_id: Int

	@Required
	@Column("Int")
	timestamp: Int

	@Required
	@Column("Int")
	creation_block_number: Int

	@Required
	@Column("String")
	underlying_token_address: String

	@Required
	@Column("Int")
	underlying_token_index: Int

	@Required
	@Column("String")
	underlying_token_symbol: String

	@Required
	@Column("String")
	underlying_token_decimals: String

	@Column("String")
	receipt_token_address?: String

	@Column("String")
	receipt_token_symbol?: String

	@Column("String")
	receipt_token_decimals?: String

	@Required
	@Column("String")
	pool_address: String

	@Required
	@Column("String")
	pool_symbol: String
  constructor(data: PoolsConstructorInput) {super()}
  
}


interface PoolSnapshotConstructorInput {
  id: ID;
  timestamp: Int;
  block_date: String;
  chain_id: Int;
  underlying_token_address: String;
  underlying_token_index: Int;
  pool_address: String;
  underlying_token_amount: Float;
  underlying_token_amount_usd?: Float;
  total_fees_usd?: Float;
}
@Entity("PoolSnapshot")
export class PoolSnapshot extends AbstractEntity  {

	@Required
	@Column("ID")
	id: ID

	@Required
	@Column("Int")
	timestamp: Int

	@Required
	@Column("String")
	block_date: String

	@Required
	@Column("Int")
	chain_id: Int

	@Required
	@Column("String")
	underlying_token_address: String

	@Required
	@Column("Int")
	underlying_token_index: Int

	@Required
	@Column("String")
	pool_address: String

	@Required
	@Column("Float")
	underlying_token_amount: Float

	@Column("Float")
	underlying_token_amount_usd?: Float

	@Column("Float")
	total_fees_usd?: Float
  constructor(data: PoolSnapshotConstructorInput) {super()}
  
}


interface PositionSnapshotConstructorInput {
  id: ID;
  timestamp: Int;
  block_date: String;
  chain_id: Int;
  pool_address: String;
  user_address: String;
  underlying_token_address: String;
  underlying_token_index: Int;
  underlying_token_amount: Float;
  underlying_token_amount_usd?: Float;
  total_fees_usd?: Float;
}
@Entity("PositionSnapshot")
export class PositionSnapshot extends AbstractEntity  {

	@Required
	@Column("ID")
	id: ID

	@Required
	@Column("Int")
	timestamp: Int

	@Required
	@Column("String")
	block_date: String

	@Required
	@Column("Int")
	chain_id: Int

	@Required
	@Column("String")
	pool_address: String

	@Required
	@Column("String")
	user_address: String

	@Required
	@Column("String")
	underlying_token_address: String

	@Required
	@Column("Int")
	underlying_token_index: Int

	@Required
	@Column("Float")
	underlying_token_amount: Float

	@Column("Float")
	underlying_token_amount_usd?: Float

	@Column("Float")
	total_fees_usd?: Float
  constructor(data: PositionSnapshotConstructorInput) {super()}
  
}


interface RewardPoolUserConstructorInput {
  id: ID;
  user: String;
  reward_pool: String;
}
@Entity("RewardPoolUser")
export class RewardPoolUser extends AbstractEntity  {

	@Required
	@Column("ID")
	id: ID

	@Required
	@Column("String")
	user: String

	@Required
	@Column("String")
	reward_pool: String
  constructor(data: RewardPoolUserConstructorInput) {super()}
  
}


interface RewcacheConstructorInput {
  id: ID;
  SY: String;
  LP: String;
  rewardPool: String;
  underlying_token_address: String;
  underlying_token_decimals: Int;
}
@Entity("Rewcache")
export class Rewcache extends AbstractEntity  {

	@Required
	@Column("ID")
	id: ID

	@Required
	@Column("String")
	SY: String

	@Required
	@Column("String")
	LP: String

	@Required
	@Column("String")
	rewardPool: String

	@Required
	@Column("String")
	underlying_token_address: String

	@Required
	@Column("Int")
	underlying_token_decimals: Int
  constructor(data: RewcacheConstructorInput) {super()}
  
}


const source = `type Pools @entity {
    id: ID!
    chain_id: Int!
    timestamp: Int!
    creation_block_number: Int!
    underlying_token_address: String!
    underlying_token_index: Int!
    underlying_token_symbol: String!
    underlying_token_decimals: String!
    receipt_token_address: String
    receipt_token_symbol: String
    receipt_token_decimals: String
    pool_address: String!
    pool_symbol: String!
}

type PoolSnapshot @entity {
    id: ID!
    timestamp: Int!
    block_date: String!
    chain_id: Int!
    underlying_token_address: String!
    underlying_token_index: Int!
    pool_address: String!
    underlying_token_amount: Float!
    underlying_token_amount_usd: Float
    total_fees_usd: Float
}

type PositionSnapshot @entity {
    id: ID!
    timestamp: Int!
    block_date: String!
    chain_id: Int!
    pool_address: String!
    user_address: String!
    underlying_token_address: String!
    underlying_token_index: Int!
    underlying_token_amount: Float!

    underlying_token_amount_usd: Float
    total_fees_usd: Float
}

type RewardPoolUser @entity {
    id: ID!
    user: String!
    reward_pool: String!
}

type Rewcache @entity {
    id: ID!
    SY: String!
    LP: String!
    rewardPool: String!

    underlying_token_address: String!
    underlying_token_decimals: Int!
}`
DatabaseSchema.register({
  source,
  entities: {
    "Pools": Pools,
		"PoolSnapshot": PoolSnapshot,
		"PositionSnapshot": PositionSnapshot,
		"RewardPoolUser": RewardPoolUser,
		"Rewcache": Rewcache
  }
})
